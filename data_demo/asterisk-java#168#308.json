[{"index": "0", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/examples/activities/Dial.java", "methodName": "org.asteriskjava.examples.activities.Dial.syncDial", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "static private void syncDial()\n    {\n        try\n        {\n            PBX pbx = PBXFactory.getActivePBX();\n\n            // The trunk MUST match the section header (e.g. [default]) that\n            // appears\n            // in your /etc/asterisk/sip.d file (assuming you are using a SIP\n            // trunk).\n            // The trunk is used to select which SIP trunk to dial through.\n            Trunk trunk = pbx.buildTrunk(\"default\");\n\n            // We are going to dial from extension 100\n            EndPoint from = pbx.buildEndPoint(TechType.SIP, \"100\");\n            // The caller ID to show on extension 100.\n            CallerID fromCallerID = pbx.buildCallerID(\"100\", \"My Phone\");\n\n            // The caller ID to display on the called parties phone\n            CallerID toCallerID = pbx.buildCallerID(\"83208100\", \"Asterisk Java is calling\");\n            // The party we are going to call.\n            EndPoint to = pbx.buildEndPoint(TechType.SIP, trunk, \"5551234\");\n\n            // Trunk is currently ignored so set to null\n            // The call is dialed and only returns when the call comes up (it\n            // doesn't wait for the remote end to answer).\n            DialActivity dial = pbx.dial(from, fromCallerID, to, toCallerID);\n\n            Call call = dial.getNewCall();\n\n            Thread.sleep(20000);\n\n            logger.warn(\"Hanging up\");\n            pbx.hangup(call);\n        }\n        catch (PBXException | InterruptedException e)\n        {\n            System.out.println(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Simple synchronous dial. The dial method won't return until the dial starts. Using this method will lockup your UI until the dial starts. For better control use the async Dial method below.", "call_func_name": ["org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.PBX.buildTrunk", "org.asteriskjava.pbx.PBX.buildEndPoint", "org.asteriskjava.pbx.PBX.buildCallerID", "org.asteriskjava.pbx.PBX.buildEndPoint", "org.asteriskjava.pbx.PBX.dial", "org.asteriskjava.pbx.activities.DialActivity.getNewCall", "java.lang.Thread.sleep", "org.asteriskjava.util.Log.warn", "org.asteriskjava.pbx.PBX.hangup", "java.io.PrintStream.println"], "call_func_parameter": [[""], ["java.lang.String"], ["org.asteriskjava.pbx.TechType", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.asteriskjava.pbx.TechType", "org.asteriskjava.pbx.Trunk", "java.lang.String"], ["org.asteriskjava.pbx.EndPoint", "org.asteriskjava.pbx.CallerID", "org.asteriskjava.pbx.EndPoint", "org.asteriskjava.pbx.CallerID"], [""], ["long"], ["java.lang.Object"], ["org.asteriskjava.pbx.Call"], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.PBX.buildEndPoint": "Builds an iEndPoint from an end point name. If the tech isn't passed in the endPointName the tech is set to the defaultTech The encoding for an end point name is pbx specific."}, {"org.asteriskjava.pbx.PBX.dial": "Dials the given phone number using the specified trunk. Not returning until the call has been dialled. The dial will return as soon as the trunk comes up, it does not wait for remote end to answer."}, {"org.asteriskjava.pbx.PBX.hangup": "Hangup the given call, not returning until the call is hungup."}]}, {"index": "1", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/Base64.java", "methodName": "org.asteriskjava.util.Base64.byteArrayToBase64", "methodParameterType": "byte[]#", "methodParameterName": "a#", "methodBody": "public static String byteArrayToBase64(byte[] a) {\n        return byteArrayToBase64(a, false);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Translates the specified byte array into a Base64 string as per Preferences.put(byte[]).", "call_func_name": ["org.asteriskjava.util.Base64.byteArrayToBase64"], "call_func_parameter": [["byte[]", "boolean"]], "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/Base64.java", "methodName": "org.asteriskjava.util.Base64.byteArrayToAltBase64", "methodParameterType": "byte[]#", "methodParameterName": "a#", "methodBody": "public static String byteArrayToAltBase64(byte[] a) {\n        return byteArrayToBase64(a, true);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Translates the specified byte array into an \"alternate representation\" Base64 string.  This non-standard variant uses an alphabet that does not contain the uppercase alphabetic characters, which makes it suitable for use in situations where case-folding occurs.", "call_func_name": ["org.asteriskjava.util.Base64.byteArrayToBase64"], "call_func_parameter": [["byte[]", "boolean"]], "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/Base64.java", "methodName": "org.asteriskjava.util.Base64.base64ToByteArray", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static byte[] base64ToByteArray(String s) {\n        return base64ToByteArray(s, false);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Translates the specified Base64 string (as per Preferences.get(byte[])) into a byte array.", "call_func_name": ["org.asteriskjava.util.Base64.base64ToByteArray"], "call_func_parameter": [["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/Base64.java", "methodName": "org.asteriskjava.util.Base64.altBase64ToByteArray", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static byte[] altBase64ToByteArray(String s) {\n        return base64ToByteArray(s, true);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Translates the specified \"alternate representation\" Base64 string into a byte array.", "call_func_name": ["org.asteriskjava.util.Base64.base64ToByteArray"], "call_func_parameter": [["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/Base64.java", "methodName": "org.asteriskjava.util.Base64.base64toInt", "methodParameterType": "char#byte[]#", "methodParameterName": "c#alphaToInt#", "methodBody": "private static int base64toInt(char c, byte[] alphaToInt) {\n        int result = alphaToInt[c];\n        if (result < 0)\n            throw new IllegalArgumentException(\"Illegal character \" + c);\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Translates the specified character, which is assumed to be in the \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["char"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/AstState.java", "methodName": "org.asteriskjava.util.AstState.str2state", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static Integer str2state(String str)\n    {\n        Integer state;\n\n        if (str == null)\n        {\n            return null;\n        }\n\n        state = inverseStateMap.get(str);\n\n        if (state == null)\n        {\n            Matcher matcher = UNKNOWN_STATE_PATTERN.matcher(str);\n            if (matcher.matches())\n            {\n                try\n                {\n                    state = Integer.valueOf(matcher.group(1));\n                }\n                catch (NumberFormatException e)\n                {\n                    // should not happen as the pattern requires \\d+ for the state.\n                    throw new IllegalArgumentException(\"Unable to convert state '\" + str + \"' to integer representation\", e);\n                }\n            }\n        }\n\n        return state;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>.", "call_func_name": ["java.util.Map.get", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.group", "java.lang.Integer.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.CharSequence"], [""], ["int"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ReflectionUtil.java", "methodName": "org.asteriskjava.util.ReflectionUtil.getGetters", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static Map<String, Method> getGetters(final Class< ? > clazz)\n    {\n        final Map<String, Method> accessors = new HashMap<>();\n        final Method[] methods = clazz.getMethods();\n\n        for (Method method : methods)\n        {\n            String name = null;\n            String methodName = method.getName();\n\n            if (methodName.startsWith(\"get\"))\n            {\n                name = methodName.substring(3);\n            }\n            else if (methodName.startsWith(\"is\"))\n            {\n                name = methodName.substring(2);\n            }\n\n            if (name == null || name.length() == 0)\n            {\n                continue;\n            }\n\n            // skip methods with != 0 parameters\n            if (method.getParameterTypes().length != 0)\n            {\n                continue;\n            }\n\n            accessors.put(name.toLowerCase(Locale.ENGLISH), method);\n        }\n\n        return accessors;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Map of getter methods of the given class. <p> The key of the map contains the name of the attribute that can be accessed by the getter, the value the getter itself (an instance of java.lang.reflect.Method). A method is considered a getter if its name starts with \"get\", it is declared public and takes no arguments.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.Class.getMethods", "java.lang.reflect.Method.getName", "java.lang.String.startsWith", "java.lang.String.substring", "java.lang.String.length", "java.lang.reflect.Method.getParameterTypes", "java.lang.String.toLowerCase", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.util.Locale"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ReflectionUtil.java", "methodName": "org.asteriskjava.util.ReflectionUtil.getSetters", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static Map<String, Method> getSetters(Class< ? > clazz)\n    {\n        final Map<String, Method> accessors = new HashMap<>();\n        final Method[] methods = clazz.getMethods();\n\n        for (Method method : methods)\n        {\n            String name;\n            String methodName;\n\n            methodName = method.getName();\n            if (!methodName.startsWith(\"set\"))\n            {\n                continue;\n            }\n\n            // skip methods with != 1 parameters\n            if (method.getParameterTypes().length != 1)\n            {\n                continue;\n            }\n\n            // ok seems to be an accessor\n            name = methodName.substring(\"set\".length()).toLowerCase(Locale.US);\n            accessors.put(name, method);\n        }\n\n        return accessors;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Map of setter methods of the given class. <p> The key of the map contains the name of the attribute that can be accessed by the setter, the value the setter itself (an instance of java.lang.reflect.Method). A method is considered a setter if its name starts with \"set\", it is declared public and takes exactly one argument.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.Class.getMethods", "java.lang.reflect.Method.getName", "java.lang.String.startsWith", "java.lang.reflect.Method.getParameterTypes", "java.lang.String.length", "java.lang.String.substring", "java.lang.String.toLowerCase", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], ["int"], ["java.util.Locale"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ReflectionUtil.java", "methodName": "org.asteriskjava.util.ReflectionUtil.stripIllegalCharacters", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static String stripIllegalCharacters(String s)\n    {\n        char c;\n        boolean needsStrip = false;\n        StringBuilder sb;\n\n        if (s == null)\n        {\n            return null;\n        }\n\n        for (int i = 0; i < s.length(); i++)\n        {\n            c = s.charAt(i);\n            if (c >= '0' && c <= '9')\n            {\n                // continue\n            } // NOPMD\n            else if (c >= 'a' && c <= 'z')\n            {\n                // continue\n            } // NOPMD\n            else\n            {\n                needsStrip = true;\n                break;\n            }\n        }\n\n        if (!needsStrip)\n        {\n            return s;\n        }\n\n        sb = new StringBuilder(s.length());\n        for (int i = 0; i < s.length(); i++)\n        {\n            c = s.charAt(i);\n            if (c >= '0' && c <= '9')\n            {\n                sb.append(c);\n            }\n            else if (c >= 'a' && c <= 'z')\n            {\n                sb.append(c);\n            }\n        }\n\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#Block#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)IfStatement)Block)ForStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Strips all illegal charaters from the given lower case string. Illegal characters are all characters that are neither characters ('a' to 'z') nor digits ('0' to '9').", "call_func_name": ["java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["int"], ["int"], ["char"], [""]], "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ReflectionUtil.java", "methodName": "org.asteriskjava.util.ReflectionUtil.isClassAvailable", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static boolean isClassAvailable(String s)\n    {\n        final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\n        try\n        {\n            classLoader.loadClass(s);\n            return true;\n        }\n        catch (ClassNotFoundException e)\n        {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Checks if the class is available on the current thread's context class loader.", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.ClassLoader.loadClass"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ReflectionUtil.java", "methodName": "org.asteriskjava.util.ReflectionUtil.newInstance", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static Object newInstance(String s)\n    {\n        final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\n        try\n        {\n            Class< ? > clazz = classLoader.loadClass(s);\n            Constructor< ? > constructor = clazz.getConstructor();\n            return constructor.newInstance();\n        }\n        catch (ClassNotFoundException e)\n        {\n            return null;\n        }\n        catch (IllegalAccessException e)\n        {\n            return null;\n        }\n        catch (InstantiationException e)\n        {\n            return null;\n        }\n        catch (NoSuchMethodException e)\n        {\n            // no default constructor\n            return null;\n        }\n        catch (InvocationTargetException e)\n        {\n            // constructor threw an exception\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of the given class. The class is loaded using the current thread's context class loader and instantiated using its default constructor.", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.ClassLoader.loadClass", "java.lang.Class.getConstructor", "java.lang.reflect.Constructor.newInstance"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.Class[]"], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ReflectionUtil.java", "methodName": "org.asteriskjava.util.ReflectionUtil.loadClasses", "methodParameterType": "String#Class<T>#", "methodParameterName": "packageName#baseClassOrInterface#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface)\n    {\n        Set<Class<T>> result = new HashSet<>();\n\n        try\n        {\n            Set<String> classNames = getClassNamesFromPackage(packageName);\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n            for (String className : classNames)\n            {\n                try\n                {\n                    Class< ? > clazz = classLoader.loadClass(packageName + \".\" + className);\n                    if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz))\n                    {\n                        result.add((Class<T>) clazz);\n                    }\n                }\n                catch (Throwable e)\n                {\n                    logger.error(e, e);\n                }\n\n            }\n            logger.info(\"Loaded \" + result.size());\n        }\n        catch (Exception e)\n        {\n            logger.error(e, e);\n        }\n\n        return result;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "find and all non abstract classes that implement/extend baseClassOrInterface in the package packageName", "call_func_name": ["java.util.HashSet.<init>", "org.asteriskjava.util.ReflectionUtil.getClassNamesFromPackage", "java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.ClassLoader.loadClass", "java.lang.Class.getModifiers", "java.lang.reflect.Modifier.isAbstract", "java.lang.Class.isAssignableFrom", "java.util.Set.add", "org.asteriskjava.util.Log.error", "java.util.Set.size", "java.lang.StringBuilder.append", "org.asteriskjava.util.Log.info"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["int"], ["java.lang.Class"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Throwable"], [""], ["int"], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.util.ReflectionUtil.getClassNamesFromPackage": "retrieve all the classes that can be found on the classpath for the specified packageName"}]}, {"index": "13", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ReflectionUtil.java", "methodName": "org.asteriskjava.util.ReflectionUtil.getClassNamesFromPackage", "methodParameterType": "String#", "methodParameterName": "packageName#", "methodBody": "private static Set<String> getClassNamesFromPackage(String packageName) throws IOException, URISyntaxException\n    {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        Enumeration<URL> packageURLs;\n        Set<String> names = new HashSet<String>();\n\n        packageName = packageName.replace(\".\", \"/\");\n        packageURLs = classLoader.getResources(packageName);\n\n        while (packageURLs.hasMoreElements())\n        {\n            URL packageURL = packageURLs.nextElement();\n            if (packageURL.getProtocol().equals(\"jar\"))\n            {\n                String jarFileName;\n\n                Enumeration<JarEntry> jarEntries;\n                String entryName;\n\n                // build jar file name, then loop through entries\n                jarFileName = URLDecoder.decode(packageURL.getFile(), \"UTF-8\");\n                jarFileName = jarFileName.substring(5, jarFileName.indexOf(\"!\"));\n                logger.info(\">\" + jarFileName);\n                try (JarFile jf = new JarFile(jarFileName);)\n                {\n                    jarEntries = jf.entries();\n                    while (jarEntries.hasMoreElements())\n                    {\n                        entryName = jarEntries.nextElement().getName();\n                        if (entryName.startsWith(packageName) && entryName.endsWith(\".class\"))\n                        {\n                            entryName = entryName.substring(packageName.length() + 1, entryName.lastIndexOf('.'));\n                            names.add(entryName);\n                        }\n                    }\n                }\n\n                // loop through files in classpath\n            }\n            else\n            {\n                URI uri = new URI(packageURL.toString());\n                File folder = new File(uri.getPath());\n                // won't work with path which contains blank (%20)\n                // File folder = new File(packageURL.getFile());\n                File[] files = folder.listFiles();\n                if (files != null)\n                {\n                    for (File actual : files)\n                    {\n                        String entryName = actual.getName();\n                        entryName = entryName.substring(0, entryName.lastIndexOf('.'));\n                        names.add(entryName);\n                    }\n                }\n            }\n        }\n\n        // clean up\n        Iterator<String> itr = names.iterator();\n        while (itr.hasNext())\n        {\n            String name = itr.next();\n            if (name.equals(\"package\") || name.endsWith(\".\") || name.length() == 0)\n            {\n                itr.remove();\n            }\n        }\n\n        return names;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement)Block)TryStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "retrieve all the classes that can be found on the classpath for the specified packageName", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.util.HashSet.<init>", "java.lang.String.replace", "java.lang.ClassLoader.getResources", "java.util.Enumeration.hasMoreElements", "java.util.Enumeration.nextElement", "java.net.URL.getProtocol", "java.lang.String.equals", "java.net.URL.getFile", "java.net.URLDecoder.decode", "java.lang.String.indexOf", "java.lang.String.substring", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "java.util.jar.JarFile.<init>", "java.util.jar.JarFile.entries", "java.util.jar.JarEntry.getName", "java.lang.String.startsWith", "java.lang.String.endsWith", "java.lang.String.length", "java.lang.String.lastIndexOf", "java.util.Set.add", "java.util.jar.JarFile.close", "java.lang.Throwable.addSuppressed", "java.net.URL.toString", "java.net.URI.<init>", "java.net.URI.getPath", "java.io.File.<init>", "java.io.File.listFiles", "java.io.File.getName", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Iterator.remove"], "call_func_parameter": [[""], [""], [""], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["int", "int"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], ["int"], ["java.lang.Object"], [""], ["java.lang.Throwable"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/DateUtil.java", "methodName": "org.asteriskjava.util.DateUtil.overrideCurrentDate", "methodParameterType": "Date#", "methodParameterName": "currentDate#", "methodBody": "public static void overrideCurrentDate(Date currentDate)\n    {\n        DateUtil.currentDate = currentDate;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If set to a non null value uses the date given as current date on calls to getDate(). Set to null to restore the normal behavior.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/DateUtil.java", "methodName": "org.asteriskjava.util.DateUtil.getDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static Date getDate()\n    {\n        if (currentDate == null)\n        {\n            return new Date();\n        }\n        return currentDate;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the real current date or the date set with overrideCurrentDate().", "call_func_name": ["java.util.Date.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/DateUtil.java", "methodName": "org.asteriskjava.util.DateUtil.parseDateTime", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static Date parseDateTime(String s)\n    {\n        return parseDateTime(s, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the default time zone.", "call_func_name": ["org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [["java.lang.String", "java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the given time zone."}]}, {"index": "17", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/DateUtil.java", "methodName": "org.asteriskjava.util.DateUtil.parseDateTime", "methodParameterType": "String#TimeZone#", "methodParameterName": "s#tz#", "methodBody": "public static Date parseDateTime(String s, TimeZone tz)\n    {\n        DateFormat df;\n\n        if (s == null)\n        {\n            return null;\n        }\n\n        df = new SimpleDateFormat(DATE_TIME_PATTERN);\n        if (tz != null)\n        {\n            df.setTimeZone(tz);\n        }\n        try\n        {\n            return df.parse(s);\n        }\n        catch (ParseException e)\n        {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the given time zone.", "call_func_name": ["java.text.SimpleDateFormat.<init>", "java.text.DateFormat.setTimeZone", "java.text.DateFormat.parse"], "call_func_parameter": [["java.lang.String"], ["java.util.TimeZone"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/AstUtil.java", "methodName": "org.asteriskjava.util.AstUtil.isTrue", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "public static boolean isTrue(Object o)\n    {\n        if (o == null)\n        {\n            return false;\n        }\n\n        if (o instanceof Boolean)\n        {\n            return (Boolean) o;\n        }\n\n        return TRUE_LITERALS.contains(o.toString().toLowerCase(Locale.US));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if a String represents <code>true</code> or <code>false</code> according to Asterisk's logic. <br> The original implementation is <code>util.c</code> is as follows: <br> <pre> int ast_true(const char", "call_func_name": ["java.lang.Boolean.booleanValue", "java.lang.Object.toString", "java.lang.String.toLowerCase", "java.util.Set.contains"], "call_func_parameter": [[""], [""], ["java.util.Locale"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/AstUtil.java", "methodName": "org.asteriskjava.util.AstUtil.isEqual", "methodParameterType": "Object#Object#", "methodParameterName": "a#b#", "methodBody": "public static boolean isEqual(Object a, Object b)\n    {\n        return a == b || a != null && a.equals(b);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param a an object", "call_func_name": ["java.lang.Object.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/AstUtil.java", "methodName": "org.asteriskjava.util.AstUtil.parseCallerId", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static String[] parseCallerId(String s)\n    {\n        final String[] result = new String[2];\n        final int lbPosition;\n        final int rbPosition;\n        String name;\n        String number;\n\n        if (s == null)\n        {\n            return result;\n        }\n\n        lbPosition = s.lastIndexOf('<');\n        rbPosition = s.lastIndexOf('>');\n\n        // no opening and closing brace? use value as CallerId name\n        if (lbPosition < 0 || rbPosition < 0)\n        {\n            name = s.trim();\n            if (name.length() == 0)\n            {\n                name = null;\n            }\n            result[0] = name;\n            return result;\n        }\n        number = s.substring(lbPosition + 1, rbPosition).trim();\n        if (number.length() == 0)\n        {\n            number = null;\n        }\n\n        name = s.substring(0, lbPosition).trim();\n        if (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\") && name.length() > 1)\n        {\n            name = name.substring(1, name.length() - 1).trim();\n        }\n        if (name.length() == 0)\n        {\n            name = null;\n        }\n\n        result[0] = name;\n        result[1] = number;\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses a string for caller id information. <br> The caller id string should be in the form <code>\"Some Name\" &lt;1234&gt;</code>. <br> This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code> but strips any whitespace.", "call_func_name": ["java.lang.String.lastIndexOf", "java.lang.String.trim", "java.lang.String.length", "java.lang.String.substring", "java.lang.String.startsWith", "java.lang.String.endsWith"], "call_func_parameter": [["int"], [""], [""], ["int", "int"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/AstUtil.java", "methodName": "org.asteriskjava.util.AstUtil.isNull", "methodParameterType": "Object#", "methodParameterName": "s#", "methodBody": "public static boolean isNull(Object s)\n    {\n        if (s == null)\n        {\n            return true;\n        }\n\n        if (!(s instanceof String))\n        {\n            return false;\n        }\n\n        return NULL_LITERALS.contains(((String) s).toLowerCase(Locale.US));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the value of s was <code>null</code> in Asterisk. <br> This method is useful as Asterisk likes to replace <code>null</code> values with different string values like \"unknown\", \"&lt;unknown&gt;\" or \"&lt;null&gt;\". <br> To find such replacements search for <code>S_OR</code> in Asterisk's source code. You will find things like <pre> S_OR(chan-&gt;cid.cid_num, \"&lt;unknown&gt;\") fdprintf(fd, \"agi_callerid: %s\\n\", S_OR(chan-&gt;cid.cid_num, \"unknown\")); </pre> and more...", "call_func_name": ["java.lang.String.toLowerCase", "java.util.Set.contains"], "call_func_parameter": [["java.util.Locale"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ServerSocketFacade.java", "methodName": "org.asteriskjava.util.ServerSocketFacade.accept", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "SocketConnectionFacade accept() throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Waits for a new incoming connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ServerSocketFacade.java", "methodName": "org.asteriskjava.util.ServerSocketFacade.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Unbinds and closes the server socket.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/ServerSocketFacade.java", "methodName": "org.asteriskjava.util.ServerSocketFacade.setSocketReadTimeout", "methodParameterType": "int#", "methodParameterName": "socketReadTimeout#", "methodBody": "void setSocketReadTimeout(int socketReadTimeout);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Connection is dropped if it stales on read longer than the timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.Log4JLogger", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public Log4JLogger(Class< ? > clazz)\n    {\n        this.name = clazz.getName();\n        this.logger = getLogger();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Base constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.trace", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void trace(Object message)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, null);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the Log4j Logger with <code>TRACE</code> priority. Currently logs to <code>DEBUG</code> level in Log4J.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "27", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.trace", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void trace(Object message, Throwable t)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, t);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, t);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the Log4j Logger with <code>TRACE</code> priority. Currently logs to <code>DEBUG</code> level in Log4J.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "28", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.debug", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void debug(Object message)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, null);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the Log4j Logger with <code>DEBUG</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "29", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.debug", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void debug(Object message, Throwable t)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, t);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.DEBUG, message, t);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the Log4j Logger with <code>DEBUG</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "30", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.info", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void info(Object message)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.INFO, message, null);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.INFO, message, null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the Log4j Logger with <code>INFO</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "31", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.info", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void info(Object message, Throwable t)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.INFO, message, t);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.INFO, message, t);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the Log4j Logger with <code>INFO</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "32", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.warn", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void warn(Object message)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.WARN, message, null);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.WARN, message, null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the Log4j Logger with <code>WARN</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "33", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.warn", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void warn(Object message, Throwable t)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.WARN, message, t);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.WARN, message, t);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the Log4j Logger with <code>WARN</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "34", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.error", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void error(Object message)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.ERROR, message, null);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.ERROR, message, null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the Log4j Logger with <code>ERROR</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "35", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.error", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void error(Object message, Throwable t)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.ERROR, message, t);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.ERROR, message, t);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the Log4j Logger with <code>ERROR</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "36", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.fatal", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void fatal(Object message)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.FATAL, message, null);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.FATAL, message, null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the Log4j Logger with <code>FATAL</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "37", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.fatal", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void fatal(Object message, Throwable t)\n    {\n        if (IS12)\n        {\n            getLogger().log(FQCN, Level.FATAL, message, t);\n        }\n        else\n        {\n            getLogger().log(FQCN, Level.FATAL, message, t);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the Log4j Logger with <code>FATAL</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.log"], "call_func_parameter": [[""], ["java.lang.String", "org.apache.log4j.Priority", "java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "38", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.getLogger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Logger getLogger()\n    {\n        if (logger == null)\n        {\n            logger = Logger.getLogger(name);\n        }\n        return this.logger;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the native Logger instance we are using.", "call_func_name": ["org.apache.log4j.Logger.getLogger"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.isDebugEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDebugEnabled()\n    {\n        return getLogger().isDebugEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the Log4j Logger used is enabled for <code>DEBUG</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.isDebugEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "40", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.isErrorEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isErrorEnabled()\n    {\n        if (IS12)\n        {\n            return getLogger().isEnabledFor(Level.ERROR);\n        }\n        return getLogger().isEnabledFor(Level.ERROR);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the Log4j Logger used is enabled for <code>ERROR</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.isEnabledFor"], "call_func_parameter": [[""], ["org.apache.log4j.Priority"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "41", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.isFatalEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFatalEnabled()\n    {\n        if (IS12)\n        {\n            return getLogger().isEnabledFor(Level.FATAL);\n        }\n        return getLogger().isEnabledFor(Level.FATAL);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the Log4j Logger used is enabled for <code>FATAL</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.isEnabledFor"], "call_func_parameter": [[""], ["org.apache.log4j.Priority"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "42", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.isInfoEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isInfoEnabled()\n    {\n        return getLogger().isInfoEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the Log4j Logger used is enabled for <code>INFO</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.isInfoEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "43", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.isTraceEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isTraceEnabled()\n    {\n        return getLogger().isDebugEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the Log4j Logger used is enabled for <code>TRACE</code> priority. For Log4J, this returns the value of <code>isDebugEnabled()</code>", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.isDebugEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "44", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Log4JLogger.java", "methodName": "org.asteriskjava.util.internal.Log4JLogger.isWarnEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isWarnEnabled()\n    {\n        if (IS12)\n        {\n            return getLogger().isEnabledFor(Level.WARN);\n        }\n        return getLogger().isEnabledFor(Level.WARN);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the Log4j Logger used is enabled for <code>WARN</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Log4JLogger.getLogger", "org.apache.log4j.Logger.isEnabledFor"], "call_func_parameter": [[""], ["org.apache.log4j.Priority"]], "passed_comments": [{"org.asteriskjava.util.internal.Log4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "45", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.Slf4JLogger", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public Slf4JLogger(Class< ? > clazz)\n    {\n        this.clazz = clazz;\n        this.logger = getLogger();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Base constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.trace", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void trace(Object message)\n    {\n        getLogger().trace(message.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the SLF4J Logger with <code>TRACE</code> priority. Currently logs to <code>DEBUG</code> level in SLF4J.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "47", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.trace", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void trace(Object message, Throwable t)\n    {\n        getLogger().trace(message.toString(), t);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the SLF4J Logger with <code>TRACE</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "48", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.debug", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void debug(Object message)\n    {\n        getLogger().debug(message.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the SLF4J Logger with <code>DEBUG</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "49", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.debug", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void debug(Object message, Throwable t)\n    {\n        getLogger().debug(message.toString(), t);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the SLF4J Logger with <code>DEBUG</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "50", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.info", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void info(Object message)\n    {\n        getLogger().info(message.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the SLF4J Logger with <code>INFO</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.info"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "51", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.info", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void info(Object message, Throwable t)\n    {\n        getLogger().info(message.toString(), t);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the SLF4J Logger with <code>INFO</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.info"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "52", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.warn", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void warn(Object message)\n    {\n        getLogger().warn(message.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the SLF4J Logger with <code>WARN</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.warn"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "53", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.warn", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void warn(Object message, Throwable t)\n    {\n        getLogger().warn(message.toString(), t);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the SLF4J Logger with <code>WARN</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.warn"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "54", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.error", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void error(Object message)\n    {\n        getLogger().error(message.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the SLF4J Logger with <code>ERROR</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "55", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.error", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void error(Object message, Throwable t)\n    {\n        getLogger().error(message.toString(), t);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the SLF4J Logger with <code>ERROR</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "56", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.fatal", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "public void fatal(Object message)\n    {\n        getLogger().error(message.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log a message to the SLF4J Logger with <code>FATAL</code> priority. <p> Currently uses the <code>ERROR</code> priority in SLF4J.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "57", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.fatal", "methodParameterType": "Object#Throwable#", "methodParameterName": "message#t#", "methodBody": "public void fatal(Object message, Throwable t)\n    {\n        getLogger().error(message.toString(), t);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log an error to the SLF4J Logger with <code>FATAL</code> priority. <p> Currently uses the <code>ERROR</code> priority in SLF4J.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "java.lang.Object.toString", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "58", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.getLogger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Logger getLogger()\n    {\n        if (logger == null)\n        {\n            logger = LoggerFactory.getLogger(clazz);\n        }\n        if (logger instanceof LocationAwareLogger)\n        {\n            return new LocationAwareWrapper(FQCN, (LocationAwareLogger) logger);\n        }\n        return this.logger;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ClassInstanceCreation#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the native Logger instance we are using.", "call_func_name": ["org.slf4j.LoggerFactory.getLogger", "org.asteriskjava.util.internal.LocationAwareWrapper.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String", "org.slf4j.spi.LocationAwareLogger"]], "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.isDebugEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDebugEnabled()\n    {\n        return getLogger().isDebugEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the SLF4J Logger used is enabled for <code>DEBUG</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "org.slf4j.Logger.isDebugEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "60", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.isErrorEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isErrorEnabled()\n    {\n        return getLogger().isErrorEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the SLF4J Logger used is enabled for <code>ERROR</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "org.slf4j.Logger.isErrorEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "61", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.isFatalEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFatalEnabled()\n    {\n        return isErrorEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the SLF4J Logger used is enabled for <code>FATAL</code> priority. For SLF4J, this returns the value of <code>isErrorEnabled()</code>", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.isErrorEnabled"], "call_func_parameter": [[""]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.isErrorEnabled": "Check whether the SLF4J Logger used is enabled for <code>ERROR</code> priority."}]}, {"index": "62", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.isInfoEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isInfoEnabled()\n    {\n        return getLogger().isInfoEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the SLF4J Logger used is enabled for <code>INFO</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "org.slf4j.Logger.isInfoEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "63", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.isTraceEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isTraceEnabled()\n    {\n        return getLogger().isDebugEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the SLF4J Logger used is enabled for <code>TRACE</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "org.slf4j.Logger.isDebugEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "64", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Slf4JLogger.java", "methodName": "org.asteriskjava.util.internal.Slf4JLogger.isWarnEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isWarnEnabled()\n    {\n        return getLogger().isWarnEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the SLF4J Logger used is enabled for <code>WARN</code> priority.", "call_func_name": ["org.asteriskjava.util.internal.Slf4JLogger.getLogger", "org.slf4j.Logger.isWarnEnabled"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.util.internal.Slf4JLogger.getLogger": "Return the native Logger instance we are using."}]}, {"index": "65", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java", "methodName": "org.asteriskjava.util.internal.SocketConnectionFacadeImpl.SocketConnectionFacadeImpl", "methodParameterType": "String#int#boolean#int#int#", "methodParameterName": "host#port#ssl#timeout#readTimeout#", "methodBody": "public SocketConnectionFacadeImpl(String host, int port, boolean ssl, int timeout, int readTimeout) throws IOException\n    {\n        this(host, port, ssl, timeout, readTimeout, StandardCharsets.UTF_8, CRNL_PATTERN);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "<<<<<<< HEAD Creates a new instance for use with the Manager API that uses UTF-8 as encoding and CRNL (\"\\r\\n\") as line delimiter. ======= Creates a new instance for use with the Manager API that uses CRNL (\"\\r\\n\") as line delimiter. >>>>>>> refs/heads/release-1.1", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java", "methodName": "org.asteriskjava.util.internal.SocketConnectionFacadeImpl.SocketConnectionFacadeImpl", "methodParameterType": "String#int#boolean#int#int#Charset#", "methodParameterName": "host#port#ssl#timeout#readTimeout#encoding#", "methodBody": "public SocketConnectionFacadeImpl(String host, int port, boolean ssl, int timeout, int readTimeout, Charset encoding)\n            throws IOException\n    {\n        this(host, port, ssl, timeout, readTimeout, encoding, CRNL_PATTERN);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance for use with the Manager API that uses the given encoding and CRNL (\"\\r\\n\") as line delimiter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java", "methodName": "org.asteriskjava.util.internal.SocketConnectionFacadeImpl.SocketConnectionFacadeImpl", "methodParameterType": "String#int#boolean#int#int#Pattern#", "methodParameterName": "host#port#ssl#timeout#readTimeout#lineDelimiter#", "methodBody": "public SocketConnectionFacadeImpl(String host, int port, boolean ssl, int timeout, int readTimeout,\n            Pattern lineDelimiter) throws IOException\n    {\n        this(host, port, ssl, timeout, readTimeout, StandardCharsets.UTF_8, lineDelimiter);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance for use with the Manager API that uses UTF-8 as encoding and the given line delimiter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java", "methodName": "org.asteriskjava.util.internal.SocketConnectionFacadeImpl.SocketConnectionFacadeImpl", "methodParameterType": "String#int#boolean#int#int#Charset#Pattern#", "methodParameterName": "host#port#ssl#timeout#readTimeout#encoding#lineDelimiter#", "methodBody": "public SocketConnectionFacadeImpl(String host, int port, boolean ssl, int timeout, int readTimeout, Charset encoding,\n            Pattern lineDelimiter) throws IOException\n    {\n        Socket socket;\n\n        if (ssl)\n        {\n            socket = SSLSocketFactory.getDefault().createSocket();\n        }\n        else\n        {\n            socket = SocketFactory.getDefault().createSocket();\n        }\n        socket.setSoTimeout(readTimeout);\n        socket.connect(new InetSocketAddress(host, port), timeout);\n\n        initialize(socket, encoding, lineDelimiter);\n        if (System.getProperty(Trace.TRACE_PROPERTY, \"false\").equalsIgnoreCase(\"true\"))\n        {\n            trace = new FileTrace(socket);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance for use with the Manager API that uses the given encoding and line delimiter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java", "methodName": "org.asteriskjava.util.internal.SocketConnectionFacadeImpl.SocketConnectionFacadeImpl", "methodParameterType": "Socket#", "methodParameterName": "socket#", "methodBody": "SocketConnectionFacadeImpl(Socket socket) throws IOException\n    {\n        this(socket, MAX_SOCKET_READ_TIMEOUT_MILLIS);\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance for use with FastAGI that uses NL (\"\\n\") as line delimiter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java", "methodName": "org.asteriskjava.util.internal.SocketConnectionFacadeImpl.SocketConnectionFacadeImpl", "methodParameterType": "Socket#int#", "methodParameterName": "socket#timeout#", "methodBody": "SocketConnectionFacadeImpl(Socket socket, int timeout) throws IOException\n    {\n        if (timeout == -1)\n        {\n            timeout = 0;\n        } else if (timeout == 0) {\n            timeout = MAX_SOCKET_READ_TIMEOUT_MILLIS;\n        }\n        socket.setSoTimeout(timeout);\n        initialize(socket, StandardCharsets.UTF_8, NL_PATTERN);\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance for use with FastAGI that uses NL (\"\\n\") as line delimiter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/NullLog.java", "methodName": "org.asteriskjava.util.internal.NullLog.NullLog", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NullLog()\n    {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new NullLog.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Trace.java", "methodName": "org.asteriskjava.util.internal.Trace.received", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "void received(String s);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Writes data that has been received from the network to the trace.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Trace.java", "methodName": "org.asteriskjava.util.internal.Trace.sent", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "void sent(String s);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Writes data that has been sent to the network to the trace.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/Trace.java", "methodName": "org.asteriskjava.util.internal.Trace.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Closes allocated resources by trace implementation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/internal/JavaLoggingLog.java", "methodName": "org.asteriskjava.util.internal.JavaLoggingLog.JavaLoggingLog", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public JavaLoggingLog(Class< ? > clazz)\n    {\n        log = Logger.getLogger(clazz.getName());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new JavaLoggingLog obtained from java.util.logging for the given class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/LogFactory.java", "methodName": "org.asteriskjava.util.LogFactory.getLog", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public synchronized static Log getLog(Class< ? > clazz)\n    {\n        if (slf4jLoggingAvailable == null)\n        {\n            try\n            {\n                classLoader.loadClass(\"org.slf4j.Logger\");\n                slf4jLoggingAvailable = Boolean.TRUE;\n            }\n            catch (Exception e)\n            {\n                slf4jLoggingAvailable = Boolean.FALSE;\n            }\n        }\n\n        if (slf4jLoggingAvailable)\n        {\n            try\n            {\n                return new Slf4JLogger(clazz);\n            }\n            catch (Throwable e)\n            {\n                slf4jLoggingAvailable = Boolean.FALSE;\n            }\n        }\n\n        if (log4jLoggingAvailable == null)\n        {\n            try\n            {\n                classLoader.loadClass(\"org.apache.log4j.Logger\");\n                log4jLoggingAvailable = Boolean.TRUE;\n            }\n            catch (Exception e)\n            {\n                log4jLoggingAvailable = Boolean.FALSE;\n            }\n        }\n\n        if (log4jLoggingAvailable)\n        {\n            return new Log4JLogger(clazz);\n        }\n\n        if (javaLoggingAvailable == null)\n        {\n            try\n            {\n                classLoader.loadClass(\"java.util.logging.Logger\");\n                javaLoggingAvailable = Boolean.TRUE;\n            }\n            catch (Exception e)\n            {\n                javaLoggingAvailable = Boolean.FALSE;\n            }\n        }\n        if (javaLoggingAvailable)\n        {\n            return new JavaLoggingLog(clazz);\n        }\n        return new NullLog();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an instance of Log suitable for logging from the given class.", "call_func_name": ["java.lang.ClassLoader.loadClass", "java.lang.Boolean.booleanValue", "org.asteriskjava.util.internal.Slf4JLogger.<init>", "org.asteriskjava.util.internal.Log4JLogger.<init>", "org.asteriskjava.util.internal.JavaLoggingLog.<init>", "org.asteriskjava.util.internal.NullLog.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Class"], ["java.lang.Class"], ["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/DaemonThreadFactory.java", "methodName": "org.asteriskjava.util.DaemonThreadFactory.DaemonThreadFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DaemonThreadFactory() {\n        namePrefix = \"AJ DaemonPool-\"+ poolNumber.getAndIncrement() +'.';\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.readLine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String readLine() throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a line of text from the socket connection. The current thread is blocked until either the next line is received or an IOException encounters.<p> Depending on the implementation different newline delimiters are used (\"\\r\\n\" for the Manager API and \"\\n\" for AGI).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.write", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "void write(String s) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a given String to the socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.flush", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void flush() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Flushes the socket connection by sending any buffered but yet unsent data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Closes the socket connection including its input and output stream and frees all associated ressources.<p> When calling close() any Thread currently blocked by a call to readLine() will be unblocked and receive an IOException.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.isConnected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isConnected();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the connection state of the socket.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.getLocalAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetAddress getLocalAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the local address this socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.getLocalPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getLocalPort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the local port of this socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.getRemoteAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetAddress getRemoteAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the remote address of this socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/util/SocketConnectionFacade.java", "methodName": "org.asteriskjava.util.SocketConnectionFacade.getRemotePort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getRemotePort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the remote port of this socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/AsteriskVersion.java", "methodName": "org.asteriskjava.AsteriskVersion.isAtLeast", "methodParameterType": "AsteriskVersion#", "methodParameterName": "o#", "methodBody": "public boolean isAtLeast(AsteriskVersion o)\n    {\n        return version >= o.version;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns <code>true</code> if this version is equal to or higher than the given version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/AsteriskVersion.java", "methodName": "org.asteriskjava.AsteriskVersion.getDetermineVersionFromString", "methodParameterType": "String#", "methodParameterName": "coreLine#", "methodBody": "public static AsteriskVersion getDetermineVersionFromString(String coreLine)\n    {\n        for (AsteriskVersion version : knownVersions)\n        {\n            for (Pattern pattern : version.patterns)\n            {\n                if (pattern.matcher(coreLine).matches())\n                {\n                    return version;\n                }\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the Asterisk version from the string returned by Asterisk. The string should contain \"Asterisk \" followed by a version number.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/ExtensionHistoryEntry.java", "methodName": "org.asteriskjava.live.ExtensionHistoryEntry.ExtensionHistoryEntry", "methodParameterType": "Date#Extension#", "methodParameterName": "date#extension#", "methodBody": "public ExtensionHistoryEntry(Date date, Extension extension)\n    {\n        this.date = date;\n        this.extension = extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/ExtensionHistoryEntry.java", "methodName": "org.asteriskjava.live.ExtensionHistoryEntry.getDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getDate()\n    {\n        return date;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the extension has been visited.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/ExtensionHistoryEntry.java", "methodName": "org.asteriskjava.live.ExtensionHistoryEntry.getExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Extension getExtension()\n    {\n        return extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension that has been visited.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/RecordingException.java", "methodName": "org.asteriskjava.live.RecordingException.RecordingException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public RecordingException(String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getManagerConnection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ManagerConnection getManagerConnection();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the underlying ManagerConnection. <p> Unlike the methods operating on the manager connection this method does not implicitly initialize the connection. Thus you can use this method to add custom  {@linkplain org.asteriskjava.manager.ManagerEventListener ManagerEventListeners} before the connection to the Asterisk server isestablished. If you want to ensure that the connection is established call  {@link #initialize()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originate", "methodParameterType": "OriginateAction#", "methodParameterName": "originateAction#", "methodBody": "AsteriskChannel originate(OriginateAction originateAction)\n            throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Generates an outgoing channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateAsync", "methodParameterType": "OriginateAction#OriginateCallback#", "methodParameterName": "originateAction#cb#", "methodBody": "void originateAsync(OriginateAction originateAction, OriginateCallback cb) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Asynchronously generates an outgoing channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToExtension", "methodParameterType": "String#String#String#int#long#", "methodParameterName": "channel#context#exten#priority#timeout#", "methodBody": "AsteriskChannel originateToExtension(String channel, String context, String exten, int priority, long timeout)\n            throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Generates an outgoing channel to a dialplan entry (extension, context, priority).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToExtension", "methodParameterType": "String#String#String#int#long#CallerId#Map<String,String>#", "methodParameterName": "channel#context#exten#priority#timeout#callerId#variables#", "methodBody": "AsteriskChannel originateToExtension(String channel, String context, String exten, int priority, long timeout,\n            CallerId callerId, Map<String, String> variables) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Generates an outgoing channel to a dialplan entry (extension, context, priority) and sets an optional map of channel variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToApplication", "methodParameterType": "String#String#String#long#", "methodParameterName": "channel#application#data#timeout#", "methodBody": "AsteriskChannel originateToApplication(String channel, String application, String data, long timeout)\n            throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Generates an outgoing channel to an application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToApplication", "methodParameterType": "String#String#String#long#CallerId#Map<String,String>#", "methodParameterName": "channel#application#data#timeout#callerId#variables#", "methodBody": "AsteriskChannel originateToApplication(String channel, String application, String data, long timeout, CallerId callerId,\n            Map<String, String> variables) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Generates an outgoing channel to an application and sets an optional map of channel variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToExtensionAsync", "methodParameterType": "String#String#String#int#long#OriginateCallback#", "methodParameterName": "channel#context#exten#priority#timeout#callback#", "methodBody": "void originateToExtensionAsync(String channel, String context, String exten, int priority, long timeout,\n            OriginateCallback callback) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Asynchronously generates an outgoing channel to a dialplan entry (extension, context, priority).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToExtensionAsync", "methodParameterType": "String#String#String#int#long#CallerId#Map<String,String>#OriginateCallback#", "methodParameterName": "channel#context#exten#priority#timeout#callerId#variables#callback#", "methodBody": "void originateToExtensionAsync(String channel, String context, String exten, int priority, long timeout,\n            CallerId callerId, Map<String, String> variables, OriginateCallback callback)\n                    throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Asynchronously generates an outgoing channel to a dialplan entry (extension, context, priority) and sets an optional map of channel variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToApplicationAsync", "methodParameterType": "String#String#String#long#OriginateCallback#", "methodParameterName": "channel#application#data#timeout#callback#", "methodBody": "void originateToApplicationAsync(String channel, String application, String data, long timeout,\n            OriginateCallback callback) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Asynchronously generates an outgoing channel to an application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.originateToApplicationAsync", "methodParameterType": "String#String#String#long#CallerId#Map<String,String>#OriginateCallback#", "methodParameterName": "channel#application#data#timeout#callerId#variables#callback#", "methodBody": "void originateToApplicationAsync(String channel, String application, String data, long timeout, CallerId callerId,\n            Map<String, String> variables, OriginateCallback callback) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Asynchronously generates an outgoing channel to an application and sets an optional map of channel variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AsteriskChannel> getChannels() throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the active channels of the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getChannelByName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "AsteriskChannel getChannelByName(String name) throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a channel by its name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getChannelById", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "AsteriskChannel getChannelById(String id) throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a channel by its unique id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getMeetMeRooms", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<MeetMeRoom> getMeetMeRooms() throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the acitve MeetMe rooms on the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getMeetMeRoom", "methodParameterType": "String#", "methodParameterName": "roomNumber#", "methodBody": "MeetMeRoom getMeetMeRoom(String roomNumber) throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the MeetMe room with the given number, if the room does not yet exist a new  {@link MeetMeRoom} object is created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getQueues", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AsteriskQueue> getQueues() throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the queues served by the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getAgents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AsteriskAgent> getAgents() throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return the agents, registered at Asterisk server. (Consider remarks for {@link AsteriskAgent})", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getVersion() throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the exact version string of this Asterisk server. <br> This typically looks like \"Asterisk 1.2.9.1-BRIstuffed-0.3.0-PRE-1q built by root @ pbx0 on a i686 running Linux on 2006-06-20 20:21:30 UTC\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getVersion", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "int[] getVersion(String file) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "<<<<<<< HEAD Returns the CVS revision of a given source file of this Asterisk server. <br> ======= Returns the CVS revision of a given source file of this Asterisk server. <br> >>>>>>> refs/heads/release-1.1 For example getVersion(\"app_meetme.c\") may return {1, 102} for CVS revision \"1.102\". <br> Note that this feature is not available with Asterisk 1.0.x. <br> You can use this feature if you need to write applications that behave different depending on specific modules being available in a specific version or not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getGlobalVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "String getGlobalVariable(String variable) throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the value of the given global variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.setGlobalVariable", "methodParameterType": "String#String#", "methodParameterName": "variable#value#", "methodBody": "void setGlobalVariable(String variable, String value) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the value of the given global variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getVoicemailboxes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<Voicemailbox> getVoicemailboxes() throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of all voicemailboxes configured for this Asterisk server with the number of new and old messages they contain.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.executeCliCommand", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "List<String> executeCliCommand(String command) throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Executes a command line interface (CLI) command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.isModuleLoaded", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "boolean isModuleLoaded(String module) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Checks whether a module is currently loaded. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.loadModule", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "void loadModule(String module) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Loads a module or subsystem <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.unloadModule", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "void unloadModule(String module) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Unloads a module or subsystem. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.reloadModule", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "void reloadModule(String module) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reloads a module or subsystem. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.reloadAllModules", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void reloadAllModules() throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reloads all currently loaded modules. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getConfig", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "ConfigFile getConfig(String filename) throws ManagerCommunicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads the given Asterisk configuration file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.addAsteriskServerListener", "methodParameterType": "AsteriskServerListener#", "methodParameterName": "listener#", "methodBody": "void addAsteriskServerListener(AsteriskServerListener listener) throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Adds a listener to this AsteriskServer.<br> If this server is not yet connected it will be implicitly connected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.removeAsteriskServerListener", "methodParameterType": "AsteriskServerListener#", "methodParameterName": "listener#", "methodBody": "void removeAsteriskServerListener(AsteriskServerListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Removes a listener from this Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.isAsteriskServerListening", "methodParameterType": "AsteriskServerListener#", "methodParameterName": "listener#", "methodBody": "boolean isAsteriskServerListening(AsteriskServerListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks whether the listener is already registered with this Asterisk server", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.addChainListener", "methodParameterType": "ManagerEventListener#", "methodParameterName": "chainListener#", "methodBody": "void addChainListener(ManagerEventListener chainListener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The chainListener allows a listener to receive manager events after they have been processed by the AsteriskServer. If the AsteriskServer is handling messages using the asyncEventHandling then these messages will also be async. You would use the chainListener if you are processing raw events and using the AJ live ChannelManager. If you don't use the chain listener then you can't be certain that a channel name passed in a raw event will match the channel name held by the live Channel Manager. By chaining events you can be certain that events such as channel Rename events have been processed by the live ChannelManager before you receive an event and as such the names will always match. Whilst name matching is not always critical (as you should be matching by the channels unique id) the channel name does also contain state information (Zombie, Masq) in these cases it can be critical that you have the same name otherwise your state information will be out of date.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.removeChainListener", "methodParameterType": "ManagerEventListener#", "methodParameterName": "chainListener#", "methodBody": "void removeChainListener(ManagerEventListener chainListener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "remove the chain listener.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.shutdown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void shutdown();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Closes the connection to this server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void initialize() throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Opens the connection to this server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getQueueByName", "methodParameterType": "String#", "methodParameterName": "queueName#", "methodBody": "AsteriskQueue getQueueByName(String queueName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "get Asterisk Queue by name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.getQueuesUpdatedAfter", "methodParameterType": "Date#", "methodParameterName": "date#", "methodBody": "List<AsteriskQueue> getQueuesUpdatedAfter(Date date);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "List of Queues Objects updated after certain date", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.forceQueuesMonitor", "methodParameterType": "boolean#", "methodParameterName": "force#", "methodBody": "void forceQueuesMonitor(boolean force);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "every time we get an event of a queue we reload the information about it from the Asterisk Server", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServer.java", "methodName": "org.asteriskjava.live.AsteriskServer.isQueuesMonitorForced", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isQueuesMonitorForced();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Check if the Queue Information is forced", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskAgent.java", "methodName": "org.asteriskjava.live.AsteriskAgent.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskAgent.java", "methodName": "org.asteriskjava.live.AsteriskAgent.getAgentId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAgentId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the agentId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskAgent.java", "methodName": "org.asteriskjava.live.AsteriskAgent.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AgentState getState();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the state of this agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DialedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.DialedChannelHistoryEntry.DialedChannelHistoryEntry", "methodParameterType": "Date#AsteriskChannel#", "methodParameterName": "date#channel#", "methodBody": "public DialedChannelHistoryEntry(Date date, AsteriskChannel channel)\n    {\n        this.date = date;\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DialedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.DialedChannelHistoryEntry.getDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getDate()\n    {\n        return date;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the channel was dialed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DialedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.DialedChannelHistoryEntry.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AsteriskChannel getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel that has been dialed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueListener.java", "methodName": "org.asteriskjava.live.AsteriskQueueListener.onNewEntry", "methodParameterType": "AsteriskQueueEntry#", "methodParameterName": "entry#", "methodBody": "void onNewEntry(AsteriskQueueEntry entry);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever an entry appears in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueListener.java", "methodName": "org.asteriskjava.live.AsteriskQueueListener.onEntryLeave", "methodParameterType": "AsteriskQueueEntry#", "methodParameterName": "entry#", "methodBody": "void onEntryLeave(AsteriskQueueEntry entry);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever an entry leaves the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueListener.java", "methodName": "org.asteriskjava.live.AsteriskQueueListener.onMemberStateChange", "methodParameterType": "AsteriskQueueMember#", "methodParameterName": "member#", "methodBody": "void onMemberStateChange(AsteriskQueueMember member);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever a member changes his state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueListener.java", "methodName": "org.asteriskjava.live.AsteriskQueueListener.onEntryServiceLevelExceeded", "methodParameterType": "AsteriskQueueEntry#", "methodParameterName": "entry#", "methodBody": "void onEntryServiceLevelExceeded(AsteriskQueueEntry entry);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param entry", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueListener.java", "methodName": "org.asteriskjava.live.AsteriskQueueListener.onMemberAdded", "methodParameterType": "AsteriskQueueMember#", "methodParameterName": "member#", "methodBody": "void onMemberAdded(AsteriskQueueMember member);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever a new member is added to the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueListener.java", "methodName": "org.asteriskjava.live.AsteriskQueueListener.onMemberRemoved", "methodParameterType": "AsteriskQueueMember#", "methodParameterName": "member#", "methodBody": "void onMemberRemoved(AsteriskQueueMember member);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever a member is removed from this queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getAccountCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAccountCode();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the account number that is usually used to identify the party to bill for the call.<p> Corresponds to CDR field <code>accountcode</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getDestinationContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDestinationContext();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the destination context.<p> Corresponds to CDR field <code>dcontext</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getDestinationExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDestinationExtension();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the destination extension.<p> Corresponds to CDR field <code>dst</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getDuration();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the total time (in seconds) the caller spent in the system from dial to hangup.<p> Corresponds to CDR field <code>duration</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getBillableSeconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getBillableSeconds();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the total time (in seconds) the call was up from answer to hangup.<p> Corresponds to CDR field <code>billsec</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getLastApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getLastApplication();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the last application if appropriate, for example \"VoiceMail\".<p> Corresponds to CDR field <code>lastapp</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getLastAppData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getLastAppData();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the last application's data (arguments), for example \"s1234\".<p> Corresponds to CDR field <code>lastdata</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallDetailRecord.java", "methodName": "org.asteriskjava.live.CallDetailRecord.getUserField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUserField();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the user-defined field as set by <code>Set(CDR(userfield)=Value)</code>.<p> Corresponds to CDR field <code>userfield</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueEntry.java", "methodName": "org.asteriskjava.live.AsteriskQueueEntry.getDateJoined", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Date getDateJoined();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the date this member joined the Queue.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueEntry.java", "methodName": "org.asteriskjava.live.AsteriskQueueEntry.getDateLeft", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Date getDateLeft();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the date this member left the queue room.<p> This property is <code>null</code> as long as the user is in state  {@link QueueEntryState#JOINED} and set to date themember left when entering  {@link QueueEntryState#LEFT}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueEntry.java", "methodName": "org.asteriskjava.live.AsteriskQueueEntry.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "QueueEntryState getState();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the lifecycle status of this AsteriskQueueEntry.<p> Initially the user is in state  {@link org.asteriskjava.live.QueueEntryState#JOINED}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueEntry.java", "methodName": "org.asteriskjava.live.AsteriskQueueEntry.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskQueue getQueue();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Queue this member joined.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueEntry.java", "methodName": "org.asteriskjava.live.AsteriskQueueEntry.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskChannel getChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the channel associated with this entry.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueEntry.java", "methodName": "org.asteriskjava.live.AsteriskQueueEntry.getChannelName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getChannelName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the channel associated with this entry.<p> Comodity bridge, don't duplicate channel name as it can be renamed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueEntry.java", "methodName": "org.asteriskjava.live.AsteriskQueueEntry.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getPosition();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the position of this queue entry in the queue.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Extension.java", "methodName": "org.asteriskjava.live.Extension.Extension", "methodParameterType": "String#String#Integer#", "methodParameterName": "context#extension#priority#", "methodBody": "public Extension(String context, String extension, Integer priority)\n    {\n        this(context, extension, priority, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param context", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Extension.java", "methodName": "org.asteriskjava.live.Extension.Extension", "methodParameterType": "String#String#Integer#String#String#", "methodParameterName": "context#extension#priority#application#appData#", "methodBody": "public Extension(String context, String extension,\n                     Integer priority, String application, String appData)\n    {\n        this.context = context;\n        this.extension = extension;\n        this.priority = priority;\n        this.application = application;\n        this.appData = appData;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param context", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getLocation();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the location of this member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskQueue getQueue();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the queue this member is registerd to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "QueueMemberState getState();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the state of this member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getPaused", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated boolean getPaused();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns whether this member is currently paused..", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.isPaused", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isPaused();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns whether this member is currently paused..", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.setPaused", "methodParameterType": "boolean#", "methodParameterName": "paused#", "methodBody": "void setPaused(boolean paused) throws ManagerCommunicationException, NoSuchInterfaceException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Pauses or unpauses this member on this queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.setPausedAll", "methodParameterType": "boolean#", "methodParameterName": "paused#", "methodBody": "void setPausedAll(boolean paused) throws ManagerCommunicationException, NoSuchInterfaceException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Pauses or unpauses this member on all queues.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getMembership", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getMembership();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns if this member has been dynamically added by the QueueAdd command (in the dialplan or via the Manager API) or if this member is has been statically defined in <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.isStatic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isStatic();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Convenience method that checks whether this member has been statically defined in <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.isDynamic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isDynamic();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Convenience method that checks whether this member has been dynamically added by the QueueAdd command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getPenalty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getPenalty();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the penalty of this member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.setPenalty", "methodParameterType": "int#", "methodParameterName": "penalty#", "methodBody": "void setPenalty(int penalty) throws IllegalArgumentException, ManagerCommunicationException, InvalidPenaltyException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Assignes a new penalty to this queue member.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getLastCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Long getLastCall();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "get the timestamp when the last call was terminated", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueueMember.java", "methodName": "org.asteriskjava.live.AsteriskQueueMember.getCallsTaken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getCallsTaken();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "total calls taken", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/NoSuchChannelException.java", "methodName": "org.asteriskjava.live.NoSuchChannelException.NoSuchChannelException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public NoSuchChannelException(String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DefaultAsteriskServer.java", "methodName": "org.asteriskjava.live.DefaultAsteriskServer.DefaultAsteriskServer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DefaultAsteriskServer()\n    {\n        this.impl = new AsteriskServerImpl();\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance without a  {@link ManagerConnection}. The ManagerConnection must be set using {@link #setManagerConnection(ManagerConnection)} before you can use thisAsteriskServer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DefaultAsteriskServer.java", "methodName": "org.asteriskjava.live.DefaultAsteriskServer.DefaultAsteriskServer", "methodParameterType": "String#String#String#", "methodParameterName": "hostname#username#password#", "methodBody": "public DefaultAsteriskServer(String hostname, String username, String password)\n    {\n        final ManagerConnection connection;\n        connection = createManagerConnection(hostname, 0, username, password);\n        this.impl = new AsteriskServerImpl(connection);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance and a new  {@link ManagerConnection} with the givenconnection data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DefaultAsteriskServer.java", "methodName": "org.asteriskjava.live.DefaultAsteriskServer.DefaultAsteriskServer", "methodParameterType": "String#int#String#String#", "methodParameterName": "hostname#port#username#password#", "methodBody": "public DefaultAsteriskServer(String hostname, int port, String username, String password)\n    {\n        final ManagerConnection connection;\n        connection = createManagerConnection(hostname, port, username, password);\n        this.impl = new AsteriskServerImpl(connection);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance and a new  {@link ManagerConnection} with the givenconnection data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DefaultAsteriskServer.java", "methodName": "org.asteriskjava.live.DefaultAsteriskServer.DefaultAsteriskServer", "methodParameterType": "ManagerConnection#", "methodParameterName": "eventConnection#", "methodBody": "public DefaultAsteriskServer(ManagerConnection eventConnection)\n    {\n        this.impl = new AsteriskServerImpl(eventConnection);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance that uses the given  {@link ManagerConnection}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/DefaultAsteriskServer.java", "methodName": "org.asteriskjava.live.DefaultAsteriskServer.setSkipQueues", "methodParameterType": "boolean#", "methodParameterName": "skipQueues#", "methodBody": "public void setSkipQueues(boolean skipQueues)\n    {\n        this.impl.setSkipQueues(skipQueues);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Determines if queue status is retrieved at startup. If you don't need queue information and still run Asterisk 1.0.x you can set this to <code>true</code> to circumvent the startup delay caused by the missing QueueStatusComplete event. <br> Default is <code>false</code>.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskServerImpl.setSkipQueues"], "call_func_parameter": [["boolean"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskServerImpl.setSkipQueues": "Determines if queue status is retrieved at startup. If you don't need queue information and still run Asterisk 1.0.x you can set this to <code>true</code> to circumvent the startup delay caused by the missing QueueStatusComplete event. <br> Default is <code>false</code>."}]}, {"index": "183", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/SecureAsteriskServer.java", "methodName": "org.asteriskjava.live.SecureAsteriskServer.SecureAsteriskServer", "methodParameterType": "String#int#String#String#", "methodParameterName": "hostname#port#username#password#", "methodBody": "public SecureAsteriskServer(String hostname, int port, String username, String password)\n    {\n        super(hostname, port, username, password);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance and a new SSL secured  {@link ManagerConnection} with the givenconnection data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of this queue as defined in Asterisk's <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getMax", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getMax();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the maximum number of people allowed to wait in this queue or 0 for unlimited. <br> Corresponds to the <code>maxlen</code> option in Asterisk's <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getStrategy();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the strategy used for this queue. <br> Possible values are: <ul> <li>ringall</li> <li>roundrobin</li> <li>leastrecent</li> <li>fewestcalls</li> <li>random</li> <li>rrmemory</li> </ul> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getServiceLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getServiceLevel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the service level (in seconds) as defined by the <code>servicelevel</code> setting in <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getWeight", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getWeight();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the weight of this queue. <br> A queue can be assigned a 'weight' to ensure calls waiting in a higher priority queue will deliver its calls first. Only delays the lower weight queue's call if the member is also in the higher weight queue. <br> Available since Asterisk 1.2", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getEntries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<AsteriskQueueEntry> getEntries();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the list of entries currently waiting in this queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getMembers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AsteriskQueueMember> getMembers();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the list of Asterisk members of this queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.addAsteriskQueueListener", "methodParameterType": "AsteriskQueueListener#", "methodParameterName": "listener#", "methodBody": "void addAsteriskQueueListener(AsteriskQueueListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Registers a new queue listener.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.removeAsteriskQueueListener", "methodParameterType": "AsteriskQueueListener#", "methodParameterName": "listener#", "methodBody": "void removeAsteriskQueueListener(AsteriskQueueListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Removes a previously registered queue listener.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getAbandoned", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getAbandoned();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of abandoned calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getServiceLevelPerf", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Double getServiceLevelPerf();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the ratio of calls answered within the specified service level per total completed calls (in percent).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getCompleted", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getCompleted();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of completed calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getTalkTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getTalkTime();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the current average talk time for this queue based on an exponential average.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getHoldTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getHoldTime();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the current average holdtime for this queue (in seconds).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getCalls", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getCalls();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of calls currently waiting in the queue. Is better to use get Waiting()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getWaiting", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getWaiting();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of calls currently waiting in the queue. More verbose Method than getCalls()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskQueue.java", "methodName": "org.asteriskjava.live.AsteriskQueue.getLastUpdateMillis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long getLastUpdateMillis();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "timestamp (miliseconds) of last update of this object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/ChannelStateHistoryEntry.java", "methodName": "org.asteriskjava.live.ChannelStateHistoryEntry.ChannelStateHistoryEntry", "methodParameterType": "Date#ChannelState#", "methodParameterName": "date#state#", "methodBody": "public ChannelStateHistoryEntry(Date date, ChannelState state)\n    {\n        this.date = date;\n        this.state = state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/ChannelStateHistoryEntry.java", "methodName": "org.asteriskjava.live.ChannelStateHistoryEntry.getDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getDate()\n    {\n        return date;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the channel entered the state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/ChannelStateHistoryEntry.java", "methodName": "org.asteriskjava.live.ChannelStateHistoryEntry.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ChannelState getState()\n    {\n        return state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The state the channel entered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/OriginateCallback.java", "methodName": "org.asteriskjava.live.OriginateCallback.onDialing", "methodParameterType": "AsteriskChannel#", "methodParameterName": "channel#", "methodBody": "void onDialing(AsteriskChannel channel);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called when the channel has been created and before it starts ringing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/OriginateCallback.java", "methodName": "org.asteriskjava.live.OriginateCallback.onSuccess", "methodParameterType": "AsteriskChannel#", "methodParameterName": "channel#", "methodBody": "void onSuccess(AsteriskChannel channel);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called if the originate was successful and the called party answered the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/OriginateCallback.java", "methodName": "org.asteriskjava.live.OriginateCallback.onNoAnswer", "methodParameterType": "AsteriskChannel#", "methodParameterName": "channel#", "methodBody": "void onNoAnswer(AsteriskChannel channel);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called if the originate was unsuccessful because the called party did not answer the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/OriginateCallback.java", "methodName": "org.asteriskjava.live.OriginateCallback.onBusy", "methodParameterType": "AsteriskChannel#", "methodParameterName": "channel#", "methodBody": "void onBusy(AsteriskChannel channel);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called if the originate was unsuccessful because the called party was busy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/OriginateCallback.java", "methodName": "org.asteriskjava.live.OriginateCallback.onFailure", "methodParameterType": "LiveException#", "methodParameterName": "cause#", "methodBody": "void onFailure(LiveException cause);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called if the originate failed for example due to an invalid channel name or an originate to an unregistered SIP or IAX peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServerListener.java", "methodName": "org.asteriskjava.live.AsteriskServerListener.onNewAsteriskChannel", "methodParameterType": "AsteriskChannel#", "methodParameterName": "channel#", "methodBody": "void onNewAsteriskChannel(AsteriskChannel channel);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever a new channel appears on the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServerListener.java", "methodName": "org.asteriskjava.live.AsteriskServerListener.onNewMeetMeUser", "methodParameterType": "MeetMeUser#", "methodParameterName": "user#", "methodBody": "void onNewMeetMeUser(MeetMeUser user);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever a user joins a  {@link MeetMeRoom}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServerListener.java", "methodName": "org.asteriskjava.live.AsteriskServerListener.onNewAgent", "methodParameterType": "AsteriskAgent#", "methodParameterName": "agent#", "methodBody": "void onNewAgent(AsteriskAgent agent);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever a new agent will be registered at Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskServerListener.java", "methodName": "org.asteriskjava.live.AsteriskServerListener.onNewQueueEntry", "methodParameterType": "AsteriskQueueEntry#", "methodParameterName": "entry#", "methodBody": "void onNewQueueEntry(AsteriskQueueEntry entry);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called whenever a queue entry ( ~ wapper over channel) joins a  {@link org.asteriskjava.live.AsteriskQueue}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.updateQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "void updateQueue(String queue) throws ManagerCommunicationException\n    {\n        ResponseEvents re;\n\n        try\n        {\n            QueueStatusAction queueStatusAction = new QueueStatusAction();\n            queueStatusAction.setQueue(queue);\n            re = server.sendEventGeneratingAction(queueStatusAction);\n        }\n        catch (ManagerCommunicationException e)\n        {\n            final Throwable cause = e.getCause();\n\n            if (cause instanceof EventTimeoutException)\n            {\n                // this happens with Asterisk 1.0.x as it doesn't send a\n                // QueueStatusCompleteEvent\n                re = ((EventTimeoutException) cause).getPartialResult();\n            }\n            else\n            {\n                throw e;\n            }\n        }\n\n        for (ManagerEvent event : re.getEvents())\n        {\n            // 101119 OLB: solo actualizamos el QUEUE por ahora\n            if (event instanceof QueueParamsEvent)\n            {\n                handleQueueParamsEvent((QueueParamsEvent) event);\n            }\n\n            else if (event instanceof QueueMemberEvent)\n            {\n                handleQueueMemberEvent((QueueMemberEvent) event);\n            }\n            else if (event instanceof QueueEntryEvent)\n            {\n                handleQueueEntryEvent((QueueEntryEvent) event);\n            }\n\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#ThrowStatement#Block#IfStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement)Block)CatchClause)TryStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Method to ask for a Queue data update", "call_func_name": ["org.asteriskjava.manager.action.QueueStatusAction.<init>", "org.asteriskjava.manager.action.QueueStatusAction.setQueue", "org.asteriskjava.live.internal.AsteriskServerImpl.sendEventGeneratingAction", "org.asteriskjava.live.ManagerCommunicationException.getCause", "org.asteriskjava.manager.EventTimeoutException.getPartialResult", "org.asteriskjava.manager.ResponseEvents.getEvents", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.internal.QueueManager.handleQueueParamsEvent", "org.asteriskjava.live.internal.QueueManager.handleQueueMemberEvent", "org.asteriskjava.live.internal.QueueManager.handleQueueEntryEvent"], "call_func_parameter": [[""], ["java.lang.String"], ["org.asteriskjava.manager.action.EventGeneratingAction"], [""], [""], [""], [""], [""], [""], ["org.asteriskjava.manager.event.QueueParamsEvent"], ["org.asteriskjava.manager.event.QueueMemberEvent"], ["org.asteriskjava.manager.event.QueueEntryEvent"]], "passed_comments": [{"org.asteriskjava.manager.action.QueueStatusAction.setQueue": "Sets the queue filter. If set QueueParamEvents are only generated for the given queue name."}, {"org.asteriskjava.manager.EventTimeoutException.getPartialResult": "Returns the partial result that has been received before the timeout occured.<p> Note: Using the partial result in your application should be avoided wherever possible. This is only a hack to handle those versions of Asterisk that don't follow the Manager API conventions, for example by not sending the correct ActionCompleteEvent."}, {"org.asteriskjava.manager.ResponseEvents.getEvents": "Returns a Collection of ManagerEvents that have been received including the last one that indicates completion."}, {"org.asteriskjava.live.internal.QueueManager.handleQueueParamsEvent": "Called during initialization to populate the list of queues."}, {"org.asteriskjava.live.internal.QueueManager.handleQueueMemberEvent": "Called during initialization to populate the members of the queues."}, {"org.asteriskjava.live.internal.QueueManager.handleQueueEntryEvent": "Called during initialization to populate entries of the queues. Currently does the same as handleJoinEvent()"}]}, {"index": "214", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.getQueues", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AsteriskQueue> getQueues()\n    {\n        refreshQueuesIfForced();\n\n        Collection<AsteriskQueue> copy;\n\n        synchronized (queuesLRU)\n        {\n            copy = new ArrayList<AsteriskQueue>(queuesLRU.values());\n        }\n        return copy;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets (a copy of) the list of the queues.", "call_func_name": ["org.asteriskjava.live.internal.QueueManager.refreshQueuesIfForced", "java.util.Map.values", "java.util.ArrayList.<init>"], "call_func_parameter": [[""], [""], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.addQueue", "methodParameterType": "AsteriskQueueImpl#", "methodParameterName": "queue#", "methodBody": "private void addQueue(AsteriskQueueImpl queue)\n    {\n        synchronized (queuesLRU)\n        {\n            queuesLRU.put(queue.getName(), queue);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Adds a queue to the internal map, keyed by name.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskQueueImpl.getName", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleQueueParamsEvent", "methodParameterType": "QueueParamsEvent#", "methodParameterName": "event#", "methodBody": "private void handleQueueParamsEvent(QueueParamsEvent event)\n    {\n        AsteriskQueueImpl queue;\n\n        final String name = event.getQueue();\n        final Integer max = event.getMax();\n        final String strategy = event.getStrategy();\n        final Integer serviceLevel = event.getServiceLevel();\n        final Integer weight = event.getWeight();\n        final Integer calls = event.getCalls();\n        final Integer holdTime = event.getHoldTime();\n        final Integer talkTime = event.getTalkTime();\n        final Integer completed = event.getCompleted();\n        final Integer abandoned = event.getAbandoned();\n        final Double serviceLevelPerf = event.getServiceLevelPerf();\n\n        queue = getInternalQueueByName(name);\n\n        if (queue == null)\n        {\n            queue = new AsteriskQueueImpl(server, name, max, strategy, serviceLevel, weight, calls, holdTime, talkTime,\n                    completed, abandoned, serviceLevelPerf);\n            logger.info(\"Adding new queue \" + queue);\n            addQueue(queue);\n        }\n        else\n        {\n            // We should never reach that code as this method is only called for\n            // initialization\n            // So the queue should never be in the queues list\n            synchronized (queue)\n            {\n                synchronized (queuesLRU)\n                {\n\n                    if (queue.setMax(max) | queue.setServiceLevel(serviceLevel) | queue.setWeight(weight)\n                            | queue.setCalls(calls) | queue.setHoldTime(holdTime) | queue.setTalkTime(talkTime)\n                            | queue.setCompleted(completed) | queue.setAbandoned(abandoned)\n                            | queue.setServiceLevelPerf(serviceLevelPerf))\n                    {\n\n                        queuesLRU.remove(queue.getName());\n                        queuesLRU.put(queue.getName(), queue);\n                    }\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Block#SynchronizedStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(SynchronizedStatement(SimpleName)SimpleName(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement)Block)SynchronizedStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called during initialization to populate the list of queues.", "call_func_name": ["org.asteriskjava.manager.event.QueueParamsEvent.getQueue", "org.asteriskjava.manager.event.QueueParamsEvent.getMax", "org.asteriskjava.manager.event.QueueParamsEvent.getStrategy", "org.asteriskjava.manager.event.QueueParamsEvent.getServiceLevel", "org.asteriskjava.manager.event.QueueParamsEvent.getWeight", "org.asteriskjava.manager.event.QueueParamsEvent.getCalls", "org.asteriskjava.manager.event.QueueParamsEvent.getHoldTime", "org.asteriskjava.manager.event.QueueParamsEvent.getTalkTime", "org.asteriskjava.manager.event.QueueParamsEvent.getCompleted", "org.asteriskjava.manager.event.QueueParamsEvent.getAbandoned", "org.asteriskjava.manager.event.QueueParamsEvent.getServiceLevelPerf", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "org.asteriskjava.live.internal.AsteriskQueueImpl.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "org.asteriskjava.live.internal.QueueManager.addQueue", "org.asteriskjava.live.internal.AsteriskQueueImpl.setMax", "org.asteriskjava.live.internal.AsteriskQueueImpl.setServiceLevel", "org.asteriskjava.live.internal.AsteriskQueueImpl.setWeight", "org.asteriskjava.live.internal.AsteriskQueueImpl.setCalls", "org.asteriskjava.live.internal.AsteriskQueueImpl.setHoldTime", "org.asteriskjava.live.internal.AsteriskQueueImpl.setTalkTime", "org.asteriskjava.live.internal.AsteriskQueueImpl.setCompleted", "org.asteriskjava.live.internal.AsteriskQueueImpl.setAbandoned", "org.asteriskjava.live.internal.AsteriskQueueImpl.setServiceLevelPerf", "org.asteriskjava.live.internal.AsteriskQueueImpl.getName", "java.util.Map.remove", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["org.asteriskjava.live.internal.AsteriskServerImpl", "java.lang.String", "java.lang.Integer", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "java.lang.Integer", "java.lang.Integer", "java.lang.Integer", "java.lang.Integer", "java.lang.Integer", "java.lang.Double"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], ["org.asteriskjava.live.internal.AsteriskQueueImpl"], ["java.lang.Integer"], ["java.lang.Integer"], ["java.lang.Integer"], ["java.lang.Integer"], ["java.lang.Integer"], ["java.lang.Integer"], ["java.lang.Integer"], ["java.lang.Integer"], ["java.lang.Double"], [""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.asteriskjava.manager.event.QueueParamsEvent.getQueue": "Returns the name of the queue."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getMax": "Returns the maximum number of people waiting in the queue or 0 for unlimited.<p> This corresponds to the <code>maxlen</code> setting in <code>queues.conf</code>."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getStrategy": "Returns the strategy used for this queue.<p> Possible values are:<p> <ul> <li>ringall</li> <li>roundrobin</li> <li>leastrecent</li> <li>fewestcalls</li> <li>random</li> <li>rrmemory</li> </ul> Available since Asterisk 1.6"}, {"org.asteriskjava.manager.event.QueueParamsEvent.getServiceLevel": "Returns the service level (in seconds) as defined by the <code>servicelevel</code> setting in <code>queues.conf</code>."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getWeight": "Returns the weight of this queue.<p> A queue can be assigned a 'weight' to ensure calls waiting in a higher priority queue will deliver its calls first. Only delays the lower weight queue's call if the member is also in the higher weight queue.<p> Available since Asterisk 1.2"}, {"org.asteriskjava.manager.event.QueueParamsEvent.getCalls": "Returns the number of calls currently waiting in the queue."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getHoldTime": "Returns the current average holdtime for this queue (in seconds)."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getTalkTime": "Returns the current avarage talk time for this queue based on an exponential average."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getCompleted": "Returns the number of completed calls."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getAbandoned": "Returns the number of abandoned calls."}, {"org.asteriskjava.manager.event.QueueParamsEvent.getServiceLevelPerf": "Returns the ratio of calls answered within the specified service level per total completed calls (in percent)."}, {"org.asteriskjava.live.internal.QueueManager.addQueue": "Adds a queue to the internal map, keyed by name."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setMax": "@param max"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setServiceLevel": "@param serviceLevel"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setWeight": "@param weight"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setCalls": "@param calls"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setHoldTime": "@param holdTime"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setTalkTime": "@param talkTime"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setCompleted": "@param completed"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setAbandoned": "@param abandoned"}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.setServiceLevelPerf": "@param serviceLevelPerf"}]}, {"index": "217", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleQueueMemberEvent", "methodParameterType": "QueueMemberEvent#", "methodParameterName": "event#", "methodBody": "private void handleQueueMemberEvent(QueueMemberEvent event)\n    {\n        final AsteriskQueueImpl queue = getInternalQueueByName(event.getQueue());\n        if (queue == null)\n        {\n            logger.error(\"Ignored QueueEntryEvent for unknown queue \" + event.getQueue());\n            return;\n        }\n\n        AsteriskQueueMemberImpl member = queue.getMember(event.getLocation());\n        if (member == null)\n        {\n            member = new AsteriskQueueMemberImpl(server, queue, event.getLocation(), QueueMemberState.valueOf(event\n                    .getStatus()), event.getPaused(), event.getPenalty(), event.getMembership(), event.getCallsTaken(),\n                    event.getLastCall());\n\n            queue.addMember(member);\n        }\n        else\n        {\n            manageQueueMemberChange(queue, member, event);\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called during initialization to populate the members of the queues.", "call_func_name": ["org.asteriskjava.manager.event.QueueMemberEvent.getQueue", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.manager.event.QueueMemberEvent.getLocation", "org.asteriskjava.live.internal.AsteriskQueueImpl.getMember", "org.asteriskjava.manager.event.QueueMemberEvent.getStatus", "org.asteriskjava.live.QueueMemberState.valueOf", "org.asteriskjava.manager.event.QueueMemberEvent.getPaused", "java.lang.Boolean.booleanValue", "org.asteriskjava.manager.event.QueueMemberEvent.getPenalty", "org.asteriskjava.manager.event.QueueMemberEvent.getMembership", "org.asteriskjava.manager.event.QueueMemberEvent.getCallsTaken", "org.asteriskjava.manager.event.QueueMemberEvent.getLastCall", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.<init>", "org.asteriskjava.live.internal.AsteriskQueueImpl.addMember", "org.asteriskjava.live.internal.QueueManager.manageQueueMemberChange"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Integer"], [""], [""], [""], [""], [""], [""], ["org.asteriskjava.live.internal.AsteriskServerImpl", "org.asteriskjava.live.internal.AsteriskQueueImpl", "java.lang.String", "org.asteriskjava.live.QueueMemberState", "boolean", "java.lang.Integer", "java.lang.String", "java.lang.Integer", "java.lang.Long"], ["org.asteriskjava.live.internal.AsteriskQueueMemberImpl"], ["org.asteriskjava.live.internal.AsteriskQueueImpl", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl", "org.asteriskjava.manager.event.QueueMemberEvent"]], "passed_comments": [{"org.asteriskjava.manager.event.QueueMemberEvent.getQueue": "Returns the name of the queue."}, {"org.asteriskjava.manager.event.QueueMemberEvent.getLocation": "Returns the name of the member's interface.<p> E.g. the channel name or agent group."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.getMember": "Returns a member by its location."}, {"org.asteriskjava.manager.event.QueueMemberEvent.getStatus": "Returns the status of this queue member. <p> Available since Asterisk 1.2 <p> Valid status codes are: <dl> <dt>AST_DEVICE_UNKNOWN (0)</dt> <dd>Device valid but unknown channel state</dd> <dt>AST_DEVICE_NOT_INUSE (1)</dt> <dd>Device is not used</dd> <dt>AST_DEVICE_INUSE (2)</dt> <dd>Device is in use</dd> <dt>AST_DEVICE_BUSY (3)</dt> <dd>Device is Busy</dd> <dt>AST_DEVICE_INVALID (4)</dt> <dd>Device is invalid</dd> <dt>AST_DEVICE_UNAVAILABLE (5)</dt> <dd>Device is unavaiable</dd> <dt>AST_DEVICE_RINGING (6)</dt> <dd>Device is ringing</dd> <dt>AST_DEVICE_RINGINUSE (7)</dt> <dd>Device is ringing and in use</dd> <dt>AST_DEVICE_ONHOLD (8)</dt> <dd>Device is on hold</dd> </dl>"}, {"org.asteriskjava.manager.event.QueueMemberEvent.getPaused": "Is this queue member paused (not accepting calls)? <p> Available since Asterisk 1.2."}, {"org.asteriskjava.manager.event.QueueMemberEvent.getPenalty": "Returns the penalty for the added member. When calls are distributed members with higher penalties are considered last."}, {"org.asteriskjava.manager.event.QueueMemberEvent.getMembership": "Returns if this member has been dynamically added by the QueueAdd command (in the dialplan or via the Manager API) or if this member is has been statically defined in <code>queues.conf</code>."}, {"org.asteriskjava.manager.event.QueueMemberEvent.getCallsTaken": "Returns the number of calls answered by the member."}, {"org.asteriskjava.manager.event.QueueMemberEvent.getLastCall": "Returns the time the last successful call answered by the added member was hungup."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.addMember": "Add a new member to this queue."}]}, {"index": "218", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleQueueEntryEvent", "methodParameterType": "QueueEntryEvent#", "methodParameterName": "event#", "methodBody": "private void handleQueueEntryEvent(QueueEntryEvent event)\n    {\n        final AsteriskQueueImpl queue = getInternalQueueByName(event.getQueue());\n        final AsteriskChannelImpl channel = channelManager.getChannelImplByName(event.getChannel());\n\n        if (queue == null)\n        {\n            logger.error(\"Ignored QueueEntryEvent for unknown queue \" + event.getQueue());\n            return;\n        }\n        if (channel == null)\n        {\n            logger.error(\"Ignored QueueEntryEvent for unknown channel \" + event.getChannel());\n            return;\n        }\n\n        if (queue.getEntry(event.getChannel()) != null)\n        {\n            logger.debug(\"Ignored duplicate queue entry during population in queue \" + event.getQueue() + \" for channel \"\n                    + event.getChannel());\n            return;\n        }\n\n        // Asterisk gives us an initial position but doesn't tell us when he\n        // shifts the others\n        // We won't use this data for ordering until there is a appropriate\n        // event in AMI.\n        // (and refreshing the whole queue is too intensive and suffers\n        // incoherencies\n        // due to asynchronous shift that leaves holes if requested too fast)\n        int reportedPosition = event.getPosition();\n\n        queue.createNewEntry(channel, reportedPosition, event.getDateReceived());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called during initialization to populate entries of the queues. Currently does the same as handleJoinEvent()", "call_func_name": ["org.asteriskjava.manager.event.QueueEntryEvent.getQueue", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "org.asteriskjava.manager.event.QueueEntryEvent.getChannel", "org.asteriskjava.live.internal.ChannelManager.getChannelImplByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry", "org.asteriskjava.util.Log.debug", "org.asteriskjava.manager.event.QueueEntryEvent.getPosition", "java.lang.Integer.intValue", "org.asteriskjava.manager.event.QueueEntryEvent.getDateReceived", "org.asteriskjava.live.internal.AsteriskQueueImpl.createNewEntry"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object"], [""], [""], [""], ["org.asteriskjava.live.internal.AsteriskChannelImpl", "int", "java.util.Date"]], "passed_comments": [{"org.asteriskjava.manager.event.QueueEntryEvent.getQueue": "Returns the name of the queue that contains this entry."}, {"org.asteriskjava.manager.event.QueueEntryEvent.getChannel": "Returns the name of the channel of this entry."}, {"org.asteriskjava.live.internal.ChannelManager.getChannelImplByName": "Returns a channel from the ChannelManager's cache with the given name If multiple channels are found, returns the most recently CREATED one. If two channels with the very same date exist, avoid HUNGUP ones."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry": "Gets an entry of the queue by its channel name."}, {"org.asteriskjava.manager.event.QueueEntryEvent.getPosition": "Returns the position of this entry in the queue."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.createNewEntry": "Creates a new AsteriskQueueEntry, adds it to this queue.<p> Fires: <ul> <li>PCE on channel</li> <li>NewEntry on this queue</li> <li>PCE on other queue entries if shifted (never happens)</li> <li>NewQueueEntry on server</li> </ul>"}]}, {"index": "219", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleJoinEvent", "methodParameterType": "JoinEvent#", "methodParameterName": "event#", "methodBody": "void handleJoinEvent(JoinEvent event)\n    {\n        final AsteriskQueueImpl queue = getInternalQueueByName(event.getQueue());\n        final AsteriskChannelImpl channel = channelManager.getChannelImplByName(event.getChannel());\n\n        if (queue == null)\n        {\n            logger.error(\"Ignored JoinEvent for unknown queue \" + event.getQueue());\n            return;\n        }\n        if (channel == null)\n        {\n            logger.error(\"Ignored JoinEvent for unknown channel \" + event.getChannel());\n            return;\n        }\n\n        if (queue.getEntry(event.getChannel()) != null)\n        {\n            logger.error(\"Ignored duplicate queue entry in queue \" + event.getQueue() + \" for channel \" + event.getChannel());\n            return;\n        }\n\n        // Asterisk gives us an initial position but doesn't tell us when he\n        // shifts the others\n        // We won't use this data for ordering until there is a appropriate\n        // event in AMI.\n        // (and refreshing the whole queue is too intensive and suffers\n        // incoherencies\n        // due to asynchronous shift that leaves holes if requested too fast)\n        int reportedPosition = event.getPosition();\n\n        queue.createNewEntry(channel, reportedPosition, event.getDateReceived());\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called from AsteriskServerImpl whenever a new entry appears in a queue.", "call_func_name": ["org.asteriskjava.manager.event.JoinEvent.getQueue", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "org.asteriskjava.manager.event.JoinEvent.getChannel", "org.asteriskjava.live.internal.ChannelManager.getChannelImplByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry", "org.asteriskjava.manager.event.JoinEvent.getPosition", "java.lang.Integer.intValue", "org.asteriskjava.manager.event.JoinEvent.getDateReceived", "org.asteriskjava.live.internal.AsteriskQueueImpl.createNewEntry"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], [""], [""], [""], ["org.asteriskjava.live.internal.AsteriskChannelImpl", "int", "java.util.Date"]], "passed_comments": [{"org.asteriskjava.live.internal.ChannelManager.getChannelImplByName": "Returns a channel from the ChannelManager's cache with the given name If multiple channels are found, returns the most recently CREATED one. If two channels with the very same date exist, avoid HUNGUP ones."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry": "Gets an entry of the queue by its channel name."}, {"org.asteriskjava.manager.event.JoinEvent.getPosition": "Returns the position of the joined channel in the queue."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.createNewEntry": "Creates a new AsteriskQueueEntry, adds it to this queue.<p> Fires: <ul> <li>PCE on channel</li> <li>NewEntry on this queue</li> <li>PCE on other queue entries if shifted (never happens)</li> <li>NewQueueEntry on server</li> </ul>"}]}, {"index": "220", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleLeaveEvent", "methodParameterType": "LeaveEvent#", "methodParameterName": "event#", "methodBody": "void handleLeaveEvent(LeaveEvent event)\n    {\n        final AsteriskQueueImpl queue = getInternalQueueByName(event.getQueue());\n        final AsteriskChannelImpl channel = channelManager.getChannelImplByName(event.getChannel());\n\n        if (queue == null)\n        {\n            logger.error(\"Ignored LeaveEvent for unknown queue \" + event.getQueue());\n            return;\n        }\n        if (channel == null)\n        {\n            logger.error(\"Ignored LeaveEvent for unknown channel \" + event.getChannel());\n            return;\n        }\n\n        final AsteriskQueueEntryImpl existingQueueEntry = queue.getEntry(event.getChannel());\n        if (existingQueueEntry == null)\n        {\n            logger.error(\"Ignored leave event for non existing queue entry in queue \" + event.getQueue() + \" for channel \"\n                    + event.getChannel());\n            return;\n        }\n\n        queue.removeEntry(existingQueueEntry, event.getDateReceived());\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called from AsteriskServerImpl whenever an enty leaves a queue.", "call_func_name": ["org.asteriskjava.manager.event.LeaveEvent.getQueue", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "org.asteriskjava.manager.event.LeaveEvent.getChannel", "org.asteriskjava.live.internal.ChannelManager.getChannelImplByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry", "org.asteriskjava.manager.event.LeaveEvent.getDateReceived", "org.asteriskjava.live.internal.AsteriskQueueImpl.removeEntry"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["org.asteriskjava.live.internal.AsteriskQueueEntryImpl", "java.util.Date"]], "passed_comments": [{"org.asteriskjava.live.internal.ChannelManager.getChannelImplByName": "Returns a channel from the ChannelManager's cache with the given name If multiple channels are found, returns the most recently CREATED one. If two channels with the very same date exist, avoid HUNGUP ones."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry": "Gets an entry of the queue by its channel name."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.removeEntry": "Removes the given queue entry from the queue.<p> Fires if needed: <ul> <li>PCE on channel</li> <li>EntryLeave on this queue</li> <li>PCE on other queue entries if shifted</li> </ul>"}]}, {"index": "221", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleQueueMemberStatusEvent", "methodParameterType": "QueueMemberStatusEvent#", "methodParameterName": "event#", "methodBody": "void handleQueueMemberStatusEvent(QueueMemberStatusEvent event)\n    {\n        AsteriskQueueImpl queue = getInternalQueueByName(event.getQueue());\n\n        if (queue == null)\n        {\n            logger.error(\"Ignored QueueMemberStatusEvent for unknown queue \" + event.getQueue());\n            return;\n        }\n\n        AsteriskQueueMemberImpl member = queue.getMemberByLocation(event.getLocation());\n        if (member == null)\n        {\n            logger.error(\"Ignored QueueMemberStatusEvent for unknown member \" + event.getLocation());\n            return;\n        }\n\n        manageQueueMemberChange(queue, member, event);\n        queue.fireMemberStateChanged(member);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Challange a QueueMemberStatusEvent. Called from AsteriskServerImpl whenever a member state changes.", "call_func_name": ["org.asteriskjava.manager.event.QueueMemberStatusEvent.getQueue", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.manager.event.QueueMemberStatusEvent.getLocation", "org.asteriskjava.live.internal.AsteriskQueueImpl.getMemberByLocation", "org.asteriskjava.live.internal.QueueManager.manageQueueMemberChange", "org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberStateChanged"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String"], ["org.asteriskjava.live.internal.AsteriskQueueImpl", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl", "org.asteriskjava.manager.event.QueueMemberEvent"], ["org.asteriskjava.live.internal.AsteriskQueueMemberImpl"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueImpl.getMemberByLocation": "Retrieves a member by its location."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberStateChanged": "Notifies all registered listener that a queue member changes its state."}]}, {"index": "222", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.getQueueByName", "methodParameterType": "String#", "methodParameterName": "queueName#", "methodBody": "AsteriskQueueImpl getQueueByName(String queueName)\n    {\n        refreshQueueIfForced(queueName);\n\n        AsteriskQueueImpl queue = getInternalQueueByName(queueName);\n        if (queue == null)\n        {\n            logger.error(\"Requested queue '\" + queueName + \"' not found!\");\n        }\n\n        return queue;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a queue by its name.", "call_func_name": ["org.asteriskjava.live.internal.QueueManager.refreshQueueIfForced", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleQueueMemberAddedEvent", "methodParameterType": "QueueMemberAddedEvent#", "methodParameterName": "event#", "methodBody": "public void handleQueueMemberAddedEvent(QueueMemberAddedEvent event)\n    {\n        final AsteriskQueueImpl queue = getInternalQueueByName(event.getQueue());\n        if (queue == null)\n        {\n            logger.error(\"Ignored QueueMemberAddedEvent for unknown queue \" + event.getQueue());\n            return;\n        }\n\n        AsteriskQueueMemberImpl member = queue.getMember(event.getLocation());\n        if (member == null)\n        {\n            member = new AsteriskQueueMemberImpl(server, queue, event.getLocation(), QueueMemberState.valueOf(event\n                    .getStatus()), event.getPaused(), event.getPenalty(), event.getMembership(), event.getCallsTaken(),\n                    event.getLastCall());\n        }\n\n        queue.addMember(member);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Challange a QueueMemberAddedEvent.", "call_func_name": ["org.asteriskjava.manager.event.QueueMemberAddedEvent.getQueue", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.manager.event.QueueMemberAddedEvent.getLocation", "org.asteriskjava.live.internal.AsteriskQueueImpl.getMember", "org.asteriskjava.manager.event.QueueMemberAddedEvent.getStatus", "org.asteriskjava.live.QueueMemberState.valueOf", "org.asteriskjava.manager.event.QueueMemberAddedEvent.getPaused", "java.lang.Boolean.booleanValue", "org.asteriskjava.manager.event.QueueMemberAddedEvent.getPenalty", "org.asteriskjava.manager.event.QueueMemberAddedEvent.getMembership", "org.asteriskjava.manager.event.QueueMemberAddedEvent.getCallsTaken", "org.asteriskjava.manager.event.QueueMemberAddedEvent.getLastCall", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.<init>", "org.asteriskjava.live.internal.AsteriskQueueImpl.addMember"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Integer"], [""], [""], [""], [""], [""], [""], ["org.asteriskjava.live.internal.AsteriskServerImpl", "org.asteriskjava.live.internal.AsteriskQueueImpl", "java.lang.String", "org.asteriskjava.live.QueueMemberState", "boolean", "java.lang.Integer", "java.lang.String", "java.lang.Integer", "java.lang.Long"], ["org.asteriskjava.live.internal.AsteriskQueueMemberImpl"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueImpl.getMember": "Returns a member by its location."}, {"org.asteriskjava.manager.event.QueueMemberAddedEvent.getStatus": "Returns the status of this queue member.<p> Valid status codes are: <dl> <dt>AST_DEVICE_UNKNOWN (0)</dt> <dd>Queue member is available</dd> <dt>AST_DEVICE_NOT_INUSE (1)</dt> <dd>?</dd> <dt>AST_DEVICE_INUSE (2)</dt> <dd>?</dd> <dt>AST_DEVICE_BUSY (3)</dt> <dd>?</dd> <dt>AST_DEVICE_INVALID (4)</dt> <dd>?</dd> <dt>AST_DEVICE_UNAVAILABLE (5)</dt> <dd>?</dd> </dl>"}, {"org.asteriskjava.manager.event.QueueMemberAddedEvent.getPaused": "Returns if this queue member is paused (not accepting calls).<p>"}, {"org.asteriskjava.manager.event.QueueMemberAddedEvent.getPenalty": "Returns the penalty for the added member. When calls are distributed members with higher penalties are considered last."}, {"org.asteriskjava.manager.event.QueueMemberAddedEvent.getMembership": "Returns if the added member is a dynamic or static queue member."}, {"org.asteriskjava.manager.event.QueueMemberAddedEvent.getCallsTaken": "Returns the number of calls answered by the member."}, {"org.asteriskjava.manager.event.QueueMemberAddedEvent.getLastCall": "Returns the time the last successful call answered by the added member was hungup."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.addMember": "Add a new member to this queue."}]}, {"index": "224", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/QueueManager.java", "methodName": "org.asteriskjava.live.internal.QueueManager.handleQueueMemberRemovedEvent", "methodParameterType": "QueueMemberRemovedEvent#", "methodParameterName": "event#", "methodBody": "public void handleQueueMemberRemovedEvent(QueueMemberRemovedEvent event)\n    {\n        final AsteriskQueueImpl queue = getInternalQueueByName(event.getQueue());\n        if (queue == null)\n        {\n            logger.error(\"Ignored QueueMemberRemovedEvent for unknown queue \" + event.getQueue());\n            return;\n        }\n\n        final AsteriskQueueMemberImpl member = queue.getMember(event.getLocation());\n        if (member == null)\n        {\n            logger.error(\"Ignored QueueMemberRemovedEvent for unknown agent name: \" + event.getMemberName() + \" location: \"\n                    + event.getLocation() + \" queue: \" + event.getQueue());\n            return;\n        }\n\n        queue.removeMember(member);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Challange a QueueMemberRemovedEvent.", "call_func_name": ["org.asteriskjava.manager.event.QueueMemberRemovedEvent.getQueue", "org.asteriskjava.live.internal.QueueManager.getInternalQueueByName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.manager.event.QueueMemberRemovedEvent.getLocation", "org.asteriskjava.live.internal.AsteriskQueueImpl.getMember", "org.asteriskjava.manager.event.QueueMemberRemovedEvent.getMemberName", "org.asteriskjava.live.internal.AsteriskQueueImpl.removeMember"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["org.asteriskjava.live.internal.AsteriskQueueMemberImpl"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueImpl.getMember": "Returns a member by its location."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.removeMember": "Removes a member from this queue."}]}, {"index": "225", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/MeetMeUserImpl.java", "methodName": "org.asteriskjava.live.internal.MeetMeUserImpl.left", "methodParameterType": "Date#", "methodParameterName": "dateLeft#", "methodBody": "void left(Date dateLeft)\n    {\n        MeetMeUserState oldState;\n        synchronized (this)\n        {\n            oldState = this.state;\n            this.dateLeft = dateLeft;\n            this.state = MeetMeUserState.LEFT;\n        }\n        firePropertyChange(PROPERTY_STATE, oldState, state);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#ThisExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(ThisExpression)ThisExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status to  {@link MeetMeUserState#LEFT} and dateLeft to the given date.", "call_func_name": ["org.asteriskjava.live.internal.MeetMeUserImpl.firePropertyChange"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskServerImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskServerImpl.AsteriskServerImpl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AsteriskServerImpl()\n    {\n        idCounter = new AtomicLong();\n        listeners = new LinkedHashSet<>();\n        originateCallbacks = new HashMap<>();\n        channelManager = new ChannelManager(this);\n        agentManager = new AgentManager(this);\n        meetMeManager = new MeetMeManager(this, channelManager);\n        queueManager = new QueueManager(this, channelManager);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskServerImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskServerImpl.AsteriskServerImpl", "methodParameterType": "ManagerConnection#", "methodParameterName": "eventConnection#", "methodBody": "public AsteriskServerImpl(ManagerConnection eventConnection)\n    {\n        this();\n        setManagerConnection(eventConnection); // todo: !!! Possible bug !!!:\n                                               // call to overridable method\n                                               // over object construction\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ConstructorInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskServerImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskServerImpl.setSkipQueues", "methodParameterType": "boolean#", "methodParameterName": "skipQueues#", "methodBody": "public void setSkipQueues(boolean skipQueues)\n    {\n        this.skipQueues = skipQueues;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Determines if queue status is retrieved at startup. If you don't need queue information and still run Asterisk 1.0.x you can set this to <code>true</code> to circumvent the startup delay caused by the missing QueueStatusComplete event. <br> Default is <code>false</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskServerImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskServerImpl.onManagerEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "public void onManagerEvent(ManagerEvent event)\n    {\n        // Handle Channel related events\n        if (event instanceof ConnectEvent)\n        {\n            handleConnectEvent((ConnectEvent) event);\n        }\n        else if (event instanceof DisconnectEvent)\n        {\n            handleDisconnectEvent((DisconnectEvent) event);\n        }\n        else if (event instanceof NewChannelEvent)\n        {\n            channelManager.handleNewChannelEvent((NewChannelEvent) event);\n        }\n        else if (event instanceof NewExtenEvent)\n        {\n            channelManager.handleNewExtenEvent((NewExtenEvent) event);\n        }\n        else if (event instanceof NewStateEvent)\n        {\n            channelManager.handleNewStateEvent((NewStateEvent) event);\n        }\n        else if (event instanceof NewCallerIdEvent)\n        {\n            channelManager.handleNewCallerIdEvent((NewCallerIdEvent) event);\n        }\n        else if (event instanceof DialEvent)\n        {\n            channelManager.handleDialEvent((DialEvent) event);\n        }\n        else if (event instanceof BridgeEvent)\n        {\n            channelManager.handleBridgeEvent((BridgeEvent) event);\n        }\n        else if (event instanceof RenameEvent)\n        {\n            channelManager.handleRenameEvent((RenameEvent) event);\n        }\n        else if (event instanceof HangupEvent)\n        {\n            channelManager.handleHangupEvent((HangupEvent) event);\n        }\n        else if (event instanceof CdrEvent)\n        {\n            channelManager.handleCdrEvent((CdrEvent) event);\n        }\n        else if (event instanceof VarSetEvent)\n        {\n            channelManager.handleVarSetEvent((VarSetEvent) event);\n        }\n        else if (event instanceof DtmfEvent)\n        {\n            channelManager.handleDtmfEvent((DtmfEvent) event);\n        }\n        else if (event instanceof MonitorStartEvent)\n        {\n            channelManager.handleMonitorStartEvent((MonitorStartEvent) event);\n        }\n        else if (event instanceof MonitorStopEvent)\n        {\n            channelManager.handleMonitorStopEvent((MonitorStopEvent) event);\n        }\n        // End of channel related events\n        // Handle parking related event\n        else if (event instanceof ParkedCallEvent)\n        {\n            channelManager.handleParkedCallEvent((ParkedCallEvent) event);\n        }\n        else if (event instanceof ParkedCallGiveUpEvent)\n        {\n            channelManager.handleParkedCallGiveUpEvent((ParkedCallGiveUpEvent) event);\n        }\n        else if (event instanceof ParkedCallTimeOutEvent)\n        {\n            channelManager.handleParkedCallTimeOutEvent((ParkedCallTimeOutEvent) event);\n        }\n        else if (event instanceof UnparkedCallEvent)\n        {\n            channelManager.handleUnparkedCallEvent((UnparkedCallEvent) event);\n        }\n        // End of parking related events\n        // Handle queue related event\n        else if (event instanceof JoinEvent)\n        {\n            queueManager.handleJoinEvent((JoinEvent) event);\n        }\n        else if (event instanceof LeaveEvent)\n        {\n            queueManager.handleLeaveEvent((LeaveEvent) event);\n        }\n        else if (event instanceof QueueMemberStatusEvent)\n        {\n            queueManager.handleQueueMemberStatusEvent((QueueMemberStatusEvent) event);\n        }\n        else if (event instanceof QueueMemberPenaltyEvent)\n        {\n            queueManager.handleQueueMemberPenaltyEvent((QueueMemberPenaltyEvent) event);\n        }\n        else if (event instanceof QueueMemberAddedEvent)\n        {\n            queueManager.handleQueueMemberAddedEvent((QueueMemberAddedEvent) event);\n        }\n        else if (event instanceof QueueMemberRemovedEvent)\n        {\n            queueManager.handleQueueMemberRemovedEvent((QueueMemberRemovedEvent) event);\n        }\n        else if (event instanceof QueueMemberPausedEvent)\n        {\n            queueManager.handleQueueMemberPausedEvent((QueueMemberPausedEvent) event);\n        }\n        // >>>>>> AJ 94\n        // Handle meetMeEvents\n        else if (event instanceof AbstractMeetMeEvent)\n        {\n            meetMeManager.handleMeetMeEvent((AbstractMeetMeEvent) event);\n        }\n        else if (event instanceof OriginateResponseEvent)\n        {\n            handleOriginateEvent((OriginateResponseEvent) event);\n        }\n        // Handle agents-related events\n        else if (event instanceof AgentsEvent)\n        {\n            agentManager.handleAgentsEvent((AgentsEvent) event);\n        }\n        else if (event instanceof AgentCalledEvent)\n        {\n            agentManager.handleAgentCalledEvent((AgentCalledEvent) event);\n        }\n        else if (event instanceof AgentConnectEvent)\n        {\n            agentManager.handleAgentConnectEvent((AgentConnectEvent) event);\n        }\n        else if (event instanceof AgentCompleteEvent)\n        {\n            agentManager.handleAgentCompleteEvent((AgentCompleteEvent) event);\n        }\n        else if (event instanceof AgentCallbackLoginEvent)\n        {\n            agentManager.handleAgentCallbackLoginEvent((AgentCallbackLoginEvent) event);\n        }\n        else if (event instanceof AgentCallbackLogoffEvent)\n        {\n            agentManager.handleAgentCallbackLogoffEvent((AgentCallbackLogoffEvent) event);\n        }\n        else if (event instanceof AgentLoginEvent)\n        {\n            agentManager.handleAgentLoginEvent((AgentLoginEvent) event);\n        }\n        else if (event instanceof AgentLogoffEvent)\n        {\n            agentManager.handleAgentLogoffEvent((AgentLogoffEvent) event);\n        }\n        // End of agent-related events\n\n        // dispatch the events to the chainListener if they exist.\n        fireChainListeners(event);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Handles all events received from the Asterisk server. <br> Events are queued until channels and queues are initialized and then delegated to the dispatchEvent method.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskServerImpl.handleConnectEvent", "org.asteriskjava.live.internal.AsteriskServerImpl.handleDisconnectEvent", "org.asteriskjava.live.internal.ChannelManager.handleNewChannelEvent", "org.asteriskjava.live.internal.ChannelManager.handleNewExtenEvent", "org.asteriskjava.live.internal.ChannelManager.handleNewStateEvent", "org.asteriskjava.live.internal.ChannelManager.handleNewCallerIdEvent", "org.asteriskjava.live.internal.ChannelManager.handleDialEvent", "org.asteriskjava.live.internal.ChannelManager.handleBridgeEvent", "org.asteriskjava.live.internal.ChannelManager.handleRenameEvent", "org.asteriskjava.live.internal.ChannelManager.handleHangupEvent", "org.asteriskjava.live.internal.ChannelManager.handleCdrEvent", "org.asteriskjava.live.internal.ChannelManager.handleVarSetEvent", "org.asteriskjava.live.internal.ChannelManager.handleDtmfEvent", "org.asteriskjava.live.internal.ChannelManager.handleMonitorStartEvent", "org.asteriskjava.live.internal.ChannelManager.handleMonitorStopEvent", "org.asteriskjava.live.internal.ChannelManager.handleParkedCallEvent", "org.asteriskjava.live.internal.ChannelManager.handleParkedCallGiveUpEvent", "org.asteriskjava.live.internal.ChannelManager.handleParkedCallTimeOutEvent", "org.asteriskjava.live.internal.ChannelManager.handleUnparkedCallEvent", "org.asteriskjava.live.internal.QueueManager.handleJoinEvent", "org.asteriskjava.live.internal.QueueManager.handleLeaveEvent", "org.asteriskjava.live.internal.QueueManager.handleQueueMemberStatusEvent", "org.asteriskjava.live.internal.QueueManager.handleQueueMemberPenaltyEvent", "org.asteriskjava.live.internal.QueueManager.handleQueueMemberAddedEvent", "org.asteriskjava.live.internal.QueueManager.handleQueueMemberRemovedEvent", "org.asteriskjava.live.internal.QueueManager.handleQueueMemberPausedEvent", "org.asteriskjava.live.internal.MeetMeManager.handleMeetMeEvent", "org.asteriskjava.live.internal.AsteriskServerImpl.handleOriginateEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentsEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentCalledEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentConnectEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentCompleteEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentCallbackLoginEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentCallbackLogoffEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentLoginEvent", "org.asteriskjava.live.internal.AgentManager.handleAgentLogoffEvent", "org.asteriskjava.live.internal.AsteriskServerImpl.fireChainListeners"], "call_func_parameter": [["org.asteriskjava.manager.event.ConnectEvent"], ["org.asteriskjava.manager.event.DisconnectEvent"], ["org.asteriskjava.manager.event.NewChannelEvent"], ["org.asteriskjava.manager.event.NewExtenEvent"], ["org.asteriskjava.manager.event.NewStateEvent"], ["org.asteriskjava.manager.event.NewCallerIdEvent"], ["org.asteriskjava.manager.event.DialEvent"], ["org.asteriskjava.manager.event.BridgeEvent"], ["org.asteriskjava.manager.event.RenameEvent"], ["org.asteriskjava.manager.event.HangupEvent"], ["org.asteriskjava.manager.event.CdrEvent"], ["org.asteriskjava.manager.event.VarSetEvent"], ["org.asteriskjava.manager.event.DtmfEvent"], ["org.asteriskjava.manager.event.MonitorStartEvent"], ["org.asteriskjava.manager.event.MonitorStopEvent"], ["org.asteriskjava.manager.event.ParkedCallEvent"], ["org.asteriskjava.manager.event.ParkedCallGiveUpEvent"], ["org.asteriskjava.manager.event.ParkedCallTimeOutEvent"], ["org.asteriskjava.manager.event.UnparkedCallEvent"], ["org.asteriskjava.manager.event.JoinEvent"], ["org.asteriskjava.manager.event.LeaveEvent"], ["org.asteriskjava.manager.event.QueueMemberStatusEvent"], ["org.asteriskjava.manager.event.QueueMemberPenaltyEvent"], ["org.asteriskjava.manager.event.QueueMemberAddedEvent"], ["org.asteriskjava.manager.event.QueueMemberRemovedEvent"], ["org.asteriskjava.manager.event.QueueMemberPausedEvent"], ["org.asteriskjava.manager.event.AbstractMeetMeEvent"], ["org.asteriskjava.manager.event.OriginateResponseEvent"], ["org.asteriskjava.manager.event.AgentsEvent"], ["org.asteriskjava.manager.event.AgentCalledEvent"], ["org.asteriskjava.manager.event.AgentConnectEvent"], ["org.asteriskjava.manager.event.AgentCompleteEvent"], ["org.asteriskjava.manager.event.AgentCallbackLoginEvent"], ["org.asteriskjava.manager.event.AgentCallbackLogoffEvent"], ["org.asteriskjava.manager.event.AgentLoginEvent"], ["org.asteriskjava.manager.event.AgentLogoffEvent"], ["org.asteriskjava.manager.event.ManagerEvent"]], "passed_comments": [{"org.asteriskjava.live.internal.QueueManager.handleJoinEvent": "Called from AsteriskServerImpl whenever a new entry appears in a queue."}, {"org.asteriskjava.live.internal.QueueManager.handleLeaveEvent": "Called from AsteriskServerImpl whenever an enty leaves a queue."}, {"org.asteriskjava.live.internal.QueueManager.handleQueueMemberStatusEvent": "Challange a QueueMemberStatusEvent. Called from AsteriskServerImpl whenever a member state changes."}, {"org.asteriskjava.live.internal.QueueManager.handleQueueMemberAddedEvent": "Challange a QueueMemberAddedEvent."}, {"org.asteriskjava.live.internal.QueueManager.handleQueueMemberRemovedEvent": "Challange a QueueMemberRemovedEvent."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentsEvent": "On AgentsEvent create a new Agent."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentCalledEvent": "Update state if agent was called."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentConnectEvent": "Update state if agent was connected to channel."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentCompleteEvent": "Change state if connected call was terminated."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentCallbackLoginEvent": "Change state if agent logs in."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentCallbackLogoffEvent": "Change state if agent logs out."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentLoginEvent": "Change state if agent logs in."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentLogoffEvent": "Change state if agent logs out."}, {"org.asteriskjava.live.internal.AsteriskServerImpl.fireChainListeners": "dispatch the event to the chainListener if they exist."}]}, {"index": "230", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskServerImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskServerImpl.fireChainListeners", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "private void fireChainListeners(ManagerEvent event)\n    {\n        synchronized (this.chainListeners)\n        {\n            for (ManagerEventListener listener : this.chainListeners)\n                listener.onManagerEvent(event);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "dispatch the event to the chainListener if they exist.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.manager.ManagerEventListener.onManagerEvent"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.manager.event.ManagerEvent"]], "passed_comments": [{"org.asteriskjava.manager.ManagerEventListener.onManagerEvent": "This method is called when an event is received."}]}, {"index": "231", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/MeetMeManager.java", "methodName": "org.asteriskjava.live.internal.MeetMeManager.getOrCreateRoomImpl", "methodParameterType": "String#", "methodParameterName": "roomNumber#", "methodBody": "MeetMeRoomImpl getOrCreateRoomImpl(String roomNumber)\n    {\n        MeetMeRoomImpl room;\n        boolean created = false;\n\n        synchronized (rooms)\n        {\n            room = rooms.get(roomNumber);\n            if (room == null)\n            {\n                room = new MeetMeRoomImpl(server, roomNumber);\n                populateRoom(room);\n                rooms.put(roomNumber, room);\n                created = true;\n            }\n        }\n\n        if (created)\n        {\n            logger.debug(\"Created MeetMeRoom \" + roomNumber);\n        }\n\n        return room;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the room with the given number or creates a new one if none is there yet.", "call_func_name": ["java.util.Map.get", "org.asteriskjava.live.internal.MeetMeRoomImpl.<init>", "org.asteriskjava.live.internal.MeetMeManager.populateRoom", "java.util.Map.put", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug"], "call_func_parameter": [["java.lang.Object"], ["org.asteriskjava.live.internal.AsteriskServerImpl", "java.lang.String"], ["org.asteriskjava.live.internal.MeetMeRoomImpl"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "232", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/ManagerCommunicationExceptionMapper.java", "methodName": "org.asteriskjava.live.internal.ManagerCommunicationExceptionMapper.mapSendActionException", "methodParameterType": "String#Exception#", "methodParameterName": "actionName#exception#", "methodBody": "static ManagerCommunicationException mapSendActionException(String actionName, Exception exception)\n    {\n        if (exception instanceof IllegalStateException)\n        {\n            return new ManagerCommunicationException(\"Not connected to Asterisk Server\", exception);\n        }\n        else if (exception instanceof EventTimeoutException)\n        {\n            return new ManagerCommunicationException(\"Timeout waiting for events from \" + actionName + \"Action\", exception);\n        }\n        else\n        {\n            return new ManagerCommunicationException(\"Unable to send \" + actionName + \"Action\", exception);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Maps exceptions received from {@link org.asteriskjava.manager.ManagerConnection} when sending a{@link org.asteriskjava.manager.action.ManagerAction} to the corresponding{@link org.asteriskjava.live.ManagerCommunicationException}.", "call_func_name": ["org.asteriskjava.live.ManagerCommunicationException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "233", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueEntryImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.left", "methodParameterType": "Date#", "methodParameterName": "dateLeft#", "methodBody": "void left(Date dateLeft)\n    {\n        QueueEntryState oldState;\n        synchronized (this)\n        {\n            oldState = this.state;\n            this.dateLeft = dateLeft;\n            this.state = QueueEntryState.LEFT;\n        }\n        firePropertyChange(PROPERTY_STATE, oldState, state);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#ThisExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(ThisExpression)ThisExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status to  {@link QueueEntryState#LEFT} and dateLeft to the given date.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskQueueEntryImpl.firePropertyChange"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueEntryImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.getReportedPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getReportedPosition()\n    {\n        return reportedPosition;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the position as reported by Asterisk when the entry was created. Currently we don't update this property as the entry shifts through the queue, see getPosition() instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "235", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueEntryImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getPosition()\n    {\n        return position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the position in the queue based on the queue's internal list <br> As Asterisk doesn't send events when it shifts entries in the queue we'll base our positions on our internal queue entries ordered list. It should be coherent as entries are always added at the end of the queue and we don't mind if it is different from asterisk's view as long as the relative order stays the same. Most of the time the position will be the same but right after asterisk removes an entry it could differ as the shift occurs asynchronously in asterisk queues. As a consequence we might have temporary holes in the asterisk numbering.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "236", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/OriginateCallbackData.java", "methodName": "org.asteriskjava.live.internal.OriginateCallbackData.OriginateCallbackData", "methodParameterType": "OriginateAction#Date#OriginateCallback#", "methodParameterName": "originateAction#dateSent#callback#", "methodBody": "OriginateCallbackData(OriginateAction originateAction, Date dateSent, OriginateCallback callback)\n    {\n        super();\n        this.originateAction = originateAction;\n        this.dateSent = dateSent;\n        this.callback = callback;\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "237", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void initialize() throws ManagerCommunicationException\n    {\n        ResponseEvents re;\n\n        re = server.sendEventGeneratingAction(new AgentsAction());\n\n        for (ManagerEvent event : re.getEvents())\n        {\n            if (event instanceof AgentsEvent)\n            {\n                logger.info( event );\n                handleAgentsEvent((AgentsEvent) event);\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Retrieves all agents registered at Asterisk server by sending an AgentsAction.", "call_func_name": ["org.asteriskjava.manager.action.AgentsAction.<init>", "org.asteriskjava.live.internal.AsteriskServerImpl.sendEventGeneratingAction", "org.asteriskjava.manager.ResponseEvents.getEvents", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.util.Log.info", "org.asteriskjava.live.internal.AgentManager.handleAgentsEvent"], "call_func_parameter": [[""], ["org.asteriskjava.manager.action.EventGeneratingAction"], [""], [""], [""], [""], ["java.lang.Object"], ["org.asteriskjava.manager.event.AgentsEvent"]], "passed_comments": [{"org.asteriskjava.manager.ResponseEvents.getEvents": "Returns a Collection of ManagerEvents that have been received including the last one that indicates completion."}, {"org.asteriskjava.live.internal.AgentManager.handleAgentsEvent": "On AgentsEvent create a new Agent."}]}, {"index": "238", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentsEvent", "methodParameterType": "AgentsEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentsEvent(AgentsEvent event)\n    {\n        AsteriskAgentImpl agent = new AsteriskAgentImpl(server,\n                event.getName(), \"Agent/\" + event.getAgent(), AgentState.valueOf(event.getStatus()));\n        logger.info(\"Adding agent \" + agent.getName() + \"(\" + agent.getAgentId() + \")\");\n\n        addAgent(agent);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "On AgentsEvent create a new Agent.", "call_func_name": ["org.asteriskjava.manager.event.AgentsEvent.getName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.event.AgentsEvent.getAgent", "java.lang.StringBuilder.toString", "org.asteriskjava.manager.event.AgentsEvent.getStatus", "org.asteriskjava.live.AgentState.valueOf", "org.asteriskjava.live.internal.AsteriskAgentImpl.<init>", "org.asteriskjava.live.internal.AsteriskAgentImpl.getName", "org.asteriskjava.live.internal.AsteriskAgentImpl.getAgentId", "org.asteriskjava.util.Log.info", "org.asteriskjava.live.internal.AgentManager.addAgent"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["org.asteriskjava.live.internal.AsteriskServerImpl", "java.lang.String", "java.lang.String", "org.asteriskjava.live.AgentState"], [""], [""], ["java.lang.Object"], ["org.asteriskjava.live.internal.AsteriskAgentImpl"]], "passed_comments": [{"org.asteriskjava.manager.event.AgentsEvent.getName": "Returns the name of this agent."}, {"org.asteriskjava.manager.event.AgentsEvent.getAgent": "Returns the agentid."}, {"org.asteriskjava.manager.event.AgentsEvent.getStatus": "Returns the status of this agent. <p> This is one of <dl> <dt>\"AGENT_LOGGEDOFF\"</dt> <dd>Agent isn't logged in</dd> <dt>\"AGENT_IDLE\"</dt> <dd>Agent is logged in and waiting for call</dd> <dt>\"AGENT_ONCALL\"</dt> <dd>Agent is logged in and on a call</dd> <dt>\"AGENT_UNKNOWN\"</dt> <dd>Don't know anything about agent. Shouldn't ever get this.</dd> </dl>"}, {"org.asteriskjava.live.internal.AgentManager.addAgent": "Add a new agent to the manager."}]}, {"index": "239", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.addAgent", "methodParameterType": "AsteriskAgentImpl#", "methodParameterName": "agent#", "methodBody": "private void addAgent(AsteriskAgentImpl agent)\n    {\n        synchronized (agents)\n        {\n            agents.put(agent.getAgentId(), agent);\n        }\n        server.fireNewAgent(agent);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a new agent to the manager.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskAgentImpl.getAgentId", "java.util.Map.put", "org.asteriskjava.live.internal.AsteriskServerImpl.fireNewAgent"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], ["org.asteriskjava.live.internal.AsteriskAgentImpl"]], "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "methodParameterType": "String#", "methodParameterName": "agentId#", "methodBody": "AsteriskAgentImpl getAgentByAgentId(String agentId)\n    {\n        synchronized (agents)\n        {\n            return agents.get(agentId);\n        }\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Return the requested agent.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentCalledEvent", "methodParameterType": "AgentCalledEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentCalledEvent(AgentCalledEvent event)\n    {\n        AsteriskAgentImpl agent = getAgentByAgentId(event.getAgentCalled());\n        if (agent == null)\n        {\n            logger.error(\"Ignored AgentCalledEvent for unknown agent \" + event.getAgentCalled());\n            return;\n        }\n        updateRingingAgents(event.getChannelCalling(), agent);\n        updateAgentState(agent, AgentState.AGENT_RINGING);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Update state if agent was called.", "call_func_name": ["org.asteriskjava.manager.event.AgentCalledEvent.getAgentCalled", "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.manager.event.AgentCalledEvent.getChannelCalling", "org.asteriskjava.live.internal.AgentManager.updateRingingAgents", "org.asteriskjava.live.internal.AgentManager.updateAgentState"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String", "org.asteriskjava.live.internal.AsteriskAgentImpl"], ["org.asteriskjava.live.internal.AsteriskAgentImpl", "org.asteriskjava.live.AgentState"]], "passed_comments": [{"org.asteriskjava.manager.event.AgentCalledEvent.getAgentCalled": "Returns the member interface of the agent that has been called."}, {"org.asteriskjava.live.internal.AgentManager.getAgentByAgentId": "Return the requested agent."}, {"org.asteriskjava.manager.event.AgentCalledEvent.getChannelCalling": "Returns the name of the caller's channel that is about to be handled by the agent."}, {"org.asteriskjava.live.internal.AgentManager.updateRingingAgents": "Updates state of agent, if the call in a queue was redirect to the next agent because the ringed agent doesn't answer the call. After reset state, put the next agent in charge."}, {"org.asteriskjava.live.internal.AgentManager.updateAgentState": "Set state of agent."}]}, {"index": "242", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.updateAgentState", "methodParameterType": "AsteriskAgentImpl#AgentState#", "methodParameterName": "agent#newState#", "methodBody": "private void updateAgentState(AsteriskAgentImpl agent, AgentState newState)\n    {\n        logger.info(\"Set state of agent \" + agent.getAgentId() + \" to \" + newState);\n        synchronized (agent)\n        {\n            agent.updateState(newState);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Set state of agent.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.live.internal.AsteriskAgentImpl.getAgentId", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "org.asteriskjava.live.internal.AsteriskAgentImpl.updateState"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["org.asteriskjava.live.AgentState"]], "passed_comments": "/"}, {"index": "243", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.updateRingingAgents", "methodParameterType": "String#AsteriskAgentImpl#", "methodParameterName": "channelCalling#agent#", "methodBody": "private void updateRingingAgents(String channelCalling, AsteriskAgentImpl agent)\n    {\n        synchronized (ringingAgents)\n        {\n            if (ringingAgents.containsKey(channelCalling))\n            {\n                updateAgentState(ringingAgents.get(channelCalling), AgentState.AGENT_IDLE);\n            }\n            ringingAgents.put(channelCalling, agent);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Updates state of agent, if the call in a queue was redirect to the next agent because the ringed agent doesn't answer the call. After reset state, put the next agent in charge.", "call_func_name": ["java.util.Map.containsKey", "java.util.Map.get", "org.asteriskjava.live.internal.AgentManager.updateAgentState", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["org.asteriskjava.live.internal.AsteriskAgentImpl", "org.asteriskjava.live.AgentState"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.asteriskjava.live.internal.AgentManager.updateAgentState": "Set state of agent."}]}, {"index": "244", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentConnectEvent", "methodParameterType": "AgentConnectEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentConnectEvent(AgentConnectEvent event)\n    {\n        AsteriskAgentImpl agent = getAgentByAgentId(event.getChannel());\n        if (agent == null)\n        {\n            logger.error(\"Ignored AgentConnectEvent for unknown agent \" + event.getChannel());\n            return;\n        }\n        agent.updateState(AgentState.AGENT_ONCALL);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Update state if agent was connected to channel.", "call_func_name": ["org.asteriskjava.manager.event.AgentConnectEvent.getChannel", "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskAgentImpl.updateState"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["org.asteriskjava.live.AgentState"]], "passed_comments": [{"org.asteriskjava.live.internal.AgentManager.getAgentByAgentId": "Return the requested agent."}]}, {"index": "245", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentLoginEvent", "methodParameterType": "AgentLoginEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentLoginEvent(AgentLoginEvent event)\n    {\n        AsteriskAgentImpl agent = getAgentByAgentId(\"Agent/\" + event.getAgent());\n        if (agent == null)\n        {\n            synchronized (agents)\n            {\n                logger.error(\"Ignored AgentLoginEvent for unknown agent \"\n                                + event.getAgent() + \". Agents: \" + agents.values().toString());\n\n            }\n            return;\n        }\n        agent.updateState(AgentState.AGENT_IDLE);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Change state if agent logs in.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.event.AgentLoginEvent.getAgent", "java.lang.StringBuilder.toString", "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "java.util.Map.values", "java.lang.Object.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskAgentImpl.updateState"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["org.asteriskjava.live.AgentState"]], "passed_comments": [{"org.asteriskjava.manager.event.AgentLoginEvent.getAgent": "Returns the name of the agent that logged in."}, {"org.asteriskjava.live.internal.AgentManager.getAgentByAgentId": "Return the requested agent."}]}, {"index": "246", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentLogoffEvent", "methodParameterType": "AgentLogoffEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentLogoffEvent(AgentLogoffEvent event)\n    {\n        AsteriskAgentImpl agent = getAgentByAgentId(\"Agent/\" + event.getAgent());\n        if (agent == null)\n        {\n            logger.error(\"Ignored AgentLogoffEvent for unknown agent \"\n                    + event.getAgent() + \". Agents: \"\n                    + agents.values().toString());\n            return;\n        }\n        agent.updateState(AgentState.AGENT_LOGGEDOFF);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Change state if agent logs out.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.event.AgentLogoffEvent.getAgent", "java.lang.StringBuilder.toString", "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "java.util.Map.values", "java.lang.Object.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskAgentImpl.updateState"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["org.asteriskjava.live.AgentState"]], "passed_comments": [{"org.asteriskjava.manager.event.AgentLogoffEvent.getAgent": "Returns the name of the agent that logged off."}, {"org.asteriskjava.live.internal.AgentManager.getAgentByAgentId": "Return the requested agent."}]}, {"index": "247", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentCallbackLoginEvent", "methodParameterType": "AgentCallbackLoginEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentCallbackLoginEvent(AgentCallbackLoginEvent event)\n    {\n        AsteriskAgentImpl agent = getAgentByAgentId(\"Agent/\" + event.getAgent());\n        if (agent == null)\n        {\n            synchronized (agents)\n            {\n                logger.error(\"Ignored AgentCallbackLoginEvent for unknown agent \"\n                                + event.getAgent() + \". Agents: \" + agents.values().toString());\n\n            }\n            return;\n        }\n        agent.updateState(AgentState.AGENT_IDLE);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Change state if agent logs in.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.event.AgentCallbackLoginEvent.getAgent", "java.lang.StringBuilder.toString", "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "java.util.Map.values", "java.lang.Object.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskAgentImpl.updateState"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["org.asteriskjava.live.AgentState"]], "passed_comments": [{"org.asteriskjava.manager.event.AgentCallbackLoginEvent.getAgent": "Returns the name of the agent that logged in."}, {"org.asteriskjava.live.internal.AgentManager.getAgentByAgentId": "Return the requested agent."}]}, {"index": "248", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentCallbackLogoffEvent", "methodParameterType": "AgentCallbackLogoffEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentCallbackLogoffEvent(AgentCallbackLogoffEvent event)\n    {\n        AsteriskAgentImpl agent = getAgentByAgentId(\"Agent/\" + event.getAgent());\n        if (agent == null)\n        {\n            logger.error(\"Ignored AgentCallbackLogoffEvent for unknown agent \"\n                    + event.getAgent() + \". Agents: \"\n                    + agents.values().toString());\n            return;\n        }\n        agent.updateState(AgentState.AGENT_LOGGEDOFF);\n\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Change state if agent logs out.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.event.AgentCallbackLogoffEvent.getAgent", "java.lang.StringBuilder.toString", "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "java.util.Map.values", "java.lang.Object.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskAgentImpl.updateState"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["org.asteriskjava.live.AgentState"]], "passed_comments": [{"org.asteriskjava.manager.event.AgentCallbackLogoffEvent.getAgent": "Returns the name of the agent that logged off."}, {"org.asteriskjava.live.internal.AgentManager.getAgentByAgentId": "Return the requested agent."}]}, {"index": "249", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.getAgents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AsteriskAgent> getAgents()\n    {\n        Collection<AsteriskAgent> copy;\n\n        synchronized (agents)\n        {\n            copy = new ArrayList<AsteriskAgent>(agents.values());\n        }\n        return copy;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return all agents registered at Asterisk server.", "call_func_name": ["java.util.Map.values", "java.util.ArrayList.<init>"], "call_func_parameter": [[""], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AgentManager.java", "methodName": "org.asteriskjava.live.internal.AgentManager.handleAgentCompleteEvent", "methodParameterType": "AgentCompleteEvent#", "methodParameterName": "event#", "methodBody": "void handleAgentCompleteEvent(AgentCompleteEvent event)\n    {\n        AsteriskAgentImpl agent = getAgentByAgentId(event.getChannel());\n        if (agent == null)\n        {\n            logger.error(\"Ignored AgentCompleteEvent for unknown agent \" + event.getChannel());\n            return;\n        }\n        agent.updateState(AgentState.AGENT_IDLE);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Change state if connected call was terminated.", "call_func_name": ["org.asteriskjava.manager.event.AgentCompleteEvent.getChannel", "org.asteriskjava.live.internal.AgentManager.getAgentByAgentId", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "org.asteriskjava.live.internal.AsteriskAgentImpl.updateState"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["org.asteriskjava.live.AgentState"]], "passed_comments": [{"org.asteriskjava.live.internal.AgentManager.getAgentByAgentId": "Return the requested agent."}]}, {"index": "251", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueMemberImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.AsteriskQueueMemberImpl", "methodParameterType": "AsteriskServerImpl#AsteriskQueueImpl#String#QueueMemberState#boolean#Integer#String#Integer#Long#", "methodParameterName": "server#queue#location#state#paused#penalty#membership#callsTaken#lastCall#", "methodBody": "AsteriskQueueMemberImpl(final AsteriskServerImpl server, final AsteriskQueueImpl queue, String location,\n            QueueMemberState state, boolean paused, Integer penalty, String membership, Integer callsTaken, Long lastCall)\n    {\n        super(server);\n        this.queue = queue;\n        this.location = location;\n        this.state = state;\n        this.penalty = penalty;\n        this.paused = paused;\n        this.callsTaken = callsTaken;\n        this.lastCall = lastCall;\n        this.membership = membership;\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new queue member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueMemberImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.getLastCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Long getLastCall()\n    {\n        return lastCall;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time the last successful call answered by the added member was hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "253", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setMax", "methodParameterType": "Integer#", "methodParameterName": "max#", "methodBody": "boolean setMax(Integer max)\n    {\n    \tif(!AstUtil.isEqual(this.max, max)){\n    \t\tthis.max = max;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param max", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "254", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setServiceLevel", "methodParameterType": "Integer#", "methodParameterName": "serviceLevel#", "methodBody": "boolean setServiceLevel(Integer serviceLevel)\n    {\n    \tif(!AstUtil.isEqual(this.serviceLevel, serviceLevel)){\n    \t\tthis.serviceLevel = serviceLevel;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param serviceLevel", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "255", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setCalls", "methodParameterType": "Integer#", "methodParameterName": "calls#", "methodBody": "boolean setCalls(Integer calls) {\n    \tif(!AstUtil.isEqual(this.calls, calls)){\n    \t\tthis.calls = calls;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param calls", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "256", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setHoldTime", "methodParameterType": "Integer#", "methodParameterName": "holdTime#", "methodBody": "boolean setHoldTime(Integer holdTime) {\n    \tif(!AstUtil.isEqual(this.holdTime, holdTime)){\n    \t\tthis.holdTime = holdTime;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param holdTime", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "257", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setTalkTime", "methodParameterType": "Integer#", "methodParameterName": "talkTime#", "methodBody": "boolean setTalkTime(Integer talkTime) {\n    \tif(!AstUtil.isEqual(this.talkTime, talkTime)){\n    \t\tthis.talkTime = talkTime;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param talkTime", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "258", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setCompleted", "methodParameterType": "Integer#", "methodParameterName": "completed#", "methodBody": "boolean setCompleted(Integer completed) {\n    \tif(!AstUtil.isEqual(this.completed, completed)){\n    \t\tthis.completed = completed;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param completed", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "259", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setAbandoned", "methodParameterType": "Integer#", "methodParameterName": "abandoned#", "methodBody": "boolean setAbandoned(Integer abandoned) {\n\t\tif(!AstUtil.isEqual(this.abandoned, abandoned)){\n\t\t\tthis.abandoned = abandoned;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param abandoned", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "260", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setServiceLevelPerf", "methodParameterType": "Double#", "methodParameterName": "serviceLevelPerf#", "methodBody": "boolean setServiceLevelPerf(Double serviceLevelPerf) {\n\t\tif(!AstUtil.isEqual(this.serviceLevelPerf, serviceLevelPerf)){\n\t\t\tthis.serviceLevelPerf = serviceLevelPerf;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param serviceLevelPerf", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "261", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.setWeight", "methodParameterType": "Integer#", "methodParameterName": "weight#", "methodBody": "boolean setWeight(Integer weight)\n    {\n    \tif(!AstUtil.isEqual(this.weight, weight)){\n    \t\tthis.weight = weight;\n\t\t\tstampLastUpdate();\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param weight", "call_func_name": ["org.asteriskjava.util.AstUtil.isEqual", "org.asteriskjava.live.internal.AsteriskQueueImpl.stampLastUpdate"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.AstUtil.isEqual": "@param a an object"}]}, {"index": "262", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.shift", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void shift()\n    {\n        int currentPos = 1; // Asterisk starts at 1\n\n        synchronized (entries)\n        {\n            for (AsteriskQueueEntryImpl qe : entries)\n            {\n                // Only set (and fire PCE on qe) if necessary\n                if (qe.getPosition() != currentPos)\n                {\n                    qe.setPosition(currentPos);\n                }\n                currentPos++;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Shifts the position of the queue entries if needed (and fire PCE on queue entries if appropriate).", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.getPosition", "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.setPosition"], "call_func_parameter": [[""], [""], [""], [""], ["int"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueEntryImpl.getPosition": "Gets the position in the queue based on the queue's internal list <br> As Asterisk doesn't send events when it shifts entries in the queue we'll base our positions on our internal queue entries ordered list. It should be coherent as entries are always added at the end of the queue and we don't mind if it is different from asterisk's view as long as the relative order stays the same. Most of the time the position will be the same but right after asterisk removes an entry it could differ as the shift occurs asynchronously in asterisk queues. As a consequence we might have temporary holes in the asterisk numbering."}]}, {"index": "263", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.createNewEntry", "methodParameterType": "AsteriskChannelImpl#int#Date#", "methodParameterName": "channel#reportedPosition#dateReceived#", "methodBody": "void createNewEntry(AsteriskChannelImpl channel, int reportedPosition, Date dateReceived)\n    {\n        AsteriskQueueEntryImpl qe = new AsteriskQueueEntryImpl(server, this, channel, reportedPosition, dateReceived);\n\n        long delay = serviceLevel * 1000L;\n        if (delay > 0)\n        {\n            ServiceLevelTimerTask timerTask = new ServiceLevelTimerTask(qe);\n            timer.schedule(timerTask, delay);\n            synchronized (serviceLevelTimerTasks)\n            {\n                serviceLevelTimerTasks.put(qe, timerTask);\n            }\n        }\n\n        synchronized (entries)\n        {\n            entries.add(qe); // at the end of the list\n\n            // Keep the lock !\n            // This will fire PCE on the newly created queue entry\n            // but hopefully this one has no listeners yet\n            shift();\n        }\n\n        // Set the channel property ony here as queue entries and channels\n        // maintain a reciprocal reference.\n        // That way property change on channel and new entry event on queue will be\n        // lanched when BOTH channel and queue are correctly set.\n        channel.setQueueEntry(qe);\n        fireNewEntry(qe);\n        server.fireNewQueueEntry(qe);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)IfStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AsteriskQueueEntry, adds it to this queue.<p> Fires: <ul> <li>PCE on channel</li> <li>NewEntry on this queue</li> <li>PCE on other queue entries if shifted (never happens)</li> <li>NewQueueEntry on server</li> </ul>", "call_func_name": ["org.asteriskjava.live.internal.AsteriskQueueEntryImpl.<init>", "java.lang.Integer.intValue", "java.util.Timer.schedule", "java.util.Map.put", "java.util.List.add", "org.asteriskjava.live.internal.AsteriskQueueImpl.shift", "org.asteriskjava.live.internal.AsteriskChannelImpl.setQueueEntry", "org.asteriskjava.live.internal.AsteriskQueueImpl.fireNewEntry", "org.asteriskjava.live.internal.AsteriskServerImpl.fireNewQueueEntry"], "call_func_parameter": [["org.asteriskjava.live.internal.AsteriskServerImpl", "org.asteriskjava.live.internal.AsteriskQueueImpl", "org.asteriskjava.live.internal.AsteriskChannelImpl", "int", "java.util.Date"], [""], ["java.util.TimerTask", "long"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], ["org.asteriskjava.live.internal.AsteriskQueueEntryImpl"], ["org.asteriskjava.live.internal.AsteriskQueueEntryImpl"], ["org.asteriskjava.live.AsteriskQueueEntry"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueImpl.shift": "Shifts the position of the queue entries if needed (and fire PCE on queue entries if appropriate)."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.fireNewEntry": "Notifies all registered listener that an entry joins the queue."}]}, {"index": "264", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.removeEntry", "methodParameterType": "AsteriskQueueEntryImpl#Date#", "methodParameterName": "entry#dateReceived#", "methodBody": "void removeEntry(AsteriskQueueEntryImpl entry, Date dateReceived)\n    {\n        synchronized (serviceLevelTimerTasks)\n        {\n            if (serviceLevelTimerTasks.containsKey(entry))\n            {\n                ServiceLevelTimerTask timerTask = serviceLevelTimerTasks.get(entry);\n                timerTask.cancel();\n                serviceLevelTimerTasks.remove(entry);\n            }\n        }\n\n        boolean changed;\n        synchronized (entries)\n        {\n            changed = entries.remove(entry);\n\n            if (changed)\n            {\n                // Keep the lock !\n                shift();\n            }\n        }\n\n        // Fire outside lock\n        if (changed)\n        {\n            entry.getChannel().setQueueEntry(null);\n            entry.left(dateReceived);\n            fireEntryLeave(entry);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Removes the given queue entry from the queue.<p> Fires if needed: <ul> <li>PCE on channel</li> <li>EntryLeave on this queue</li> <li>PCE on other queue entries if shifted</li> </ul>", "call_func_name": ["java.util.Map.containsKey", "java.util.Map.get", "java.util.Map.remove", "java.util.List.remove", "org.asteriskjava.live.internal.AsteriskQueueImpl.shift", "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.getChannel", "org.asteriskjava.live.internal.AsteriskChannelImpl.setQueueEntry", "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.left", "org.asteriskjava.live.internal.AsteriskQueueImpl.fireEntryLeave"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["org.asteriskjava.live.internal.AsteriskQueueEntryImpl"], ["java.util.Date"], ["org.asteriskjava.live.internal.AsteriskQueueEntryImpl"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueImpl.shift": "Shifts the position of the queue entries if needed (and fire PCE on queue entries if appropriate)."}, {"org.asteriskjava.live.internal.AsteriskQueueEntryImpl.left": "Sets the status to  {@link QueueEntryState#LEFT} and dateLeft to the given date."}, {"org.asteriskjava.live.internal.AsteriskQueueImpl.fireEntryLeave": "Notifies all registered listener that an entry leaves the queue."}]}, {"index": "265", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.fireNewEntry", "methodParameterType": "AsteriskQueueEntryImpl#", "methodParameterName": "entry#", "methodBody": "void fireNewEntry(AsteriskQueueEntryImpl entry)\n    {\n        synchronized (listeners)\n        {\n            for (AsteriskQueueListener listener : listeners)\n            {\n                try\n                {\n                    listener.onNewEntry(entry);\n                }\n                catch (Exception e)\n                {\n                    logger.warn(\"Exception in onNewEntry()\", e);\n                }\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Notifies all registered listener that an entry joins the queue.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.AsteriskQueueListener.onNewEntry", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.live.AsteriskQueueEntry"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.live.AsteriskQueueListener.onNewEntry": "Called whenever an entry appears in the queue."}]}, {"index": "266", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.fireEntryLeave", "methodParameterType": "AsteriskQueueEntryImpl#", "methodParameterName": "entry#", "methodBody": "void fireEntryLeave(AsteriskQueueEntryImpl entry)\n    {\n        synchronized (listeners)\n        {\n            for (AsteriskQueueListener listener : listeners)\n            {\n                try\n                {\n                    listener.onEntryLeave(entry);\n                }\n                catch (Exception e)\n                {\n                    logger.warn(\"Exception in onEntryLeave()\", e);\n                }\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Notifies all registered listener that an entry leaves the queue.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.AsteriskQueueListener.onEntryLeave", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.live.AsteriskQueueEntry"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.live.AsteriskQueueListener.onEntryLeave": "Called whenever an entry leaves the queue."}]}, {"index": "267", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberAdded", "methodParameterType": "AsteriskQueueMemberImpl#", "methodParameterName": "member#", "methodBody": "void fireMemberAdded(AsteriskQueueMemberImpl member)\n    {\n        synchronized (listeners)\n        {\n            for (AsteriskQueueListener listener : listeners)\n            {\n                try\n                {\n                    listener.onMemberAdded(member);\n                }\n                catch (Exception e)\n                {\n                    logger.warn(\"Exception in onMemberAdded()\", e);\n                }\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Notifies all registered listener that a member has been added to the queue.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.AsteriskQueueListener.onMemberAdded", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.live.AsteriskQueueMember"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.live.AsteriskQueueListener.onMemberAdded": "Called whenever a new member is added to the queue."}]}, {"index": "268", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberRemoved", "methodParameterType": "AsteriskQueueMemberImpl#", "methodParameterName": "member#", "methodBody": "void fireMemberRemoved(AsteriskQueueMemberImpl member)\n    {\n        synchronized (listeners)\n        {\n            for (AsteriskQueueListener listener : listeners)\n            {\n                try\n                {\n                    listener.onMemberRemoved(member);\n                }\n                catch (Exception e)\n                {\n                    logger.warn(\"Exception in onMemberRemoved()\", e);\n                }\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Notifies all registered listener that a member has been removed from the queue.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.AsteriskQueueListener.onMemberRemoved", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.live.AsteriskQueueMember"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.live.AsteriskQueueListener.onMemberRemoved": "Called whenever a member is removed from this queue."}]}, {"index": "269", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.getMembers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<AsteriskQueueMember> getMembers()\n    {\n        List<AsteriskQueueMember> listOfMembers = new ArrayList<>(members.size());\n        synchronized (members)\n        {\n            listOfMembers.addAll(members.values());\n        }\n        return listOfMembers;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a collection of members of this queue.", "call_func_name": ["java.util.Map.size", "java.util.ArrayList.<init>", "java.util.Map.values", "java.util.List.addAll"], "call_func_parameter": [[""], ["int"], [""], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "270", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.getMember", "methodParameterType": "String#", "methodParameterName": "location#", "methodBody": "AsteriskQueueMemberImpl getMember(String location)\n    {\n        synchronized (members)\n        {\n            if (members.containsKey(location))\n            {\n                return members.get(location);\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SynchronizedStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)SynchronizedStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a member by its location.", "call_func_name": ["java.util.Map.containsKey", "java.util.Map.get"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "271", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.addMember", "methodParameterType": "AsteriskQueueMemberImpl#", "methodParameterName": "member#", "methodBody": "void addMember(AsteriskQueueMemberImpl member)\n    {\n        synchronized (members)\n        {\n            // Check if member already exists\n            if (members.containsValue(member))\n            {\n                return;\n            }\n            // If not, add the new member.\n            logger.info(\"Adding new member to the queue \" + getName() + \": \" + member.toString());\n            members.put(member.getLocation(), member);\n        }\n\n        fireMemberAdded(member);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a new member to this queue.", "call_func_name": ["java.util.Map.containsValue", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.live.internal.AsteriskQueueImpl.getName", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.toString", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.getLocation", "java.util.Map.put", "org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberAdded"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], ["org.asteriskjava.live.internal.AsteriskQueueMemberImpl"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberAdded": "Notifies all registered listener that a member has been added to the queue."}]}, {"index": "272", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.getMemberByLocation", "methodParameterType": "String#", "methodParameterName": "location#", "methodBody": "AsteriskQueueMemberImpl getMemberByLocation(String location)\n    {\n        AsteriskQueueMemberImpl member;\n        synchronized (members)\n        {\n            member = members.get(location);\n        }\n        if (member == null)\n        {\n            logger.error(\"Requested member at location \" + location + \" not found!\");\n        }\n        return member;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)SynchronizedStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a member by its location.", "call_func_name": ["java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "273", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberStateChanged", "methodParameterType": "AsteriskQueueMemberImpl#", "methodParameterName": "member#", "methodBody": "void fireMemberStateChanged(AsteriskQueueMemberImpl member)\n    {\n        synchronized (listeners)\n        {\n            for (AsteriskQueueListener listener : listeners)\n            {\n                try\n                {\n                    listener.onMemberStateChange(member);\n                }\n                catch (Exception e)\n                {\n                    logger.warn(\"Exception in onMemberStateChange()\", e);\n                }\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Notifies all registered listener that a queue member changes its state.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.AsteriskQueueListener.onMemberStateChange", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.live.AsteriskQueueMember"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.live.AsteriskQueueListener.onMemberStateChange": "Called whenever a member changes his state."}]}, {"index": "274", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry", "methodParameterType": "String#", "methodParameterName": "channelName#", "methodBody": "AsteriskQueueEntryImpl getEntry(String channelName)\n    {\n        synchronized (entries)\n        {\n            for (AsteriskQueueEntryImpl entry : entries)\n            {\n                if (entry.getChannel().getName().equals(channelName))\n                {\n                    return entry;\n                }\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)SynchronizedStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets an entry of the queue by its channel name.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.internal.AsteriskQueueEntryImpl.getChannel", "org.asteriskjava.live.internal.AsteriskChannelImpl.getName", "java.lang.String.equals"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.removeMember", "methodParameterType": "AsteriskQueueMemberImpl#", "methodParameterName": "member#", "methodBody": "public void removeMember(AsteriskQueueMemberImpl member)\n    {\n        synchronized (members)\n        {\n            // Check if member exists\n            if (!members.containsValue(member))\n            {\n                return;\n            }\n            // If so, remove the member.\n            logger.info(\"Remove member from the queue \" + getName() + \": \"\n                    + member.toString());\n            members.remove(member.getLocation());\n        }\n\n        fireMemberRemoved(member);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes a member from this queue.", "call_func_name": ["java.util.Map.containsValue", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.live.internal.AsteriskQueueImpl.getName", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.toString", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "org.asteriskjava.live.internal.AsteriskQueueMemberImpl.getLocation", "java.util.Map.remove", "org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberRemoved"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["org.asteriskjava.live.internal.AsteriskQueueMemberImpl"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskQueueImpl.fireMemberRemoved": "Notifies all registered listener that a member has been removed from the queue."}]}, {"index": "276", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskQueueImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskQueueImpl.getEntry", "methodParameterType": "int#", "methodParameterName": "position#", "methodBody": "AsteriskQueueEntryImpl getEntry(int position)\n    {\n        // positions in asterisk start at 1, but list starts at 0\n        position--;\n        AsteriskQueueEntryImpl foundEntry = null;\n        synchronized (entries)\n        {\n            try\n            {\n                foundEntry = entries.get(position);\n            }\n            catch (IndexOutOfBoundsException e)\n            {\n                // For consistency with the above method,\n                // swallow. We might indeed request the 1st one from time to time\n            } // NOPMD\n        }\n        return foundEntry;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets an entry by its (estimated) position in the queue.", "call_func_name": ["java.util.List.get"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "277", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/ChannelManager.java", "methodName": "org.asteriskjava.live.internal.ChannelManager.ChannelManager", "methodParameterType": "AsteriskServerImpl#", "methodParameterName": "server#", "methodBody": "ChannelManager(AsteriskServerImpl server)\n    {\n        this.server = server;\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/ChannelManager.java", "methodName": "org.asteriskjava.live.internal.ChannelManager.getChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AsteriskChannel> getChannels()\n    {\n        Collection<AsteriskChannel> copy;\n\n        synchronized (channels)\n        {\n            copy = new ArrayList<>(channels.size() + 2);\n            for (AsteriskChannel channel : channels.values())\n            {\n                if (channel.getState() != ChannelState.HUNGUP)\n                {\n                    copy.add(channel);\n                }\n            }\n        }\n        return copy;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ClassInstanceCreation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a collection of all active AsteriskChannels.", "call_func_name": ["java.util.Map.size", "java.util.ArrayList.<init>", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.AsteriskChannel.getState", "java.util.Collection.add"], "call_func_parameter": [[""], ["int"], [""], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.live.AsteriskChannel.getState": "Returns the state of this channel."}]}, {"index": "279", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/ChannelManager.java", "methodName": "org.asteriskjava.live.internal.ChannelManager.removeOldChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void removeOldChannels()\n    {\n        Iterator<AsteriskChannelImpl> i;\n\n        synchronized (channels)\n        {\n            i = channels.values().iterator();\n            while (i.hasNext())\n            {\n                final AsteriskChannel channel = i.next();\n                final Date dateOfRemoval = channel.getDateOfRemoval();\n                if (channel.getState() == ChannelState.HUNGUP && dateOfRemoval != null)\n                {\n                    final long diff = DateUtil.getDate().getTime() - dateOfRemoval.getTime();\n                    if (diff >= REMOVAL_THRESHOLD)\n                    {\n                        i.remove();\n                    }\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Removes channels that have been hung more than  {@link #REMOVAL_THRESHOLD}milliseconds.", "call_func_name": ["java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.AsteriskChannel.getDateOfRemoval", "org.asteriskjava.live.AsteriskChannel.getState", "org.asteriskjava.util.DateUtil.getDate", "java.util.Date.getTime", "java.util.Iterator.remove"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"org.asteriskjava.live.AsteriskChannel.getDateOfRemoval": "Returns the date this channel has left the Asterisk server for example by a hangup."}, {"org.asteriskjava.live.AsteriskChannel.getState": "Returns the state of this channel."}, {"org.asteriskjava.util.DateUtil.getDate": "Returns the real current date or the date set with overrideCurrentDate()."}]}, {"index": "280", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/ChannelManager.java", "methodName": "org.asteriskjava.live.internal.ChannelManager.getChannelImplByName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "AsteriskChannelImpl getChannelImplByName(String name)\n    {\n        Date dateOfCreation = null;\n        AsteriskChannelImpl channel = null;\n\n        if (name == null)\n        {\n            return null;\n        }\n\n        synchronized (channels)\n        {\n            for (AsteriskChannelImpl tmp : channels.values())\n            {\n                if (name.equals(tmp.getName()))\n                {\n                    // return the most recent channel or when dates are similar,\n                    // the active one\n                    if (dateOfCreation == null || tmp.getDateOfCreation().after(dateOfCreation)\n                            || (tmp.getDateOfCreation().equals(dateOfCreation) && tmp.getState() != ChannelState.HUNGUP))\n                    {\n                        channel = tmp;\n                        dateOfCreation = channel.getDateOfCreation();\n                    }\n                }\n            }\n        }\n        return channel;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a channel from the ChannelManager's cache with the given name If multiple channels are found, returns the most recently CREATED one. If two channels with the very same date exist, avoid HUNGUP ones.", "call_func_name": ["java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.internal.AsteriskChannelImpl.getName", "java.lang.String.equals", "org.asteriskjava.live.internal.AsteriskChannelImpl.getDateOfCreation", "java.util.Date.after", "java.util.Date.equals", "org.asteriskjava.live.internal.AsteriskChannelImpl.getState"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object"], [""], ["java.util.Date"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/ChannelManager.java", "methodName": "org.asteriskjava.live.internal.ChannelManager.getChannelImplByNameAndActive", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "AsteriskChannelImpl getChannelImplByNameAndActive(String name)\n    {\n\n        // In non bristuffed AST 1.2, we don't have uniqueid header to match the\n        // channel\n        // So we must use the channel name\n        // Channel name is unique at any give moment in the * server\n        // But asterisk-java keeps Hungup channels for a while.\n        // We don't want to retrieve hungup channels.\n\n        AsteriskChannelImpl channel = null;\n\n        if (name == null)\n        {\n            return null;\n        }\n\n        synchronized (channels)\n        {\n            for (AsteriskChannelImpl tmp : channels.values())\n            {\n                if (name.equals(tmp.getName()) && tmp.getState() != ChannelState.HUNGUP)\n                {\n                    channel = tmp;\n                }\n            }\n        }\n        return channel;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a NON-HUNGUP channel from the ChannelManager's cache with the given name.", "call_func_name": ["java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.live.internal.AsteriskChannelImpl.getName", "java.lang.String.equals", "org.asteriskjava.live.internal.AsteriskChannelImpl.getState"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/ChannelManager.java", "methodName": "org.asteriskjava.live.internal.ChannelManager.getOtherSideOfLocalChannel", "methodParameterType": "AsteriskChannel#", "methodParameterName": "localChannel#", "methodBody": "AsteriskChannelImpl getOtherSideOfLocalChannel(AsteriskChannel localChannel)\n    {\n        final String name;\n        final char num;\n\n        if (localChannel == null)\n        {\n            return null;\n        }\n\n        name = localChannel.getName();\n        if (name == null || !name.startsWith(\"Local/\")\n                || (name.charAt(name.length() - 2) != ',' && name.charAt(name.length() - 2) != ';'))\n        {\n            return null;\n        }\n\n        num = name.charAt(name.length() - 1);\n\n        if (num == '1')\n        {\n            return getChannelImplByName(name.substring(0, name.length() - 1) + \"2\");\n        }\n        else if (num == '2')\n        {\n            return getChannelImplByName(name.substring(0, name.length() - 1) + \"1\");\n        }\n        else\n        {\n            return null;\n        }\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns the other side of a local channel. <br> Local channels consist of two sides, like \"Local/1234@from-local-60b5,1\" and \"Local/1234@from-local-60b5,2\" (for Asterisk 1.4) or \"Local/1234@from-local-60b5;1\" and \"Local/1234@from-local-60b5;2\" (for Asterisk 1.6) this method returns the other side.", "call_func_name": ["org.asteriskjava.live.AsteriskChannel.getName", "java.lang.String.startsWith", "java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuilder.<init>", "java.lang.String.substring", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.live.internal.ChannelManager.getChannelImplByName"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["int"], [""], ["int", "int"], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.live.AsteriskChannel.getName": "Returns the name of this channel, for example \"SIP/1310-20da\"."}, {"org.asteriskjava.live.internal.ChannelManager.getChannelImplByName": "Returns a channel from the ChannelManager's cache with the given name If multiple channels are found, returns the most recently CREATED one. If two channels with the very same date exist, avoid HUNGUP ones."}]}, {"index": "283", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.AsteriskChannelImpl", "methodParameterType": "AsteriskServerImpl#String#String#Date#", "methodParameterName": "server#name#id#dateOfCreation#", "methodBody": "AsteriskChannelImpl(final AsteriskServerImpl server, final String name, final String id, final Date dateOfCreation)\n            throws IllegalArgumentException\n    {\n        super(server);\n\n        if (server == null)\n        {\n            throw new IllegalArgumentException(\"Parameter 'server' passed to AsteriskChannelImpl() must not be null.\");\n        }\n        if (name == null)\n        {\n            throw new IllegalArgumentException(\"Parameter 'name' passed to AsteriskChannelImpl() must not be null.\");\n        }\n        if (id == null)\n        {\n            throw new IllegalArgumentException(\"Parameter 'id' passed to AsteriskChannelImpl() must not be null.\");\n        }\n        if (dateOfCreation == null)\n        {\n            throw new IllegalArgumentException(\n                    \"Parameter 'dateOfCreation' passed to AsteriskChannelImpl() must not be null.\");\n        }\n\n        this.name = name;\n        this.id = id;\n        this.dateOfCreation = dateOfCreation;\n        this.extensionHistory = new ArrayList<>();\n        this.stateHistory = new ArrayList<>();\n        this.linkedChannelHistory = new ArrayList<>();\n        this.dialedChannelHistory = new ArrayList<>();\n        this.variables = new HashMap<>();\n        this.dialedChannels = new ArrayList<>();\n        this.dialingChannels = new ArrayList<>();\n        this.linkedChannels = new ArrayList<>();\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "284", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.idChanged", "methodParameterType": "Date#String#", "methodParameterName": "date#id#", "methodBody": "void idChanged(Date date, String id)\n    {\n        final String oldId = this.id;\n\n        if (oldId != null && oldId.equals(id))\n        {\n            return;\n        }\n\n        this.id = id;\n        firePropertyChange(PROPERTY_ID, oldId, id);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Changes the id of this channel.", "call_func_name": ["java.lang.String.equals", "org.asteriskjava.live.internal.AsteriskChannelImpl.firePropertyChange"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "285", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.nameChanged", "methodParameterType": "Date#String#", "methodParameterName": "date#name#", "methodBody": "void nameChanged(Date date, String name)\n    {\n        final String oldName = this.name;\n\n        if (oldName != null && oldName.equals(name))\n        {\n            return;\n        }\n\n        this.name = name;\n        firePropertyChange(PROPERTY_NAME, oldName, name);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Changes the name of this channel.", "call_func_name": ["java.lang.String.equals", "org.asteriskjava.live.internal.AsteriskChannelImpl.firePropertyChange"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "286", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.setCallerId", "methodParameterType": "CallerId#", "methodParameterName": "callerId#", "methodBody": "void setCallerId(final CallerId callerId)\n    {\n        final CallerId oldCallerId = this.callerId;\n\n        this.callerId = callerId;\n        firePropertyChange(PROPERTY_CALLER_ID, oldCallerId, callerId);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the caller id of this channel.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskChannelImpl.firePropertyChange"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.stateChanged", "methodParameterType": "Date#ChannelState#", "methodParameterName": "date#state#", "methodBody": "synchronized void stateChanged(Date date, ChannelState state)\n    {\n        final ChannelStateHistoryEntry historyEntry;\n        final ChannelState oldState = this.state;\n\n        if (oldState == state)\n        {\n            return;\n        }\n\n        // System.err.println(id + \" state change: \" + oldState + \" => \" + state\n        // + \" (\" + name + \")\");\n        historyEntry = new ChannelStateHistoryEntry(date, state);\n        synchronized (stateHistory)\n        {\n            stateHistory.add(historyEntry);\n        }\n\n        this.state = state;\n        firePropertyChange(PROPERTY_STATE, oldState, state);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Changes the state of this channel.", "call_func_name": ["org.asteriskjava.live.ChannelStateHistoryEntry.<init>", "java.util.List.add", "org.asteriskjava.live.internal.AsteriskChannelImpl.firePropertyChange"], "call_func_parameter": [["java.util.Date", "org.asteriskjava.live.ChannelState"], ["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "288", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.setAccount", "methodParameterType": "String#", "methodParameterName": "account#", "methodBody": "void setAccount(String account)\n    {\n        final String oldAccount = this.account;\n\n        this.account = account;\n        firePropertyChange(PROPERTY_ACCOUNT, oldAccount, account);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the account code used to bill this channel.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskChannelImpl.firePropertyChange"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.extensionVisited", "methodParameterType": "Date#Extension#", "methodParameterName": "date#extension#", "methodBody": "void extensionVisited(Date date, Extension extension)\n    {\n        final Extension oldCurrentExtension = getCurrentExtension();\n        final ExtensionHistoryEntry historyEntry;\n\n        historyEntry = new ExtensionHistoryEntry(date, extension);\n\n        synchronized (extensionHistory)\n        {\n            extensionHistory.add(historyEntry);\n        }\n\n        firePropertyChange(PROPERTY_CURRENT_EXTENSION, oldCurrentExtension, extension);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a visted dialplan entry to the history.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskChannelImpl.getCurrentExtension", "org.asteriskjava.live.ExtensionHistoryEntry.<init>", "java.util.List.add", "org.asteriskjava.live.internal.AsteriskChannelImpl.firePropertyChange"], "call_func_parameter": [[""], ["java.util.Date", "org.asteriskjava.live.Extension"], ["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.hungup", "methodParameterType": "Date#HangupCause#String#", "methodParameterName": "dateOfRemoval#hangupCause#hangupCauseText#", "methodBody": "synchronized void hungup(Date dateOfRemoval, HangupCause hangupCause, String hangupCauseText)\n    {\n        this.dateOfRemoval = dateOfRemoval;\n        this.hangupCause = hangupCause;\n        this.hangupCauseText = hangupCauseText;\n        // update state and fire PropertyChangeEvent\n        stateChanged(dateOfRemoval, ChannelState.HUNGUP);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets dateOfRemoval, hangupCause and hangupCauseText and changes state to {@link ChannelState#HUNGUP}. Fires a PropertyChangeEvent for state.", "call_func_name": ["org.asteriskjava.live.internal.AsteriskChannelImpl.stateChanged"], "call_func_parameter": [["java.util.Date", "org.asteriskjava.live.ChannelState"]], "passed_comments": [{"org.asteriskjava.live.internal.AsteriskChannelImpl.stateChanged": "Changes the state of this channel."}]}, {"index": "291", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.getDialedChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<AsteriskChannel> getDialedChannels()\n    {\n        final List<AsteriskChannel> copy;\n\n        synchronized (dialedChannels)\n        {\n            copy = new ArrayList<>(dialedChannels);\n        }\n\n        return copy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrives the conplete List of all dialed channels associated to ths calls", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["java.util.Collection"]], "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/internal/AsteriskChannelImpl.java", "methodName": "org.asteriskjava.live.internal.AsteriskChannelImpl.channelLinked", "methodParameterType": "Date#AsteriskChannel#", "methodParameterName": "date#linkedChannel#", "methodBody": "synchronized void channelLinked(Date date, AsteriskChannel linkedChannel)\n    {\n        final AsteriskChannel oldLinkedChannel;\n        synchronized (this.linkedChannels)\n        {\n            if (this.linkedChannels.isEmpty())\n            {\n                oldLinkedChannel = null;\n                this.linkedChannels.add(linkedChannel);\n            }\n            else\n            {\n                oldLinkedChannel = this.linkedChannels.get(0);\n                this.linkedChannels.set(0, linkedChannel);\n            }\n        }\n\n        final LinkedChannelHistoryEntry historyEntry;\n\n        historyEntry = new LinkedChannelHistoryEntry(date, linkedChannel);\n        synchronized (linkedChannelHistory)\n        {\n            linkedChannelHistory.add(historyEntry);\n        }\n        this.wasLinked = true;\n        firePropertyChange(PROPERTY_LINKED_CHANNEL, oldLinkedChannel, linkedChannel);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#NullLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the channel this channel is bridged with.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.add", "java.util.List.get", "java.util.List.set", "org.asteriskjava.live.LinkedChannelHistoryEntry.<init>", "org.asteriskjava.live.internal.AsteriskChannelImpl.firePropertyChange"], "call_func_parameter": [[""], ["java.lang.Object"], ["int"], ["int", "java.lang.Object"], ["java.util.Date", "org.asteriskjava.live.AsteriskChannel"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveObject.java", "methodName": "org.asteriskjava.live.LiveObject.getServer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskServer getServer();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the AsteriskServer this live object belongs to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "294", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveObject.java", "methodName": "org.asteriskjava.live.LiveObject.addPropertyChangeListener", "methodParameterType": "PropertyChangeListener#", "methodParameterName": "listener#", "methodBody": "void addPropertyChangeListener(PropertyChangeListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Adds a PropertyChangeListener that is notified whenever a property value changes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "295", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveObject.java", "methodName": "org.asteriskjava.live.LiveObject.addPropertyChangeListener", "methodParameterType": "String#PropertyChangeListener#", "methodParameterName": "propertyName#listener#", "methodBody": "void addPropertyChangeListener(String propertyName, PropertyChangeListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Adds a PropertyChangeListener that is notified whenever a given property value changes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "296", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveObject.java", "methodName": "org.asteriskjava.live.LiveObject.removePropertyChangeListener", "methodParameterType": "PropertyChangeListener#", "methodParameterName": "listener#", "methodBody": "void removePropertyChangeListener(PropertyChangeListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Removes the given PropertyChangeListener that was added by calling {@link #addPropertyChangeListener(PropertyChangeListener)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "297", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveObject.java", "methodName": "org.asteriskjava.live.LiveObject.removePropertyChangeListener", "methodParameterType": "String#PropertyChangeListener#", "methodParameterName": "propertyName#listener#", "methodBody": "void removePropertyChangeListener(String propertyName, PropertyChangeListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Removes the given PropertyChangeListener that was added by calling {@link #addPropertyChangeListener(String,PropertyChangeListener)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "298", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveObject.java", "methodName": "org.asteriskjava.live.LiveObject.getLastUpdateMillis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long getLastUpdateMillis();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Timestamp of last update of the Object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "299", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the unique id of this channel, for example \"1099015093.165\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "300", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of this channel, for example \"SIP/1310-20da\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "CallerId getCallerId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the caller id of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "302", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ChannelState getState();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the state of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "303", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.wasInState", "methodParameterType": "ChannelState#", "methodParameterName": "state#", "methodBody": "boolean wasInState(ChannelState state);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if this channel was at least once in the given state. <p> For example you can use this method the check if this channel had been answered: <pre> boolean answered = channel.wasInState(ChannelState.UP); </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.wasBusy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean wasBusy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks if this channel was busy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAccount();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the account code used to bill this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getCurrentExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Extension getCurrentExtension();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the last visited dialplan entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getFirstExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Extension getFirstExtension();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the first visited dialplan entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getExtensionHistory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<ExtensionHistoryEntry> getExtensionHistory();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a list of all visited dialplan entries.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "309", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDateOfCreation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Date getDateOfCreation();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the date this channel has been created. <p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDateOfRemoval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Date getDateOfRemoval();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the date this channel has left the Asterisk server for example by a hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getHangupCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "HangupCause getHangupCause();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the reason for hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getHangupCauseText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getHangupCauseText();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a textual representation of the reason for hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "313", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getCallDetailRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "CallDetailRecord getCallDetailRecord();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the call detail record for this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDialedChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskChannel getDialedChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the channel that has been dialed by this channel most recently, this is the destination channel that was created because this channel dialed it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDialedChannelHistory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<DialedChannelHistoryEntry> getDialedChannelHistory();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a list of all channels that have been dialed by this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDialingChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskChannel getDialingChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the channel that was dialing this channel, this is the source channel that created this channel by dialing it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDialedChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List <AsteriskChannel> getDialedChannels();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the channel set that are dialing this channel, this is the source channel that created this channel by dialing it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getLinkedChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskChannel getLinkedChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the channel this channel is currently bridged with, if any.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "319", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getLinkedChannelHistory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<LinkedChannelHistoryEntry> getLinkedChannelHistory();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a list of all channels this channel was briged with.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "320", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.wasLinked", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean wasLinked();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Indicates if this channel was linked to another channel at least once.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getMeetMeUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "MeetMeUser getMeetMeUser();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the MeetMeUser associated with this channel if this channel is currently taking part in a MeetMe conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getQueueEntry", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskQueueEntry getQueueEntry();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the queue entry associated with this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "323", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getParkedAt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Extension getParkedAt();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the extension to dial to pickup he channel of the parking if the channel is currently parked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getParkingLot", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getParkingLot();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the name of the parkinglot where the channel is currently parked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "325", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> getVariables();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the channel variables as received by {@link org.asteriskjava.manager.event.VarSetEvent VarSetEvents}.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "326", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDtmfReceived", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Character getDtmfReceived();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the last DTMF digit received on this channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "327", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getDtmfSent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Character getDtmfSent();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the last DTMF digit sent on this channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "328", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.isMonitored", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isMonitored();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the actual MONITOR state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "329", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.hangup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void hangup() throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Hangs up this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "330", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.hangup", "methodParameterType": "HangupCause#", "methodParameterName": "cause#", "methodBody": "void hangup(HangupCause cause) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Hangs up this channel using a given cause code. The cause code is mainly used for Zap PRI channels where it makes Asterisk send a PRI DISCONNECT message with the set CAUSE element to the switch.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "331", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.setAbsoluteTimeout", "methodParameterType": "int#", "methodParameterName": "seconds#", "methodBody": "//TODO exception when setting it to 0: NoSuchChannelException: Channel \n    // 'SIP/248-0a02fcd0' is not available: No timeout specified\n    void setAbsoluteTimeout(int seconds) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the absolute maximum amount of time permitted for a call on a given channel, it hangs up the channel after this time. <p> Time is counted from when you call setAbsoluteTimeout, not from the beginning of the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "332", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.redirect", "methodParameterType": "String#String#int#", "methodParameterName": "context#exten#priority#", "methodBody": "void redirect(String context, String exten, int priority) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Redirects this channel to a new extension. <p> If this channel is linked to another channel, the linked channel is hung up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.redirectBothLegs", "methodParameterType": "String#String#int#", "methodParameterName": "context#exten#priority#", "methodBody": "void redirectBothLegs(String context, String exten, int priority) throws ManagerCommunicationException,\n            NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Redirects this channel and the channel this channel is linked to to a new extension. <p> If this channel is not linked to another channel only this channel is redirected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "334", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.getVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "String getVariable(String variable) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the value of the given channel variable. <p> Currently Asterisk does not support the retrieval of built-in variables like EXTEN or CALLERIDNUM but only custom variables set via Asterisk's Set command or via  {@link #setVariable(String,String)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "335", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.setVariable", "methodParameterType": "String#String#", "methodParameterName": "variable#value#", "methodBody": "void setVariable(String variable, String value) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the value of the given channel variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "336", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.playDtmf", "methodParameterType": "String#", "methodParameterName": "digit#", "methodBody": "void playDtmf(String digit) throws ManagerCommunicationException, NoSuchChannelException, IllegalArgumentException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given DTMF digit on this channel. <p> Available since Asterisk 1.2.8", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "337", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.startMonitoring", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "void startMonitoring(String filename) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts monitoring (recording) this channel. <p> The format of the files is \"wav\", they are not mixed. <p> The files are called <i>filename</i>-in.wav and <i>filename</i>-out.wav.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "338", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.startMonitoring", "methodParameterType": "String#String#", "methodParameterName": "filename#format#", "methodBody": "void startMonitoring(String filename, String format) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts monitoring (recording) this channel using the given audio format. <p> The files are not mixed. <p> The files are called <i>filename</i>-in.<i>format</i> and <i>filename</i>-out.<i>format</i>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "339", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.startMonitoring", "methodParameterType": "String#String#boolean#", "methodParameterName": "filename#format#mix#", "methodBody": "void startMonitoring(String filename, String format, boolean mix) throws ManagerCommunicationException,\n            NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts monitoring (recording) this channel using the given audio format and optionally mixing input and output data after recording is finished. <p> Mixing is done by soxmix by default (which has to be installed on your Asterisk server). You can use your own script by setting the variable <code>MONITOR_EXEC</code> to your custom script before starting monitoring the channel. Your script is then called with 3 arguments, the two leg files and a target mixed file name which is the same as the leg file names without the in/out designator, i.e. <i>filename</i>.<i>format</i>.<br> The two leg files are only removed by Asterisk if <code>MONITOR_EXEC</code> is not set. If you use a custom script and want to remove them, just let your script do this.<br> To pass additional arguments to your script you can set the variable <code>MONITOR_EXEC_ARGS</code> to a list of arguments (separated by spaces). <p> Example: <pre> AsteriskChannel c; [...] c.setVariable(AsteriskChannel.VARIABLE_MONITOR_EXEC, &quot;/usr/local/bin/2wav2mp3&quot;); c.startMonitoring(&quot;my-recording&quot;, &quot;wav&quot;, true); </pre> Side note: <tt>2wav2mp3</tt> is a nice script by Dietmar Zlabinger to mix the two legs to a stero mp3 file, for details see <a href=\"http://www.voip-info.org/wiki/view/Monitor+stereo-example\">voip-info.org</a>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "340", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.changeMonitoring", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "void changeMonitoring(String filename) throws ManagerCommunicationException, NoSuchChannelException,\n            IllegalArgumentException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Changes the filename of a previously started monitoring. <p> If the channel exists but is not currently monitored your request is ignored and a warning message is written to Asterisk's CLI. <p> Use with care, this doesn't always seem to work.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "341", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.stopMonitoring", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void stopMonitoring() throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stops monitoring this channel. <p> If the channel exists but is not currently monitored your request is ignored.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "342", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.pauseMonitoring", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void pauseMonitoring() throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Temporarily stops monitoring this channel. <p> If the channel exists but is not currently monitored your request is ignored. <p> This method is available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "343", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.unpauseMonitoring", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void unpauseMonitoring() throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Re-enables monitoring this channel after calling {@link #pauseMonitoring()}. <p> If the channel exists but monitoring has not been paused your request is ignored. <p> This method is available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "344", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.pauseMixMonitor", "methodParameterType": "MixMonitorDirection#", "methodParameterName": "direction#", "methodBody": "void pauseMixMonitor(MixMonitorDirection direction) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Temporarily stops monitoring this channel if this is monitored with MixMonitor. <p> If the channel exists but is not currently monitored your request is ignored. <p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "345", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/AsteriskChannel.java", "methodName": "org.asteriskjava.live.AsteriskChannel.unPauseMixMonitor", "methodParameterType": "MixMonitorDirection#", "methodParameterName": "direction#", "methodBody": "void unPauseMixMonitor(MixMonitorDirection direction) throws ManagerCommunicationException, NoSuchChannelException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Re-enables monitoring this channel after calling {@link #pauseMixMonitor(org.asteriskjava.util.MixMonitorDirection)} ()}if this is monitored with MixMonitor <p> If the channel exists but monitoring has not been paused your request is ignored. <p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "346", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeRoom.java", "methodName": "org.asteriskjava.live.MeetMeRoom.getRoomNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getRoomNumber();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of this MeetMe room.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "347", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeRoom.java", "methodName": "org.asteriskjava.live.MeetMeRoom.getUsers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<MeetMeUser> getUsers();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a collection of all active users in this MeetMe room.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "348", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeRoom.java", "methodName": "org.asteriskjava.live.MeetMeRoom.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isEmpty();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks whether there are users in this room or not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "349", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeRoom.java", "methodName": "org.asteriskjava.live.MeetMeRoom.lock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void lock() throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Locks this room so no addtional users can join.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "350", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeRoom.java", "methodName": "org.asteriskjava.live.MeetMeRoom.unlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void unlock() throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Unlocks this room so additional users can join again.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "351", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/NoSuchInterfaceException.java", "methodName": "org.asteriskjava.live.NoSuchInterfaceException.NoSuchInterfaceException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public NoSuchInterfaceException(String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "352", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveException.java", "methodName": "org.asteriskjava.live.LiveException.LiveException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "protected LiveException(String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "353", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LiveException.java", "methodName": "org.asteriskjava.live.LiveException.LiveException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "protected LiveException(String message, Throwable cause)\n    {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given message and cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "354", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.Voicemailbox", "methodParameterType": "String#String#String#", "methodParameterName": "mailbox#context#user#", "methodBody": "public Voicemailbox(String mailbox, String context, String user)\n    {\n        this.mailbox = mailbox;\n        this.context = context;\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "355", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.getMailbox", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMailbox()\n    {\n        return mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this mailbox as defined in <code>voicemail.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "356", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the context of this mailbox as defined in <code>voicemail.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "357", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the user (usually the full name) of this mailbox as defined in <code>voicemail.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "358", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.getNewMessages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getNewMessages()\n    {\n        return newMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of new messages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "359", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.setNewMessages", "methodParameterType": "int#", "methodParameterName": "newMessages#", "methodBody": "public void setNewMessages(int newMessages)\n    {\n        this.newMessages = newMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of new messages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "360", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.getOldMessages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getOldMessages()\n    {\n        return oldMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of old messages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "361", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/Voicemailbox.java", "methodName": "org.asteriskjava.live.Voicemailbox.setOldMessages", "methodParameterType": "int#", "methodParameterName": "oldMessages#", "methodBody": "public void setOldMessages(int oldMessages)\n    {\n        this.oldMessages = oldMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of old messages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "362", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.isTalking", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isTalking();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns whether this user is currently talking or not.<p> Asterisk supports talker detection since version 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "363", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.isMuted", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isMuted();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns whether this user is muted or not.<p> Supported since Asterisk version 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "364", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.getDateJoined", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Date getDateJoined();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the date this user joined the MeetMe room.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.getDateLeft", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Date getDateLeft();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the date this user left the MeetMe room.<p> This property is <code>null</code> as long as the user is in state  {@link MeetMeUserState#JOINED} and set to date theuser left when entering  {@link MeetMeUserState#LEFT}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "MeetMeUserState getState();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the lifecycle status of this MeetMeUser.<p> Initially the user is in state  {@link MeetMeUserState#JOINED}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "367", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.getRoom", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "MeetMeRoom getRoom();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the MeetMe room this user joined.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "368", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.getUserNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getUserNumber();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the user number assigned to this user in the room.<p> Usually you won't need to access this property directly.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "369", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskChannel getChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the channel associated with this user.<p> This property is immutable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "370", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.mute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void mute() throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stops sending voice from this user to the MeetMe room.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "371", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.unmute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void unmute() throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "(Re)starts sending voice from this user to the MeetMe room.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/MeetMeUser.java", "methodName": "org.asteriskjava.live.MeetMeUser.kick", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void kick() throws ManagerCommunicationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Removes this user from the MeetMe room.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "373", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/InvalidPenaltyException.java", "methodName": "org.asteriskjava.live.InvalidPenaltyException.InvalidPenaltyException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public InvalidPenaltyException(String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LinkedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.LinkedChannelHistoryEntry.LinkedChannelHistoryEntry", "methodParameterType": "Date#AsteriskChannel#", "methodParameterName": "dateLinked#channel#", "methodBody": "public LinkedChannelHistoryEntry(Date dateLinked, AsteriskChannel channel)\n    {\n        this.dateLinked = dateLinked;\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LinkedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.LinkedChannelHistoryEntry.getDateLinked", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getDateLinked()\n    {\n        return dateLinked;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the channel was linked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "376", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LinkedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.LinkedChannelHistoryEntry.getDateUnlinked", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getDateUnlinked()\n    {\n        return dateUnlinked;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the channel was unlinked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "377", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LinkedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.LinkedChannelHistoryEntry.setDateUnlinked", "methodParameterType": "Date#", "methodParameterName": "dateUnlinked#", "methodBody": "public void setDateUnlinked(Date dateUnlinked)\n    {\n        this.dateUnlinked = dateUnlinked;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the date the channel was unlinked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "378", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/LinkedChannelHistoryEntry.java", "methodName": "org.asteriskjava.live.LinkedChannelHistoryEntry.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AsteriskChannel getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel that has been linked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "379", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallerId.java", "methodName": "org.asteriskjava.live.CallerId.CallerId", "methodParameterType": "String#String#", "methodParameterName": "name#number#", "methodBody": "public CallerId(String name, String number)\n    {\n        this.name = (AstUtil.isNull(name)) ? null : name;\n        this.number = (AstUtil.isNull(number)) ? null : number;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#NullLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#NullLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new CallerId.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "380", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallerId.java", "methodName": "org.asteriskjava.live.CallerId.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "381", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallerId.java", "methodName": "org.asteriskjava.live.CallerId.getNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNumber()\n    {\n        return number;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "382", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallerId.java", "methodName": "org.asteriskjava.live.CallerId.valueOf", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static CallerId valueOf(String s)\n    {\n        final String[] parsedCallerId;\n\n        parsedCallerId = AstUtil.parseCallerId(s);\n        return new CallerId(parsedCallerId[0], parsedCallerId[1]);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses a caller id string in the form <code>\"Some Name\" &lt;1234&gt;</code> to a CallerId object.", "call_func_name": ["org.asteriskjava.util.AstUtil.parseCallerId", "org.asteriskjava.live.CallerId.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.AstUtil.parseCallerId": "Parses a string for caller id information. <br> The caller id string should be in the form <code>\"Some Name\" &lt;1234&gt;</code>. <br> This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code> but strips any whitespace."}]}, {"index": "383", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/live/CallerId.java", "methodName": "org.asteriskjava.live.CallerId.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString()\n    {\n        final StringBuilder sb;\n\n        sb = new StringBuilder();\n        if (name != null)\n        {\n            sb.append(\"\\\"\");\n            sb.append(name);\n            sb.append(\"\\\"\");\n            if (number != null)\n            {\n                sb.append(\" \");\n            }\n        }\n\n        if (number != null)\n        {\n            sb.append(\"<\");\n            sb.append(number);\n            sb.append(\">\");\n        }\n        return sb.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a string representation of this CallerId in the form <code>\"Some Name\" &lt;1234&gt;</code>.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "384", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SimpleMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.SimpleMappingStrategy.setMappings", "methodParameterType": "Map<String,AgiScript>#", "methodParameterName": "mappings#", "methodBody": "public void setMappings(Map<String, AgiScript> mappings)\n    {\n        this.mappings = mappings;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the \"path to AgiScript\" mapping.<p> Use the path (for example <code>hello.agi</code>) as key and your AgiScript (for example <code>new HelloAgiScript()</code>) as value of this map.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "385", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/InvalidCommandSyntaxException.java", "methodName": "org.asteriskjava.fastagi.InvalidCommandSyntaxException.InvalidCommandSyntaxException", "methodParameterType": "String#String#", "methodParameterName": "synopsis#usage#", "methodBody": "public InvalidCommandSyntaxException(String synopsis, String usage)\n    {\n        super(\"Invalid command syntax: \" + synopsis);\n        this.synopsis = synopsis;\n        this.usage = usage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#InfixExpression#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new InvalidCommandSyntaxException with the given synopsis and usage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "386", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/InvalidCommandSyntaxException.java", "methodName": "org.asteriskjava.fastagi.InvalidCommandSyntaxException.getSynopsis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSynopsis()\n    {\n        return synopsis;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the synopsis of the command that was called with invalid syntax.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/InvalidCommandSyntaxException.java", "methodName": "org.asteriskjava.fastagi.InvalidCommandSyntaxException.getUsage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsage()\n    {\n        return usage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a description of the command that was called with invalid syntax.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.AbstractMappingStrategy.getClassLoader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected synchronized ClassLoader getClassLoader()\n    {\n        if (defaultClassLoader == null)\n        {\n            final ClassLoader parentClassLoader = Thread.currentThread().getContextClassLoader();\n            final List<URL> dirUrls = new ArrayList<>();\n\n            for (String scriptPathEntry : DEFAULT_SCRIPT_PATH)\n            {\n                final File scriptDir = new File(scriptPathEntry);\n                if (! scriptDir.isDirectory())\n                {\n                    continue;\n                }\n\n                try\n                {\n                    dirUrls.add(scriptDir.toURI().toURL());\n                }\n                catch (MalformedURLException e)\n                {\n                    // should not happen\n                }\n            }\n\n            if (dirUrls.isEmpty())\n            {\n                return parentClassLoader;\n            }\n\n            defaultClassLoader = new URLClassLoader(dirUrls.toArray(new URL[dirUrls.size()]), parentClassLoader);\n        }\n\n        return defaultClassLoader;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ClassLoader to use for loading AgiScript classes and load other resources like the mapping properties file.<p> By default this method returns a class loader that searches for classes in the \"agi\" subdirectory (if it exists) and uses the context class loader of the current thread as the parent class loader.<p> You can override this method if you prefer using a different class loader.", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.util.ArrayList.<init>", "java.io.File.<init>", "java.io.File.isDirectory", "java.io.File.toURI", "java.net.URI.toURL", "java.util.List.add", "java.util.List.isEmpty", "java.util.List.size", "java.util.List.toArray", "java.net.URLClassLoader.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object[]"], ["java.net.URL[]", "java.lang.ClassLoader"]], "passed_comments": "/"}, {"index": "389", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.AbstractMappingStrategy.createAgiScriptInstance", "methodParameterType": "String#", "methodParameterName": "className#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    protected AgiScript createAgiScriptInstance(String className)\n    {\n        Class<?> tmpClass;\n        Class<AgiScript> agiScriptClass;\n        Constructor<AgiScript> constructor;\n        AgiScript agiScript;\n\n        agiScript = null;\n\n        try\n        {\n            tmpClass = getClassLoader().loadClass(className);\n        }\n        catch (ClassNotFoundException e1)\n        {\n            logger.debug(\"Unable to create AgiScript instance of type \" + className\n                    + \": Class not found, make sure the class exists and is available on the CLASSPATH\");\n            return null;\n        }\n\n        if (!AgiScript.class.isAssignableFrom(tmpClass))\n        {\n            logger.warn(\"Unable to create AgiScript instance of type \" + className\n                    + \": Class does not implement the AgiScript interface\");\n            return null;\n        }\n\n        agiScriptClass = (Class<AgiScript>) tmpClass;\n        try\n        {\n            constructor = agiScriptClass.getConstructor();\n            agiScript = constructor.newInstance();\n        }\n        catch (Exception e)\n        {\n            logger.warn(\"Unable to create AgiScript instance of type \" + className, e);\n        }\n\n        return agiScript;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(PrefixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of an AGI script.", "call_func_name": ["org.asteriskjava.fastagi.AbstractMappingStrategy.getClassLoader", "java.lang.ClassLoader.loadClass", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "java.lang.Class.isAssignableFrom", "org.asteriskjava.util.Log.warn", "java.lang.Class.getConstructor", "java.lang.reflect.Constructor.newInstance", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.Class"], ["java.lang.Object"], ["java.lang.Class[]"], ["java.lang.Object[]"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.fastagi.AbstractMappingStrategy.getClassLoader": "Returns the ClassLoader to use for loading AgiScript classes and load other resources like the mapping properties file.<p> By default this method returns a class loader that searches for classes in the \"agi\" subdirectory (if it exists) and uses the context class loader of the current thread as the parent class loader.<p> You can override this method if you prefer using a different class loader."}]}, {"index": "390", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiOperations.java", "methodName": "org.asteriskjava.fastagi.AgiOperations.AgiOperations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AgiOperations()\n    {\n        this.channel = null;\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance that operates on the channel attached to the current thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "391", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiOperations.java", "methodName": "org.asteriskjava.fastagi.AgiOperations.AgiOperations", "methodParameterType": "AgiChannel#", "methodParameterName": "channel#", "methodBody": "public AgiOperations(AgiChannel channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance that operates on the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiOperations.java", "methodName": "org.asteriskjava.fastagi.AgiOperations.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected AgiChannel getChannel()\n    {\n        AgiChannel threadBoundChannel;\n\n        if (channel != null)\n        {\n            return channel;\n        }\n\n        threadBoundChannel = AgiConnectionHandler.getChannel();\n        if (threadBoundChannel == null)\n        {\n            throw new IllegalStateException(\"Trying to send command from an invalid thread\");\n        }\n\n        return threadBoundChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel to operate on.", "call_func_name": ["org.asteriskjava.fastagi.internal.AgiConnectionHandler.getChannel", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.fastagi.internal.AgiConnectionHandler.getChannel": "Returns the AgiChannel associated with the current thread."}]}, {"index": "393", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.AbstractAgiServer", "methodParameterType": "AgiChannelFactory#", "methodParameterName": "agiChannelFactory#", "methodBody": "public AbstractAgiServer(AgiChannelFactory agiChannelFactory)\n    {\n        if (agiChannelFactory == null)\n        {\n            throw new IllegalArgumentException(\"AgiChannelFactory must not be null\");\n        }\n\n        logger.debug(\"Using channelFactory \" + agiChannelFactory.getClass().getCanonicalName());\n        this.agiChannelFactory = agiChannelFactory;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AbstractAgiServer with the given channel factory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.getAgiChannelFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected AgiChannelFactory getAgiChannelFactory()\n    {\n        return this.agiChannelFactory;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AgiChannelFactory to use for creating new AgiChannel instances.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.getPoolSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized int getPoolSize()\n    {\n        return poolSize;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the default number of worker threads in the thread pool.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.setPoolSize", "methodParameterType": "int#", "methodParameterName": "poolSize#", "methodBody": "public synchronized void setPoolSize(int poolSize)\n    {\n        if (poolSize < 0)\n        {\n            throw new IllegalArgumentException(\"New poolSize (\" + poolSize + \") is must not be negative\");\n        }\n\n        if (pool != null)\n        {\n            pool.setCorePoolSize(poolSize);\n        }\n        this.poolSize = poolSize;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default number of worker threads in the thread pool. <br> This is the number of threads that are available even if they are idle. <br> The default pool size is 10.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.util.concurrent.ThreadPoolExecutor.setCorePoolSize"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.getMaximumPoolSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized int getMaximumPoolSize()\n    {\n        return maximumPoolSize;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum number of worker threads in the thread pool.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.setMaximumPoolSize", "methodParameterType": "int#", "methodParameterName": "maximumPoolSize#", "methodBody": "public synchronized void setMaximumPoolSize(int maximumPoolSize)\n    {\n        if (maximumPoolSize <= 0)\n        {\n            throw new IllegalArgumentException(\"New maximumPoolSize (\" + maximumPoolSize + \") is must be positive\");\n        }\n\n        if (maximumPoolSize < poolSize)\n        {\n            throw new IllegalArgumentException(\n                    \"New maximumPoolSize (\" + maximumPoolSize + \") is less than current pool size (\" + poolSize + \")\");\n        }\n\n        if (pool != null)\n        {\n            pool.setMaximumPoolSize(maximumPoolSize);\n        }\n        this.maximumPoolSize = maximumPoolSize;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum number of worker threads in the thread pool. <br> This equals the maximum number of concurrent requests this AgiServer can serve. <br> The default maximum pool size is 100.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "399", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.setMappingStrategy", "methodParameterType": "MappingStrategy#", "methodParameterName": "mappingStrategy#", "methodBody": "public void setMappingStrategy(MappingStrategy mappingStrategy)\n    {\n        this.mappingStrategy = mappingStrategy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the strategy to use for mapping AgiRequests to AgiScripts that serve them.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "400", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.execute", "methodParameterType": "Runnable#", "methodParameterName": "command#", "methodBody": "protected void execute(Runnable command) throws RejectedExecutionException\n    {\n        if (isDie())\n        {\n            logger.warn(\"AgiServer is shutting down: Refused to execute AgiScript\");\n            return;\n        }\n\n        getPool().execute(command);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Execute the runnable using the configured ThreadPoolExecutor obtained from  {@link #getPool()}.", "call_func_name": ["org.asteriskjava.fastagi.AbstractAgiServer.isDie", "org.asteriskjava.util.Log.warn", "org.asteriskjava.fastagi.AbstractAgiServer.getPool", "java.util.concurrent.ThreadPoolExecutor.execute"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.Runnable"]], "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.getPoolActiveTaskCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getPoolActiveTaskCount()\n    {\n        if (pool != null)\n        {\n            return pool.getActiveCount();\n        }\n        return -1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the approximate number of AgiConnectionHandler threads that are actively executing tasks.", "call_func_name": ["java.util.concurrent.ThreadPoolExecutor.getActiveCount"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "402", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AbstractAgiServer.java", "methodName": "org.asteriskjava.fastagi.AbstractAgiServer.createPool", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected ThreadPoolExecutor createPool()\n    {\n        return new ThreadPoolExecutor(poolSize, (maximumPoolSize < poolSize) ? poolSize : maximumPoolSize, 50000L,\n                TimeUnit.MILLISECONDS, new SynchronousQueue<Runnable>(), new DaemonThreadFactory());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ConditionalExpression#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ThreadPoolExecutor to serve the AGI requests. The nature of this pool defines how many concurrent requests can be handled. The default implementation returns a dynamic thread pool defined by the poolSize and maximumPoolSize properties. <p> You can override this method to change this behavior. For example you can use a cached pool with <pre> return Executors.newCachedThreadPool(new DaemonThreadFactory()); </pre>", "call_func_name": ["java.util.concurrent.SynchronousQueue.<init>", "org.asteriskjava.util.DaemonThreadFactory.<init>", "java.util.concurrent.ThreadPoolExecutor.<init>"], "call_func_parameter": [[""], [""], ["int", "int", "long", "java.util.concurrent.TimeUnit", "java.util.concurrent.BlockingQueue", "java.util.concurrent.ThreadFactory"]], "passed_comments": "/"}, {"index": "403", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/CompositeMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.CompositeMappingStrategy.CompositeMappingStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CompositeMappingStrategy()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty CompositeMappingStrategy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/CompositeMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.CompositeMappingStrategy.CompositeMappingStrategy", "methodParameterType": "MappingStrategy#", "methodParameterName": "strategies#", "methodBody": "public CompositeMappingStrategy(MappingStrategy... strategies)\n    {\n        super();\n        this.strategies = new ArrayList<>(Arrays.asList(strategies));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new CompositeMappingStrategy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/CompositeMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.CompositeMappingStrategy.CompositeMappingStrategy", "methodParameterType": "List<MappingStrategy>#", "methodParameterName": "strategies#", "methodBody": "public CompositeMappingStrategy(List<MappingStrategy> strategies)\n    {\n        super();\n        this.strategies = new ArrayList<>(strategies);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new CompositeMappingStrategy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/CompositeMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.CompositeMappingStrategy.addStrategy", "methodParameterType": "MappingStrategy#", "methodParameterName": "strategy#", "methodBody": "public void addStrategy(MappingStrategy strategy)\n    {\n        if (strategies == null)\n        {\n            strategies = new ArrayList<>();\n        }\n        strategies.add(strategy);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a strategy (at the end of the list).", "call_func_name": ["java.util.ArrayList.<init>", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/CompositeMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.CompositeMappingStrategy.setStrategies", "methodParameterType": "List<MappingStrategy>#", "methodParameterName": "strategies#", "methodBody": "public void setStrategies(List<MappingStrategy> strategies)\n    {\n        this.strategies = new ArrayList<>(strategies);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the strategies to use.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["java.util.Collection"]], "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiHangupException.java", "methodName": "org.asteriskjava.fastagi.AgiHangupException.AgiHangupException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AgiHangupException()\n    {\n        super(\"Channel was hung up.\");\n    }", "AST": "Javadoc#Modifier#SimpleName#StringLiteral#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation(StringLiteral)StringLiteral)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AgiHangupException.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getFirstLine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getFirstLine();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the first line of the raw reply.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "410", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getLines", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<String> getLines();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a List containing the lines of the raw reply.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "411", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getResultCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getResultCode();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the return code (the result as int).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getResultCodeAsChar", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "char getResultCodeAsChar();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the return code as character.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "413", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getResult();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the result, that is the part directly following the \"result=\" string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "414", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getStatus();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the status code.<p> Supported status codes are: <ul> <li>100 Trying <li>200 Success <li>510 Invalid or unknown command <li>511 Command Not Permitted on a dead channel (since Asterisk 1.6) <li>520 Invalid command syntax </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "415", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getAttribute", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "String getAttribute(String name);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns an additional attribute contained in the reply.<p> For example the reply to the StreamFileCommand contains an additional endpos attribute indicating the frame where the playback was stopped. This can be retrieved by calling getAttribute(\"endpos\") on the corresponding reply.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getExtra", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getExtra();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the text in parenthesis contained in this reply.<p> The meaning of this property depends on the command sent. Sometimes it contains a flag like \"timeout\" or \"hangup\" or - in case of the GetVariableCommand - the value of the variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "417", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getSynopsis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getSynopsis();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the synopsis of the command sent if Asterisk expected a different syntax (getStatus() == SC_INVALID_COMMAND_SYNTAX).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "418", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/reply/AgiReply.java", "methodName": "org.asteriskjava.fastagi.reply.AgiReply.getUsage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUsage();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the usage of the command sent if Asterisk expected a different syntax (getStatus() == SC_INVALID_COMMAND_SYNTAX).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServer.java", "methodName": "org.asteriskjava.fastagi.AgiServer.startup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void startup() throws IOException, IllegalStateException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts this AgiServer.<p> After calling startup() this AgiServer is ready to receive requests from Asterisk servers and process them.<p> Note that this method will not return until the AgiServer has been shut down. If you want to run the AgiServer in the background use wrap it with an  {@link AgiServerThread}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "420", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServer.java", "methodName": "org.asteriskjava.fastagi.AgiServer.shutdown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void shutdown() throws IllegalStateException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stops this AgiServer.<p> The server socket is closed, new connections are refused and resources  are freed. Any running  {@link AgiScript}s are finish before shutdown completes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "421", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServer.java", "methodName": "org.asteriskjava.fastagi.AgiServer.setSocketReadTimeout", "methodParameterType": "int#", "methodParameterName": "socketReadTimeout#", "methodBody": "void setSocketReadTimeout(int socketReadTimeout);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Connection is dropped if it stales on read longer than the timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "422", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "423", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUniqueId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the unqiue id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getLastReply", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AgiReply getLastReply();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the reply received in response to the last command sent to Asterisk.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "425", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sendCommand", "methodParameterType": "AgiCommand#", "methodParameterName": "command#", "methodBody": "AgiReply sendCommand(AgiCommand command) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a command to asterisk and returns the corresponding reply. The reply is also available through  {@link #getLastReply()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.answer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void answer() throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Answers the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "427", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.hangup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void hangup() throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Hangs the channel up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "428", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.setAutoHangup", "methodParameterType": "int#", "methodParameterName": "time#", "methodBody": "void setAutoHangup(int time) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Cause the channel to automatically hangup at the given number of seconds in the future.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "void setCallerId(String callerId) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the caller id on the current channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.playMusicOnHold", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void playMusicOnHold() throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays music on hold from the default music on hold class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.playMusicOnHold", "methodParameterType": "String#", "methodParameterName": "musicOnHoldClass#", "methodBody": "void playMusicOnHold(String musicOnHoldClass) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays music on hold from the given music on hold class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.stopMusicOnHold", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void stopMusicOnHold() throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stops playing music on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "433", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getChannelStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getChannelStatus() throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the status of the channel. <p> Return values: <ul> <li>0 Channel is down and available <li>1 Channel is down, but reserved <li>2 Channel is off hook <li>3 Digits (or equivalent) have been dialed <li>4 Line is ringing <li>5 Remote end is ringing <li>6 Line is up <li>7 Line is busy </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getData", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "String getData(String file) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file and waits for the user to enter DTMF digits until he presses '#'. The user may interrupt the streaming by starting to enter digits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getData", "methodParameterType": "String#long#", "methodParameterName": "file#timeout#", "methodBody": "String getData(String file, long timeout) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file and waits for the user to enter DTMF digits until he presses '#' or the timeout occurs. The user may interrupt the streaming by starting to enter digits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getData", "methodParameterType": "String#long#int#", "methodParameterName": "file#timeout#maxDigits#", "methodBody": "String getData(String file, long timeout, int maxDigits) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file and waits for the user to enter DTMF digits until he presses '#' or the timeout occurs or the maximum number of digits has been entered. The user may interrupt the streaming by starting to enter digits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "437", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getOption", "methodParameterType": "String#String#", "methodParameterName": "file#escapeDigits#", "methodBody": "char getOption(String file, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file, and waits for the user to press one of the given digits. If none of the escape digits is pressed while streaming the file it waits for the default timeout of 5 seconds still waiting for the user to press a digit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getOption", "methodParameterType": "String#String#long#", "methodParameterName": "file#escapeDigits#timeout#", "methodBody": "char getOption(String file, String escapeDigits, long timeout) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file, and waits for the user to press one of the given digits. If none of the escape digits is pressed while streaming the file it waits for the specified timeout still waiting for the user to press a digit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "439", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.confbridge", "methodParameterType": "String#String#", "methodParameterName": "room#profile#", "methodBody": "void confbridge(String room, String profile) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "since at least asterisk 13", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "440", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.meetme", "methodParameterType": "String#String#", "methodParameterName": "room#options#", "methodBody": "void meetme(String room, String options) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "since at least asterisk 1.4", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "441", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.exec", "methodParameterType": "String#", "methodParameterName": "application#", "methodBody": "int exec(String application) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Executes the given command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "442", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.exec", "methodParameterType": "String#String#", "methodParameterName": "application#options#", "methodBody": "int exec(String application, String... options) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Executes the given command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "443", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "void setContext(String context) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the context for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "444", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.setExtension", "methodParameterType": "String#", "methodParameterName": "extension#", "methodBody": "void setExtension(String extension) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the extension for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "445", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.setPriority", "methodParameterType": "String#", "methodParameterName": "priority#", "methodBody": "void setPriority(String priority) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the priority or label for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "446", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.streamFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "void streamFile(String file) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "447", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.streamFile", "methodParameterType": "String#String#", "methodParameterName": "file#escapeDigits#", "methodBody": "char streamFile(String file, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file and allows the user to escape by pressing one of the given digit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.streamFile", "methodParameterType": "String#String#int#", "methodParameterName": "file#escapeDigits#offset#", "methodBody": "char streamFile(String file, String escapeDigits, int offset) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file starting at the specified offset and allows the user to escape by pressing one of the given digit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "449", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayDigits", "methodParameterType": "String#", "methodParameterName": "digits#", "methodBody": "void sayDigits(String digits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given digit string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "450", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayDigits", "methodParameterType": "String#String#", "methodParameterName": "digits#escapeDigits#", "methodBody": "char sayDigits(String digits, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given number, returning early if any of the given DTMF number are received on the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "451", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayNumber", "methodParameterType": "String#", "methodParameterName": "number#", "methodBody": "void sayNumber(String number) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given number.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "452", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayNumber", "methodParameterType": "String#String#", "methodParameterName": "number#escapeDigits#", "methodBody": "char sayNumber(String number, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given number, returning early if any of the given DTMF number are received on the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "453", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayPhonetic", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "void sayPhonetic(String text) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given character string with phonetics.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "454", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayPhonetic", "methodParameterType": "String#String#", "methodParameterName": "text#escapeDigits#", "methodBody": "char sayPhonetic(String text, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given character string with phonetics, returning early if any of the given DTMF number are received on the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayAlpha", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "void sayAlpha(String text) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given character string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayAlpha", "methodParameterType": "String#String#", "methodParameterName": "text#escapeDigits#", "methodBody": "char sayAlpha(String text, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given character string, returning early if any of the given DTMF number are received on the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "457", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayTime", "methodParameterType": "long#", "methodParameterName": "time#", "methodBody": "void sayTime(long time) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "458", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayTime", "methodParameterType": "long#String#", "methodParameterName": "time#escapeDigits#", "methodBody": "char sayTime(long time, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given time, returning early if any of the given DTMF number are received on the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getVariable", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "String getVariable(String name) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the value of the current channel or global variable. <br> Supports functions and builtin variables. To retrieve the caller id you can use <code>getVariable(\"CALLERID(name)\");</code> <br> Does not support expression parsing, use  {@link #getFullVariable(String)}in those cases.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.setVariable", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "void setVariable(String name, String value) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the value of the current channel or global variable to a new value. <br> Supports functions and builtin variables. To set the caller id you can use <code>setVariable(\"CALLERID(name)\", \"John Doe\");</code>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "461", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.waitForDigit", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "char waitForDigit(int timeout) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Waits up to 'timeout' milliseconds to receive a DTMF digit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getFullVariable", "methodParameterType": "String#", "methodParameterName": "expr#", "methodBody": "String getFullVariable(String expr) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Evaluates a channel expression for the current channel. To extract the caller id use <code>getFullVariable(\"${CALLERID(name)}\");</code>. <p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "463", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.getFullVariable", "methodParameterType": "String#String#", "methodParameterName": "expr#channel#", "methodBody": "String getFullVariable(String expr, String channel) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Evaluates a channel expression for the given channel.To extract the caller id of channel use <code>getFullVariable(\"${CALLERID(name)}\", \"SIP/john-0085d860\");</code>. <p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "464", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayDateTime", "methodParameterType": "long#", "methodParameterName": "time#", "methodBody": "void sayDateTime(long time) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given time. <p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "465", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayDateTime", "methodParameterType": "long#String#", "methodParameterName": "time#escapeDigits#", "methodBody": "char sayDateTime(long time, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given time and allows interruption by one of the given escape digits. <p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "466", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayDateTime", "methodParameterType": "long#String#String#", "methodParameterName": "time#escapeDigits#format#", "methodBody": "char sayDateTime(long time, String escapeDigits, String format) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given time in the given format and allows interruption by one of the given escape digits. <p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "467", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.sayDateTime", "methodParameterType": "long#String#String#String#", "methodParameterName": "time#escapeDigits#format#timezone#", "methodBody": "char sayDateTime(long time, String escapeDigits, String format, String timezone) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Says the given time in the given format and timezone and allows interruption by one of the given escape digits. <p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "468", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.databaseGet", "methodParameterType": "String#String#", "methodParameterName": "family#key#", "methodBody": "String databaseGet(String family, String key) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Retrieves an entry in the Asterisk database for a given family and key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "469", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.databasePut", "methodParameterType": "String#String#String#", "methodParameterName": "family#key#value#", "methodBody": "void databasePut(String family, String key, String value) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Adds or updates an entry in the Asterisk database for a given family, key, and value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "470", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.databaseDel", "methodParameterType": "String#String#", "methodParameterName": "family#key#", "methodBody": "void databaseDel(String family, String key) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes an entry in the Asterisk database for a given family and key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.databaseDelTree", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "void databaseDelTree(String family) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes a whole family of entries in the Asterisk database.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "472", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.databaseDelTree", "methodParameterType": "String#String#", "methodParameterName": "family#keytree#", "methodBody": "void databaseDelTree(String family, String keytree) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes all entries of a given family in the Asterisk database that have a key that starts with a given prefix.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "473", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.verbose", "methodParameterType": "String#int#", "methodParameterName": "message#level#", "methodBody": "void verbose(String message, int level) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a message to the Asterisk console via the verbose message system.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "474", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.recordFile", "methodParameterType": "String#String#String#int#", "methodParameterName": "file#format#escapeDigits#timeout#", "methodBody": "char recordFile(String file, String format, String escapeDigits, int timeout) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Record to a file until a given dtmf digit in the sequence is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.recordFile", "methodParameterType": "String#String#String#int#int#boolean#int#", "methodParameterName": "file#format#escapeDigits#timeout#offset#beep#maxSilence#", "methodBody": "char recordFile(String file, String format, String escapeDigits, int timeout, int offset, boolean beep, int maxSilence)\n            throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Record to a file until a given dtmf digit in the sequence is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "476", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.controlStreamFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "void controlStreamFile(String file) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file allowing the user to control the streaming by using \"#\" for forward and \"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "477", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.controlStreamFile", "methodParameterType": "String#String#", "methodParameterName": "file#escapeDigits#", "methodBody": "char controlStreamFile(String file, String escapeDigits) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file allowing the user to control the streaming by using \"#\" for forward and \"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.controlStreamFile", "methodParameterType": "String#String#int#", "methodParameterName": "file#escapeDigits#offset#", "methodBody": "char controlStreamFile(String file, String escapeDigits, int offset) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file allowing the user to control the streaming by using \"#\" for forward and \"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "479", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.controlStreamFile", "methodParameterType": "String#String#int#String#String#String#", "methodParameterName": "file#escapeDigits#offset#forwardDigit#rewindDigit#pauseDigit#", "methodBody": "char controlStreamFile(String file, String escapeDigits, int offset, String forwardDigit, String rewindDigit,\n            String pauseDigit) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given file allowing the user to control the streaming by using forwardDigit for forward, rewindDigit for rewind and pauseDigit for pause. Pressing one of the escape digits stops streaming. The file is played starting at the indicated offset, use 0 to start at the beginning.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechCreate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void speechCreate() throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a speech object that uses the default speech engine. The speech object is used by the other speech methods and must be created before they are called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechCreate", "methodParameterType": "String#", "methodParameterName": "engine#", "methodBody": "void speechCreate(String engine) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a speech object that uses the given speech engine. The speech object is used by the other speech methods and must be created before they are called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechSet", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "void speechSet(String name, String value) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the speech engine setting indicated by name to the given value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechDestroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void speechDestroy() throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Destroys the current speech object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "484", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechLoadGrammar", "methodParameterType": "String#String#", "methodParameterName": "label#path#", "methodBody": "void speechLoadGrammar(String label, String path) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Loads the specified grammar. The grammer is then available for calls to {@link #speechActivateGrammar(String)} under the given name. Eplicitlyloading a grammer is only required if the grammer has not been defined in the speech engine configuration, e.g. the <code>[grammars]</code> section of <code>lumenvox.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "485", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechUnloadGrammar", "methodParameterType": "String#", "methodParameterName": "label#", "methodBody": "void speechUnloadGrammar(String label) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Unloads the specified grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "486", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechActivateGrammar", "methodParameterType": "String#", "methodParameterName": "label#", "methodBody": "void speechActivateGrammar(String label) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Activates the specified grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "487", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechDeactivateGrammar", "methodParameterType": "String#", "methodParameterName": "label#", "methodBody": "void speechDeactivateGrammar(String label) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deactivates the specified grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechRecognize", "methodParameterType": "String#int#", "methodParameterName": "prompt#timeout#", "methodBody": "SpeechRecognitionResult speechRecognize(String prompt, int timeout) throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given prompt while listening for speech and DTMF.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "489", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.speechRecognize", "methodParameterType": "String#int#int#", "methodParameterName": "prompt#timeout#offset#", "methodBody": "SpeechRecognitionResult speechRecognize(String prompt, int timeout, int offset) throws AgiException, AgiSpeechException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Plays the given prompt while listening for speech and DTMF.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "490", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.continueAt", "methodParameterType": "String#String#String#", "methodParameterName": "context#extension#priority#", "methodBody": "void continueAt(String context, String extension, String priority) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Defines the point in the dialplan where the call will continue when the AGI script returns. <p> This is a shortcut for calling  {@link #setContext(String)}, {@link #setExtension(String)} and {@link #setPriority(String)} in series.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "491", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.gosub", "methodParameterType": "String#String#String#", "methodParameterName": "context#extension#priority#", "methodBody": "void gosub(String context, String extension, String priority) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Calls a subroutine in the dialplan <br> This method is available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.gosub", "methodParameterType": "String#String#String#String#", "methodParameterName": "context#extension#priority#arguments#", "methodBody": "void gosub(String context, String extension, String priority, String... arguments) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Calls a subroutine in the dialplan <p> <br> This method is available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "493", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.dial", "methodParameterType": "String#int#String#", "methodParameterName": "target#timeout#options#", "methodBody": "void dial(String target, int timeout, String options) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "invoke the dial command", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "494", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannel.java", "methodName": "org.asteriskjava.fastagi.AgiChannel.bridge", "methodParameterType": "String#String#", "methodParameterName": "channelName#options#", "methodBody": "void bridge(String channelName, String options) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "invoke the bridge command", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiNetworkException.java", "methodName": "org.asteriskjava.fastagi.AgiNetworkException.AgiNetworkException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public AgiNetworkException(String message, Throwable cause)\n    {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AgiNetworkException with the given message and cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "496", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AsyncAgiServer.java", "methodName": "org.asteriskjava.fastagi.AsyncAgiServer.AsyncAgiServer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AsyncAgiServer()\n    {\n        this(new DefaultAgiChannelFactory());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiServer with a  {@link DefaultAgiChannelFactory}.<p> Note that you must set a  {@link org.asteriskjava.fastagi.MappingStrategy} before using it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AsyncAgiServer.java", "methodName": "org.asteriskjava.fastagi.AsyncAgiServer.AsyncAgiServer", "methodParameterType": "AgiChannelFactory#", "methodParameterName": "agiChannelFactory#", "methodBody": "public AsyncAgiServer(AgiChannelFactory agiChannelFactory)\n    {\n        super(agiChannelFactory);\n        this.connectionHandlers = new HashMap<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiServer with a custom  {@link AgiChannelFactory}.<p> Note that you must set a  {@link org.asteriskjava.fastagi.MappingStrategy} before using it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AsyncAgiServer.java", "methodName": "org.asteriskjava.fastagi.AsyncAgiServer.AsyncAgiServer", "methodParameterType": "MappingStrategy#", "methodParameterName": "mappingStrategy#", "methodBody": "public AsyncAgiServer(MappingStrategy mappingStrategy)\n    {\n        this(mappingStrategy, new DefaultAgiChannelFactory());\n        logger.debug(\"use default AgiChannelFactory\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiServer with the given MappingStrategy.<p> Please note that Async AGI does not currently support passing a script name, so your MappingStrategy must be aware that the  {@link org.asteriskjava.fastagi.AgiRequest#getScript() script}property of the AgiRequests will likely be <code>null</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "499", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AsyncAgiServer.java", "methodName": "org.asteriskjava.fastagi.AsyncAgiServer.AsyncAgiServer", "methodParameterType": "MappingStrategy#AgiChannelFactory#", "methodParameterName": "mappingStrategy#agiChannelFactory#", "methodBody": "public AsyncAgiServer(MappingStrategy mappingStrategy, AgiChannelFactory agiChannelFactory)\n    {\n        this(agiChannelFactory);\n        setMappingStrategy(mappingStrategy);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ConstructorInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiServer with the given MappingStrategy.<p> Please note that Async AGI does not currently support passing a script name, so your MappingStrategy must be aware that the  {@link org.asteriskjava.fastagi.AgiRequest#getScript() script}property of the AgiRequests will likely be <code>null</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "500", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AsyncAgiServer.java", "methodName": "org.asteriskjava.fastagi.AsyncAgiServer.AsyncAgiServer", "methodParameterType": "AgiScript#AgiChannelFactory#", "methodParameterName": "agiScript#agiChannelFactory#", "methodBody": "public AsyncAgiServer(AgiScript agiScript, AgiChannelFactory agiChannelFactory)\n    {\n        this(agiChannelFactory);\n        setMappingStrategy(new StaticMappingStrategy(agiScript));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ConstructorInvocation#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiServer that will execute the given AGI script for every request.<p> Internally this constructor uses a  {@link org.asteriskjava.fastagi.StaticMappingStrategy}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "501", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AsyncAgiServer.java", "methodName": "org.asteriskjava.fastagi.AsyncAgiServer.AsyncAgiServer", "methodParameterType": "AgiScript#", "methodParameterName": "agiScript#", "methodBody": "public AsyncAgiServer(AgiScript agiScript)\n    {\n        this(agiScript, new DefaultAgiChannelFactory());\n        logger.debug(\"use default AgiChannelFactory\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiServer that will execute the given AGI script for every request.<p> Internally this constructor uses a  {@link org.asteriskjava.fastagi.StaticMappingStrategy}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "502", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/InvalidOrUnknownCommandException.java", "methodName": "org.asteriskjava.fastagi.InvalidOrUnknownCommandException.InvalidOrUnknownCommandException", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public InvalidOrUnknownCommandException(String command)\n    {\n        super(\"Invalid or unknown command: \" + command);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#InfixExpression#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new InvalidOrUnknownCommandException.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "503", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiSpeechException.java", "methodName": "org.asteriskjava.fastagi.AgiSpeechException.AgiSpeechException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public AgiSpeechException(String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AgiSpeechException with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "504", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.ScriptEngineMappingStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ScriptEngineMappingStrategy()\n    {\n        this(DEFAULT_SCRIPT_PATH, DEFAULT_LIB_PATH);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new ScriptEngineMappingStrategy that searches for scripts in the current directory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "505", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.ScriptEngineMappingStrategy", "methodParameterType": "String[]#String[]#", "methodParameterName": "scriptPath#libPath#", "methodBody": "public ScriptEngineMappingStrategy(String[] scriptPath, String[] libPath)\n    {\n        setScriptPath(scriptPath);\n        setLibPath(libPath);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ScriptEngineMappingStrategy that searches for scripts on the given path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.setScriptPath", "methodParameterType": "String[]#", "methodParameterName": "scriptPath#", "methodBody": "public void setScriptPath(String[] scriptPath)\n    {\n        this.scriptPath = Arrays.copyOf(scriptPath, scriptPath.length);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the path to search for script files. <p> Default is \"agi\".", "call_func_name": ["java.util.Arrays.copyOf"], "call_func_parameter": [["java.lang.Object[]", "int"]], "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.setLibPath", "methodParameterType": "String[]#", "methodParameterName": "libPath#", "methodBody": "public void setLibPath(String[] libPath)\n    {\n        this.libPath = Arrays.copyOf(libPath, libPath.length);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the path to search for additional libraries (jar files). <p> Default is \"lib\".", "call_func_name": ["java.util.Arrays.copyOf"], "call_func_parameter": [["java.lang.Object[]", "int"]], "passed_comments": "/"}, {"index": "508", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getScriptEngine", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "protected ScriptEngine getScriptEngine(File file)\n    {\n        final String extension = getExtension(file.getName());\n        if (extension == null)\n        {\n            return null;\n        }\n\n        return getScriptEngineManager().getEngineByExtension(extension);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Searches for a ScriptEngine that can handle the given file.", "call_func_name": ["java.io.File.getName", "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getExtension", "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getScriptEngineManager", "javax.script.ScriptEngineManager.getEngineByExtension"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getExtension": "Returns the extension (the part after the last \".\") of the given script."}, {"org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getScriptEngineManager": "Returns the ScriptEngineManager to use for loading the ScriptEngine. The ScriptEngineManager is only created once and reused for subsequent requests. Override this method to provide your own implementation."}]}, {"index": "509", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getScriptEngineManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected synchronized ScriptEngineManager getScriptEngineManager()\n    {\n        if (scriptEngineManager == null)\n        {\n            this.scriptEngineManager = new ScriptEngineManager(getClassLoader());\n        }\n        return scriptEngineManager;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ScriptEngineManager to use for loading the ScriptEngine. The ScriptEngineManager is only created once and reused for subsequent requests. Override this method to provide your own implementation.", "call_func_name": ["org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getClassLoader", "javax.script.ScriptEngineManager.<init>"], "call_func_parameter": [[""], ["java.lang.ClassLoader"]], "passed_comments": [{"org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getClassLoader": "Returns the ClassLoader to use for the ScriptEngineManager. Adds all jar files in the \"lib\" subdirectory of the current directory to the class path. Override this method to provide your own ClassLoader."}]}, {"index": "510", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getClassLoader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected ClassLoader getClassLoader()\n    {\n        final ClassLoader parentClassLoader = Thread.currentThread().getContextClassLoader();\n        final List<URL> jarFileUrls = new ArrayList<>();\n\n        if (libPath == null || libPath.length == 0)\n        {\n            return parentClassLoader;\n        }\n\n        for (String libPathEntry : libPath)\n        {\n            final File libDir = new File(libPathEntry);\n            if (!libDir.isDirectory())\n            {\n                continue;\n            }\n\n            final File[] jarFiles = libDir.listFiles(new FilenameFilter()\n            {\n                public boolean accept(File dir, String name)\n                {\n                    return name.endsWith(\".jar\");\n                }\n            });\n            if (jarFiles != null)\n            {\n\n                for (File jarFile : jarFiles)\n                {\n                    try\n                    {\n                        jarFileUrls.add(jarFile.toURI().toURL());\n                    }\n                    catch (MalformedURLException e)\n                    {\n                        // should not happen\n                    }\n                }\n            }\n            else\n            {\n                logger.error(\"Didn't find any jar files at \" + libDir.getAbsolutePath());\n            }\n        }\n\n        if (jarFileUrls.isEmpty())\n        {\n            return parentClassLoader;\n        }\n\n        return new URLClassLoader(jarFileUrls.toArray(new URL[jarFileUrls.size()]), parentClassLoader);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ClassLoader to use for the ScriptEngineManager. Adds all jar files in the \"lib\" subdirectory of the current directory to the class path. Override this method to provide your own ClassLoader.", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.util.ArrayList.<init>", "java.io.File.<init>", "java.io.File.isDirectory", "java.io.File.listFiles", "java.io.File.toURI", "java.net.URI.toURL", "java.util.List.add", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.io.File.getAbsolutePath", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "java.util.List.isEmpty", "java.util.List.size", "java.util.List.toArray", "java.net.URLClassLoader.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.io.FilenameFilter"], [""], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object[]"], ["java.net.URL[]", "java.lang.ClassLoader"]], "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.searchFile", "methodParameterType": "String#String[]#", "methodParameterName": "scriptName#path#", "methodBody": "protected File searchFile(String scriptName, String[] path)\n    {\n        if (scriptName == null || path == null)\n        {\n            return null;\n        }\n\n        for (String pathElement : path)\n        {\n            final File pathElementDir = new File(pathElement);\n            // skip if pathElement is not a directory\n            if (!pathElementDir.isDirectory())\n            {\n                continue;\n            }\n\n            final File file = new File(pathElementDir, scriptName.replaceAll(\"/\", Matcher.quoteReplacement(File.separator)));\n            if (!file.exists())\n            {\n                continue;\n            }\n\n            try\n            {\n                // prevent attacks with scripts using \"..\" in their name.\n                if (!isInside(file, pathElementDir))\n                {\n                    return null;\n                }\n            }\n            catch (IOException e)\n            {\n                logger.warn(\"Unable to check whether '\" + file.getPath() + \"' is below '\" + pathElementDir.getPath() + \"'\");\n                continue;\n            }\n\n            try\n            {\n                return file.getCanonicalFile();\n            }\n            catch (IOException e)\n            {\n                logger.error(\"Unable to get canonical file for '\" + file.getPath() + \"'\", e);\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#ContinueStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)CatchClause)TryStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Searches for the file with the given name on the path.", "call_func_name": ["java.io.File.<init>", "java.io.File.isDirectory", "java.util.regex.Matcher.quoteReplacement", "java.lang.String.replaceAll", "java.io.File.<init>", "java.io.File.exists", "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.isInside", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.io.File.getPath", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.warn", "java.io.File.getCanonicalFile", "org.asteriskjava.util.Log.error"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.io.File", "java.lang.String"], [""], ["java.io.File", "java.io.File"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.fastagi.ScriptEngineMappingStrategy.isInside": "Checks whether a file is contained within a given directory (or a sub directory) or not."}]}, {"index": "512", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.isInside", "methodParameterType": "File#File#", "methodParameterName": "file#dir#", "methodBody": "protected final boolean isInside(File file, File dir) throws IOException\n    {\n        return file.getCanonicalPath().startsWith(dir.getCanonicalPath());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether a file is contained within a given directory (or a sub directory) or not.", "call_func_name": ["java.io.File.getCanonicalPath", "java.lang.String.startsWith"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "513", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.getExtension", "methodParameterType": "String#", "methodParameterName": "scriptName#", "methodBody": "protected static String getExtension(String scriptName)\n    {\n        if (scriptName == null)\n        {\n            return null;\n        }\n\n        int filePosition = scriptName.lastIndexOf(\"/\");\n        String fileName;\n\n        if (scriptName.lastIndexOf(\"\\\\\") > filePosition)\n        {\n            filePosition = scriptName.lastIndexOf(\"\\\\\");\n        }\n\n        if (filePosition >= 0)\n        {\n            fileName = scriptName.substring(filePosition + 1);\n        }\n        else\n        {\n            fileName = scriptName;\n        }\n\n        final int extensionPosition = fileName.lastIndexOf(\".\");\n        if (extensionPosition >= 0)\n        {\n            return fileName.substring(extensionPosition + 1);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension (the part after the last \".\") of the given script.", "call_func_name": ["java.lang.String.lastIndexOf", "java.lang.String.substring"], "call_func_parameter": [["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "514", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ScriptEngineMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ScriptEngineMappingStrategy.populateBindings", "methodParameterType": "File#AgiRequest#AgiChannel#Bindings#", "methodParameterName": "file#request#channel#bindings#", "methodBody": "protected void populateBindings(File file, AgiRequest request, AgiChannel channel, Bindings bindings)\n    {\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Override this method if you want to add additional bindings before the script is run. By default the AGI request, AGI channel and the filename are available to scripts under the bindings \"request\", \"channel\" and \"javax.script.filename\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "515", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiScript.java", "methodName": "org.asteriskjava.fastagi.AgiScript.service", "methodParameterType": "AgiRequest#AgiChannel#", "methodParameterName": "request#channel#", "methodBody": "void service(final AgiRequest request, final AgiChannel channel) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "The service method is called by the AsteriskServer whenever this AgiScript should handle an incoming AgiRequest.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "516", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/FastAgiConnectionHandler.java", "methodName": "org.asteriskjava.fastagi.internal.FastAgiConnectionHandler.FastAgiConnectionHandler", "methodParameterType": "MappingStrategy#SocketConnectionFacade#AgiChannelFactory#", "methodParameterName": "mappingStrategy#socket#agiChannelFactory#", "methodBody": "public FastAgiConnectionHandler(MappingStrategy mappingStrategy, SocketConnectionFacade socket, AgiChannelFactory agiChannelFactory)\n    {\n        super(mappingStrategy, agiChannelFactory);\n        this.socket = socket;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FastAGIConnectionHandler to handle the given FastAGI socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AsyncAgiConnectionHandler.java", "methodName": "org.asteriskjava.fastagi.internal.AsyncAgiConnectionHandler.AsyncAgiConnectionHandler", "methodParameterType": "MappingStrategy#AsyncAgiEvent#AgiChannelFactory#", "methodParameterName": "mappingStrategy#asyncAgiStartEvent#agiChannelFactory#", "methodBody": "public AsyncAgiConnectionHandler(MappingStrategy mappingStrategy, AsyncAgiEvent asyncAgiStartEvent, AgiChannelFactory agiChannelFactory) throws IllegalArgumentException\n    {\n        super(mappingStrategy, agiChannelFactory);\n        if (!asyncAgiStartEvent.isStart())\n        {\n            throw new IllegalArgumentException(\"AsyncAgiEvent passed to AsyncAgiConnectionHandler is not a start sub event\");\n        }\n        connection = (ManagerConnection) asyncAgiStartEvent.getSource();\n        channelName = asyncAgiStartEvent.getChannel();\n        environment = asyncAgiStartEvent.decodeEnv();\n        asyncAgiEvents = new LinkedBlockingQueue<>();\n        setIgnoreMissingScripts(true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FastAGIConnectionHandler to handle the given FastAGI socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "518", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiConnectionHandler.java", "methodName": "org.asteriskjava.fastagi.internal.AgiConnectionHandler.AgiConnectionHandler", "methodParameterType": "MappingStrategy#AgiChannelFactory#", "methodParameterName": "mappingStrategy#agiChannelFactory#", "methodBody": "protected AgiConnectionHandler(MappingStrategy mappingStrategy, AgiChannelFactory agiChannelFactory)\n    {\n        if (mappingStrategy == null)\n        {\n            throw new IllegalArgumentException(\"MappingStrategy must not be null\");\n        }\n        if (agiChannelFactory == null)\n        {\n            throw new IllegalArgumentException(\"AgiChannelFactory must not be null\");\n        }\n\n        this.agiChannelFactory = agiChannelFactory;\n        this.mappingStrategy = mappingStrategy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AGIConnectionHandler to handle the given socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "519", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiConnectionHandler.java", "methodName": "org.asteriskjava.fastagi.internal.AgiConnectionHandler.release", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void release();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Release any open resources like closing a socket.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "520", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiConnectionHandler.java", "methodName": "org.asteriskjava.fastagi.internal.AgiConnectionHandler.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static AgiChannel getChannel()\n    {\n        return AgiConnectionHandler.channel.get();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AgiChannel associated with the current thread.", "call_func_name": ["java.lang.ThreadLocal.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "521", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiReplyImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiReplyImpl.getUsage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsage()\n    {\n        if (usage == null)\n        {\n            StringBuilder usageSB;\n\n            usageSB = new StringBuilder();\n            for (int i = 2; i < lines.size(); i++)\n            {\n                String line;\n\n                line = lines.get(i);\n                if (END_OF_PROPER_USAGE.equals(line))\n                {\n                    break;\n                }\n\n                usageSB.append(line.trim());\n                usageSB.append(\" \");\n            }\n            usage = usageSB.toString().trim();\n        }\n        return usage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the usage of the command sent if Asterisk expected a different syntax (getStatus() == SC_INVALID_COMMAND_SYNTAX).", "call_func_name": ["java.lang.StringBuilder.<init>", "java.util.List.size", "java.util.List.get", "java.lang.String.equals", "java.lang.String.trim", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.Object"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "522", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.AgiRequestImpl", "methodParameterType": "List<String>#", "methodParameterName": "environment#", "methodBody": "AgiRequestImpl(final List<String> environment)\n    {\n        this(buildMap(environment));\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AGIRequestImpl.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.AgiRequestImpl", "methodParameterType": "Map<String,String>#", "methodParameterName": "request#", "methodBody": "private AgiRequestImpl(final Map<String, String> request)\n    {\n        this.request = request;\n\n        script = request.get(\"network_script\");\n        if (script != null)\n        {\n            Matcher scriptMatcher = SCRIPT_PATTERN.matcher(script);\n            if (scriptMatcher.matches())\n            {\n                script = scriptMatcher.group(1);\n                parameters = scriptMatcher.group(2);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgiRequestImpl based on a preparsed map of parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.buildMap", "methodParameterType": "Collection<String>#", "methodParameterName": "lines#", "methodBody": "private static Map<String, String> buildMap(final Collection<String> lines) throws IllegalArgumentException\n    {\n        final Map<String, String> map;\n\n        if (lines == null)\n        {\n            throw new IllegalArgumentException(\"Environment must not be null.\");\n        }\n\n        map = new HashMap<>();\n\n        for (String line : lines)\n        {\n            int colonPosition;\n            String key;\n            String value;\n\n            colonPosition = line.indexOf(':');\n\n            // no colon on the line?\n            if (colonPosition < 0)\n            {\n                continue;\n            }\n\n            // key doesn't start with agi_ or ogi_?\n            if (!line.startsWith(\"agi_\") && !line.startsWith(\"ogi_\"))\n            {\n                continue;\n            }\n\n            // first colon in line is last character -> no value present?\n            if (line.length() < colonPosition + 2)\n            {\n                continue;\n            }\n\n            key = line.substring(4, colonPosition).toLowerCase(Locale.ENGLISH);\n            value = line.substring(colonPosition + 2);\n\n            if (value.length() != 0)\n            {\n                map.put(key, value);\n            }\n        }\n\n        return map;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a map containing variable names as key (with the \"agi_\" or \"ogi_\" prefix stripped) and the corresponding values. <p> Syntactically invalid and empty variables are skipped.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.HashMap.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.indexOf", "java.lang.String.startsWith", "java.lang.String.length", "java.lang.String.substring", "java.lang.String.toLowerCase", "java.lang.String.substring", "java.util.Map.put"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["int"], ["java.lang.String"], [""], ["int", "int"], ["java.util.Locale"], ["int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.getScript", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized String getScript()\n    {\n        return script;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the script to execute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.getRequestURL", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRequestURL()\n    {\n        return request.get(\"request\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the full URL of the request in the form agi://host[:port][/script].", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return request.get(\"channel\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return request.get(\"uniqueid\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unqiue id of the channel.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "529", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.getCallerId10", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private synchronized String getCallerId10()\n    {\n        final String[] parsedCallerId;\n\n        if (!callerIdCreated)\n        {\n            rawCallerId = request.get(\"callerid\");\n            callerIdCreated = true;\n        }\n\n        parsedCallerId = AstUtil.parseCallerId(rawCallerId);\n        if (parsedCallerId[1] == null)\n        {\n            return parsedCallerId[0];\n        }\n        return parsedCallerId[1];\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#NullLiteral#InfixExpression#SimpleName#NumberLiteral#ArrayAccess#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ReturnStatement)Block)IfStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": ["java.util.Map.get", "org.asteriskjava.util.AstUtil.parseCallerId"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.AstUtil.parseCallerId": "Parses a string for caller id information. <br> The caller id string should be in the form <code>\"Some Name\" &lt;1234&gt;</code>. <br> This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code> but strips any whitespace."}]}, {"index": "530", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.getCallerIdName10", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private synchronized String getCallerIdName10()\n    {\n        if (!callerIdCreated)\n        {\n            rawCallerId = request.get(\"callerid\");\n            callerIdCreated = true;\n        }\n\n        return AstUtil.parseCallerId(rawCallerId)[0];\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": ["java.util.Map.get", "org.asteriskjava.util.AstUtil.parseCallerId"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.AstUtil.parseCallerId": "Parses a string for caller id information. <br> The caller id string should be in the form <code>\"Some Name\" &lt;1234&gt;</code>. <br> This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code> but strips any whitespace."}]}, {"index": "531", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/internal/AgiRequestImpl.java", "methodName": "org.asteriskjava.fastagi.internal.AgiRequestImpl.parseParameters", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "private synchronized Map<String, String[]> parseParameters(String s)\n    {\n        Map<String, List<String>> parameterMap;\n        Map<String, String[]> result;\n        StringTokenizer st;\n\n        parameterMap = new HashMap<>();\n        result = new HashMap<>();\n\n        if (s == null)\n        {\n            return result;\n        }\n\n        st = new StringTokenizer(s, \"&\");\n        while (st.hasMoreTokens())\n        {\n            String parameter;\n            Matcher parameterMatcher;\n            String name;\n            String value;\n            List<String> values;\n\n            parameter = st.nextToken();\n            parameterMatcher = PARAMETER_PATTERN.matcher(parameter);\n            if (parameterMatcher.matches())\n            {\n                try\n                {\n                    name = URLDecoder.decode(parameterMatcher.group(1), \"UTF-8\");\n                    value = URLDecoder.decode(parameterMatcher.group(2), \"UTF-8\");\n                }\n                catch (UnsupportedEncodingException e)\n                {\n                    logger.error(\"Unable to decode parameter '\" + parameter + \"'\", e);\n                    continue;\n                }\n            }\n            else\n            {\n                try\n                {\n                    name = URLDecoder.decode(parameter, \"UTF-8\");\n                    value = \"\";\n                }\n                catch (UnsupportedEncodingException e)\n                {\n                    logger.error(\"Unable to decode parameter '\" + parameter + \"'\", e);\n                    continue;\n                }\n            }\n\n            if (parameterMap.get(name) == null)\n            {\n                values = new ArrayList<>();\n                values.add(value);\n                parameterMap.put(name, values);\n            }\n            else\n            {\n                values = parameterMap.get(name);\n                values.add(value);\n            }\n        }\n\n        for (Map.Entry<String, List<String>> entry : parameterMap.entrySet())\n        {\n            String[] valueArray;\n\n            valueArray = new String[entry.getValue().size()];\n            result.put(entry.getKey(), entry.getValue().toArray(valueArray));\n        }\n\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ArrayCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)CatchClause)TryStatement)Block(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses the given parameter string and caches the result.", "call_func_name": ["java.util.HashMap.<init>", "java.util.StringTokenizer.<init>", "java.util.StringTokenizer.hasMoreTokens", "java.util.StringTokenizer.nextToken", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.group", "java.net.URLDecoder.decode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "java.util.Map.get", "java.util.ArrayList.<init>", "java.util.List.add", "java.util.Map.put", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.size", "java.util.List.toArray"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.CharSequence"], [""], ["int"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Throwable"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ResourceBundleMappingStrategy.ResourceBundleMappingStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResourceBundleMappingStrategy()\n    {\n        this(DEFAULT_RESOURCE_BUNDLE_NAME);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new ResourceBundleMappingStrategy using shared instances..", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "533", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ResourceBundleMappingStrategy.ResourceBundleMappingStrategy", "methodParameterType": "String#", "methodParameterName": "resourceBundleName#", "methodBody": "public ResourceBundleMappingStrategy(String resourceBundleName)\n    {\n        this(resourceBundleName, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new ResourceBundleMappingStrategy with the given basename of the resource bundle to use.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ResourceBundleMappingStrategy.ResourceBundleMappingStrategy", "methodParameterType": "boolean#", "methodParameterName": "shareInstances#", "methodBody": "public ResourceBundleMappingStrategy(boolean shareInstances)\n    {\n        this(DEFAULT_RESOURCE_BUNDLE_NAME, shareInstances);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new ResourceBundleMappingStrategy indicating whether to use shared instances or not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "535", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ResourceBundleMappingStrategy.ResourceBundleMappingStrategy", "methodParameterType": "String#boolean#", "methodParameterName": "resourceBundleName#shareInstances#", "methodBody": "public ResourceBundleMappingStrategy(String resourceBundleName, boolean shareInstances)\n    {\n        super();\n        this.resourceBundleName = resourceBundleName;\n        this.shareInstances = shareInstances;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ResourceBundleMappingStrategy with the given basename of the resource bundle to use and indicating whether to use shared instances or not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "536", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ResourceBundleMappingStrategy.setResourceBundleName", "methodParameterType": "String#", "methodParameterName": "resourceBundleName#", "methodBody": "public void setResourceBundleName(String resourceBundleName)\n    {\n        this.resourceBundleName = resourceBundleName;\n        synchronized (this)\n        {\n            this.mappings = null;\n            this.instances = null;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(SynchronizedStatement(ThisExpression)ThisExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Sets the basename of the resource bundle to use. <p> Default is \"fastagi-mapping\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "537", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ResourceBundleMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ResourceBundleMappingStrategy.setShareInstances", "methodParameterType": "boolean#", "methodParameterName": "shareInstances#", "methodBody": "public synchronized void setShareInstances(boolean shareInstances)\n    {\n        this.shareInstances = shareInstances;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether to use shared instances or not. If set to <code>true</code> all AgiRequests are served by the same instance of an AgiScript, if set to <code>false</code> a new instance is created for each request. <p> Default is <code>true</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "538", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiChannelFactory.java", "methodName": "org.asteriskjava.fastagi.AgiChannelFactory.createAgiChannel", "methodParameterType": "AgiRequest#AgiWriter#AgiReader#", "methodParameterName": "request#agiWriter#agiReader#", "methodBody": "AgiChannel createAgiChannel(AgiRequest request, AgiWriter agiWriter, AgiReader agiReader);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new AgiChannel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "539", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.isDtmf", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDtmf()\n    {\n        return \"digit\".equals(agiReply.getExtra());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether a DTMF digit was recieved.", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getExtra", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getExtra": "Returns the text in parenthesis contained in this reply.<p> The meaning of this property depends on the command sent. Sometimes it contains a flag like \"timeout\" or \"hangup\" or - in case of the GetVariableCommand - the value of the variable."}]}, {"index": "540", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.isSpeech", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSpeech()\n    {\n        return \"speech\".equals(agiReply.getExtra());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether speech was recognized.", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getExtra", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getExtra": "Returns the text in parenthesis contained in this reply.<p> The meaning of this property depends on the command sent. Sometimes it contains a flag like \"timeout\" or \"hangup\" or - in case of the GetVariableCommand - the value of the variable."}]}, {"index": "541", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.isTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isTimeout()\n    {\n        return \"timeout\".equals(agiReply.getExtra());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether a timeout was encountered and neither a DTMF digit was received nor speech was recognized.", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getExtra", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getExtra": "Returns the text in parenthesis contained in this reply.<p> The meaning of this property depends on the command sent. Sometimes it contains a flag like \"timeout\" or \"hangup\" or - in case of the GetVariableCommand - the value of the variable."}]}, {"index": "542", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.getDigit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public char getDigit()\n    {\n        final String digit = agiReply.getAttribute(\"digit\");\n        if (digit == null || digit.length() == 0)\n        {\n            return 0x0;\n        }\n        return digit.charAt(0);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the DTMF digit that was received.", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getAttribute", "java.lang.String.length", "java.lang.String.charAt"], "call_func_parameter": [["java.lang.String"], [""], ["int"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getAttribute": "Returns an additional attribute contained in the reply.<p> For example the reply to the StreamFileCommand contains an additional endpos attribute indicating the frame where the playback was stopped. This can be retrieved by calling getAttribute(\"endpos\") on the corresponding reply."}]}, {"index": "543", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.getEndpos", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getEndpos()\n    {\n        return Integer.parseInt(agiReply.getAttribute(\"endpos\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the position where the prompt stopped playing because a DTMF digit was received or speech was recognized (barge in).", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getAttribute", "java.lang.Integer.parseInt"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getAttribute": "Returns an additional attribute contained in the reply.<p> For example the reply to the StreamFileCommand contains an additional endpos attribute indicating the frame where the playback was stopped. This can be retrieved by calling getAttribute(\"endpos\") on the corresponding reply."}]}, {"index": "544", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.getScore", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getScore()\n    {\n        final String score0 = agiReply.getAttribute(\"score0\");\n        return score0 == null ? 0 : Integer.parseInt(score0);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the confidence score for the first recognition result. This is an integer between 0 (lowest confidence) and 1000 (highest confidence).", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getAttribute", "java.lang.Integer.parseInt"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getAttribute": "Returns an additional attribute contained in the reply.<p> For example the reply to the StreamFileCommand contains an additional endpos attribute indicating the frame where the playback was stopped. This can be retrieved by calling getAttribute(\"endpos\") on the corresponding reply."}]}, {"index": "545", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.getText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getText()\n    {\n        return agiReply.getAttribute(\"text0\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the text for the first recognition result. This is the text that was recognized by the speech engine.", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getAttribute"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getAttribute": "Returns an additional attribute contained in the reply.<p> For example the reply to the StreamFileCommand contains an additional endpos attribute indicating the frame where the playback was stopped. This can be retrieved by calling getAttribute(\"endpos\") on the corresponding reply."}]}, {"index": "546", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.getGrammar", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGrammar()\n    {\n        return agiReply.getAttribute(\"grammar0\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the grammar for the first recognition result. This is the grammar that was used by the speech engine.", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getAttribute"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getAttribute": "Returns an additional attribute contained in the reply.<p> For example the reply to the StreamFileCommand contains an additional endpos attribute indicating the frame where the playback was stopped. This can be retrieved by calling getAttribute(\"endpos\") on the corresponding reply."}]}, {"index": "547", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/SpeechRecognitionResult.java", "methodName": "org.asteriskjava.fastagi.SpeechRecognitionResult.getNumberOfResults", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getNumberOfResults()\n    {\n        final String numberOfResults = agiReply.getAttribute(\"results\");\n        return numberOfResults == null ? 0 : Integer.parseInt(numberOfResults);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns how many results have been recoginized. Usually there is only one result but if multiple rules in the grammar match multiple results may be returned.", "call_func_name": ["org.asteriskjava.fastagi.reply.AgiReply.getAttribute", "java.lang.Integer.parseInt"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.fastagi.reply.AgiReply.getAttribute": "Returns an additional attribute contained in the reply.<p> For example the reply to the StreamFileCommand contains an additional endpos attribute indicating the frame where the playback was stopped. This can be retrieved by calling getAttribute(\"endpos\") on the corresponding reply."}]}, {"index": "548", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> getRequest();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a Map containing the raw request name/value pairs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "549", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getScript", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getScript();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the script to execute including its full path.<p> This corresponds to the request url with protocol, host, port and parameters stripped off.<p> As Async AGI does not yet pass a script parameter this property will be <code>null</code> for requests received through Async AGI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getRequestURL", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getRequestURL();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the full URL of the requestURL in the form <code>agi://host[:port][/script][?param1=value1&amp;param2=value2]</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "551", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "552", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUniqueId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the unqiue id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "553", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getType();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the type of the channel, for example \"SIP\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "554", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getLanguage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getLanguage();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the language set for the current channel, for example \"en\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated String getCallerId();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "556", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getCallerIdNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getCallerIdNumber();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "557", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getCallerIdName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getCallerIdName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "558", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getDnid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDnid();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number, that has been dialed by the user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "559", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getRdnis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getRdnis();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "If this call has been forwared, the number of the person doing the redirect is returned (Redirected dialed number identification service).<p> This is usally only only available on PRI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "560", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getContext();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the context in the dial plan from which the AGI script was called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "561", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getExtension();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the extension in the dial plan from which the AGI script was called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "562", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getPriority();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the priority of the dial plan entry the AGI script was called from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "563", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getEnhanced", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Boolean getEnhanced();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns wheather this agi is passed audio (EAGI - Enhanced AGI).<p> Enhanced AGI is currently not supported on FastAGI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "564", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getAccountCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAccountCode();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the account code set for the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "565", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getCallingPres", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getCallingPres();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Callerid presentation/screening.<p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "566", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getCallingAni2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getCallingAni2();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Callerid ANI 2 (Info digits).<p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "567", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getCallingTon", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getCallingTon();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Callerid Type of Number.<p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "568", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getCallingTns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getCallingTns();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Callerid Transit Network Select.<p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "569", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getParameter", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "String getParameter(String name);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the value of a request parameter as a String, or <code>null</code> if the parameter does not exist. You should only use this method when you are sure the parameter has only one value.<p> If the parameter might have more than one value, use {@link #getParameterValues(String)}.<p> If you use this method with a multivalued parameter, the value returned is equal to the first value in the array returned by <code>getParameterValues</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "570", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getParameterValues", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "String[] getParameterValues(String name);", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns an array of String objects containing all of the values the given request parameter has, or an empty array if the parameter does not exist.<p> If the parameter has a single value, the array has a length of 1.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "571", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getParameterMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String[]> getParameterMap();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a Map of the parameters of this request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "572", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getArguments", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String[] getArguments();", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the array of arguments passed from the AGI dialplan command.<p> Example:  {@code AGI(agi://localhost/HelloWorld,value1,,value2)} results in{@code getArguments()[0] = \"value1\"},  {@code getArguments()[1] = null}and  {@code getArguments()[2] = \"value2\"}.<p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getLocalAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetAddress getLocalAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the local address this channel, that is the IP address of the AGI server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "574", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getLocalPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getLocalPort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the local port of this channel, that is the port the AGI server is listening on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "575", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getRemoteAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetAddress getRemoteAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the remote address of this channel, that is the IP address of the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiRequest.java", "methodName": "org.asteriskjava.fastagi.AgiRequest.getRemotePort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getRemotePort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the remote port of this channel, that is the client port the Asterisk server is using for the AGI connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "577", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ClassNameMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ClassNameMappingStrategy.ClassNameMappingStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ClassNameMappingStrategy()\n    {\n        this(true);\n    }", "AST": "Javadoc#Modifier#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new ClassNameMappingStrategy using shared instances.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "578", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ClassNameMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ClassNameMappingStrategy.ClassNameMappingStrategy", "methodParameterType": "boolean#", "methodParameterName": "shareInstances#", "methodBody": "public ClassNameMappingStrategy(boolean shareInstances)\n    {\n        super();\n        this.instances = new HashMap<>();\n        this.shareInstances = shareInstances;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ClassNameMappingStrategy indicating whether to use shared instances or not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "579", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/ClassNameMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.ClassNameMappingStrategy.setShareInstances", "methodParameterType": "boolean#", "methodParameterName": "shareInstances#", "methodBody": "public synchronized void setShareInstances(boolean shareInstances)\n    {\n        this.shareInstances = shareInstances;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether to use shared instances or not. If set to <code>true</code> all AGIRequests are served by the same instance of an AGIScript, if set to <code>false</code> a new instance is created for each request.<p> Default is <code>true</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "580", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/MappingStrategy.java", "methodName": "org.asteriskjava.fastagi.MappingStrategy.determineScript", "methodParameterType": "AgiRequest#AgiChannel#", "methodParameterName": "request#channel#", "methodBody": "AgiScript determineScript(AgiRequest request, AgiChannel channel);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the AgiScript instance that is responsible to handle  the given request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServerThread.java", "methodName": "org.asteriskjava.fastagi.AgiServerThread.AgiServerThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AgiServerThread()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AgiServerThread. <p> Before you can run this thread you must set an  {@link AgiServer} using{@link #setAgiServer(AgiServer)}. <p> This constructor is mainly intended for use with setter based dependency injection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "582", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServerThread.java", "methodName": "org.asteriskjava.fastagi.AgiServerThread.AgiServerThread", "methodParameterType": "AgiServer#", "methodParameterName": "agiServer#", "methodBody": "public AgiServerThread(AgiServer agiServer)\n    {\n        super();\n        this.agiServer = agiServer;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgiServerThread that runs the given  {@link AgiServer}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "583", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServerThread.java", "methodName": "org.asteriskjava.fastagi.AgiServerThread.setAgiServer", "methodParameterType": "AgiServer#", "methodParameterName": "agiServer#", "methodBody": "public synchronized void setAgiServer(AgiServer agiServer)\n    {\n        this.agiServer = agiServer;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the AgiServer to run. <p> This property must be set before starting the AgiServerThread by calling startup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "584", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServerThread.java", "methodName": "org.asteriskjava.fastagi.AgiServerThread.setDaemon", "methodParameterType": "boolean#", "methodParameterName": "daemon#", "methodBody": "public void setDaemon(boolean daemon)\n    {\n        this.daemon = daemon;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Marks the thread as either a daemon thread or a user thread. <p> Default is <code>true</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "585", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServerThread.java", "methodName": "org.asteriskjava.fastagi.AgiServerThread.startup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized void startup() throws IllegalStateException, RuntimeException\n    {\n        if (agiServer == null)\n        {\n            throw new IllegalStateException(\"Mandatory property agiServer is not set.\");\n        }\n\n        if (thread != null)\n        {\n            throw new IllegalStateException(\"AgiServer is already started\");\n        }\n\n        thread = createThread();\n        thread.start();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Starts the AgiServer in its own thread. <p> Note: The AgiServerThread is designed to handle one AgiServer instance at a time so calling this method twice without stopping the AgiServer in between will result in a RuntimeException.", "call_func_name": ["java.lang.IllegalStateException.<init>", "org.asteriskjava.fastagi.AgiServerThread.createThread", "java.lang.Thread.start"], "call_func_parameter": [["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "586", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiServerThread.java", "methodName": "org.asteriskjava.fastagi.AgiServerThread.shutdown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized void shutdown() throws IllegalStateException\n    {\n        if (agiServer == null)\n        {\n            throw new IllegalStateException(\"Mandatory property agiServer is not set.\");\n        }\n\n        agiServer.shutdown();\n\n        if (thread != null)\n        {\n            try\n            {\n                thread.join();\n            }\n            catch (InterruptedException e)\n            {\n                logger.warn(\"Interrupted while waiting for AgiServer to shutdown.\");\n                Thread.currentThread().interrupt();\n            }\n            thread = null; // NOPMD by srt on 7/5/06 11:23 PM\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Stops the  {@link AgiServer}. <p> The AgiServer must have been started by calling  {@link #startup()} beforeyou can stop it.", "call_func_name": ["java.lang.IllegalStateException.<init>", "org.asteriskjava.fastagi.AgiServer.shutdown", "java.lang.Thread.join", "org.asteriskjava.util.Log.warn", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.Object"], [""], [""]], "passed_comments": [{"org.asteriskjava.fastagi.AgiServer.shutdown": "Stops this AgiServer.<p> The server socket is closed, new connections are refused and resources  are freed. Any running  {@link AgiScript}s are finish before shutdown completes."}]}, {"index": "587", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiWriter.java", "methodName": "org.asteriskjava.fastagi.AgiWriter.sendCommand", "methodParameterType": "AgiCommand#", "methodParameterName": "command#", "methodBody": "void sendCommand(AgiCommand command) throws AgiException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends the given command to the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "588", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.SpeechRecognizeCommand", "methodParameterType": "String#int#", "methodParameterName": "prompt#timeout#", "methodBody": "public SpeechRecognizeCommand(String prompt, int timeout)\n    {\n        this.prompt = prompt;\n        this.timeout = timeout;\n        this.offset = 0;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechRecognizeCommand that plays the given prompt and listens for for speech and dtmf.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "589", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.SpeechRecognizeCommand", "methodParameterType": "String#int#int#", "methodParameterName": "prompt#timeout#offset#", "methodBody": "public SpeechRecognizeCommand(String prompt, int timeout, int offset)\n    {\n        this.prompt = prompt;\n        this.timeout = timeout;\n        this.offset = offset;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechRecognizeCommand that plays the given prompt and listens for for speech and dtmf.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "590", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.getPrompt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPrompt()\n    {\n        return prompt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the prompt to play.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "591", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.setPrompt", "methodParameterType": "String#", "methodParameterName": "prompt#", "methodBody": "public void setPrompt(String prompt)\n    {\n        this.prompt = prompt;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the prompt to play.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "592", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum recognition time in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "593", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.setTimeout", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(int timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum recognition time in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "594", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.getOffset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getOffset()\n    {\n        return offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the offset samples to skip when playing the prompt.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "595", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechRecognizeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechRecognizeCommand.setOffset", "methodParameterType": "int#", "methodParameterName": "offset#", "methodBody": "public void setOffset(int offset)\n    {\n        this.offset = offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the offset samples to skip when playing the prompt.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "596", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/AsyncAgiBreakCommand.java", "methodName": "org.asteriskjava.fastagi.command.AsyncAgiBreakCommand.AsyncAgiBreakCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AsyncAgiBreakCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiBreakCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "597", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.GosubCommand", "methodParameterType": "String#String#String#", "methodParameterName": "context#extension#priority#", "methodBody": "public GosubCommand(String context, String extension, String priority)\n    {\n        super();\n        this.context = context;\n        this.extension = extension;\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GosubCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "598", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.GosubCommand", "methodParameterType": "String#String#String#String#", "methodParameterName": "context#extension#priority#arguments#", "methodBody": "public GosubCommand(String context, String extension, String priority, String... arguments)\n    {\n        super();\n        this.context = context;\n        this.extension = extension;\n        this.priority = priority;\n        this.arguments = arguments;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GosubCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "599", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the context of the subroutine to call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "600", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public void setContext(String context)\n    {\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the context of the subroutine to call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "601", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.getExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtension()\n    {\n        return extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension within the called context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "602", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.setExtension", "methodParameterType": "String#", "methodParameterName": "extension#", "methodBody": "public void setExtension(String extension)\n    {\n        this.extension = extension;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the extension within the called context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "603", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPriority()\n    {\n        return priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the priority of the called extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.setPriority", "methodParameterType": "String#", "methodParameterName": "priority#", "methodBody": "public void setPriority(String priority)\n    {\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the priority of the called extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.getArguments", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String[] getArguments()\n    {\n        return arguments;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the arguments to be passed to the subroutine.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GosubCommand.java", "methodName": "org.asteriskjava.fastagi.command.GosubCommand.setArguments", "methodParameterType": "String[]#", "methodParameterName": "arguments#", "methodBody": "public void setArguments(String[] arguments)\n    {\n        this.arguments = arguments;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the arguments to be passed to the subroutine.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetContextCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetContextCommand.SetContextCommand", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public SetContextCommand(String context)\n    {\n        super();\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetPriorityCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetContextCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetContextCommand.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the context for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "609", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetContextCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetContextCommand.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public void setContext(String context)\n    {\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the context for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "610", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/AbstractAgiCommand.java", "methodName": "org.asteriskjava.fastagi.command.AbstractAgiCommand.escapeAndQuote", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "protected String escapeAndQuote(String s)\n    {\n        String tmp;\n\n        if (s == null)\n        {\n            return \"\\\"\\\"\";\n        }\n\n        tmp = s;\n        tmp = tmp.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n        tmp = tmp.replaceAll(\"\\\\\\\"\", \"\\\\\\\\\\\"\");\n        tmp = tmp.replaceAll(\"\\\\\\n\", \"\"); // filter newline\n        return \"\\\"\" + tmp + \"\\\"\"; // add quotes\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#StringLiteral#SimpleName#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Escapes and quotes a given String according to the rules set by Asterisk's AGI.", "call_func_name": ["java.lang.String.replaceAll", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.RecordFileCommand", "methodParameterType": "String#String#String#int#", "methodParameterName": "file#format#escapeDigits#timeout#", "methodBody": "public RecordFileCommand(String file, String format, String escapeDigits, int timeout)\n    {\n        super();\n        this.file = file;\n        this.format = format;\n        this.escapeDigits = escapeDigits;\n        this.timeout = timeout;\n        this.offset = 0;\n        this.beep = false;\n        this.maxSilence = 0;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new RecordFileCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.RecordFileCommand", "methodParameterType": "String#String#String#int#int#boolean#int#", "methodParameterName": "file#format#escapeDigits#timeout#offset#beep#maxSilence#", "methodBody": "public RecordFileCommand(String file, String format, String escapeDigits, int timeout, int offset, boolean beep,\n            int maxSilence)\n    {\n        super();\n        this.file = file;\n        this.format = format;\n        this.escapeDigits = escapeDigits;\n        this.timeout = timeout;\n        this.offset = offset;\n        this.beep = beep;\n        this.maxSilence = maxSilence;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new RecordFileCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "613", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.setFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public void setFile(String file)\n    {\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "615", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.getFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormat()\n    {\n        return format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the format of the file to be recorded, for example \"wav\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.setFormat", "methodParameterType": "String#", "methodParameterName": "format#", "methodBody": "public void setFormat(String format)\n    {\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the format of the file to be recorded, for example \"wav\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "617", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to end recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "618", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to end recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "619", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum record time in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "620", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.setTimeout", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(int timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum record time in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "621", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.getOffset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getOffset()\n    {\n        return offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the offset samples to skip.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "622", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.setOffset", "methodParameterType": "int#", "methodParameterName": "offset#", "methodBody": "public void setOffset(int offset)\n    {\n        this.offset = offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the offset samples to skip.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.getBeep", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean getBeep()\n    {\n        return beep;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns <code>true</code> if a beep should be played before recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "624", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.setBeep", "methodParameterType": "boolean#", "methodParameterName": "beep#", "methodBody": "public void setBeep(boolean beep)\n    {\n        this.beep = beep;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to <code>true</code> to play a beep before recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.getMaxSilence", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getMaxSilence()\n    {\n        return maxSilence;\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the amount of silence (in seconds) to allow before returning despite the lack of dtmf digits or reaching timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/RecordFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.RecordFileCommand.setMaxSilence", "methodParameterType": "int#", "methodParameterName": "maxSilence#", "methodBody": "void setMaxSilence(int maxSilence)\n    {\n        this.maxSilence = maxSilence;\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the amount of silence (in seconds) to allow before returning despite the lack of dtmf digits or reaching timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "627", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseGetCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseGetCommand.DatabaseGetCommand", "methodParameterType": "String#String#", "methodParameterName": "family#key#", "methodBody": "public DatabaseGetCommand(String family, String key)\n    {\n        super();\n        this.family = family;\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DatabaseGetCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "628", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseGetCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseGetCommand.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the key to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "629", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseGetCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseGetCommand.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the key to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "630", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseGetCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseGetCommand.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the key to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "631", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseGetCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseGetCommand.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "632", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelCommand.DatabaseDelCommand", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public DatabaseDelCommand(String family)\n    {\n        super();\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DatabaseDelCommand to delete a family.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "633", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelCommand.DatabaseDelCommand", "methodParameterType": "String#String#", "methodParameterName": "family#keyTree#", "methodBody": "public DatabaseDelCommand(String family, String keyTree)\n    {\n        super();\n        this.family = family;\n        this.keyTree = keyTree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DatabaseDelCommand to delete a keytree.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "634", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelCommand.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family (or family of the keytree) to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "635", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelCommand.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family (or family of the keytree) to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "636", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelCommand.getKeyTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKeyTree()\n    {\n        return keyTree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the keytree to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "637", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelCommand.setKeyTree", "methodParameterType": "String#", "methodParameterName": "keyTree#", "methodBody": "public void setKeyTree(String keyTree)\n    {\n        this.keyTree = keyTree;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the keytree to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "638", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelTreeCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelTreeCommand.DatabaseDelTreeCommand", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public DatabaseDelTreeCommand(String family)\n    {\n        super();\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DatabaseDelCommand to delete a whole family.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "639", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelTreeCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelTreeCommand.DatabaseDelTreeCommand", "methodParameterType": "String#String#", "methodParameterName": "family#keyTree#", "methodBody": "public DatabaseDelTreeCommand(String family, String keyTree)\n    {\n        super();\n        this.family = family;\n        this.keyTree = keyTree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DatabaseDelCommand to delete a keytree within a given family.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "640", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelTreeCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelTreeCommand.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the key to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "641", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelTreeCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelTreeCommand.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the key to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "642", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelTreeCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelTreeCommand.getKeyTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKeyTree()\n    {\n        return keyTree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the keytree to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "643", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabaseDelTreeCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabaseDelTreeCommand.setKeyTree", "methodParameterType": "String#", "methodParameterName": "keyTree#", "methodBody": "public void setKeyTree(String keyTree)\n    {\n        this.keyTree = keyTree;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the keytree to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "644", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetVariableCommand.SetVariableCommand", "methodParameterType": "String#String#", "methodParameterName": "variable#value#", "methodBody": "public SetVariableCommand(String variable, String value)\n    {\n        super();\n        this.variable = variable;\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetVariableCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "645", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetVariableCommand.getVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariable()\n    {\n        return variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the variable to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "646", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetVariableCommand.setVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public void setVariable(String variable)\n    {\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the variable to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "647", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetVariableCommand.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue()\n    {\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "648", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetVariableCommand.setValue", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public void setValue(String value)\n    {\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "649", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/BridgeCommand.java", "methodName": "org.asteriskjava.fastagi.command.BridgeCommand.BridgeCommand", "methodParameterType": "String#String#", "methodParameterName": "channel#options#", "methodBody": "public BridgeCommand(String channel, String options)\n    {\n        super();\n        this.channel = channel;\n        this.options = options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AnswerCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "650", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.SayDateTimeCommand", "methodParameterType": "long#", "methodParameterName": "time#", "methodBody": "public SayDateTimeCommand(long time)\n    {\n        super();\n        this.time = time;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayDateTimeCommand that says the given time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "651", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.SayDateTimeCommand", "methodParameterType": "long#String#", "methodParameterName": "time#escapeDigits#", "methodBody": "public SayDateTimeCommand(long time, String escapeDigits)\n    {\n        super();\n        this.time = time;\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayDateTimeCommand that says the given time and allows interruption by one of the given escape digits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "652", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.SayDateTimeCommand", "methodParameterType": "long#String#String#", "methodParameterName": "time#escapeDigits#format#", "methodBody": "public SayDateTimeCommand(long time, String escapeDigits, String format)\n    {\n        super();\n        this.time = time;\n        this.escapeDigits = escapeDigits;\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayDateTimeCommand that says the given time in the given format and allows interruption by one of the given escape digits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "653", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.SayDateTimeCommand", "methodParameterType": "long#String#String#String#", "methodParameterName": "time#escapeDigits#format#timezone#", "methodBody": "public SayDateTimeCommand(long time, String escapeDigits, String format,\n            String timezone)\n    {\n        super();\n        this.time = time;\n        this.escapeDigits = escapeDigits;\n        this.format = format;\n        this.timezone = timezone;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayDateTimeCommand that says the given time in the given format and timezone and allows interruption by one of the given escape digits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "654", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.getTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getTime()\n    {\n        return time;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "655", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.setTime", "methodParameterType": "long#", "methodParameterName": "time#", "methodBody": "public void setTime(long time)\n    {\n        this.time = time;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC).<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "656", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "657", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "658", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.getFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormat()\n    {\n        return format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the format the time should be said in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "659", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.setFormat", "methodParameterType": "String#", "methodParameterName": "format#", "methodBody": "public void setFormat(String format)\n    {\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the format the time should be said in.<p> See <code>voicemail.conf</code>.<p> Defaults to \"ABdY 'digits/at' IMp\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "660", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.getTimezone", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTimezone()\n    {\n        return timezone;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the timezone to use when saying the time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "661", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDateTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDateTimeCommand.setTimezone", "methodParameterType": "String#", "methodParameterName": "timezone#", "methodBody": "public void setTimezone(String timezone)\n    {\n        this.timezone = timezone;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the timezone to use when saying the time.<p> A list of available timezones is available in <code>/usr/share/zoneinfo</code> on your Asterisk server.<p> Defaults to machine default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "662", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SendImageCommand.java", "methodName": "org.asteriskjava.fastagi.command.SendImageCommand.SendImageCommand", "methodParameterType": "String#", "methodParameterName": "image#", "methodBody": "public SendImageCommand(String image)\n    {\n        super();\n        this.image = image;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SendImageCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "663", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SendImageCommand.java", "methodName": "org.asteriskjava.fastagi.command.SendImageCommand.getImage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getImage()\n    {\n        return image;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the image to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "664", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SendImageCommand.java", "methodName": "org.asteriskjava.fastagi.command.SendImageCommand.setImage", "methodParameterType": "String#", "methodParameterName": "image#", "methodBody": "public void setImage(String image)\n    {\n        this.image = image;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the image to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "665", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ChannelStatusCommand.java", "methodName": "org.asteriskjava.fastagi.command.ChannelStatusCommand.ChannelStatusCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ChannelStatusCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new ChannelStatusCommand that queries the current channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "666", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ChannelStatusCommand.java", "methodName": "org.asteriskjava.fastagi.command.ChannelStatusCommand.ChannelStatusCommand", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public ChannelStatusCommand(String channel)\n    {\n        super();\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ChannelStatusCommand that queries the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "667", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ChannelStatusCommand.java", "methodName": "org.asteriskjava.fastagi.command.ChannelStatusCommand.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "668", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ChannelStatusCommand.java", "methodName": "org.asteriskjava.fastagi.command.ChannelStatusCommand.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "669", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetVariableCommand.GetVariableCommand", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public GetVariableCommand(String variable)\n    {\n        super();\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetVariableCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "670", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetVariableCommand.getVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariable()\n    {\n        return variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the variable to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "671", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetVariableCommand.setVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public void setVariable(String variable)\n    {\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the variable to retrieve.<p> Since Asterisk 1.2 you can also use custom dialplan functions (like \"func(args)\") as variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "672", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetMusicOffCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetMusicOffCommand.SetMusicOffCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SetMusicOffCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new SetMusicOffCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "673", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/QueueCommand.java", "methodName": "org.asteriskjava.fastagi.command.QueueCommand.QueueCommand", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public QueueCommand(String queue)\n    {\n        super();\n        this.queue = queue;\n\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AnswerCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "674", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDigitsCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDigitsCommand.SayDigitsCommand", "methodParameterType": "String#", "methodParameterName": "digits#", "methodBody": "public SayDigitsCommand(String digits)\n    {\n        super();\n        this.digits = digits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayDigitsCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "675", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDigitsCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDigitsCommand.SayDigitsCommand", "methodParameterType": "String#String#", "methodParameterName": "digits#escapeDigits#", "methodBody": "public SayDigitsCommand(String digits, String escapeDigits)\n    {\n        super();\n        this.digits = digits;\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayDigitsCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "676", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDigitsCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDigitsCommand.getDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDigits()\n    {\n        return digits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits string to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "677", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDigitsCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDigitsCommand.setDigits", "methodParameterType": "String#", "methodParameterName": "digits#", "methodBody": "public void setDigits(String digits)\n    {\n        this.digits = digits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "678", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDigitsCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDigitsCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "679", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayDigitsCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayDigitsCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "680", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.ControlStreamFileCommand", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public ControlStreamFileCommand(String file)\n    {\n        super();\n        this.file = file;\n        this.offset = -1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ControlStreamFileCommand, streaming from the beginning. It uses the default digit \"#\" for forward and \"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "681", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.ControlStreamFileCommand", "methodParameterType": "String#String#", "methodParameterName": "file#escapeDigits#", "methodBody": "public ControlStreamFileCommand(String file, String escapeDigits)\n    {\n        super();\n        this.file = file;\n        this.escapeDigits = escapeDigits;\n        this.offset = -1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ControlStreamFileCommand, streaming from the beginning. It uses the default digit \"#\" for forward and \"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "682", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.ControlStreamFileCommand", "methodParameterType": "String#String#int#", "methodParameterName": "file#escapeDigits#offset#", "methodBody": "public ControlStreamFileCommand(String file, String escapeDigits, int offset)\n    {\n        super();\n        this.file = file;\n        this.escapeDigits = escapeDigits;\n        this.offset = offset;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ControlStreamFileCommand, streaming from the given offset. It uses the default digit \"#\" for forward and \"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "683", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.ControlStreamFileCommand", "methodParameterType": "String#String#int#String#String#String#", "methodParameterName": "file#escapeDigits#offset#forwardDigit#rewindDigit#pauseDigit#", "methodBody": "public ControlStreamFileCommand(String file, String escapeDigits,\n            int offset, String forwardDigit, String rewindDigit,\n            String pauseDigit)\n    {\n        super();\n        this.file = file;\n        this.escapeDigits = escapeDigits;\n        this.offset = offset;\n        this.forwardDigit = forwardDigit;\n        this.rewindDigit = rewindDigit;\n        this.pauseDigit = pauseDigit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ControlStreamFileCommand, streaming from the given offset. It allows the user to pause streaming by pressing the pauseDigit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "684", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "685", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.setFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public void setFile(String file)\n    {\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "686", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "687", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "688", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.getOffset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getOffset()\n    {\n        return offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the offset samples to skip before streaming.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "689", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.setOffset", "methodParameterType": "int#", "methodParameterName": "offset#", "methodBody": "public void setOffset(int offset)\n    {\n        this.offset = offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the offset samples to skip before streaming.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "690", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.getForwardDigit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getForwardDigit()\n    {\n        return forwardDigit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digit for fast forward.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "691", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.getRewindDigit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRewindDigit()\n    {\n        return rewindDigit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digit for rewind.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "692", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.getPauseDigit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPauseDigit()\n    {\n        return pauseDigit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retruns the digit for pause and unpause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "693", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.setControlDigits", "methodParameterType": "String#String#", "methodParameterName": "forwardDigit#rewindDigit#", "methodBody": "public void setControlDigits(String forwardDigit, String rewindDigit)\n    {\n        this.forwardDigit = forwardDigit;\n        this.rewindDigit = rewindDigit;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the control digits for fast forward and rewind.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "694", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ControlStreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.ControlStreamFileCommand.setControlDigits", "methodParameterType": "String#String#String#", "methodParameterName": "forwardDigit#rewindDigit#pauseDigit#", "methodBody": "public void setControlDigits(String forwardDigit, String rewindDigit,\n            String pauseDigit)\n    {\n        this.forwardDigit = forwardDigit;\n        this.rewindDigit = rewindDigit;\n        this.pauseDigit = pauseDigit;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the control digits for fast forward, rewind and pause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "695", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayPhoneticCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayPhoneticCommand.SayPhoneticCommand", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "public SayPhoneticCommand(String text)\n    {\n        super();\n        this.text = text;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayPhonticCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "696", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayPhoneticCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayPhoneticCommand.SayPhoneticCommand", "methodParameterType": "String#String#", "methodParameterName": "text#escapeDigits#", "methodBody": "public SayPhoneticCommand(String text, String escapeDigits)\n    {\n        super();\n        this.text = text;\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayPhoneticCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "697", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayPhoneticCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayPhoneticCommand.getText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getText()\n    {\n        return text;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the text to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "698", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayPhoneticCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayPhoneticCommand.setText", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "public void setText(String text)\n    {\n        this.text = text;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the text to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "699", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayPhoneticCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayPhoneticCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "700", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayPhoneticCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayPhoneticCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "701", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SendTextCommand.java", "methodName": "org.asteriskjava.fastagi.command.SendTextCommand.SendTextCommand", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "public SendTextCommand(String text)\n    {\n        super();\n        this.text = text;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SendTextCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "702", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SendTextCommand.java", "methodName": "org.asteriskjava.fastagi.command.SendTextCommand.getText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getText()\n    {\n        return text;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the text to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "703", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SendTextCommand.java", "methodName": "org.asteriskjava.fastagi.command.SendTextCommand.setText", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "public void setText(String text)\n    {\n        this.text = text;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the text to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "704", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/AgiCommand.java", "methodName": "org.asteriskjava.fastagi.command.AgiCommand.buildCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String buildCommand();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a string suitable to be sent to asterisk.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "705", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ConfbridgeCommand.java", "methodName": "org.asteriskjava.fastagi.command.ConfbridgeCommand.ConfbridgeCommand", "methodParameterType": "String#String#", "methodParameterName": "room#profile#", "methodBody": "public ConfbridgeCommand(String room, String profile)\n    {\n        super();\n        this.room = room;\n        this.profile = profile;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AnswerCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "706", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/TddModeCommand.java", "methodName": "org.asteriskjava.fastagi.command.TddModeCommand.TddModeCommand", "methodParameterType": "String#", "methodParameterName": "mode#", "methodBody": "public TddModeCommand(String mode)\n    {\n        super();\n        this.mode = mode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TDDModeCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "707", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/TddModeCommand.java", "methodName": "org.asteriskjava.fastagi.command.TddModeCommand.getMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMode()\n    {\n        return mode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the mode to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "708", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/TddModeCommand.java", "methodName": "org.asteriskjava.fastagi.command.TddModeCommand.setMode", "methodParameterType": "String#", "methodParameterName": "mode#", "methodBody": "public void setMode(String mode)\n    {\n        this.mode = mode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the mode to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "709", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabasePutCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabasePutCommand.DatabasePutCommand", "methodParameterType": "String#String#String#", "methodParameterName": "family#key#value#", "methodBody": "public DatabasePutCommand(String family, String key, String value)\n    {\n        super();\n        this.family = family;\n        this.key = key;\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DatabasePutCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "710", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabasePutCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabasePutCommand.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "711", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabasePutCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabasePutCommand.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "712", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabasePutCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabasePutCommand.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "713", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabasePutCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabasePutCommand.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "714", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabasePutCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabasePutCommand.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue()\n    {\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "715", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DatabasePutCommand.java", "methodName": "org.asteriskjava.fastagi.command.DatabasePutCommand.setValue", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public void setValue(String value)\n    {\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "716", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechUnloadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechUnloadGrammarCommand.SpeechUnloadGrammarCommand", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public SpeechUnloadGrammarCommand(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechUnloadGrammarCommand that unloads the given grammer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "717", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechUnloadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechUnloadGrammarCommand.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "718", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechUnloadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechUnloadGrammarCommand.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "719", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetAutoHangupCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetAutoHangupCommand.SetAutoHangupCommand", "methodParameterType": "int#", "methodParameterName": "time#", "methodBody": "public SetAutoHangupCommand(int time)\n    {\n        super();\n        this.time = time;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetAutoHangupCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "720", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetAutoHangupCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetAutoHangupCommand.getTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getTime()\n    {\n        return time;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of seconds before this channel is automatically hung up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "721", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetAutoHangupCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetAutoHangupCommand.setTime", "methodParameterType": "int#", "methodParameterName": "time#", "methodBody": "public void setTime(int time)\n    {\n        this.time = time;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of seconds before this channel is automatically hung up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "722", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveTextCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveTextCommand.ReceiveTextCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ReceiveTextCommand()\n    {\n        super();\n        this.timeout = 0;\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ReceiveTextCommand with a default timeout of 0 meaning to wait for ever.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "723", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveTextCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveTextCommand.ReceiveTextCommand", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "public ReceiveTextCommand(int timeout)\n    {\n        super();\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ReceiveTextCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "724", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveTextCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveTextCommand.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the milliseconds to wait for the channel to receive the text.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "725", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveTextCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveTextCommand.setTimeout", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(int timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the milliseconds to wait for the channel to receive the text.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "726", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveCharCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveCharCommand.ReceiveCharCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ReceiveCharCommand()\n    {\n        super();\n        this.timeout = 0;\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ReceiveCharCommand with a default timeout of 0 meaning to wait for ever.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "727", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveCharCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveCharCommand.ReceiveCharCommand", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "public ReceiveCharCommand(int timeout)\n    {\n        super();\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ReceiveCharCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "728", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveCharCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveCharCommand.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the milliseconds to wait for the channel to receive a character.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "729", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ReceiveCharCommand.java", "methodName": "org.asteriskjava.fastagi.command.ReceiveCharCommand.setTimeout", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(int timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the milliseconds to wait for the channel to receive a character.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "730", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetExtensionCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetExtensionCommand.SetExtensionCommand", "methodParameterType": "String#", "methodParameterName": "extension#", "methodBody": "public SetExtensionCommand(String extension)\n    {\n        super();\n        this.extension = extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetPriorityCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "731", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetExtensionCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetExtensionCommand.getExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtension()\n    {\n        return extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "732", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetExtensionCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetExtensionCommand.setExtension", "methodParameterType": "String#", "methodParameterName": "extension#", "methodBody": "public void setExtension(String extension)\n    {\n        this.extension = extension;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the extension for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "733", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechCreateCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechCreateCommand.SpeechCreateCommand", "methodParameterType": "String#", "methodParameterName": "engine#", "methodBody": "public SpeechCreateCommand(String engine)\n    {\n        this.engine = engine;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechCreateCommand for the given engine.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "734", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechCreateCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechCreateCommand.getEngine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEngine()\n    {\n        return engine;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the speech engine to use for subsequent Speech AGI commands.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "735", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechCreateCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechCreateCommand.setEngine", "methodParameterType": "String#", "methodParameterName": "engine#", "methodBody": "public void setEngine(String engine)\n    {\n        this.engine = engine;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the speech engine to use for subsequent Speech AGI commands.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "736", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetCallerIdCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetCallerIdCommand.SetCallerIdCommand", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public SetCallerIdCommand(String callerId)\n    {\n        super();\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetCallerIdCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "737", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetCallerIdCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetCallerIdCommand.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new callerId.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "738", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetCallerIdCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetCallerIdCommand.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the new callerId.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "739", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/WaitForDigitCommand.java", "methodName": "org.asteriskjava.fastagi.command.WaitForDigitCommand.WaitForDigitCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public WaitForDigitCommand()\n    {\n        super();\n        this.timeout = -1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new WaitForDigitCommand with a default timeout of -1 which blocks the channel indefinitely.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "740", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/WaitForDigitCommand.java", "methodName": "org.asteriskjava.fastagi.command.WaitForDigitCommand.WaitForDigitCommand", "methodParameterType": "long#", "methodParameterName": "timeout#", "methodBody": "public WaitForDigitCommand(long timeout)\n    {\n        super();\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new WaitForDigitCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "741", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/WaitForDigitCommand.java", "methodName": "org.asteriskjava.fastagi.command.WaitForDigitCommand.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the milliseconds to wait for the channel to receive a DTMF digit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "742", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/WaitForDigitCommand.java", "methodName": "org.asteriskjava.fastagi.command.WaitForDigitCommand.setTimeout", "methodParameterType": "long#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(long timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the milliseconds to wait for the channel to receive a DTMF digit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "743", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/HangupCommand.java", "methodName": "org.asteriskjava.fastagi.command.HangupCommand.HangupCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public HangupCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new HangupCommand that hangs up the current channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "744", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/HangupCommand.java", "methodName": "org.asteriskjava.fastagi.command.HangupCommand.HangupCommand", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public HangupCommand(String channel)\n    {\n        super();\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HangupCommand that hangs up the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "745", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/HangupCommand.java", "methodName": "org.asteriskjava.fastagi.command.HangupCommand.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "746", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/HangupCommand.java", "methodName": "org.asteriskjava.fastagi.command.HangupCommand.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "747", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ExecCommand.java", "methodName": "org.asteriskjava.fastagi.command.ExecCommand.ExecCommand", "methodParameterType": "String#", "methodParameterName": "application#", "methodBody": "public ExecCommand(String application)\n    {\n        super();\n        this.application = application;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ExecCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "748", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ExecCommand.java", "methodName": "org.asteriskjava.fastagi.command.ExecCommand.ExecCommand", "methodParameterType": "String#String#", "methodParameterName": "application#options#", "methodBody": "public ExecCommand(String application, String... options)\n    {\n        super();\n        this.application = application;\n        this.options = options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ExecCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "749", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ExecCommand.java", "methodName": "org.asteriskjava.fastagi.command.ExecCommand.getApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getApplication()\n    {\n        return application;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the application to execute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "750", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ExecCommand.java", "methodName": "org.asteriskjava.fastagi.command.ExecCommand.setApplication", "methodParameterType": "String#", "methodParameterName": "application#", "methodBody": "public void setApplication(String application)\n    {\n        this.application = application;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the application to execute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "751", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ExecCommand.java", "methodName": "org.asteriskjava.fastagi.command.ExecCommand.getOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String[] getOptions()\n    {\n        return options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the options to pass to the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "752", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/ExecCommand.java", "methodName": "org.asteriskjava.fastagi.command.ExecCommand.setOptions", "methodParameterType": "String#", "methodParameterName": "options#", "methodBody": "public void setOptions(String... options)\n    {\n        this.options = options;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the options to pass to the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "753", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechDeactivateGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechDeactivateGrammarCommand.SpeechDeactivateGrammarCommand", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public SpeechDeactivateGrammarCommand(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechDeactivateGrammarCommand that deacitvates the given grammer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "754", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechDeactivateGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechDeactivateGrammarCommand.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "755", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechDeactivateGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechDeactivateGrammarCommand.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "756", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/NoopCommand.java", "methodName": "org.asteriskjava.fastagi.command.NoopCommand.NoopCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NoopCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new NoopCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "757", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.StreamFileCommand", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public StreamFileCommand(String file)\n    {\n        super();\n        this.file = file;\n        this.offset = -1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new StreamFileCommand, streaming from the beginning.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "758", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.StreamFileCommand", "methodParameterType": "String#String#", "methodParameterName": "file#escapeDigits#", "methodBody": "public StreamFileCommand(String file, String escapeDigits)\n    {\n        super();\n        this.file = file;\n        this.escapeDigits = escapeDigits;\n        this.offset = -1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new StreamFileCommand, streaming from the beginning.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "759", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.StreamFileCommand", "methodParameterType": "String#String#int#", "methodParameterName": "file#escapeDigits#offset#", "methodBody": "public StreamFileCommand(String file, String escapeDigits, int offset)\n    {\n        super();\n        this.file = file;\n        this.escapeDigits = escapeDigits;\n        this.offset = offset;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new StreamFileCommand, streaming from the given offset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "760", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "761", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.setFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public void setFile(String file)\n    {\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "762", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "763", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "764", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.getOffset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getOffset()\n    {\n        return offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the offset samples to skip before streaming.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "765", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/StreamFileCommand.java", "methodName": "org.asteriskjava.fastagi.command.StreamFileCommand.setOffset", "methodParameterType": "int#", "methodParameterName": "offset#", "methodBody": "public void setOffset(int offset)\n    {\n        this.offset = offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the offset samples to skip before streaming.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "766", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.GetDataCommand", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public GetDataCommand(String file)\n    {\n        super();\n        this.file = file;\n        this.timeout = DEFAULT_TIMEOUT;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetDataCommand with default timeout and maxDigits set to 1024.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "767", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.GetDataCommand", "methodParameterType": "String#long#", "methodParameterName": "file#timeout#", "methodBody": "public GetDataCommand(String file, long timeout)\n    {\n        super();\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetDataCommand with the given timeout and maxDigits set to 1024.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "768", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.GetDataCommand", "methodParameterType": "String#long#int#", "methodParameterName": "file#timeout#maxDigits#", "methodBody": "public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException\n    {\n        super();\n        if (maxDigits < 1 || maxDigits > 1024)\n        {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = maxDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SuperConstructorInvocation#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation)SuperConstructorInvocation(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetDataCommand with the given timeout and maxDigits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "769", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "770", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.setFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public void setFile(String file)\n    {\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the file to stream. <p> This attribute is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "771", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the timeout to wait for data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "772", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.setTimeout", "methodParameterType": "long#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(long timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the timeout to wait for data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "773", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.getMaxDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getMaxDigits()\n    {\n        return maxDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum number of digits to read.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "774", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetDataCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetDataCommand.setMaxDigits", "methodParameterType": "int#", "methodParameterName": "maxDigits#", "methodBody": "public void setMaxDigits(int maxDigits) throws IllegalArgumentException\n    {\n        if (maxDigits < 1 || maxDigits > 1024)\n        {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n\n        this.maxDigits = maxDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum number of digits to read.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "775", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetPriorityCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetPriorityCommand.SetPriorityCommand", "methodParameterType": "String#", "methodParameterName": "priority#", "methodBody": "public SetPriorityCommand(String priority)\n    {\n        super();\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetPriorityCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "776", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetPriorityCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetPriorityCommand.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPriority()\n    {\n        return priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the priority or label for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "777", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetPriorityCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetPriorityCommand.setPriority", "methodParameterType": "String#", "methodParameterName": "priority#", "methodBody": "public void setPriority(String priority)\n    {\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the priority or label for continuation upon exiting the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "778", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechDestroyCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechDestroyCommand.SpeechDestroyCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SpeechDestroyCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty SpeechDestroyCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "779", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechSetCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechSetCommand.SpeechSetCommand", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public SpeechSetCommand(String name, String value)\n    {\n        this.name = name;\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechSetCommand that sets the setting indicated by name to the given value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "780", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechSetCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechSetCommand.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the setting to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "781", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechSetCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechSetCommand.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the setting to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "782", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechSetCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechSetCommand.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue()\n    {\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "783", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechSetCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechSetCommand.setValue", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public void setValue(String value)\n    {\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "784", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/AnswerCommand.java", "methodName": "org.asteriskjava.fastagi.command.AnswerCommand.AnswerCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AnswerCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AnswerCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "785", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechActivateGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechActivateGrammarCommand.SpeechActivateGrammarCommand", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public SpeechActivateGrammarCommand(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechActivateGrammarCommand that acitvates the given grammer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "786", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechActivateGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechActivateGrammarCommand.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "787", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechActivateGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechActivateGrammarCommand.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "788", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/VerboseCommand.java", "methodName": "org.asteriskjava.fastagi.command.VerboseCommand.VerboseCommand", "methodParameterType": "String#int#", "methodParameterName": "message#level#", "methodBody": "public VerboseCommand(String message, int level)\n    {\n        super();\n        this.message = message;\n        this.level = level;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new VerboseCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "789", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/VerboseCommand.java", "methodName": "org.asteriskjava.fastagi.command.VerboseCommand.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage()\n    {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the message to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "790", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/VerboseCommand.java", "methodName": "org.asteriskjava.fastagi.command.VerboseCommand.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message)\n    {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the message to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "791", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/VerboseCommand.java", "methodName": "org.asteriskjava.fastagi.command.VerboseCommand.getLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getLevel()\n    {\n        return level;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the level to use.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "792", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/VerboseCommand.java", "methodName": "org.asteriskjava.fastagi.command.VerboseCommand.setLevel", "methodParameterType": "int#", "methodParameterName": "level#", "methodBody": "public void setLevel(int level)\n    {\n        this.level = level;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the level to use.<p> Must be in in [1..4].", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "793", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayAlphaCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayAlphaCommand.SayAlphaCommand", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "public SayAlphaCommand(String text)\n    {\n        super();\n        this.text = text;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayAlphaCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "794", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayAlphaCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayAlphaCommand.SayAlphaCommand", "methodParameterType": "String#String#", "methodParameterName": "text#escapeDigits#", "methodBody": "public SayAlphaCommand(String text, String escapeDigits)\n    {\n        super();\n        this.text = text;\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayAlphaCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "795", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayAlphaCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayAlphaCommand.getText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getText()\n    {\n        return text;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the text to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "796", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayAlphaCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayAlphaCommand.setText", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "public void setText(String text)\n    {\n        this.text = text;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the text to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "797", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayAlphaCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayAlphaCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "798", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayAlphaCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayAlphaCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "799", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetFullVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetFullVariableCommand.GetFullVariableCommand", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public GetFullVariableCommand(String variable)\n    {\n        super();\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetFullVariableCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "800", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetFullVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetFullVariableCommand.GetFullVariableCommand", "methodParameterType": "String#String#", "methodParameterName": "variable#channel#", "methodBody": "public GetFullVariableCommand(String variable, String channel)\n    {\n        super();\n        this.variable = variable;\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetFullVariableCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "801", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetFullVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetFullVariableCommand.getVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariable()\n    {\n        return variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the variable to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "802", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetFullVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetFullVariableCommand.setVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public void setVariable(String variable)\n    {\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the variable to retrieve.<p> You can also use custom dialplan functions (like \"func(args)\") as variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "803", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetFullVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetFullVariableCommand.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "804", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetFullVariableCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetFullVariableCommand.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "805", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayTimeCommand.SayTimeCommand", "methodParameterType": "long#", "methodParameterName": "time#", "methodBody": "public SayTimeCommand(long time)\n    {\n        super();\n        this.time = time;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayTimeCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "806", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayTimeCommand.SayTimeCommand", "methodParameterType": "long#String#", "methodParameterName": "time#escapeDigits#", "methodBody": "public SayTimeCommand(long time, String escapeDigits)\n    {\n        super();\n        this.time = time;\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayTimeCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "807", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayTimeCommand.getTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getTime()\n    {\n        return time;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time to say in seconds since 00:00:00 on January 1, 1970.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "808", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayTimeCommand.setTime", "methodParameterType": "long#", "methodParameterName": "time#", "methodBody": "public void setTime(long time)\n    {\n        this.time = time;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time to say in seconds since 00:00:00 on January 1, 1970.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "809", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayTimeCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "810", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayTimeCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayTimeCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "811", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetMusicOnCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetMusicOnCommand.SetMusicOnCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SetMusicOnCommand()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new SetMusicOnCommand playing music from the default music on hold class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "812", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetMusicOnCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetMusicOnCommand.SetMusicOnCommand", "methodParameterType": "String#", "methodParameterName": "musicOnHoldClass#", "methodBody": "public SetMusicOnCommand(String musicOnHoldClass)\n    {\n        this.musicOnHoldClass = musicOnHoldClass;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetMusicOnCommand playing music from the default music on hold class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "813", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetMusicOnCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetMusicOnCommand.getMusicOnHoldClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMusicOnHoldClass()\n    {\n        return musicOnHoldClass;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the music on hold class to play music from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "814", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SetMusicOnCommand.java", "methodName": "org.asteriskjava.fastagi.command.SetMusicOnCommand.setMusicOnHoldClass", "methodParameterType": "String#", "methodParameterName": "musicOnHoldClass#", "methodBody": "public void setMusicOnHoldClass(String musicOnHoldClass)\n    {\n        this.musicOnHoldClass = musicOnHoldClass;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the music on hold class to play music from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "815", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayNumberCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayNumberCommand.SayNumberCommand", "methodParameterType": "String#", "methodParameterName": "number#", "methodBody": "public SayNumberCommand(String number)\n    {\n        super();\n        this.number = number;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayNumberCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "816", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayNumberCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayNumberCommand.SayNumberCommand", "methodParameterType": "String#String#", "methodParameterName": "number#escapeDigits#", "methodBody": "public SayNumberCommand(String number, String escapeDigits)\n    {\n        super();\n        this.number = number;\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SayNumberCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "817", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayNumberCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayNumberCommand.getNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNumber()\n    {\n        return number;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "818", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayNumberCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayNumberCommand.setNumber", "methodParameterType": "String#", "methodParameterName": "number#", "methodBody": "public void setNumber(String number)\n    {\n        this.number = number;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number to say.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "819", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayNumberCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayNumberCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "820", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SayNumberCommand.java", "methodName": "org.asteriskjava.fastagi.command.SayNumberCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number that allow the user to interrupt this command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "821", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechLoadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechLoadGrammarCommand.SpeechLoadGrammarCommand", "methodParameterType": "String#String#", "methodParameterName": "name#path#", "methodBody": "public SpeechLoadGrammarCommand(String name, String path)\n    {\n        this.name = name;\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SpeechLoadGrammarCommand that loads the grammer from the given path and makes it available under the given name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "822", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechLoadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechLoadGrammarCommand.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "823", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechLoadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechLoadGrammarCommand.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the grammar, used to activate the gammer later.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "824", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechLoadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechLoadGrammarCommand.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath()\n    {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the path to the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "825", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/SpeechLoadGrammarCommand.java", "methodName": "org.asteriskjava.fastagi.command.SpeechLoadGrammarCommand.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path)\n    {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the path to the grammar.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "826", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/DialCommand.java", "methodName": "org.asteriskjava.fastagi.command.DialCommand.DialCommand", "methodParameterType": "String#int#String#", "methodParameterName": "target#timeout#options#", "methodBody": "public DialCommand(String target, int timeout, String options)\n    {\n        super();\n        this.target = target;\n        this.timeout = timeout;\n        this.options = options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AnswerCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "827", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.GetOptionCommand", "methodParameterType": "String#String#", "methodParameterName": "file#escapeDigits#", "methodBody": "public GetOptionCommand(String file, String escapeDigits)\n    {\n        super();\n        this.file = file;\n        this.escapeDigits = escapeDigits;\n        this.timeout = -1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetOptionCommand with a default timeout of 5 seconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "828", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.GetOptionCommand", "methodParameterType": "String#String#long#", "methodParameterName": "file#escapeDigits#timeout#", "methodBody": "public GetOptionCommand(String file, String escapeDigits, long timeout)\n    {\n        super();\n        this.file = file;\n        this.escapeDigits = escapeDigits;\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetOptionCommand with the given timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "829", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "830", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.setFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public void setFile(String file)\n    {\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the file to stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "831", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.getEscapeDigits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEscapeDigits()\n    {\n        return escapeDigits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digits that the user is expected to press.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "832", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.setEscapeDigits", "methodParameterType": "String#", "methodParameterName": "escapeDigits#", "methodBody": "public void setEscapeDigits(String escapeDigits)\n    {\n        this.escapeDigits = escapeDigits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digits that the user is expected to press.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "833", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the timeout to wait if none of the defined esacpe digits was presses while streaming.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "834", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/GetOptionCommand.java", "methodName": "org.asteriskjava.fastagi.command.GetOptionCommand.setTimeout", "methodParameterType": "long#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(long timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the timeout to wait if none of the defined esacpe digits was presses while streaming.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "835", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/command/MeetmeCommand.java", "methodName": "org.asteriskjava.fastagi.command.MeetmeCommand.MeetmeCommand", "methodParameterType": "String#String#", "methodParameterName": "room#options#", "methodBody": "public MeetmeCommand(String room, String options)\n    {\n        super();\n        this.room = room;\n        this.options = options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AnswerCommand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "836", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.DefaultAgiServer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DefaultAgiServer()\n    {\n        this(null, null);\n\n    }", "AST": "Javadoc#Modifier#SimpleName#NullLiteral#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "837", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.DefaultAgiServer", "methodParameterType": "AgiChannelFactory#", "methodParameterName": "agiChannelFactory#", "methodBody": "public DefaultAgiServer(AgiChannelFactory agiChannelFactory)\n    {\n        this(null, null, agiChannelFactory);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer and set a custom factory for creating AgiChannels", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "838", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.DefaultAgiServer", "methodParameterType": "String#", "methodParameterName": "configResourceBundleName#", "methodBody": "public DefaultAgiServer(String configResourceBundleName)\n    {\n        this(configResourceBundleName, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer and loads its configuration from an alternative resource bundle.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "839", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.DefaultAgiServer", "methodParameterType": "MappingStrategy#", "methodParameterName": "mappingStrategy#", "methodBody": "public DefaultAgiServer(MappingStrategy mappingStrategy)\n    {\n        this(null, mappingStrategy);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer that uses the given {@link MappingStrategy}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "840", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.DefaultAgiServer", "methodParameterType": "AgiScript#", "methodParameterName": "agiScript#", "methodBody": "public DefaultAgiServer(AgiScript agiScript)\n    {\n        this(null, new StaticMappingStrategy(agiScript));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer that runs the given  {@link AgiScript} forall requests.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "841", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.DefaultAgiServer", "methodParameterType": "String#MappingStrategy#", "methodParameterName": "configResourceBundleName#mappingStrategy#", "methodBody": "public DefaultAgiServer(String configResourceBundleName, MappingStrategy mappingStrategy)\n    {\n        this(configResourceBundleName, mappingStrategy, new DefaultAgiChannelFactory());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer and loads its configuration from an alternative resource bundle and uses the given  {@link MappingStrategy}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "842", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.DefaultAgiServer", "methodParameterType": "String#MappingStrategy#AgiChannelFactory#", "methodParameterName": "configResourceBundleName#mappingStrategy#agiChannelFactory#", "methodBody": "public DefaultAgiServer(String configResourceBundleName, MappingStrategy mappingStrategy,\n            AgiChannelFactory agiChannelFactory)\n    {\n        super(agiChannelFactory);\n\n        if (mappingStrategy == null)\n        {\n            final CompositeMappingStrategy compositeMappingStrategy = new CompositeMappingStrategy();\n\n            compositeMappingStrategy.addStrategy(new ResourceBundleMappingStrategy());\n            compositeMappingStrategy.addStrategy(new ClassNameMappingStrategy());\n            if (ReflectionUtil.isClassAvailable(\"javax.script.ScriptEngineManager\"))\n            {\n                MappingStrategy scriptEngineMappingStrategy = (MappingStrategy) ReflectionUtil\n                        .newInstance(\"org.asteriskjava.fastagi.ScriptEngineMappingStrategy\");\n                if (scriptEngineMappingStrategy != null)\n                {\n                    compositeMappingStrategy.addStrategy(scriptEngineMappingStrategy);\n                }\n            }\n            else\n            {\n                logger.warn(\"ScriptEngine support disabled: It is only availble when running at least Java 6\");\n            }\n\n            setMappingStrategy(compositeMappingStrategy);\n        }\n        else\n        {\n            setMappingStrategy(mappingStrategy);\n        }\n\n        if (configResourceBundleName != null)\n        {\n            this.configResourceBundleName = configResourceBundleName;\n        }\n\n        loadConfig();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer and loads its configuration from an alternative resource bundle and uses the given  {@link MappingStrategy}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "843", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.setBindPort", "methodParameterType": "int#", "methodParameterName": "bindPort#", "methodBody": "@Deprecated\n    public void setBindPort(int bindPort)\n    {\n        this.port = bindPort;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the TCP port to listen on for new connections. <br> The default port is 4573.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "844", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.setPort", "methodParameterType": "int#", "methodParameterName": "port#", "methodBody": "public void setPort(int port)\n    {\n        this.port = port;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the TCP port to listen on for new connections. <br> The default port is 4573.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "845", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.getPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getPort()\n    {\n        return port;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the TCP port this server is configured to bind to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "846", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.getAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InetAddress getAddress()\n    {\n        return address;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the address this server is configured to bind to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "847", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.setAddress", "methodParameterType": "InetAddress#", "methodParameterName": "address#", "methodBody": "public void setAddress(InetAddress address)\n    {\n        this.address = address;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the address to bind server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "848", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public void run()\n    {\n        try\n        {\n            startup();\n        }\n        catch (IOException e) // NOPMD\n        {\n            // nothing we can do about that and exceptions have already been\n            // logged\n            // by startup().\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@deprecated use {@link #startup()} instead.", "call_func_name": ["org.asteriskjava.fastagi.DefaultAgiServer.startup"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "849", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/DefaultAgiServer.java", "methodName": "org.asteriskjava.fastagi.DefaultAgiServer.main", "methodParameterType": "String[]#", "methodParameterName": "args#", "methodBody": "@Deprecated\n    public static void main(String[] args) throws Exception\n    {\n        final AgiServer server;\n\n        server = new DefaultAgiServer();\n        server.startup();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DefaultAgiServer and starts it.", "call_func_name": ["org.asteriskjava.fastagi.DefaultAgiServer.<init>", "org.asteriskjava.fastagi.AgiServer.startup"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.asteriskjava.fastagi.AgiServer.startup": "Starts this AgiServer.<p> After calling startup() this AgiServer is ready to receive requests from Asterisk servers and process them.<p> Note that this method will not return until the AgiServer has been shut down. If you want to run the AgiServer in the background use wrap it with an  {@link AgiServerThread}."}]}, {"index": "850", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiException.java", "methodName": "org.asteriskjava.fastagi.AgiException.AgiException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public AgiException(String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AgiException with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "851", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiException.java", "methodName": "org.asteriskjava.fastagi.AgiException.AgiException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public AgiException(String message, Throwable cause)\n    {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AgiException with the given message and cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "852", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/NamedAgiScript.java", "methodName": "org.asteriskjava.fastagi.NamedAgiScript.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the script.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "853", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/StaticMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.StaticMappingStrategy.StaticMappingStrategy", "methodParameterType": "AgiScript#", "methodParameterName": "agiScript#", "methodBody": "public StaticMappingStrategy(AgiScript agiScript)\n    {\n        this.agiScript = agiScript;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new StaticMappingStrategy that maps all requests to the given script.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "854", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/StaticMappingStrategy.java", "methodName": "org.asteriskjava.fastagi.StaticMappingStrategy.setAgiScript", "methodParameterType": "AgiScript#", "methodParameterName": "agiScript#", "methodBody": "public void setAgiScript(AgiScript agiScript)\n    {\n        this.agiScript = agiScript;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the AgiScript to map to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "855", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiReader.java", "methodName": "org.asteriskjava.fastagi.AgiReader.readRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AgiRequest readRequest() throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads the initial request data from Asterisk.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "856", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/fastagi/AgiReader.java", "methodName": "org.asteriskjava.fastagi.AgiReader.readReply", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AgiReply readReply() throws AgiException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads one reply to an AgiCommand from Asterisk.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "857", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/DialPlanExtension.java", "methodName": "org.asteriskjava.pbx.DialPlanExtension.getFullyQualifiedName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getFullyQualifiedName()\n    {\n        return this._extension;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The same as getSimpleName as in this case the Tech is really just an identifier rather than a legitimate tech that the pbx understands.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "858", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/ParkedCallEvent.java", "methodName": "org.asteriskjava.pbx.asterisk.wrap.events.ParkedCallEvent.getFromChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Channel getFromChannel()\n    {\n        return this.fromChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The channel that parked the call. In some circumstances this can be null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "859", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/MasqueradeEvent.java", "methodName": "org.asteriskjava.pbx.asterisk.wrap.events.MasqueradeEvent.getOriginal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Channel getOriginal()\n    {\n        return this._original;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the original channel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "860", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/ResponseEvents.java", "methodName": "org.asteriskjava.pbx.asterisk.wrap.events.ResponseEvents.getEvents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<ResponseEvent> getEvents()\n\t{\n\t\treturn this.events;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Collection of ManagerEvents that have been received including the last one that indicates completion.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "861", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/BridgeEvent.java", "methodName": "org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent.isLink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isLink()\n    {\n        return this.bridgeState == BridgeState.Link;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two channels have been linked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "862", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/BridgeEvent.java", "methodName": "org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent.isUnlink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUnlink()\n    {\n        return this.bridgeState == BridgeState.Unlink;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two channels have been unlinked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "863", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallerID.java", "methodName": "org.asteriskjava.pbx.CallerID.getNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getNumber();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the number component of the caller id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "864", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallerID.java", "methodName": "org.asteriskjava.pbx.CallerID.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the name component of the caller id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "865", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallerID.java", "methodName": "org.asteriskjava.pbx.CallerID.setHideCallerID", "methodParameterType": "boolean#", "methodParameterName": "hide#", "methodBody": "void setHideCallerID(boolean hide);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Controls whether this caller id should be presented to the remote end.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "866", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallerID.java", "methodName": "org.asteriskjava.pbx.CallerID.isHideCallerID", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isHideCallerID();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return true if the caller id is marked as hidden.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "867", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallerID.java", "methodName": "org.asteriskjava.pbx.CallerID.isUnknown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isUnknown();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the caller id number is blank or equal to 'unknown'.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "868", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Call.java", "methodName": "org.asteriskjava.pbx.Call.getOperandChannel", "methodParameterType": "OperandChannel#", "methodParameterName": "lhs#", "methodBody": "Channel getOperandChannel(OperandChannel lhs);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "retrieves the channel associated with the give Operand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "869", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Call.java", "methodName": "org.asteriskjava.pbx.Call.getRemoteParty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Channel getRemoteParty();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This method use the CallDirection to determine which leg of the call is the local call and which is the called/calling party. It then returns the called/calling party.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "870", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Call.java", "methodName": "org.asteriskjava.pbx.Call.getLocalParty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Channel getLocalParty();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This method use the CallDirection to determine which leg of the call is the local call and which is the called/calling party. It then returns the local call .", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "871", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Call.java", "methodName": "org.asteriskjava.pbx.Call.canSplit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean canSplit();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true of the Call can be split into two (or more) separate calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "872", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Call.java", "methodName": "org.asteriskjava.pbx.Call.getDirection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "CallDirection getDirection();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the direction of the call. The call Direction can be a little esoteric as a call can come in and then be transferred out again. So is this an inbound or outbound call?", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "873", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Call.java", "methodName": "org.asteriskjava.pbx.Call.getChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Channel> getChannels();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a list of the Channels associated with this call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "874", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isSame", "methodParameterType": "Channel#", "methodParameterName": "rhs#", "methodBody": "boolean isSame(Channel rhs);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Compares if two channels are the same logical channel on the pbx. This comparison uses the full unique name of the channel not just the abbreviated peer name. e.g. SIP/100-00000100", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "875", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.sameExtenededChannelName", "methodParameterType": "String#", "methodParameterName": "channelName#", "methodBody": "boolean sameExtenededChannelName(String channelName);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Compares if this channel is the same as the named channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "876", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.setParked", "methodParameterType": "boolean#", "methodParameterName": "parked#", "methodBody": "void setParked(boolean parked);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method does not actually change the state of the channel, rather it is intended to be used to record the fact that the state has changed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "877", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.setMute", "methodParameterType": "boolean#", "methodParameterName": "muteState#", "methodBody": "void setMute(boolean muteState);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method does not actually change the state of the channel, rather it is intended to be used to record the fact that the state has changed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "878", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.getChannelId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long getChannelId();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Each channel is assigned a unique PBX independent id to help track the channels when logging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "879", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isLive", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isLive();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the channel is alive. A channel is considered to be alive from the moment it is created until we get a notification that it has been hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "880", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.addHangupListener", "methodParameterType": "ChannelHangupListener#", "methodParameterName": "listener#", "methodBody": "void addHangupListener(ChannelHangupListener listener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Adds a listener to the channel. The channel will send a hungup notification to the listener when it hungup. A channel must be able to support multiple listeners.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "881", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isConnectedTo", "methodParameterType": "EndPoint#", "methodParameterName": "endPoint#", "methodBody": "boolean isConnectedTo(EndPoint endPoint);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns true if the given endpont is currently connected to this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "882", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.getChannelName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getChannelName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "returns a fully qualifed channel name which includes the tech. e.g. SIP/100-00000342", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "883", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isMute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isMute();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks if this channel is currently mute. A channel is mute if the party connected to this channel cannot hear any audio.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "884", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isLocal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isLocal();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "In Asterisk speak, this method returns true if it is a LOCAL/ channel Not quite certain how this will map to other pbx's", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "885", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isParked", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isParked();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return true if the channel is currently parked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "886", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isZombie", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isZombie();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the channel has been marked as in a zombie state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "887", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.isConsole", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isConsole();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return true if the channel was originated from the console(Console/DSP).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "888", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.getCallerID", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "CallerID getCallerID();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the current callerid for this channel. Note: on some systems this involves a round trip to the pbx.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "889", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.getExtendedChannelName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getExtendedChannelName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a PBX specific version of the Channel name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "890", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Channel.java", "methodName": "org.asteriskjava.pbx.Channel.rename", "methodParameterType": "String#String#", "methodParameterName": "newName#uniqueId#", "methodBody": "void rename(String newName, String uniqueId) throws InvalidChannelName;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called to rename a channel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "891", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/RedirectToActivity.java", "methodName": "org.asteriskjava.pbx.activities.RedirectToActivity.getCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Call getCall();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "After a call has been split we get a new calls. The call created as a result of the lhsOperandChannel being split can be retrieved by calling this method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "892", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/DialActivity.java", "methodName": "org.asteriskjava.pbx.activities.DialActivity.getOriginatingEndPoint", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "EndPoint getOriginatingEndPoint();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the end point which originated the dial.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "893", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/DialActivity.java", "methodName": "org.asteriskjava.pbx.activities.DialActivity.getAcceptingEndPoint", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "EndPoint getAcceptingEndPoint();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the end point which is being dialed. This is available even before the dial commences.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "894", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/DialActivity.java", "methodName": "org.asteriskjava.pbx.activities.DialActivity.getOriginatingChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Channel getOriginatingChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the 'originating' channel which is brought up as part of the dial activity. The 'originating' channel may return null if the channel is not up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "895", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/DialActivity.java", "methodName": "org.asteriskjava.pbx.activities.DialActivity.getAcceptingChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Channel getAcceptingChannel();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the 'accepting' channel which is brought up as part of the dial activity. The accepting party is the party that answers the call. The 'accepting' channel may return null if the channel is not up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "896", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/DialActivity.java", "methodName": "org.asteriskjava.pbx.activities.DialActivity.markCancelled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void markCancelled();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Call markCancelled if you want to stop a dial which is in progress from completing. This allows a user to cancel a dial.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "897", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/DialActivity.java", "methodName": "org.asteriskjava.pbx.activities.DialActivity.cancelledByOperator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean cancelledByOperator();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if markCancelled was called during the dial attempt.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "898", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/ParkActivity.java", "methodName": "org.asteriskjava.pbx.activities.ParkActivity.getParkingLot", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "EndPoint getParkingLot();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the endpoint (parking lot) that the call was park on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "899", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/BlindTransferActivity.java", "methodName": "org.asteriskjava.pbx.activities.BlindTransferActivity.getNewCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Call getNewCall() throws PBXException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "The call created as a result of the blind transfer being answered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "900", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/SplitActivity.java", "methodName": "org.asteriskjava.pbx.activities.SplitActivity.getLHSCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Call getLHSCall();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "After a call has been split we get a new calls. The call created as a result of the lhsOperandChannel being split can be retrieved by calling this method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "901", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/activities/SplitActivity.java", "methodName": "org.asteriskjava.pbx.activities.SplitActivity.getRHSCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Call getRHSCall();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "After a call has been split we get a new calls. The call created as a result of the rhsOperandChannel being split can be retrieved by calling this method. This method will return now if split was called with only a single operand channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "902", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/ActivityCallback.java", "methodName": "org.asteriskjava.pbx.ActivityCallback.progress", "methodParameterType": "T#ActivityStatusEnum#String#", "methodParameterName": "activity#status#message#", "methodBody": "void progress(T activity, ActivityStatusEnum status, String message);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called periodically to indicate progress with the task being tracked. The number of progress messages sent is dependant on the task. Every activity will see a ActivityStatusEnum.START and either ActivityStatusEnum.SUCCESS or ActivityStatusEnum.FAILURE", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "903", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.shutdown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void shutdown();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Call this method when shutting down the PBX interface to allow it to cleanup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "904", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.isBridgeSupported", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isBridgeSupported();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the bridge function is supported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "905", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.blindTransfer", "methodParameterType": "Call#OperandChannel#EndPoint#CallerID#boolean#long#", "methodParameterName": "call#channelToTransfer#transferTarget#toCallerID#autoAnswer#timeout#", "methodBody": "BlindTransferActivity blindTransfer(final Call call, OperandChannel channelToTransfer, final EndPoint transferTarget,\n            final CallerID toCallerID, boolean autoAnswer, long timeout);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The BlindTransferActivity is used by the AsteriksPBX to transfer a live channel to an endpoint that may need to be dialed. Note: this action is a long running action which is dependent on a user action to complete. The action will only complete when the call is answered by the tranferTarget. It is recommended that you use the blindTransfer method which takes a callback as there is no way to cancel this action. Until the transferTarget answers the call or the blind transfer times out.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "906", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.blindTransfer", "methodParameterType": "Call#OperandChannel#EndPoint#CallerID#boolean#long#ActivityCallback<BlindTransferActivity>#", "methodParameterName": "call#channelToTransfer#transferTarget#toCallerID#autoAnswer#timeout#callback#", "methodBody": "void blindTransfer(Call call, OperandChannel channelToTransfer, final EndPoint transferTarget, final CallerID toCallerID,\n            boolean autoAnswer, long timeout, ActivityCallback<BlindTransferActivity> callback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The BlindTransferActivity is used by the AsteriksPBX to transfer a live channel to an endpoint that may need to be dialed. Note: this action is a long running action which is defendant on a user action to complete. The action will only complete when the call is answered by the tranferTarget. You can cancel the action at any time by using the activity object returned from the callback start method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "907", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.conference", "methodParameterType": "Channel#Channel#Channel#", "methodParameterName": "channelOne#channelTwo#channelThree#", "methodBody": "void conference(Channel channelOne, Channel channelTwo, Channel channelThree);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sends a DTMF tone to given channel. Not returning until the tone has been sent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "908", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.conference", "methodParameterType": "Channel#Channel#Channel#ActivityCallback<Activity>#", "methodParameterName": "channelOne#channelTwo#channelThree#callback#", "methodBody": "void conference(Channel channelOne, Channel channelTwo, Channel channelThree, ActivityCallback<Activity> callback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sends a DTMF tone to the given channel. This method returns immediately with progress information passed to the given callback. Note: the callback method will be called from a different thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "909", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.dial", "methodParameterType": "EndPoint#CallerID#EndPoint#CallerID#", "methodParameterName": "from#fromCallerID#to#toCallerID#", "methodBody": "DialActivity dial(EndPoint from, CallerID fromCallerID, EndPoint to, CallerID toCallerID);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Dials the given phone number using the specified trunk. Not returning until the call has been dialled. The dial will return as soon as the trunk comes up, it does not wait for remote end to answer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "910", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.dial", "methodParameterType": "EndPoint#CallerID#EndPoint#CallerID#ActivityCallback<DialActivity>#", "methodParameterName": "from#fromCallerID#to#toCallerID#callback#", "methodBody": "void dial(EndPoint from, CallerID fromCallerID, EndPoint to, CallerID toCallerID,\n            ActivityCallback<DialActivity> callback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Dials the given phone number using the specified trunk. Not returning until the call has been dialled. The dial will return as soon as the trunk comes up, it does not wait for remote end to answer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "911", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.hangup", "methodParameterType": "Channel#", "methodParameterName": "channel#", "methodBody": "void hangup(Channel channel) throws PBXException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Hangs up the given channel. Not returning until the call is hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "912", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.hangup", "methodParameterType": "Channel#ActivityCallback<Activity>#", "methodParameterName": "channel#callback#", "methodBody": "void hangup(Channel channel, ActivityCallback<Activity> callback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Hangs up the given channel. This method returns immediately with progress information passed to the given callback. Note: the callback method will be called from a different thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "913", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.hangup", "methodParameterType": "Call#", "methodParameterName": "call#", "methodBody": "void hangup(Call call) throws PBXException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Hangup the given call, not returning until the call is hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "914", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.hold", "methodParameterType": "Channel#", "methodParameterName": "channel#", "methodBody": "HoldActivity hold(Channel channel);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Put the given channel on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "915", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.isMuteSupported", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isMuteSupported();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the mute function is supported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "916", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.park", "methodParameterType": "Call#Channel#", "methodParameterName": "call#parkChannel#", "methodBody": "ParkActivity park(Call call, Channel parkChannel);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parks a call by moving the parkChannel to the parking lot and hanging up the hangupChannel. This method will not return until the park has completed. The park expects two channels which are two legs legs of the same call. The parkChannel will be redirect to the njr-park extension. The hangupChannel (the second leg of the call) will be hung up. The (obvious?) limitation is that we can't park something like a conference call as it has more than two channels. The returned iParkActivty can be used to obtain the extension the call was parked on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "917", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.park", "methodParameterType": "Call#Channel#ActivityCallback<ParkActivity>#", "methodParameterName": "call#parkChannel#callback#", "methodBody": "void park(Call call, Channel parkChannel, ActivityCallback<ParkActivity> callback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parks a call by moving the parkChannel to the parking lot and hanging up the hangupChannel. This method returns almost immediately call progress can be tracked via the callback. The park expects two channels which are two legs legs of the same call. The parkChannel will be redirect to the njr-park extension. The hangupChannel (the second leg of the call) will be hung up. The (obvious?) limitation is that we can't park something like a conference call as it has more than two channels. The returned iParkActivty can be used to obtain the extension the call was parked on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "918", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.sendDTMF", "methodParameterType": "Channel#DTMFTone#", "methodParameterName": "channel#tone#", "methodBody": "void sendDTMF(Channel channel, DTMFTone tone) throws PBXException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a DTMF tone to given channel. Not returning until the tone has been sent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "919", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.sendDTMF", "methodParameterType": "Channel#DTMFTone#ActivityCallback<Activity>#", "methodParameterName": "channel#tone#callback#", "methodBody": "void sendDTMF(Channel channel, DTMFTone tone, ActivityCallback<Activity> callback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sends a DTMF tone to the given channel. This method returns immediately with progress information passed to the given callback. Note: the callback method will be called from a different thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "920", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.split", "methodParameterType": "Call#ActivityCallback<SplitActivity>#", "methodParameterName": "callToSplit#listener#", "methodBody": "SplitActivity split(final Call callToSplit, final ActivityCallback<SplitActivity> listener) throws PBXException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Splits a call (with two channels) This call returns once the split action has completed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "921", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.join", "methodParameterType": "Call#OperandChannel#Call#OperandChannel#CallDirection#", "methodParameterName": "lhs#originatingOperand#rhs#acceptingOperand#direction#", "methodBody": "JoinActivity join(Call lhs, OperandChannel originatingOperand, Call rhs, OperandChannel acceptingOperand,\n            CallDirection direction);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Joins two calls not returning until the join completes. Each call must only have one active channel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "922", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.getChannelByEndPoint", "methodParameterType": "EndPoint#", "methodParameterName": "endPoint#", "methodBody": "Channel getChannelByEndPoint(EndPoint endPoint);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the channel currently attached to the given end point, if one exists. If no channel is attached to the given end point then null is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "923", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.buildEndPoint", "methodParameterType": "String#", "methodParameterName": "fullyQualifiedEndPointName#", "methodBody": "EndPoint buildEndPoint(String fullyQualifiedEndPointName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds an end point from a fully qualified end point name. A fully qualified name includes the tech. How the tech is encoded is pbx specific.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "924", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/PBX.java", "methodName": "org.asteriskjava.pbx.PBX.buildEndPoint", "methodParameterType": "TechType#String#", "methodParameterName": "defaultTech#endPointName#", "methodBody": "EndPoint buildEndPoint(TechType defaultTech, String endPointName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds an iEndPoint from an end point name. If the tech isn't passed in the endPointName the tech is set to the defaultTech The encoding for an end point name is pbx specific.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "925", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoomControl.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.MeetmeRoomControl.findMeetmeRoom", "methodParameterType": "String#", "methodParameterName": "roomNumber#", "methodBody": "synchronized private MeetmeRoom findMeetmeRoom(final String roomNumber)\n    {\n        MeetmeRoom foundRoom = null;\n        for (final MeetmeRoom room : this.rooms)\n        {\n            if (room.getRoomNumber().compareToIgnoreCase(roomNumber) == 0)\n            {\n                foundRoom = room;\n                break;\n            }\n        }\n        return foundRoom;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the MeetmeRoom for the given room number. The room number will be an integer value offset from the meetme base address.", "call_func_name": ["org.asteriskjava.pbx.internal.asterisk.MeetmeRoom.getRoomNumber", "java.lang.String.compareToIgnoreCase"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "926", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/RoomOwner.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.RoomOwner.isRoomStillRequired", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isRoomStillRequired();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "implementations of this method should NOT take locks and should return quickly. This is used as an indication that the room (even though empty) is still required by the owner", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "927", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/RoomOwner.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.RoomOwner.setRoom", "methodParameterType": "MeetmeRoom#", "methodParameterName": "meetmeRoom#", "methodBody": "void setRoom(MeetmeRoom meetmeRoom);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "this can be usefull to null the reference to the Owner when the room is nolong owned", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "928", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/CallerIDImpl.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.CallerIDImpl.CallerIDImpl", "methodParameterType": "String#String#", "methodParameterName": "number#name#", "methodBody": "public CallerIDImpl(final String number, final String name)\n    {\n        this.number = (number == null ? \"\" : number.trim()); //$NON-NLS-1$\n        this.name = (name == null ? \"\" : name.trim()); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ParenthesizedExpression#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ParenthesizedExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ParenthesizedExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ParenthesizedExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a caller ID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "929", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/CallerIDImpl.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.CallerIDImpl.buildFromComponents", "methodParameterType": "String#String#String#", "methodParameterName": "firstname#lastname#number#", "methodBody": "public static CallerID buildFromComponents(final String firstname, final String lastname, final String number)\n    {\n        String name = \"\"; //$NON-NLS-1$\n        if (firstname != null)\n        {\n            name += firstname.trim();\n        }\n\n        if (lastname != null)\n        {\n            if (name.length() > 0)\n            {\n                name += \" \"; //$NON-NLS-1$\n            }\n            name += lastname.trim();\n        }\n\n        return PBXFactory.getActivePBX().buildCallerID(number, name);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is a little helper class which will buid the name component of a clid from the first and lastnames. If both firstname and lastname are null then the name component will be an empty string.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.String.trim", "java.lang.StringBuilder.toString", "java.lang.String.length", "org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.PBX.buildCallerID"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "930", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/CallerIDImpl.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.CallerIDImpl.formatted", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String formatted()\n    {\n        String callerID = \"\"; //$NON-NLS-1$\n        if (this.name != null)\n        {\n            callerID += this.name;\n        }\n        if (this.number != null)\n        {\n            if (callerID.length() > 1)\n            {\n                callerID += \" \"; //$NON-NLS-1$\n            }\n            callerID += \"<\" + this.number + \">\"; //$NON-NLS-1$ //$NON-NLS-2$\n        }\n        return callerID;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#ThisExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#StringLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Formats and returns the caller ID in an asterisk specific format suitable for passing to the likes of the originate action. The format is: name <number>", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.length"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "931", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoom.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.MeetmeRoom.isActive", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isActive()\n    {\n        return this.active;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "returns true if the meetme room is active, false if it is available", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "932", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoom.java", "methodName": "org.asteriskjava.pbx.internal.asterisk.MeetmeRoom.resetChannelCount", "methodParameterType": "int#", "methodParameterName": "resetChannelCount#", "methodBody": "public void resetChannelCount(final int resetChannelCount)\n    {\n        this.channelCount = resetChannelCount;\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This method should only be called if asterisk is reporting a channel count for this meetme room which does not match our local channel count. This could happen if it was restarted whilst a call was active.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "933", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerConnection.getVariable", "methodParameterType": "Channel#String#", "methodParameterName": "channel#variableName#", "methodBody": "public String getVariable(final Channel channel, final String variableName)\n    {\n        String value = \"\";\n        final GetVarAction var = new GetVarAction(channel, variableName);\n\n        try\n        {\n            PBX pbx = PBXFactory.getActivePBX();\n            if (!pbx.waitForChannelToQuiescent(channel, 3000))\n                throw new PBXException(\"Channel: \" + channel + \" cannot be retrieved as it is still in transition.\");\n\n            ManagerResponse convertedResponse = sendAction(var, 500);\n            if (convertedResponse != null)\n            {\n                value = convertedResponse.getAttribute(\"value\"); //$NON-NLS-1$\n                if (value == null)\n                    value = \"\";\n                CoherentManagerConnection.logger.debug(\"getVarAction returned name:\" + variableName + \" value:\" + value); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n        }\n        catch (final Exception e)\n        {\n            CoherentManagerConnection.logger.debug(e, e);\n            CoherentManagerConnection.logger.error(\"getVariable: \" + e); //$NON-NLS-1$\n        }\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves and returns the value of a variable associated with a channel. If the variable is empty or null then an empty string is returned.", "call_func_name": ["org.asteriskjava.pbx.asterisk.wrap.actions.GetVarAction.<init>", "org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.PBX.waitForChannelToQuiescent", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.pbx.PBXException.<init>", "org.asteriskjava.pbx.internal.core.CoherentManagerConnection.sendAction", "org.asteriskjava.pbx.asterisk.wrap.response.ManagerResponse.getAttribute", "org.asteriskjava.util.Log.debug", "org.asteriskjava.util.Log.debug", "org.asteriskjava.util.Log.error"], "call_func_parameter": [["org.asteriskjava.pbx.Channel", "java.lang.String"], [""], ["org.asteriskjava.pbx.Channel", "int"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["org.asteriskjava.pbx.asterisk.wrap.actions.ManagerAction", "int"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Throwable"], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.internal.core.CoherentManagerConnection.sendAction": "Sends an Asterisk action and waits for a ManagerRespose."}]}, {"index": "934", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerConnection.sendActionNoWait", "methodParameterType": "ManagerAction#", "methodParameterName": "action#", "methodBody": "public static void sendActionNoWait(final ManagerAction action)\n    {\n        final Thread background = new Thread()\n        {\n            @Override\n            public void run()\n            {\n                try\n                {\n                    CoherentManagerConnection.sendAction(action, 5000);\n                }\n                catch (final Exception e)\n                {\n                    CoherentManagerConnection.logger.error(e, e);\n                }\n            }\n        };\n        background.setName(\"sendActionNoWait\"); //$NON-NLS-1$\n        background.setDaemon(true);\n        background.start();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Allows the caller to send an action to asterisk without waiting for the response. You should only use this if you don't care whether the action actually succeeds.", "call_func_name": ["java.lang.Thread.setName", "java.lang.Thread.setDaemon", "java.lang.Thread.start"], "call_func_parameter": [["java.lang.String"], ["boolean"], [""]], "passed_comments": "/"}, {"index": "935", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerConnection.sendAction", "methodParameterType": "ManagerAction#int#", "methodParameterName": "action#timeout#", "methodBody": "public static ManagerResponse sendAction(final ManagerAction action, final int timeout)\n            throws IllegalArgumentException, IllegalStateException, IOException, TimeoutException\n    {\n        if (logger.isDebugEnabled())\n            CoherentManagerConnection.logger.debug(\"Sending Action: \" + action.toString()); //$NON-NLS-1$\n\n        CoherentManagerConnection.getInstance();\n        if ((CoherentManagerConnection.managerConnection != null)\n                && (CoherentManagerConnection.managerConnection.getState() == ManagerConnectionState.CONNECTED))\n        {\n            final org.asteriskjava.manager.action.ManagerAction ajAction = action.getAJAction();\n\n            org.asteriskjava.manager.response.ManagerResponse response = CoherentManagerConnection.managerConnection\n                    .sendAction(ajAction, timeout);\n            ManagerResponse convertedResponse = null;\n\n            // UserEventActions always return a null\n            if (response != null)\n                convertedResponse = CoherentEventFactory.build(response);\n\n            if ((convertedResponse != null) && (convertedResponse.getResponse().compareToIgnoreCase(\"Error\") == 0))//$NON-NLS-1$\n            {\n                CoherentManagerConnection.logger.warn(\"Action '\" + ajAction + \"' failed, Response: \" //$NON-NLS-1$ //$NON-NLS-2$\n                        + convertedResponse.getResponse() + \" Message: \" + convertedResponse.getMessage()); //$NON-NLS-1$\n            }\n            return convertedResponse;\n        }\n\n        throw new IllegalStateException(\"not connected.\"); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Sends an Asterisk action and waits for a ManagerRespose.", "call_func_name": ["org.asteriskjava.util.Log.isDebugEnabled", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.toString", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "org.asteriskjava.pbx.internal.core.CoherentManagerConnection.getInstance", "org.asteriskjava.manager.ManagerConnection.getState", "org.asteriskjava.pbx.asterisk.wrap.actions.ManagerAction.getAJAction", "org.asteriskjava.manager.ManagerConnection.sendAction", "org.asteriskjava.pbx.internal.core.CoherentEventFactory.build", "org.asteriskjava.pbx.asterisk.wrap.response.ManagerResponse.getResponse", "java.lang.String.compareToIgnoreCase", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.asterisk.wrap.response.ManagerResponse.getMessage", "org.asteriskjava.util.Log.warn", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], [""], [""], ["org.asteriskjava.manager.action.ManagerAction", "long"], ["org.asteriskjava.manager.response.ManagerResponse"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.ManagerConnection.getState": "Returns the lifecycle status of this connection."}, {"org.asteriskjava.manager.ManagerConnection.sendAction": "Sends a ManagerAction to the Asterisk server and waits for the corresponding  {@link ManagerResponse}."}]}, {"index": "936", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/EndPointImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.EndPointImpl.EndPointImpl", "methodParameterType": "String#", "methodParameterName": "fullyQualifiedEndPoint#", "methodBody": "public EndPointImpl(final String fullyQualifiedEndPoint)\n    {\n        if (fullyQualifiedEndPoint == null)\n        {\n            throw new IllegalArgumentException(\"The fullyQualifiedEndPoint may not be null\"); //$NON-NLS-1$\n        }\n\n        final String cleaned = this.clean(fullyQualifiedEndPoint);\n        this._tech = TechType.getTech(cleaned);\n        this._endPointName = cleaned.substring(this._tech.name().length() + 1);\n\n        if (this._tech == TechType.DIALPLAN)\n        {\n            this._fullyQualifiedName = this._endPointName;\n        }\n        else\n        {\n            this._fullyQualifiedName = this._tech.name() + EndPointImpl.DELIMITER + this._endPointName;\n        }\n        this._empty = false;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a EndPoint from a fully qualified peer name of the form: SIP/NNN LOCAL/NNN TODO: the tech encoding should probably be specific to a particular pbx Implementation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "937", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/EndPointImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.EndPointImpl.EndPointImpl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EndPointImpl()\n    {\n        this._empty = true;\n        this._tech = TechType.UNKNOWN;\n        this._endPointName = \"\";\n        this._fullyQualifiedName = \"\";\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a empty end point.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "938", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/EndPointImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.EndPointImpl.EndPointImpl", "methodParameterType": "TechType#String#", "methodParameterName": "defaultTech#endPointName#", "methodBody": "// EndPoint(String endPointName, String tech)\n    // {\n    // if (endPointName == null)\n    // throw new IllegalArgumentException(\"The endPoint Name may not be null\");\n    //\n    // if (tech == null)\n    // throw new IllegalArgumentException(\"The endPoint Tehc may not be null\");\n    //\n    // String cleaned = clean(endPointName);\n    // // Tech must be upper case to match the enum but\n    // // the simple name must be lower case to matcht the context extension\n    // // names.\n    // this.tech = Tech.valueOf(tech.toUpperCase());\n    // this.endPointName = cleaned;\n    // }\n\n    public EndPointImpl(final TechType defaultTech, final String endPointName)\n    {\n        if (endPointName == null)\n        {\n            throw new IllegalArgumentException(\"The endPointName may not be null\"); //$NON-NLS-1$\n        }\n\n        final String cleaned = this.clean(endPointName);\n\n        if (cleaned.length() == 0)\n        {\n            throw new IllegalArgumentException(\"The endPointName may not be empty\"); //$NON-NLS-1$\n        }\n\n        // If tech is unknown then attempt to extract the tech from the\n        // endPointName.\n        if (TechType.hasTech(cleaned))\n        {\n            this._tech = TechType.getTech(cleaned);\n            this._endPointName = cleaned.substring(this._tech.name().length() + 1);\n\n        }\n        else\n        {\n            this._tech = defaultTech;\n            this._endPointName = cleaned;\n        }\n\n        if (this._tech == TechType.DIALPLAN)\n        {\n            this._fullyQualifiedName = this._endPointName;\n        }\n        else\n        {\n            this._fullyQualifiedName = this._tech.name() + EndPointImpl.DELIMITER + this._endPointName;\n        }\n        this._empty = false;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates an EndPoint from from a simple endpoint name and a tech.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "939", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/EndPointImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.EndPointImpl.getFullyQualifiedName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getFullyQualifiedName()\n    {\n        return this._fullyQualifiedName;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the fully qualified endPoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "940", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/EndPointImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.EndPointImpl.isSIP", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean isSIP()\n    {\n        return this._tech == TechType.SIP || this._tech == TechType.IAX || this._tech == TechType.IAX2;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the purposes of asterisk IAX and SIP are both considered SIP.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "941", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/EndPointImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.EndPointImpl.clean", "methodParameterType": "String#", "methodParameterName": "_endPointName#", "methodBody": "private String clean(final String _endPointName)\n    {\n        String localTo = _endPointName.trim();\n\n        // strip all white space from within the name as some source\n        // pass in a formatted phone number (e.g. 03 8320 8100)\n        int tmp = localTo.indexOf(\" \"); //$NON-NLS-1$\n        while (tmp != -1)\n        {\n            localTo = localTo.substring(0, tmp) + localTo.substring(tmp + 1, localTo.length());\n            tmp = localTo.indexOf(\" \"); //$NON-NLS-1$\n        }\n        return localTo.toLowerCase();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Cleans up an endpoint name by removing all whitespace (including internal whitespace) as well as making the string lower case.", "call_func_name": ["java.lang.String.trim", "java.lang.String.indexOf", "java.lang.StringBuilder.<init>", "java.lang.String.substring", "java.lang.StringBuilder.append", "java.lang.String.length", "java.lang.StringBuilder.toString", "java.lang.String.toLowerCase"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["int", "int"], ["java.lang.String"], [""], [""], [""]], "passed_comments": "/"}, {"index": "942", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java", "methodName": "org.asteriskjava.pbx.internal.core.PeerMonitor.init", "methodParameterType": "NewExtensionListener#", "methodParameterName": "_listener#", "methodBody": "public synchronized static void init(final NewExtensionListener _listener)\n    {\n        PeerMonitor.listener = _listener;\n\n        if (PeerMonitor.self == null)\n        {\n            PeerMonitor.self = new PeerMonitor();\n        }\n        else if (_listener != null)\n        {\n            logger.error(\"Call to PeerMonitor.init, but it's already initialized. Listener will not be set\");\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "needs to notify PhoneBookDisplayController.getInstance().addExtensions();", "call_func_name": ["org.asteriskjava.pbx.internal.core.PeerMonitor.<init>", "org.asteriskjava.util.Log.error"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "943", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java", "methodName": "org.asteriskjava.pbx.internal.core.PeerMonitor.handleEvent", "methodParameterType": "PeerStatusEvent#", "methodParameterName": "event#", "methodBody": "private void handleEvent(final PeerStatusEvent event)\n    {\n        this.registerPeer(event.getPeer());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param event", "call_func_name": ["org.asteriskjava.pbx.asterisk.wrap.events.PeerStatusEvent.getPeer", "org.asteriskjava.pbx.internal.core.PeerMonitor.registerPeer"], "call_func_parameter": [[""], ["org.asteriskjava.pbx.EndPoint"]], "passed_comments": "/"}, {"index": "944", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java", "methodName": "org.asteriskjava.pbx.internal.core.PeerMonitor.handleEvent", "methodParameterType": "StatusCompleteEvent#", "methodParameterName": "event#", "methodBody": "private synchronized void handleEvent(final StatusCompleteEvent event)\n    {\n\n        for (final Peer peer : this.peerList)\n        {\n            peer.endSweep();\n        }\n        PeerMonitor.logger.debug(\"Channel Mark and Sweep complete\"); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "We receive the StatusComplete event once the Mark and Sweep channel operation has completed. We now call endSweep which will remove any channels that were not marked during the operation.", "call_func_name": ["java.util.LinkedList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.pbx.internal.core.Peer.endSweep", "org.asteriskjava.util.Log.debug"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "945", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java", "methodName": "org.asteriskjava.pbx.internal.core.PeerMonitor.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void run()\n    {\n        while (true)\n        {\n            try\n            {\n                Thread.sleep(120000);\n                PeerMonitor.getInstance().startSweep();\n            }\n            catch (final InterruptedException e)\n            {\n                PeerMonitor.logger.error(e, e);\n\n            }\n        }\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(WhileStatement(BooleanLiteral)BooleanLiteral(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Runs the mark and sweep operation every 120 seconds on all channels to clean up any channels that have died and for which (for some reason) we missed the hangup event.", "call_func_name": ["java.lang.Thread.sleep", "org.asteriskjava.pbx.internal.core.PeerMonitor.getInstance", "org.asteriskjava.pbx.internal.core.PeerMonitor.startSweep", "org.asteriskjava.util.Log.error"], "call_func_parameter": [["long"], [""], [""], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.pbx.internal.core.PeerMonitor.startSweep": "Check every channel to make certain they are still active. We do this in case we missed a hangup event along the way somewhere. This allows us to cleanup any old channels. We start by clearing the mark on all channels and then generates a Asterisk status message for every active channel. At the end of the process any channels which haven't been marked are then discarded."}]}, {"index": "946", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java", "methodName": "org.asteriskjava.pbx.internal.core.PeerMonitor.startSweep", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void startSweep()\n    {\n        PeerMonitor.logger.debug(\"Starting channel mark and sweep\"); //$NON-NLS-1$\n\n        // Mark every channel as 'clearing'\n        synchronized (PeerMonitor.class)\n        {\n            for (final Peer peer : this.peerList)\n            {\n                peer.startSweep();\n            }\n        }\n\n        /**\n         * Request Asterisk to send us a status update for every channel.\n         */\n        final StatusAction sa = new StatusAction();\n        try\n        {\n            AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n            pbx.sendAction(sa, 5000);\n        }\n        catch (final Exception e)\n        {\n            PeerMonitor.logger.error(e, e);\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#TypeLiteral#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(SynchronizedStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)SynchronizedStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Check every channel to make certain they are still active. We do this in case we missed a hangup event along the way somewhere. This allows us to cleanup any old channels. We start by clearing the mark on all channels and then generates a Asterisk status message for every active channel. At the end of the process any channels which haven't been marked are then discarded.", "call_func_name": ["org.asteriskjava.util.Log.debug", "java.util.LinkedList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.pbx.internal.core.Peer.startSweep", "org.asteriskjava.pbx.asterisk.wrap.actions.StatusAction.<init>", "org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.internal.core.AsteriskPBX.sendAction", "org.asteriskjava.util.Log.error"], "call_func_parameter": [["java.lang.Object"], [""], [""], [""], [""], [""], [""], ["org.asteriskjava.pbx.asterisk.wrap.actions.ManagerAction", "int"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "947", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventListener.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerEventListener.onManagerEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "void onManagerEvent(ManagerEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method is called when an event is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "948", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/Peer.java", "methodName": "org.asteriskjava.pbx.internal.core.Peer.isConnectedToSelf", "methodParameterType": "Channel#", "methodParameterName": "channel#", "methodBody": "private boolean isConnectedToSelf(final Channel channel)\n    {\n        return this.getEndPoint().isSame(channel.getEndPoint());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the given channel is connected to this peer.", "call_func_name": ["org.asteriskjava.pbx.internal.core.Peer.getEndPoint", "org.asteriskjava.pbx.Channel.getEndPoint", "org.asteriskjava.pbx.EndPoint.isSame"], "call_func_parameter": [[""], [""], ["org.asteriskjava.pbx.EndPoint"]], "passed_comments": "/"}, {"index": "949", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/Peer.java", "methodName": "org.asteriskjava.pbx.internal.core.Peer.handleEvent", "methodParameterType": "MasqueradeEvent#", "methodParameterName": "b#", "methodBody": "public void handleEvent(final MasqueradeEvent b)\n    {\n        if (this.isConnectedToSelf(b.getClone()))\n        {\n            // At this point we will actually have two CallTrackers\n            // which we now need to merge into a single CallTracker.\n            CallTracker original = findCall(b.getOriginal());\n            CallTracker clone = findCall(b.getClone());\n            if (original != null && clone != null)\n            {\n                clone.mergeCalls(original);\n                clone.setState(b.getCloneState());\n                this.evaluateState();\n            }\n            else\n                logger.warn(\"When processing masquradeEvent we could not find the expected calls. event=\" //$NON-NLS-1$\n                        + b.toString() + \" original=\" + original + \" clone=\" + clone); //$NON-NLS-1$ //$NON-NLS-2$\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "We handle the masqurade event is it contains channel state information. During a masquerade we will have two channels for the one peer, the original and the clone. As the clone is taking over from the original peer we now need to use that as true indicator of state.", "call_func_name": ["org.asteriskjava.pbx.asterisk.wrap.events.MasqueradeEvent.getClone", "org.asteriskjava.pbx.internal.core.Peer.isConnectedToSelf", "org.asteriskjava.pbx.asterisk.wrap.events.MasqueradeEvent.getOriginal", "org.asteriskjava.pbx.internal.core.Peer.findCall", "org.asteriskjava.pbx.internal.core.CallTracker.mergeCalls", "org.asteriskjava.pbx.asterisk.wrap.events.MasqueradeEvent.getCloneState", "org.asteriskjava.pbx.internal.core.CallTracker.setState", "org.asteriskjava.pbx.internal.core.Peer.evaluateState", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.asterisk.wrap.events.MasqueradeEvent.toString", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], ["org.asteriskjava.pbx.Channel"], [""], ["org.asteriskjava.pbx.Channel"], ["org.asteriskjava.pbx.internal.core.CallTracker"], [""], ["org.asteriskjava.pbx.asterisk.wrap.events.ChannelState"], [""], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.internal.core.Peer.isConnectedToSelf": "Determines if the given channel is connected to this peer."}, {"org.asteriskjava.pbx.asterisk.wrap.events.MasqueradeEvent.getOriginal": "Returns the original channel"}, {"org.asteriskjava.pbx.internal.core.CallTracker.mergeCalls": "Used to merge two calls into a single call. This is required as during a masquerade a new channel is created an initially we will create a CallTracker for it. When the masquerade event finally turns up we will realise it belongs to an existing CallTracker and as such we need to merge the two CallTrackers."}, {"org.asteriskjava.pbx.internal.core.CallTracker.setState": "@param s"}, {"org.asteriskjava.pbx.internal.core.Peer.evaluateState": "Called each time the state of a call changes to determine the Peers overall state."}]}, {"index": "950", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/Peer.java", "methodName": "org.asteriskjava.pbx.internal.core.Peer.handleEvent", "methodParameterType": "NewChannelEvent#", "methodParameterName": "b#", "methodBody": "public void handleEvent(final NewChannelEvent b)\n    {\n        // Very occasionally we get a null channel which we can't do anything\n        // with so just throw the event away.\n        // If we get a Console/dsp channel name it means that someone has\n        // dialled from the asterisk\n        // console. We just ignore these.\n        if ((b.getChannel() == null) || (b.getChannel().isConsole()))\n        {\n            return;\n        }\n\n        if (this.isConnectedToSelf(b.getChannel()))\n        {\n            CallTracker call = this.registerChannel(b.getChannel());\n            if (call != null)\n            {\n                call.setState(b.getChannelState());\n                this.evaluateState();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "When a new channel comes up associated it with the peer. Be warned a peer can have multiple calls associated with it.", "call_func_name": ["org.asteriskjava.pbx.asterisk.wrap.events.NewChannelEvent.getChannel", "org.asteriskjava.pbx.Channel.isConsole", "org.asteriskjava.pbx.internal.core.Peer.isConnectedToSelf", "org.asteriskjava.pbx.internal.core.Peer.registerChannel", "org.asteriskjava.pbx.asterisk.wrap.events.NewChannelEvent.getChannelState", "org.asteriskjava.pbx.internal.core.CallTracker.setState", "org.asteriskjava.pbx.internal.core.Peer.evaluateState"], "call_func_parameter": [[""], [""], ["org.asteriskjava.pbx.Channel"], ["org.asteriskjava.pbx.Channel"], [""], ["org.asteriskjava.pbx.asterisk.wrap.events.ChannelState"], [""]], "passed_comments": [{"org.asteriskjava.pbx.Channel.isConsole": "@return true if the channel was originated from the console(Console/DSP)."}, {"org.asteriskjava.pbx.internal.core.Peer.isConnectedToSelf": "Determines if the given channel is connected to this peer."}, {"org.asteriskjava.pbx.internal.core.CallTracker.setState": "@param s"}, {"org.asteriskjava.pbx.internal.core.Peer.evaluateState": "Called each time the state of a call changes to determine the Peers overall state."}]}, {"index": "951", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/Peer.java", "methodName": "org.asteriskjava.pbx.internal.core.Peer.evaluateState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void evaluateState()\n    {\n        synchronized (this.callList)\n        {\n            // Get the highest prioirty state from the set of calls.\n            PeerState newState = PeerState.NOTSET;\n            for (CallTracker call : this.callList)\n            {\n                if (call.getState().getPriority() > newState.getPriority())\n                    newState = call.getState();\n            }\n\n            this._state = newState;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Called each time the state of a call changes to determine the Peers overall state.", "call_func_name": ["java.util.LinkedList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.pbx.internal.core.CallTracker.getState", "org.asteriskjava.pbx.internal.core.PeerState.getPriority"], "call_func_parameter": [[""], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "952", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/LiveChannelManager.java", "methodName": "org.asteriskjava.pbx.internal.core.LiveChannelManager.performPostCreationTasks", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void performPostCreationTasks()\n    {\n        StatusAction statusAction = new StatusAction();\n        try\n        {\n            ResponseEvents events = CoherentManagerConnection.sendEventGeneratingAction(statusAction, 1000);\n            for (ResponseEvent event : events.getEvents())\n            {\n                if (event instanceof StatusEvent)\n                {\n                    // do nothing. Creating the events will register the\n                    // channels, which is after all what we are trying to do.\n                }\n            }\n\n        }\n        catch (IllegalArgumentException | IllegalStateException | IOException | TimeoutException e)\n        {\n            logger.error(e, e);\n        }\n\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Find all the channels that came into existence before startup. This can't be done during the Constructor call, because it requires calls back to AsteriskPBX which isn't finished constructing until after the Constructor returns.", "call_func_name": ["org.asteriskjava.pbx.asterisk.wrap.actions.StatusAction.<init>", "org.asteriskjava.pbx.internal.core.CoherentManagerConnection.sendEventGeneratingAction", "org.asteriskjava.pbx.asterisk.wrap.events.ResponseEvents.getEvents", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.util.Log.error"], "call_func_parameter": [[""], ["org.asteriskjava.pbx.asterisk.wrap.actions.EventGeneratingAction", "int"], [""], [""], [""], [""], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.pbx.asterisk.wrap.events.ResponseEvents.getEvents": "Returns a Collection of ManagerEvents that have been received including the last one that indicates completion."}]}, {"index": "953", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CallTracker.java", "methodName": "org.asteriskjava.pbx.internal.core.CallTracker.mergeCalls", "methodParameterType": "CallTracker#", "methodParameterName": "rhs#", "methodBody": "void mergeCalls(CallTracker rhs)\n    {\n        synchronized (this._associatedChannels)\n        {\n            this._associatedChannels.addAll(rhs._associatedChannels);\n            // not certain this is necessary but lets just tidy up a bit.\n            rhs._associatedChannels.clear();\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Used to merge two calls into a single call. This is required as during a masquerade a new channel is created an initially we will create a CallTracker for it. When the masquerade event finally turns up we will realise it belongs to an existing CallTracker and as such we need to merge the two CallTrackers.", "call_func_name": ["java.util.ArrayList.addAll", "java.util.ArrayList.clear"], "call_func_parameter": [["java.util.Collection"], [""]], "passed_comments": "/"}, {"index": "954", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CallTracker.java", "methodName": "org.asteriskjava.pbx.internal.core.CallTracker.setState", "methodParameterType": "ChannelState#", "methodParameterName": "channelState#", "methodBody": "public void setState(final ChannelState channelState)\n    {\n        this._state = PeerState.valueByChannelState(channelState);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param s", "call_func_name": ["org.asteriskjava.pbx.internal.core.PeerState.valueByChannelState"], "call_func_parameter": [["org.asteriskjava.pbx.asterisk.wrap.events.ChannelState"]], "passed_comments": "/"}, {"index": "955", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CallTracker.java", "methodName": "org.asteriskjava.pbx.internal.core.CallTracker.remove", "methodParameterType": "Channel#", "methodParameterName": "channel#", "methodBody": "public void remove(Channel channel)\n    {\n        synchronized (this._associatedChannels)\n        {\n            int index = findChannel(channel);\n            if (index != -1)\n            {\n                if (logger.isDebugEnabled())\n                    logger.debug(\n                            \"CallTracker removing channel: \" + this.toString() + \" \" + channel.getExtendedChannelName()); //$NON-NLS-1$ //$NON-NLS-2$\n\n                this._associatedChannels.remove(index);\n            }\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Remove a channel from the call.", "call_func_name": ["org.asteriskjava.pbx.internal.core.CallTracker.findChannel", "org.asteriskjava.util.Log.isDebugEnabled", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.internal.core.CallTracker.toString", "org.asteriskjava.pbx.Channel.getExtendedChannelName", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "java.util.ArrayList.remove"], "call_func_parameter": [["org.asteriskjava.pbx.Channel"], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"], ["int"]], "passed_comments": [{"org.asteriskjava.pbx.Channel.getExtendedChannelName": "Returns a PBX specific version of the Channel name."}]}, {"index": "956", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelProxy.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelProxy.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Channel getChannel()\n    {\n        return this._channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "returns the current channel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "957", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelProxy.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelProxy.masquerade", "methodParameterType": "ChannelProxy#", "methodParameterName": "cloneProxy#", "methodBody": "public void masquerade(ChannelProxy cloneProxy) throws InvalidChannelName\n    {\n        ChannelImpl originalChannel = this._channel;\n        ChannelImpl cloneChannel = cloneProxy._channel;\n\n        cloneChannel.masquerade(this._channel);\n\n        // detach the hangup listeners\n        originalChannel.removeListener(this);\n        cloneChannel.removeListener(cloneProxy);\n\n        // Now we swap the channels.\n        this._channel = cloneChannel;\n        cloneProxy._channel = originalChannel;\n\n        // Now re-attach the hangup listeners\n        this._channel.addHangupListener(this);\n        cloneProxy._channel.addHangupListener(cloneProxy);\n\n        logger.debug(originalChannel + \" Channel proxy now points to \" + this._channel);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Used to handle a MasqueradeEvent. We essentially swap the two underlying channels between the two proxies.", "call_func_name": ["org.asteriskjava.pbx.internal.core.ChannelImpl.masquerade", "org.asteriskjava.pbx.internal.core.ChannelImpl.removeListener", "org.asteriskjava.pbx.internal.core.ChannelImpl.addHangupListener", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug"], "call_func_parameter": [["org.asteriskjava.pbx.Channel"], ["org.asteriskjava.pbx.ChannelHangupListener"], ["org.asteriskjava.pbx.ChannelHangupListener"], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.internal.core.ChannelImpl.masquerade": "designed for use by the ChannelProxy when a channel is being cloned as a result of Asterisk undertaking an Masquerade. This is not intended to be a complete clone just the key elements that we generally track on our side rather than getting directly from asterisk."}]}, {"index": "958", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListener.java", "methodName": "org.asteriskjava.pbx.internal.core.FilteredManagerListener.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Provides a unique name for the listener.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "959", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListener.java", "methodName": "org.asteriskjava.pbx.internal.core.FilteredManagerListener.requiredEvents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<Class<? extends ManagerEvent>> requiredEvents();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Called whenever the listener is first added and any time any listener is removed to refresh the list of required events.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "960", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListener.java", "methodName": "org.asteriskjava.pbx.internal.core.FilteredManagerListener.onManagerEvent", "methodParameterType": "T#", "methodParameterName": "event#", "methodBody": "void onManagerEvent(T event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called for each manager event that the connection receives for which the filterEvent returned true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "961", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListener.java", "methodName": "org.asteriskjava.pbx.internal.core.FilteredManagerListener.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ListenerPriority getPriority();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Set the listeners priority. Higher priority listeners have events dispatched to them before lower priority listeners.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "962", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.onManagerEvent", "methodParameterType": "org.asteriskjava.manager.event.ManagerEvent#", "methodParameterName": "event#", "methodBody": "@Override\n    public void onManagerEvent(final org.asteriskjava.manager.event.ManagerEvent event)\n    {\n\n        // logger.error(event);\n        boolean wanted = false;\n        /**\n         * Dump any events we arn't interested in ASAP to minimise the\n         * processing overhead of these events.\n         */\n        // Only enqueue the events that are of interest to one of our listeners.\n        synchronized (this.globalEvents)\n        {\n            Class< ? extends ManagerEvent> shadowEvent = CoherentEventFactory.getShadowEvent(event);\n            if (this.globalEvents.contains(shadowEvent))\n            {\n                wanted = true;\n            }\n        }\n\n        if (wanted)\n        {\n\n            // We don't support all events.\n            this._eventQueue.add(new EventLifeMonitor<>(event));\n            final int queueSize = this._eventQueue.size();\n            if (this._queueMaxSize < queueSize)\n            {\n                this._queueMaxSize = queueSize;\n            }\n            this._queueSum += queueSize;\n            this._queueCount++;\n\n            if (CoherentManagerEventQueue.logger.isDebugEnabled())\n            {\n                if (this._eventQueue.size() > ((this._queueMaxSize + (this._queueSum / this._queueCount)) / 2))\n                {\n                    CoherentManagerEventQueue.logger.debug(\"queue gtr max avg: size=\" + queueSize + \" max:\" //$NON-NLS-1$ //$NON-NLS-2$\n                            + this._queueMaxSize + \" avg:\" + (this._queueSum / this._queueCount)); //$NON-NLS-1$\n                }\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#StringLiteral#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PostfixExpression)ExpressionStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "handles manager events passed to us in our role as a listener. We queue the event so that it can be read, by the run method of this class, and subsequently passed on to the original listener.", "call_func_name": ["org.asteriskjava.pbx.internal.core.CoherentEventFactory.getShadowEvent", "java.util.HashSet.contains", "org.asteriskjava.pbx.internal.eventQueue.EventLifeMonitor.<init>", "java.util.concurrent.BlockingQueue.add", "java.util.concurrent.BlockingQueue.size", "org.asteriskjava.util.Log.isDebugEnabled", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug"], "call_func_parameter": [["org.asteriskjava.manager.event.ManagerEvent"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String"], ["int"], ["long"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "963", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.dispatchEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "public void dispatchEvent(final ManagerEvent event)\n    {\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"dispatch=\" + event.toString()); //$NON-NLS-1$\n        }\n\n        // take a copy of the listeners so they can be modified whilst we\n        // iterate over them\n        // The iteration may call some long running processes.\n        final List<FilteredManagerListenerWrapper> listenerCopy;\n        synchronized (this.listeners)\n        {\n            listenerCopy = this.listeners.getCopyAsList();\n        }\n\n        try\n        {\n            final LogTime totalTime = new LogTime();\n\n            CountDownLatch latch = new CountDownLatch(listenerCopy.size());\n\n            for (final FilteredManagerListenerWrapper filter : listenerCopy)\n            {\n                if (filter.requiredEvents.contains(event.getClass()))\n                {\n                    dispatchEventOnThread(event, filter, latch);\n                }\n                else\n                {\n                    // this listener didn't want the event, so just decrease the\n                    // countdown\n                    latch.countDown();\n                }\n            }\n\n            latch.await();\n\n            if (totalTime.timeTaken() > 500)\n            {\n                logger.warn(\"Too long to process event \" + event + \" time taken: \" + totalTime.timeTaken()); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n        }\n        catch (InterruptedException e)\n        {\n            Thread.interrupted();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SynchronizedStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)SynchronizedStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Events are sent here from the CoherentManagerEventQueue after being converted from a ManagerEvent to an ManagerEvent. This method is called from a dedicated thread attached to the event queue which it uses for dispatching events.", "call_func_name": ["org.asteriskjava.util.Log.isDebugEnabled", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.asterisk.wrap.events.ManagerEvent.toString", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "org.asteriskjava.pbx.internal.core.ListenerManager.getCopyAsList", "org.asteriskjava.pbx.util.LogTime.<init>", "java.util.List.size", "java.util.concurrent.CountDownLatch.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Object.getClass", "java.util.Set.contains", "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.dispatchEventOnThread", "java.util.concurrent.CountDownLatch.countDown", "java.util.concurrent.CountDownLatch.await", "org.asteriskjava.pbx.util.LogTime.timeTaken", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.asteriskjava.util.Log.warn", "java.lang.Thread.interrupted"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], [""], [""], ["int"], [""], [""], [""], [""], ["java.lang.Object"], ["org.asteriskjava.pbx.asterisk.wrap.events.ManagerEvent", "org.asteriskjava.pbx.internal.core.FilteredManagerListenerWrapper", "java.util.concurrent.CountDownLatch"], [""], [""], [""], ["java.lang.Object"], ["long"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "964", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.addListener", "methodParameterType": "FilteredManagerListener<ManagerEvent>#", "methodParameterName": "listener#", "methodBody": "public void addListener(final FilteredManagerListener<ManagerEvent> listener)\n    {\n        synchronized (this.listeners)\n        {\n            this.listeners.addListener(listener);\n            synchronized (this.globalEvents)\n            {\n                Collection<Class< ? extends ManagerEvent>> expandEvents = expandEvents(listener.requiredEvents());\n                this.globalEvents.addAll(expandEvents);\n            }\n        }\n        logger.debug(\"listener  added \" + listener);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#SynchronizedStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)SynchronizedStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a listener which will be sent all events that its filterEvent handler will accept. All events are dispatch by way of a shared queue which is read via a thread which is shared by all listeners. Whilst poor performance of you listener can affect other listeners you can't affect the read thread which takes events from asterisk and enqueues them.", "call_func_name": ["org.asteriskjava.pbx.internal.core.ListenerManager.addListener", "org.asteriskjava.pbx.internal.core.FilteredManagerListener.requiredEvents", "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.expandEvents", "java.util.HashSet.addAll", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug"], "call_func_parameter": [["org.asteriskjava.pbx.internal.core.FilteredManagerListener"], [""], ["java.util.Collection"], ["java.util.Collection"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.internal.core.FilteredManagerListener.requiredEvents": "Called whenever the listener is first added and any time any listener is removed to refresh the list of required events."}, {"org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.expandEvents": "in order to get Bridge Events, we must subscribe to Link and Unlink events for asterisk 1.4, so we automatically add them if the Bridge Event is required"}]}, {"index": "965", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.expandEvents", "methodParameterType": "Collection<Class<? extends ManagerEvent>>#", "methodParameterName": "events#", "methodBody": "Collection<Class< ? extends ManagerEvent>> expandEvents(Collection<Class< ? extends ManagerEvent>> events)\n    {\n        Collection<Class< ? extends ManagerEvent>> requiredEvents = new HashSet<>();\n        for (Class< ? extends ManagerEvent> event : events)\n        {\n            requiredEvents.add(event);\n            if (event.equals(BridgeEvent.class))\n            {\n                requiredEvents.add(UnlinkEvent.class);\n                requiredEvents.add(LinkEvent.class);\n            }\n        }\n\n        return requiredEvents;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "in order to get Bridge Events, we must subscribe to Link and Unlink events for asterisk 1.4, so we automatically add them if the Bridge Event is required", "call_func_name": ["java.util.HashSet.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Collection.add", "java.lang.Object.equals"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "966", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java", "methodName": "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.transferListeners", "methodParameterType": "CoherentManagerEventQueue#", "methodParameterName": "eventQueue#", "methodBody": "public void transferListeners(CoherentManagerEventQueue eventQueue)\n    {\n        synchronized (this.listeners)\n        {\n            synchronized (eventQueue.listeners)\n            {\n                Iterator<FilteredManagerListenerWrapper> itr = eventQueue.listeners.iterator();\n                while (itr.hasNext())\n                {\n                    FilteredManagerListenerWrapper listener = itr.next();\n\n                    this.addListener(listener._listener);\n                }\n                eventQueue.listeners.clear();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(SynchronizedStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "transfers the listeners from one queue to another.", "call_func_name": ["org.asteriskjava.pbx.internal.core.ListenerManager.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.addListener", "org.asteriskjava.pbx.internal.core.ListenerManager.clear"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.pbx.internal.core.FilteredManagerListener"], [""]], "passed_comments": [{"org.asteriskjava.pbx.internal.core.CoherentManagerEventQueue.addListener": "Adds a listener which will be sent all events that its filterEvent handler will accept. All events are dispatch by way of a shared queue which is read via a thread which is shared by all listeners. Whilst poor performance of you listener can affect other listeners you can't affect the read thread which takes events from asterisk and enqueues them."}]}, {"index": "967", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.ChannelImpl", "methodParameterType": "String#String#", "methodParameterName": "channelName#uniqueID#", "methodBody": "ChannelImpl(final String channelName, final String uniqueID) throws InvalidChannelName\n    {\n        if (uniqueID == null)\n            throw new IllegalArgumentException(\"The UniqueID may not be null.\"); //$NON-NLS-1$\n\n        if (channelName == null)\n            throw new IllegalArgumentException(\"The channelName may not be null.\"); //$NON-NLS-1$\n\n        if (uniqueID.compareToIgnoreCase(\"-1\") == 0)\n        {\n            logger.debug(\"uniqueID is -1\");\n        }\n\n        this._uniqueID = uniqueID;\n\n        this.setChannelName(channelName);\n\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a channel from a channelName <br> <br> This constructor is package private for a reason, and is called from AsteriskPBX... If you need to add a channel to the PBX do it like this<br> <br> AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();<br> final Channel channel = pbx.registerChannel(channelName, uniqueId); <br> <br> Channel names are one of the following formats: [Action/]Tech/EndPointName-<sequence-number>[<MASQ>][ <ZOMBIE>] DAHDI/i<span>/<number>[:<subaddress>]-<sequence-number> <br> <br> Where: [Action/] is an action that is being performed on a channel. e.g. Parked Tech is the Tech used to reach the end point. <br> <br> The set of supported techs are defined by the enum Tech. <br> <br> EndPointName the name of the endpoint. <br> <br> '<MASQ>' the optional terminating '<MASQ>' which indicates the channel is now being masqueraded. A masqueraded channel is one that has been cloned. The original channel is marked as being masqueraded and will hangup shortly. It plays no further part in the Call. <br> <br> '<ZOMBIE>' the optional terminating '<ZOMBIE>' which indicates the channel is now a zombie. A zombie channel is one that has been hungup and is awaiting final cleanup. I believe the zombie channel is used by the hangup extension 'h' in the dialplan. <br> <br> The channel name is stripped of the Action, MASQ and ZOMBIE elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "968", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.masquerade", "methodParameterType": "Channel#", "methodParameterName": "channel#", "methodBody": "public void masquerade(Channel channel)\n    {\n        // If the channel doesn't have a caller id\n        // preserve the existing one (as given this is a clone they should be\n        // identical).\n        // Asterisk doesn't always pass the caller ID on the channel hence this\n        // protects us from Asterisk accidentally clearing the caller id.\n        if (channel.hasCallerID())\n        {\n            this._callerID = channel.getCallerID();\n        }\n        else if (this._callerID != null && ((ChannelImpl) channel)._callerID != null)\n        {\n            // Force the caller id back into the channel so it has one as well.\n            PBX pbx = PBXFactory.getActivePBX();\n            if (this._callerID != null)\n            {\n                ((ChannelImpl) channel)._callerID = pbx.buildCallerID(this._callerID.getNumber(), this._callerID.getName());\n            }\n        }\n\n        this._muted = channel.isMute();\n\n        this._parked = channel.isParked();\n\n        // just in case the original channel is part way through a sweep by the\n        // PeerMonitor\n        // marking the sweep as true will stop the new clone being hungup as it\n        // may not have been around when the sweep started.\n        this._marked = true;\n        this._sweepStartTime = null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(InfixExpression(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "designed for use by the ChannelProxy when a channel is being cloned as a result of Asterisk undertaking an Masquerade. This is not intended to be a complete clone just the key elements that we generally track on our side rather than getting directly from asterisk.", "call_func_name": ["org.asteriskjava.pbx.Channel.hasCallerID", "org.asteriskjava.pbx.Channel.getCallerID", "org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.CallerID.getNumber", "org.asteriskjava.pbx.CallerID.getName", "org.asteriskjava.pbx.PBX.buildCallerID", "org.asteriskjava.pbx.Channel.isMute", "org.asteriskjava.pbx.Channel.isParked"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"], [""], [""]], "passed_comments": [{"org.asteriskjava.pbx.Channel.getCallerID": "Returns the current callerid for this channel. Note: on some systems this involves a round trip to the pbx."}, {"org.asteriskjava.pbx.CallerID.getNumber": "Gets the number component of the caller id."}, {"org.asteriskjava.pbx.CallerID.getName": "Gets the name component of the caller id."}, {"org.asteriskjava.pbx.Channel.isMute": "Checks if this channel is currently mute. A channel is mute if the party connected to this channel cannot hear any audio."}, {"org.asteriskjava.pbx.Channel.isParked": "@return true if the channel is currently parked."}]}, {"index": "969", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.validateChannelName", "methodParameterType": "String#", "methodParameterName": "channelName#", "methodBody": "private void validateChannelName(final String channelName) throws InvalidChannelName\n    {\n        if (!this._isConsole)\n        {\n            if (!TechType.hasValidTech(channelName))\n            {\n                throw new InvalidChannelName(\"Invalid channelName: \" + channelName + \". Unknown tech.\"); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n\n            // Check we have the expected hypen\n            final int hypen = channelName.indexOf(\"-\"); //$NON-NLS-1$\n            if (hypen == -1)\n            {\n                throw new InvalidChannelName(\"Invalid channelName: \" + channelName + \". Missing hypen.\"); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n\n            // Check we have the expected slash\n            final int slash = channelName.indexOf(\"/\"); //$NON-NLS-1$\n            if (slash == -1)\n            {\n                throw new InvalidChannelName(\"Invalid channelName: \" + channelName + \". Missing slash.\"); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n\n            // Check that the hypen is after the slash.\n            if (hypen < slash)\n            {\n                throw new InvalidChannelName(\"Invalid channelName: \" + channelName + \". Hypen must be after the slash.\"); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n\n            // Check that there is at least one characters between the hypen and\n            // the\n            // slash\n            if ((hypen - slash) < 2)\n            {\n                throw new InvalidChannelName(\"Invalid channelName: \" + channelName //$NON-NLS-1$\n                        + \". Must be one character between the hypen and the slash.\"); //$NON-NLS-1$\n            }\n\n            // Check that the channel sequence number is at least 1 character\n            // long.\n            if ((channelName.length() - hypen) < 2)\n            {\n                throw new InvalidChannelName(\"Invalid channelName: \" + channelName //$NON-NLS-1$\n                        + \". The channel sequence number must be at least 1 character.\"); //$NON-NLS-1$\n            }\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PrefixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "validates the channel name. Validate is to be called after the channel has been cleaned.", "call_func_name": ["org.asteriskjava.pbx.TechType.hasValidTech", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.pbx.InvalidChannelName.<init>", "java.lang.String.indexOf", "java.lang.String.length"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "970", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.cleanChannelName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private String cleanChannelName(final String name)\n    {\n        String cleanedName = name.trim().toUpperCase();\n\n        // If if the channel is the console\n        this._isConsole = false;\n        if (name.compareToIgnoreCase(\"Console/dsp\") == 0) //$NON-NLS-1$\n        {\n            this._isConsole = true;\n        }\n\n        // Check if the channel is in an action\n        boolean wasInAction = this._isInAction;\n        this._isInAction = false;\n        for (final String prefix : ChannelImpl._actions)\n        {\n            if (cleanedName.startsWith(prefix))\n            {\n                this._isInAction = true;\n                this._actionPrefix = cleanedName.substring(0, prefix.length() - 1);\n                cleanedName = cleanedName.substring(prefix.length());\n                break;\n            }\n        }\n        if (wasInAction != this._isInAction)\n        {\n            logger.debug(\"Channel \" + this + \" : inaction status changed from \" + wasInAction + \" to \" + this._isInAction);\n        }\n\n        // Channels can be marked as in a zombie state\n        // so we need to strip of the zombie suffix and just mark the channel\n        // as a\n        // zombie.\n        this._isZombie = false;\n        if (cleanedName.contains(ChannelImpl.ZOMBIE))\n        {\n            this._isZombie = true;\n            cleanedName = cleanedName.substring(0, cleanedName.indexOf(ChannelImpl.ZOMBIE));\n        }\n\n        // Channels can be marked as in a MASQ state\n        // This happens during transfers (and other times) when the channel is\n        // replaced\n        // by a new channel in the call. The old channel is renamed with the\n        // word\n        // <MASQ> added as a suffix.\n        this._isMasqueraded = false;\n        if (cleanedName.contains(ChannelImpl.MASQ))\n        {\n            this._isMasqueraded = true;\n            cleanedName = cleanedName.substring(0, cleanedName.indexOf(ChannelImpl.MASQ));\n        }\n\n        return cleanedName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#InfixExpression#SimpleName#SimpleName#StringLiteral#ThisExpression#StringLiteral#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Cleans up the channel name by applying the following: 1) trim any whitespace 2) convert to upper case for easy string comparisions 3) strip of the masquerade prefix if it exists and mark the channel as masquerading 4) strip the zombie suffix and mark it as being a zombie.", "call_func_name": ["java.lang.String.trim", "java.lang.String.toUpperCase", "java.lang.String.compareToIgnoreCase", "java.lang.String.startsWith", "java.lang.String.length", "java.lang.String.substring", "java.lang.String.substring", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "java.lang.String.contains", "java.lang.String.indexOf"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String"], [""], ["int", "int"], ["int"], [""], ["java.lang.String"], ["java.lang.Object"], ["boolean"], [""], ["java.lang.Object"], ["java.lang.CharSequence"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "971", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.startSweep", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void startSweep()\n    {\n        this._sweepStartTime = new Date().getTime();\n        this._marked = false;\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Used to start the Mark and Sweep process by setting the marked status to false. At the end of the sweep the marked flag should have been set to true. If not then this channel has been hungup.", "call_func_name": ["java.util.Date.<init>", "java.util.Date.getTime", "java.lang.Long.valueOf"], "call_func_parameter": [[""], [""], ["long"]], "passed_comments": "/"}, {"index": "972", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.markChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void markChannel()\n    {\n        this._marked = true;\n\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "The channel was found to be active on asterisk so it is still alive.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "973", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.isSame", "methodParameterType": "Channel#", "methodParameterName": "_rhs#", "methodBody": "@Override\n    public boolean isSame(final Channel _rhs)\n    {\n        boolean equals = false;\n\n        if (_rhs == null)\n        {\n            logger.warn(\"isSame called with null\");\n            return false;\n        }\n        ChannelImpl rhs;\n        if (_rhs instanceof ChannelImpl)\n        {\n            rhs = (ChannelImpl) _rhs;\n        }\n        else\n        {\n            rhs = ((ChannelProxy) _rhs).getRealChannel();\n        }\n        // If we have unique id's for both channels then we can compare the id's\n        // directly.\n        if ((this._uniqueID.compareTo(ChannelImpl.UNKNOWN_UNIQUE_ID) != 0)\n                && (rhs._uniqueID.compareTo(ChannelImpl.UNKNOWN_UNIQUE_ID) != 0))\n        {\n            if (this._uniqueID.compareToIgnoreCase(rhs._uniqueID) == 0)\n            {\n                equals = true;\n            }\n        }\n        else\n        {\n            boolean ok = (this._channelName != null) && (rhs._channelName != null);\n            final boolean namesMatch = (ok && (this._channelName.compareToIgnoreCase(rhs._channelName) == 0));\n\n            if (namesMatch)\n            {\n                // check if the actions match\n                if (this._isInAction != rhs._isInAction)\n                {\n                    ok = false;\n                }\n                else if (this._isInAction)\n                {\n                    ok = this._actionPrefix.compareTo(rhs._actionPrefix) == 0;\n                }\n            }\n\n            if (ok && namesMatch)\n            {\n                // check if the zombie match\n                if (this._isZombie != rhs._isZombie)\n                {\n                    ok = false;\n                }\n            }\n\n            if (ok && namesMatch)\n            {\n                // check if the masquerade match\n                if (this._isMasqueraded != rhs._isMasqueraded)\n                {\n                    ok = false;\n                }\n            }\n\n            equals = ok & namesMatch;\n        }\n        return equals;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "", "call_func_name": ["org.asteriskjava.util.Log.warn", "org.asteriskjava.pbx.internal.core.ChannelProxy.getRealChannel", "java.lang.String.compareTo", "java.lang.String.compareToIgnoreCase"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "974", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.sameUniqueID", "methodParameterType": "String#", "methodParameterName": "uniqueID#", "methodBody": "public boolean sameUniqueID(String uniqueID)\n    {\n        boolean equals = false;\n        if ((this._uniqueID.compareTo(ChannelImpl.UNKNOWN_UNIQUE_ID) != 0)\n                && (uniqueID.compareTo(ChannelImpl.UNKNOWN_UNIQUE_ID) != 0))\n        {\n            if (this._uniqueID.compareTo(uniqueID) == 0)\n            {\n                equals = true;\n            }\n        }\n\n        return equals;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Try to match a channel based solely on its unique ID", "call_func_name": ["java.lang.String.compareTo"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "975", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.notifyHangupListeners", "methodParameterType": "Integer#String#", "methodParameterName": "cause#causeText#", "methodBody": "@Override\n    public void notifyHangupListeners(Integer cause, String causeText)\n    {\n        this._isLive = false;\n        if (this.hangupListener != null)\n        {\n            this.hangupListener.channelHangup(this, cause, causeText);\n        }\n        else\n        {\n            logger.warn(\"Hangup listener is null\");\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called by Peer when we have been hungup. This can happen when Peer receives a HangupEvent or during a periodic sweep done by PeerMonitor to find the status of all channels. Notify any listeners that this channel has been hung up.", "call_func_name": ["org.asteriskjava.pbx.ChannelHangupListener.channelHangup", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [["org.asteriskjava.pbx.Channel", "java.lang.Integer", "java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "976", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.getExtendedChannelName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getExtendedChannelName()\n    {\n        final StringBuilder name = new StringBuilder();\n\n        if (this._isInAction)\n        {\n            name.append(this._actionPrefix);\n            name.append(\"/\"); //$NON-NLS-1$\n        }\n        name.append(this._channelName);\n\n        if (this._isMasqueraded)\n        {\n            name.append(ChannelImpl.MASQ);\n        }\n\n        if (this._isZombie)\n        {\n            name.append(ChannelImpl.ZOMBIE);\n        }\n\n        return name.toString();\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the full channel name including the masquerade prefix and the zombie suffix.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "977", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.getActionPrefix", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getActionPrefix()\n    {\n        return this._isInAction ? this._actionPrefix : \"\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#StringLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ConditionalExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the actionPrefix for the channel or an empty string if the channel is not doing an action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "978", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/core/ChannelImpl.java", "methodName": "org.asteriskjava.pbx.internal.core.ChannelImpl.isQuiescent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean isQuiescent()\n    {\n        return !(_isInAction || _isMasqueraded || _isZombie);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the channel is quiescent. A quescent channel is one that is current not going through a transition (name change) such as MASQ, ZOMBIE, ASYNC, PARK", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "979", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/BlindTransferActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.BlindTransferActivityImpl.BlindTransferActivityImpl", "methodParameterType": "Call#Call.OperandChannel#EndPoint#CallerID#boolean#long#ActivityCallback<BlindTransferActivity>#", "methodParameterName": "call#channelToTransfer#transferTarget#toCallerID#autoAnswer#timeout#listener#", "methodBody": "public BlindTransferActivityImpl(Call call, final Call.OperandChannel channelToTransfer, final EndPoint transferTarget,\n            final CallerID toCallerID, boolean autoAnswer, long timeout,\n            final ActivityCallback<BlindTransferActivity> listener)\n    {\n        super(\"BlindTransferActivity\", listener);\n\n        this._call = call;\n        this._channelToTransfer = channelToTransfer;\n        this._transferTarget = transferTarget;\n        this._toCallerID = toCallerID;\n        this._autoAnswer = autoAnswer;\n        this._timeout = timeout;\n\n        actualChannelToTransfer = _call.getOperandChannel(this._channelToTransfer);\n\n        this.startActivity(true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Blind transfers a live channel to a given endpoint which may need to be dialed. When we dial the endpoint we display the 'toCallerID'.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "980", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/BlindTransferActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.BlindTransferActivityImpl.cancel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void cancel()\n    {\n        this._completionCause = CompletionCause.CANCELLED;\n        this._latch.countDown();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "cancels the BlindTransfer.", "call_func_name": ["java.util.concurrent.CountDownLatch.countDown"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "981", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/DialToAgiActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.DialToAgiActivityImpl.markCancelled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void markCancelled()\n    {\n        this.cancelledByOperator = true;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called if the user cancels the call after starting it. The caller must also hangup the trc channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "982", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/DialActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.DialActivityImpl.markCancelled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void markCancelled()\n    {\n        this.cancelledByOperator = true;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to cancels the dial before it fully comes up. The caller must also hangup the associated channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "983", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/SplitActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.SplitActivityImpl.SplitActivityImpl", "methodParameterType": "Call#ActivityCallback<SplitActivity>#", "methodParameterName": "callToSplit#listener#", "methodBody": "public SplitActivityImpl(final Call callToSplit, final ActivityCallback<SplitActivity> listener)\n    {\n        super(\"SplitActivity\", listener);\n\n        renameEventReceived.set(new CountDownLatch(1));\n        this._callToSplit = callToSplit;\n\n        List<Channel> tmp = callToSplit.getChannels();\n        if (tmp.size() > 1)\n        {\n            channel1 = tmp.get(0);\n            channel2 = tmp.get(1);\n        }\n        this.startActivity(true);\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Splits a call by moving each of its two channels into the Activity agi. The channels will sit in the agi (with no audio) until something is done with them. As such you should leave them split for too long.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "984", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/SplitActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.SplitActivityImpl.getLHSCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Call getLHSCall()\n    {\n        return this._lhsCall;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "After a call has been split we get two new calls. One will hold the original remote party and the other will hold the original local party.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "985", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/SplitActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.SplitActivityImpl.getRHSCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Call getRHSCall()\n    {\n        return this._rhsCall;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "After a call has been split we get two new calls. One will hold the original remote party and the other will hold the original local party.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "986", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/SplitActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.SplitActivityImpl.splitTwo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private boolean splitTwo() throws PBXException\n    {\n        final AsteriskSettings profile = PBXFactory.getActiveProfile();\n        AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n\n        if (channel1 == channel2)\n        {\n            throw new PBXException(\"channel1 is the same as channel2. if I let this happen, asterisk will core dump :)\");\n        }\n\n        List<Channel> channels = new LinkedList<>();\n        channels.add(channel1);\n        channels.add(channel2);\n        if (!pbx.waitForChannelsToQuiescent(channels, 3000))\n        {\n            logger.error(callSite, callSite);\n            throw new PBXException(\n                    \"Channel: \" + channel1 + \" or \" + channel2 + \" cannot be split as they are still in transition.\");\n        }\n\n        /*\n         * redirects the specified channels to the specified endpoints. Returns\n         * true or false reflecting success.\n         */\n\n        AgiChannelActivityHold agi1 = new AgiChannelActivityHold();\n        AgiChannelActivityHold agi2 = new AgiChannelActivityHold();\n\n        pbx.setVariable(channel1, \"proxyId\", \"\" + ((ChannelProxy) channel1).getIdentity());\n        pbx.setVariable(channel2, \"proxyId\", \"\" + ((ChannelProxy) channel2).getIdentity());\n\n        // AgiChannelAcitivyBridge has a latch which other activities may be\n        // sleeping on, so it's important\n        // to change the other channels activity first to avoid it waking and\n        // taking an undesired action\n        // when the AgiChannelActivityBridge channel has it's acitvity\n        // cancelled.\n        if (channel2.getCurrentActivityAction() instanceof AgiChannelActivityBridge)\n        {\n            channel1.setCurrentActivityAction(agi1);\n            channel2.setCurrentActivityAction(agi2);\n        }\n        else\n        {\n            channel2.setCurrentActivityAction(agi2);\n            channel1.setCurrentActivityAction(agi1);\n        }\n\n        final String agiExten = profile.getAgiExtension();\n        final String agiContext = profile.getManagementContext();\n        logger.debug(\"splitTwo channel lhs:\" + channel1 + \" to \" + agiExten + \" in context \" + agiContext + \" from \"\n                + this._callToSplit);\n\n        final EndPoint extensionAgi = pbx.getExtensionAgi();\n        final RedirectAction redirect = new RedirectAction(channel1, agiContext, extensionAgi, 1);\n        redirect.setExtraChannel(channel2);\n        redirect.setExtraContext(agiContext);\n        redirect.setExtraExten(extensionAgi);\n        redirect.setExtraPriority(1);\n        // logger.error(redirect);\n\n        boolean ret = false;\n        {\n            try\n            {\n\n                renameEventReceived.set(new CountDownLatch(1));\n                // final ManagerResponse response =\n                pbx.sendAction(redirect, 1000);\n                if (pbx.expectRenameEvents())\n                {\n\n                    // wait for channels to unbridge\n                    if (!renameEventReceived.get().await(2000, TimeUnit.MILLISECONDS))\n                    {\n                        logger.error(\"There was no rename event\");\n                    }\n                    else\n                    {\n                        logger.warn(\"Channels are renaming, now waiting for Quiescent\");\n                    }\n                }\n\n                channels.clear();\n\n                channels.add(channel1);\n                channels.add(channel2);\n                if (!pbx.waitForChannelsToQuiescent(channels, 3000))\n                {\n                    logger.error(callSite, callSite);\n                    throw new PBXException(\"Channel: \" + channel1 + \" or \" + channel2\n                            + \" cannot be split as they are still in transition.\");\n                }\n\n                double ctr = 0;\n                while ((!agi1.hasCallReachedAgi() || !agi2.hasCallReachedAgi()) && ctr < 10)\n                {\n                    Thread.sleep(100);\n                    ctr += 100.0 / 1000.0;\n                    if (!agi1.hasCallReachedAgi())\n                    {\n                        logger.info(\"Waiting on (agi1) \" + channel1);\n                    }\n                    if (!agi2.hasCallReachedAgi())\n                    {\n                        logger.info(\"Waiting on (agi2) \" + channel2);\n                    }\n                }\n                ret = agi1.hasCallReachedAgi() && agi2.hasCallReachedAgi();\n\n            }\n            catch (final Exception e)\n            {\n                logger.error(e, e);\n            }\n        }\n        return ret;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Splits two channels moving them to defined endpoints.", "call_func_name": ["org.asteriskjava.pbx.PBXFactory.getActiveProfile", "org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.PBXException.<init>", "java.util.LinkedList.<init>", "java.util.List.add", "org.asteriskjava.pbx.internal.core.AsteriskPBX.waitForChannelsToQuiescent", "org.asteriskjava.util.Log.error", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.pbx.agi.AgiChannelActivityHold.<init>", "org.asteriskjava.pbx.internal.core.ChannelProxy.getIdentity", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.internal.core.AsteriskPBX.setVariable", "org.asteriskjava.pbx.Channel.getCurrentActivityAction", "org.asteriskjava.pbx.Channel.setCurrentActivityAction", "org.asteriskjava.pbx.AsteriskSettings.getAgiExtension", "org.asteriskjava.pbx.AsteriskSettings.getManagementContext", "org.asteriskjava.util.Log.debug", "org.asteriskjava.pbx.internal.core.AsteriskPBX.getExtensionAgi", "org.asteriskjava.pbx.asterisk.wrap.actions.RedirectAction.<init>", "org.asteriskjava.pbx.asterisk.wrap.actions.RedirectAction.setExtraChannel", "org.asteriskjava.pbx.asterisk.wrap.actions.RedirectAction.setExtraContext", "org.asteriskjava.pbx.asterisk.wrap.actions.RedirectAction.setExtraExten", "org.asteriskjava.pbx.asterisk.wrap.actions.RedirectAction.setExtraPriority", "java.util.concurrent.CountDownLatch.<init>", "java.util.concurrent.atomic.AtomicReference.set", "org.asteriskjava.pbx.internal.core.AsteriskPBX.sendAction", "org.asteriskjava.pbx.internal.core.AsteriskPBX.expectRenameEvents", "java.util.concurrent.atomic.AtomicReference.get", "java.util.concurrent.CountDownLatch.await", "org.asteriskjava.util.Log.error", "org.asteriskjava.util.Log.warn", "java.util.List.clear", "org.asteriskjava.pbx.agi.AgiChannelActivityHold.hasCallReachedAgi", "java.lang.Thread.sleep", "org.asteriskjava.util.Log.info"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.util.List", "long"], ["java.lang.Object", "java.lang.Throwable"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], [""], ["int"], ["org.asteriskjava.pbx.Channel", "java.lang.String", "java.lang.String"], [""], ["org.asteriskjava.pbx.AgiChannelActivityAction"], [""], [""], ["java.lang.Object"], [""], ["org.asteriskjava.pbx.Channel", "java.lang.String", "org.asteriskjava.pbx.EndPoint", "int"], ["org.asteriskjava.pbx.Channel"], ["java.lang.String"], ["org.asteriskjava.pbx.EndPoint"], ["int"], ["int"], ["java.lang.Object"], ["org.asteriskjava.pbx.asterisk.wrap.actions.ManagerAction", "int"], [""], [""], ["long", "java.util.concurrent.TimeUnit"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["long"], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.AsteriskSettings.getAgiExtension": "Return an asterisk dialplan extension (within the Management Context) that will be used to inject the agi dialplan entry point used by Activites.. Just ensure that its a unique asterisk dialplan extension name."}, {"org.asteriskjava.pbx.AsteriskSettings.getManagementContext": "This is an asterisk dialplan context. Simply pick a context which doesn't already exist and use AsteriskPBX.createAgiEntryPoint() to inject the necessary dialplan used by asterisk-java"}]}, {"index": "987", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/JoinActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.JoinActivityImpl.JoinActivityImpl", "methodParameterType": "Call#OperandChannel#Call#OperandChannel#CallDirection#ActivityCallback<JoinActivity>#", "methodParameterName": "lhsCall#originatingOperand#rhsCall#acceptingOperand#direction#listener#", "methodBody": "public JoinActivityImpl(final Call lhsCall, OperandChannel originatingOperand, final Call rhsCall,\n            OperandChannel acceptingOperand, CallDirection direction, final ActivityCallback<JoinActivity> listener)\n    {\n        super(\"JoinActivity\", listener);\n\n        callSite = new Exception(\"Call site\");\n\n        this._lhsCall = lhsCall;\n        this._originatingOperand = originatingOperand;\n        this._rhsCall = rhsCall;\n        this._acceptingOperand = acceptingOperand;\n        this._direction = direction;\n\n        if (this._lhsCall == null)\n        {\n            throw new IllegalArgumentException(\"lhsCall may not be null\");\n        }\n\n        if (this._originatingOperand == null)\n        {\n            throw new IllegalArgumentException(\"lhsOperand may not be null\");\n        }\n\n        if (this._rhsCall == null)\n        {\n            throw new IllegalArgumentException(\"rhsCall may not be null\");\n        }\n\n        if (this._acceptingOperand == null)\n        {\n            throw new IllegalArgumentException(\"rhsOperand may not be null\");\n        }\n\n        this.startActivity(true);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Joins a specific channel from this call with a specific channel from another call which results in a new Call object being created. Channels that do not participate in the join are left in their original Call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "988", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/RedirectToActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.RedirectToActivityImpl.RedirectToActivityImpl", "methodParameterType": "Channel#ActivityCallback<RedirectToActivity>#", "methodParameterName": "channel1#listener#", "methodBody": "public RedirectToActivityImpl(final Channel channel1, final ActivityCallback<RedirectToActivity> listener)\n    {\n        super(\"SplitActivity\", listener);\n\n        this.channel1 = channel1;\n\n        this.startActivity(true);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Splits a call by moving each of its two channels into the Activity agi. The channels will sit in the agi (with no audio) until something is done with them. As such you should leave them split for too long.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "989", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/RedirectToActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.RedirectToActivityImpl.getCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Call getCall()\n    {\n        return this._lhsCall;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "After a call has been split we get two new calls. One will hold the original remote party and the other will hold the original local party.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "990", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/activity/RedirectToActivityImpl.java", "methodName": "org.asteriskjava.pbx.internal.activity.RedirectToActivityImpl.splitTwo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private boolean splitTwo() throws PBXException\n    {\n        final AsteriskSettings profile = PBXFactory.getActiveProfile();\n        AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n\n        List<Channel> channels = new LinkedList<>();\n        channels.add(channel1);\n        if (!pbx.waitForChannelsToQuiescent(channels, 3000))\n        {\n            logger.error(callSite, callSite);\n            throw new PBXException(\"Channel: \" + channel1 + \" cannot be split as they are still in transition.\");\n        }\n\n        /*\n         * redirects the specified channels to the specified endpoints. Returns\n         * true or false reflecting success.\n         */\n\n        AgiChannelActivityHold agi1 = new AgiChannelActivityHold();\n\n        pbx.setVariable(channel1, \"proxyId\", \"\" + ((ChannelProxy) channel1).getIdentity());\n\n        channel1.setCurrentActivityAction(agi1);\n\n        final String agiExten = profile.getAgiExtension();\n        final String agiContext = profile.getManagementContext();\n        logger.debug(\"redirect channel lhs:\" + channel1 + \" to \" + agiExten + \" in context \" + agiContext);\n\n        final EndPoint extensionAgi = pbx.getExtensionAgi();\n        final RedirectAction redirect = new RedirectAction(channel1, agiContext, extensionAgi, 1);\n        // logger.error(redirect);\n\n        boolean ret = false;\n        {\n            try\n            {\n\n                // final ManagerResponse response =\n                pbx.sendAction(redirect, 1000);\n                double ctr = 0;\n                while (!agi1.hasCallReachedAgi() && ctr < 10)\n                {\n                    Thread.sleep(100);\n                    ctr += 100.0 / 1000.0;\n                    if (!agi1.hasCallReachedAgi())\n                    {\n                        logger.warn(\"Waiting on (agi1) \" + channel1);\n                    }\n\n                }\n                ret = agi1.hasCallReachedAgi();\n\n            }\n            catch (final Exception e)\n            {\n                logger.error(e, e);\n            }\n        }\n        return ret;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Splits two channels moving them to defined endpoints.", "call_func_name": ["org.asteriskjava.pbx.PBXFactory.getActiveProfile", "org.asteriskjava.pbx.PBXFactory.getActivePBX", "java.util.LinkedList.<init>", "java.util.List.add", "org.asteriskjava.pbx.internal.core.AsteriskPBX.waitForChannelsToQuiescent", "org.asteriskjava.util.Log.error", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.pbx.PBXException.<init>", "org.asteriskjava.pbx.agi.AgiChannelActivityHold.<init>", "org.asteriskjava.pbx.internal.core.ChannelProxy.getIdentity", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.internal.core.AsteriskPBX.setVariable", "org.asteriskjava.pbx.Channel.setCurrentActivityAction", "org.asteriskjava.pbx.AsteriskSettings.getAgiExtension", "org.asteriskjava.pbx.AsteriskSettings.getManagementContext", "org.asteriskjava.util.Log.debug", "org.asteriskjava.pbx.internal.core.AsteriskPBX.getExtensionAgi", "org.asteriskjava.pbx.asterisk.wrap.actions.RedirectAction.<init>", "org.asteriskjava.pbx.internal.core.AsteriskPBX.sendAction", "org.asteriskjava.pbx.agi.AgiChannelActivityHold.hasCallReachedAgi", "java.lang.Thread.sleep", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], ["java.util.List", "long"], ["java.lang.Object", "java.lang.Throwable"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["int"], ["org.asteriskjava.pbx.Channel", "java.lang.String", "java.lang.String"], ["org.asteriskjava.pbx.AgiChannelActivityAction"], [""], [""], ["java.lang.Object"], [""], ["org.asteriskjava.pbx.Channel", "java.lang.String", "org.asteriskjava.pbx.EndPoint", "int"], ["org.asteriskjava.pbx.asterisk.wrap.actions.ManagerAction", "int"], [""], ["long"], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.AsteriskSettings.getAgiExtension": "Return an asterisk dialplan extension (within the Management Context) that will be used to inject the agi dialplan entry point used by Activites.. Just ensure that its a unique asterisk dialplan extension name."}, {"org.asteriskjava.pbx.AsteriskSettings.getManagementContext": "This is an asterisk dialplan context. Simply pick a context which doesn't already exist and use AsteriskPBX.createAgiEntryPoint() to inject the necessary dialplan used by asterisk-java"}]}, {"index": "991", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.OriginateBaseClass.originate", "methodParameterType": "EndPoint#EndPoint#HashMap<String,String>#CallerID#Integer#boolean#String#", "methodParameterName": "local#target#myVars#callerID#timeout#hideCallerId#context#", "methodBody": "OriginateResult originate(final EndPoint local, final EndPoint target, final HashMap<String, String> myVars,\n            final CallerID callerID, final Integer timeout, final boolean hideCallerId, final String context)\n    {\n        OriginateBaseClass.logger.debug(\"originate called\");\n        this.originateSeen = false;\n        this.channelSeen = false;\n\n        if (this.hungup)\n        {\n            // the monitored channel already hungup so just return false and\n            // shutdown\n            return null;\n        }\n\n        OriginateBaseClass.logger.debug(\"originate connection endPoint \\n\" + local + \" to endPoint \" + target //$NON-NLS-2$\n                + \" vars \" + myVars);\n        ManagerResponse response = null;\n\n        final AsteriskSettings settings = PBXFactory.getActiveProfile();\n\n        final OriginateAction originate = new OriginateAction();\n        this.originateID = originate.getActionId();\n\n        channelId = \"\" + (System.currentTimeMillis() / 1000) + \".AJ\" + originateSeed.incrementAndGet();\n        originate.setChannelId(channelId);\n\n        Integer localTimeout = timeout;\n\n        if (timeout == null)\n        {\n            localTimeout = 30000;\n            try\n            {\n                localTimeout = settings.getDialTimeout() * 1000;\n            }\n            catch (final Exception e)\n            {\n                OriginateBaseClass.logger.error(\"Invalid dial timeout value\");\n            }\n        }\n\n        // Whilst the originate document says that it takes a channel it\n        // actually takes an\n        // end point. I haven't check but I'm skeptical that you can actually\n        // originate to\n        // a channel as the doco talks about 'dialing the channel'. I suspect\n        // this\n        // may be part of asterisk's sloppy terminology.\n        if (local.isLocal())\n        {\n            originate.setEndPoint(local);\n            originate.setOption(\"/n\");\n        }\n        else\n        {\n            originate.setEndPoint(local);\n        }\n\n        originate.setContext(context);\n        originate.setExten(target);\n        originate.setPriority(1);\n\n        // Set the caller id.\n        if (hideCallerId)\n        {\n            // hide callerID\n            originate.setCallingPres(32);\n        }\n        else\n        {\n            originate.setCallerId(callerID);\n        }\n\n        originate.setVariables(myVars);\n        originate.setAsync(true);\n        originate.setTimeout(localTimeout);\n\n        try\n        {\n            // Just add us as an asterisk event listener.\n            this.startListener();\n\n            response = pbx.sendAction(originate, localTimeout);\n            OriginateBaseClass.logger.debug(\"Originate.sendAction completed\");\n            if (response.getResponse().compareToIgnoreCase(\"Success\") != 0)\n            {\n                OriginateBaseClass.logger\n                        .error(\"Error Originating call\" + originate.toString() + \" : \" + response.getMessage());//$NON-NLS-2$\n                throw new ManagerCommunicationException(response.getMessage(), null);\n            }\n\n            // wait the set timeout +1 second to allow for\n            // asterisk to start the originate\n            originateLatch.await(localTimeout + 1000, TimeUnit.MILLISECONDS);\n        }\n        catch (final InterruptedException e)\n        {\n            OriginateBaseClass.logger.debug(e, e);\n        }\n        catch (final Exception e)\n        {\n            OriginateBaseClass.logger.error(e, e);\n        }\n        finally\n        {\n            this.close();\n        }\n\n        if (this.originateSuccess)\n        {\n            this.result.setSuccess(true);\n            this.result.setChannelData(this.newChannel);\n            OriginateBaseClass.logger.debug(\"new channel ok: \" + this.newChannel);\n        }\n        else\n        {\n            OriginateBaseClass.logger.warn(\"originate failed to connect endPoint: \" + local + \" to ext \" + target); //$NON-NLS-2$\n\n            if (this.newChannel != null)\n            {\n                try\n                {\n                    logger.info(\"Hanging up\");\n                    pbx.hangup(this.newChannel);\n                }\n                catch (IllegalArgumentException | IllegalStateException | PBXException e)\n                {\n                    logger.error(e, e);\n\n                }\n            }\n        }\n        return this.result;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#NullLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param local", "call_func_name": ["org.asteriskjava.util.Log.debug", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.pbx.PBXFactory.getActiveProfile", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.<init>", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.getActionId", "java.lang.System.currentTimeMillis", "java.lang.StringBuilder.append", "java.util.concurrent.atomic.AtomicLong.incrementAndGet", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setChannelId", "java.lang.Integer.valueOf", "org.asteriskjava.pbx.AsteriskSettings.getDialTimeout", "org.asteriskjava.util.Log.error", "org.asteriskjava.pbx.EndPoint.isLocal", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setEndPoint", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setOption", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setContext", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setExten", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setPriority", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setCallingPres", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setCallerId", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setVariables", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setAsync", "java.lang.Integer.intValue", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.setTimeout", "org.asteriskjava.pbx.internal.managerAPI.OriginateBaseClass.startListener", "org.asteriskjava.pbx.internal.core.AsteriskPBX.sendAction", "org.asteriskjava.pbx.asterisk.wrap.response.ManagerResponse.getResponse", "java.lang.String.compareToIgnoreCase", "org.asteriskjava.pbx.asterisk.wrap.actions.OriginateAction.toString", "org.asteriskjava.pbx.asterisk.wrap.response.ManagerResponse.getMessage", "org.asteriskjava.live.ManagerCommunicationException.<init>", "java.util.concurrent.CountDownLatch.await", "org.asteriskjava.pbx.internal.managerAPI.OriginateBaseClass.close", "org.asteriskjava.util.Log.debug", "org.asteriskjava.util.Log.error", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.setSuccess", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.setChannelData", "org.asteriskjava.util.Log.warn", "org.asteriskjava.util.Log.info", "org.asteriskjava.pbx.internal.core.AsteriskPBX.hangup"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], [""], [""], [""], ["long"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.Object"], [""], ["org.asteriskjava.pbx.EndPoint"], ["java.lang.String"], ["java.lang.String"], ["org.asteriskjava.pbx.EndPoint"], ["int"], ["int"], ["org.asteriskjava.pbx.CallerID"], ["java.util.Map"], ["boolean"], [""], ["long"], [""], ["org.asteriskjava.pbx.asterisk.wrap.actions.ManagerAction", "int"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"], ["long", "java.util.concurrent.TimeUnit"], [""], ["java.lang.Object", "java.lang.Throwable"], ["java.lang.Object", "java.lang.Throwable"], ["boolean"], ["org.asteriskjava.pbx.Channel"], ["java.lang.Object"], ["java.lang.Object"], ["org.asteriskjava.pbx.Channel"]], "passed_comments": [{"org.asteriskjava.pbx.AsteriskSettings.getDialTimeout": "The time (in seconds) to wait for a dial attempt to be answered before giving up. Recommend a value of 30."}]}, {"index": "992", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.OriginateBaseClass.onManagerEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "@Override\n    synchronized public void onManagerEvent(final ManagerEvent event)\n    {\n\n        if (event instanceof HangupEvent)\n        {\n            final HangupEvent hangupEvt = (HangupEvent) event;\n            final Channel hangupChannel = hangupEvt.getChannel();\n\n            if (channelId.equals(hangupEvt.getUniqueId()))\n            {\n                this.originateSuccess = false;\n                OriginateBaseClass.logger.warn(\"Dest channel \" + this.newChannel + \" hungup\");\n                originateLatch.countDown();\n            }\n            if ((this.monitorChannel1 != null) && (hangupChannel.isSame(this.monitorChannel1)))\n            {\n                this.originateSuccess = false;\n                this.hungup = true;\n                if (this.newChannel != null)\n                {\n                    OriginateBaseClass.logger.debug(\"hanging up \" + this.newChannel);\n                    this.result.setChannelHungup(true);\n\n                    PBX pbx = PBXFactory.getActivePBX();\n                    try\n                    {\n                        logger.warn(\"Hanging up\");\n                        pbx.hangup(this.newChannel);\n                    }\n                    catch (IllegalArgumentException | IllegalStateException | PBXException e)\n                    {\n                        logger.error(e, e);\n\n                    }\n                }\n                OriginateBaseClass.logger.debug(\"notify channel 1 hungup\");\n                originateLatch.countDown();\n            }\n            if ((this.monitorChannel2 != null) && (hangupChannel.isSame(this.monitorChannel2)))\n            {\n                this.originateSuccess = false;\n                this.hungup = true;\n                if (this.newChannel != null)\n                {\n                    OriginateBaseClass.logger.debug(\"Hanging up channel \" + this.newChannel);\n                    this.result.setChannelHungup(true);\n\n                    PBX pbx = PBXFactory.getActivePBX();\n                    try\n                    {\n                        pbx.hangup(this.newChannel);\n                    }\n                    catch (IllegalArgumentException | IllegalStateException | PBXException e)\n                    {\n                        logger.error(e, e);\n\n                    }\n                }\n                OriginateBaseClass.logger.debug(\"Notify channel 2 (\" + this.monitorChannel2 + \") hungup\");//$NON-NLS-2$\n                originateLatch.countDown();\n            }\n\n        }\n        if (event instanceof OriginateResponseEvent)\n        {\n            OriginateBaseClass.logger.debug(\"response : \" + this.newChannel);\n\n            final OriginateResponseEvent response = (OriginateResponseEvent) event;\n            OriginateBaseClass.logger.debug(\"OriginateResponseEvent: channel=\"\n                    + (response.isChannel() ? response.getChannel() : response.getEndPoint()) + \" originateID:\"\n                    + this.originateID);\n            OriginateBaseClass.logger.debug(\"{\" + response.getReason() + \":\" + response.getResponse() + \"}\"); //$NON-NLS-2$ //$NON-NLS-3$\n            if (this.originateID != null)\n            {\n                if (this.originateID.compareToIgnoreCase(response.getActionId()) == 0)\n                {\n                    this.originateSuccess = response.isSuccess();\n                    OriginateBaseClass.logger.debug(\"OriginateResponse: matched actionId, success=\" + this.originateSuccess\n                            + \" channelSeen=\" + this.channelSeen);\n\n                    this.originateSeen = true;\n\n                    if (originateSuccess)\n                    {\n                        if (newChannel == null)\n                        {\n                            this.newChannel = response.getChannel();\n                        }\n                        channelSeen = newChannel != null;\n\n                        // if we have also seen the channel then we can notify\n                        // the\n                        // originate() method\n                        // that the call is up. Otherwise we will rely on the\n                        // NewChannelEvent doing the\n                        // notify.\n                        if (this.channelSeen)\n                        {\n                            OriginateBaseClass.logger.info(\"notify originate response event \" + this.originateSuccess);\n                            originateLatch.countDown();\n                        }\n                        else\n                        {\n                            logger.error(\"Originate Response didn't contain the channel\");\n                        }\n                    }\n                }\n            }\n            else\n            {\n                OriginateBaseClass.logger.warn(\"actionid is null\");\n            }\n        }\n\n        if (event instanceof NewChannelEvent)\n        {\n            final NewChannelEvent newState = (NewChannelEvent) event;\n            if (channelId.equalsIgnoreCase(newState.getChannel().getUniqueId()))\n            {\n                final Channel channel = newState.getChannel();\n\n                OriginateBaseClass.logger.debug(\"new channel event :\" + channel + \" context = \" + newState.getContext() //$NON-NLS-2$\n                        + \" state =\" + newState.getChannelStateDesc() + \" state =\" + newState.getChannelState()); //$NON-NLS-2$\n\n                handleId(channel);\n            }\n        }\n\n        if (event instanceof BridgeEvent)\n        {\n            if (((BridgeEvent) event).isLink())\n            {\n                final BridgeEvent bridgeEvent = (BridgeEvent) event;\n                Channel channel = bridgeEvent.getChannel1();\n                if (bridgeEvent.getChannel1().isLocal())\n                {\n                    channel = bridgeEvent.getChannel2();\n                }\n                if (channelId.equalsIgnoreCase(bridgeEvent.getChannel1().getUniqueId())\n                        || channelId.equalsIgnoreCase(bridgeEvent.getChannel2().getUniqueId()))\n                {\n\n                    OriginateBaseClass.logger\n                            .debug(\"new bridge event :\" + channel + \" channel1 = \" + bridgeEvent.getChannel1() //$NON-NLS-2$\n                                    + \" channel2 =\" + bridgeEvent.getChannel2());\n\n                    handleId(channel);\n                }\n            }\n\n        }\n\n        if (event instanceof DialEndEvent)\n        {\n            if (channelId.equalsIgnoreCase(((DialEndEvent) event).getDestChannel().getUniqueId()))\n            {\n                String forward = ((DialEndEvent) event).getForward();\n                if (forward != null && forward.length() > 0)\n                {\n                    originateLatch.countDown();\n                }\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ParenthesizedExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ParenthesizedExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ParenthesizedExpression#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NumberLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ParenthesizedExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(IfStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "It is important that this method is synchronised as there is some interaction between the events and we need to ensure we process one at a time.", "call_func_name": ["org.asteriskjava.pbx.asterisk.wrap.events.HangupEvent.getChannel", "org.asteriskjava.pbx.asterisk.wrap.events.HangupEvent.getUniqueId", "java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.warn", "java.util.concurrent.CountDownLatch.countDown", "org.asteriskjava.pbx.Channel.isSame", "org.asteriskjava.util.Log.debug", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.setChannelHungup", "org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.PBX.hangup", "org.asteriskjava.util.Log.error", "org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent.isChannel", "org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent.getChannel", "org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent.getEndPoint", "org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent.getReason", "org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent.getResponse", "org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent.getActionId", "java.lang.String.compareToIgnoreCase", "org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent.isSuccess", "java.lang.StringBuilder.append", "org.asteriskjava.util.Log.info", "org.asteriskjava.util.Log.error", "org.asteriskjava.pbx.asterisk.wrap.events.NewChannelEvent.getChannel", "org.asteriskjava.pbx.Channel.getUniqueId", "java.lang.String.equalsIgnoreCase", "org.asteriskjava.pbx.asterisk.wrap.events.NewChannelEvent.getContext", "org.asteriskjava.pbx.asterisk.wrap.events.NewChannelEvent.getChannelStateDesc", "org.asteriskjava.pbx.asterisk.wrap.events.NewChannelEvent.getChannelState", "org.asteriskjava.pbx.internal.managerAPI.OriginateBaseClass.handleId", "org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent.isLink", "org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent.getChannel1", "org.asteriskjava.pbx.Channel.isLocal", "org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent.getChannel2", "org.asteriskjava.pbx.asterisk.wrap.events.DialEndEvent.getDestChannel", "org.asteriskjava.pbx.asterisk.wrap.events.DialEndEvent.getForward", "java.lang.String.length"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], [""], ["org.asteriskjava.pbx.Channel"], ["java.lang.Object"], ["boolean"], [""], ["org.asteriskjava.pbx.Channel"], ["java.lang.Object", "java.lang.Throwable"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["boolean"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], [""], [""], ["org.asteriskjava.pbx.Channel"], [""], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"org.asteriskjava.pbx.Channel.isSame": "Compares if two channels are the same logical channel on the pbx. This comparison uses the full unique name of the channel not just the abbreviated peer name. e.g. SIP/100-00000100"}, {"org.asteriskjava.pbx.PBX.hangup": "Hangs up the given channel. Not returning until the call is hungup."}, {"org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent.isLink": "Returns whether the two channels have been linked."}, {"org.asteriskjava.pbx.Channel.isLocal": "In Asterisk speak, this method returns true if it is a LOCAL/ channel Not quite certain how this will map to other pbx's"}]}, {"index": "993", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.EventListenerBaseClass.startListener", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void startListener()\n    {\n\n        ((AsteriskPBX) pbx).addListener(this);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "we have to take the pbx as an arg here as we sometimes this is called during the creation phase of for the pbx, and the factory can't give out the pbx at that point event though it is initialised.", "call_func_name": ["org.asteriskjava.pbx.internal.core.AsteriskPBX.addListener"], "call_func_parameter": [["org.asteriskjava.pbx.internal.core.FilteredManagerListener"]], "passed_comments": "/"}, {"index": "994", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.EventListenerBaseClass.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void close()\n    {\n        ((AsteriskPBX) pbx).removeListener(this);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Stops the listener.", "call_func_name": ["org.asteriskjava.pbx.internal.core.AsteriskPBX.removeListener"], "call_func_parameter": [["org.asteriskjava.pbx.internal.core.FilteredManagerListener"]], "passed_comments": "/"}, {"index": "995", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/Connector.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.Connector.connect", "methodParameterType": "AsteriskSettings#", "methodParameterName": "asteriskSettings#", "methodBody": "public ManagerConnection connect(final AsteriskSettings asteriskSettings)\n            throws IOException, AuthenticationFailedException, TimeoutException, IllegalStateException\n    {\n        checkIfAsteriskRunning(asteriskSettings);\n        this.makeConnection(asteriskSettings);\n        return this.managerConnection;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Establishes a Asterisk ManagerConnection as well as performing the 'login' required by Asterisk.", "call_func_name": ["org.asteriskjava.pbx.internal.managerAPI.Connector.checkIfAsteriskRunning", "org.asteriskjava.pbx.internal.managerAPI.Connector.makeConnection"], "call_func_parameter": [["org.asteriskjava.pbx.AsteriskSettings"], ["org.asteriskjava.pbx.AsteriskSettings"]], "passed_comments": [{"org.asteriskjava.pbx.internal.managerAPI.Connector.checkIfAsteriskRunning": "This method will try to make a simple tcp connection to the asterisk manager to establish it is up. We do this as the default makeConnection doesn't have a timeout and will sit trying to connect for a minute or so. By using method when the user realises they have a problem on start up they can go to the asterisk panel. Fix the problem and then we can retry with the new connection settings within a couple of seconds rather than waiting a minute for a timeout."}, {"org.asteriskjava.pbx.internal.managerAPI.Connector.makeConnection": "@param socketReadTimeout"}]}, {"index": "996", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/Connector.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.Connector.checkIfAsteriskRunning", "methodParameterType": "AsteriskSettings#", "methodParameterName": "asteriskSettings#", "methodBody": "private void checkIfAsteriskRunning(AsteriskSettings asteriskSettings) throws UnknownHostException, IOException\n    {\n        try (Socket socket = new Socket())\n        {\n            socket.setSoTimeout(2000);\n\n            InetSocketAddress asteriskHost = new InetSocketAddress(asteriskSettings.getAsteriskIP(),\n                    asteriskSettings.getManagerPortNo());\n            socket.connect(asteriskHost, 2000);\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "This method will try to make a simple tcp connection to the asterisk manager to establish it is up. We do this as the default makeConnection doesn't have a timeout and will sit trying to connect for a minute or so. By using method when the user realises they have a problem on start up they can go to the asterisk panel. Fix the problem and then we can retry with the new connection settings within a couple of seconds rather than waiting a minute for a timeout.", "call_func_name": ["java.net.Socket.<init>", "java.net.Socket.setSoTimeout", "org.asteriskjava.pbx.AsteriskSettings.getAsteriskIP", "org.asteriskjava.pbx.AsteriskSettings.getManagerPortNo", "java.net.InetSocketAddress.<init>", "java.net.Socket.connect", "java.net.Socket.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], ["int"], [""], [""], ["java.lang.String", "int"], ["java.net.SocketAddress", "int"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.pbx.AsteriskSettings.getAsteriskIP": "The IP address of FQND of the Asterisk PBX"}, {"org.asteriskjava.pbx.AsteriskSettings.getManagerPortNo": "The port no. that the asterisk manager api listens on. This should be 5060 unless you have re-configured the manager api."}]}, {"index": "997", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/Connector.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.Connector.makeConnection", "methodParameterType": "AsteriskSettings#", "methodParameterName": "asteriskSettings#", "methodBody": "private void makeConnection(final AsteriskSettings asteriskSettings)\n            throws IOException, AuthenticationFailedException, TimeoutException, IllegalStateException\n    {\n        ManagerConnectionFactory factory = null;\n        if (asteriskSettings.getManagerPortNo() == -1)\n        {\n            Connector.logger.debug(\"Using default port 5038.\"); //$NON-NLS-1$\n            factory = new ManagerConnectionFactory(asteriskSettings.getAsteriskIP(), asteriskSettings.getManagerUsername(),\n                    asteriskSettings.getManagerPassword());\n        }\n        else\n        {\n            factory = new ManagerConnectionFactory(asteriskSettings.getAsteriskIP(), asteriskSettings.getManagerPortNo(),\n                    asteriskSettings.getManagerUsername(), asteriskSettings.getManagerPassword());\n\n        }\n\n        this.managerConnection = factory.createManagerConnection();\n        // this.managerConnection.setSocketReadTimeout(socketReadTimeout);\n        // this.managerConnection.setSocketTimeout(socketReadTimeout);\n        this.managerConnection.login();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param socketReadTimeout", "call_func_name": ["org.asteriskjava.pbx.AsteriskSettings.getManagerPortNo", "org.asteriskjava.util.Log.debug", "org.asteriskjava.pbx.AsteriskSettings.getAsteriskIP", "org.asteriskjava.pbx.AsteriskSettings.getManagerUsername", "org.asteriskjava.pbx.AsteriskSettings.getManagerPassword", "org.asteriskjava.manager.ManagerConnectionFactory.<init>", "org.asteriskjava.manager.ManagerConnectionFactory.<init>", "org.asteriskjava.manager.ManagerConnectionFactory.createManagerConnection", "org.asteriskjava.manager.ManagerConnection.login"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "int", "java.lang.String", "java.lang.String"], [""], [""]], "passed_comments": [{"org.asteriskjava.pbx.AsteriskSettings.getManagerPortNo": "The port no. that the asterisk manager api listens on. This should be 5060 unless you have re-configured the manager api."}, {"org.asteriskjava.pbx.AsteriskSettings.getAsteriskIP": "The IP address of FQND of the Asterisk PBX"}, {"org.asteriskjava.pbx.AsteriskSettings.getManagerUsername": "This MUST match the section header (e.g. '[myconnection]') in manager.conf"}, {"org.asteriskjava.pbx.AsteriskSettings.getManagerPassword": "This password MUST match the password (secret=) in manager.conf"}, {"org.asteriskjava.manager.ManagerConnectionFactory.createManagerConnection": "Returns a new ManagerConnection in state  {@link ManagerConnectionState#CONNECTED}."}, {"org.asteriskjava.manager.ManagerConnection.login": "Logs in to the Asterisk server with the username and password specified when this connection was created."}, {"org.asteriskjava.manager.ManagerConnection.login": "Logs in to the Asterisk server with the username and password specified when this connection was created and a given event mask."}]}, {"index": "998", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/DialToAgi.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.DialToAgi.dial", "methodParameterType": "NewChannelListener#EndPoint#AgiChannelActivityAction#CallerID#Integer#boolean#Map<String,String>#", "methodParameterName": "listener#localHandset#action#callerID#timeout#hideCallerId#channelVarsToSet#", "methodBody": "public OriginateResult[] dial(final NewChannelListener listener, final EndPoint localHandset,\n            final AgiChannelActivityAction action, final CallerID callerID, Integer timeout, final boolean hideCallerId,\n            Map<String, String> channelVarsToSet) throws PBXException, InterruptedException\n    {\n        final PBX pbx = PBXFactory.getActivePBX();\n\n        try (final OriginateToExtension originate = new OriginateToExtension(listener))\n        {\n            this.startListener();\n            originator = originate;\n\n            // First bring the operator's handset up and connect it to the\n            // 'njr-dial' extension where they can\n            // wait whilst we complete the second leg\n            final OriginateResult trcResult = originate.originate(localHandset, pbx.getExtensionAgi(), true,\n                    ((AsteriskPBX) pbx).getManagementContext(), callerID, timeout, hideCallerId, channelVarsToSet);\n\n            this.result[0] = trcResult;\n            if (trcResult.isSuccess())\n            {\n                if (trcResult.getChannel() != null)\n                {\n                    trcResult.getChannel().setCurrentActivityAction(action);\n                    if (trcResult.getChannel().waitForChannelToReachAgi(30, TimeUnit.SECONDS))\n                    {\n                        logger.info(\"Call reached AGI\");\n                    }\n                    else\n                    {\n                        logger.error(\"Call never reached agi\");\n                    }\n                }\n                else\n                {\n                    logger.error(\"Call never reached agi\");\n                }\n            }\n            else\n            {\n                logger.warn(\"Originate failed: \" + trcResult.getAbortReason());\n            }\n            logger.info(\"Hangup status is \" + hangupDetected);\n\n            return this.result;\n        }\n        finally\n        {\n            this.close();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Dials the targetEndPoint connecting the call to the localHandset. The dial is done in two parts as we need to set the auto answer header differently for each phone. For the localHandset we set auto answer on, whilst for the remote targetEndPoint we MUST not auto answer the phone.", "call_func_name": ["org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.internal.managerAPI.OriginateToExtension.<init>", "org.asteriskjava.pbx.internal.managerAPI.DialToAgi.startListener", "org.asteriskjava.pbx.PBX.getExtensionAgi", "org.asteriskjava.pbx.internal.core.AsteriskPBX.getManagementContext", "org.asteriskjava.pbx.internal.managerAPI.OriginateToExtension.originate", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.isSuccess", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.getChannel", "org.asteriskjava.pbx.Channel.setCurrentActivityAction", "org.asteriskjava.pbx.Channel.waitForChannelToReachAgi", "org.asteriskjava.util.Log.info", "org.asteriskjava.util.Log.error", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.getAbortReason", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.warn", "java.lang.StringBuilder.append", "org.asteriskjava.pbx.internal.managerAPI.OriginateToExtension.close", "java.lang.Throwable.addSuppressed", "org.asteriskjava.pbx.internal.managerAPI.DialToAgi.close"], "call_func_parameter": [[""], ["org.asteriskjava.pbx.NewChannelListener"], [""], [""], [""], ["org.asteriskjava.pbx.EndPoint", "org.asteriskjava.pbx.EndPoint", "boolean", "java.lang.String", "org.asteriskjava.pbx.CallerID", "java.lang.Integer", "boolean", "java.util.Map"], [""], [""], ["org.asteriskjava.pbx.AgiChannelActivityAction"], ["long", "java.util.concurrent.TimeUnit"], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["boolean"], [""], ["java.lang.Throwable"], [""]], "passed_comments": "/"}, {"index": "999", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/internal/managerAPI/Dial.java", "methodName": "org.asteriskjava.pbx.internal.managerAPI.Dial.dial", "methodParameterType": "NewChannelListener#EndPoint#EndPoint#String#CallerID#boolean#Map<String,String>#", "methodParameterName": "listener#localHandset#targetEndPoint#dialContext#callerID#hideCallerId#channelVarsToSet#", "methodBody": "public OriginateResult[] dial(final NewChannelListener listener, final EndPoint localHandset,\n            final EndPoint targetEndPoint, final String dialContext, final CallerID callerID, final boolean hideCallerId,\n            Map<String, String> channelVarsToSet) throws PBXException\n    {\n        final PBX pbx = PBXFactory.getActivePBX();\n\n        try (final OriginateToExtension originate = new OriginateToExtension(listener))\n        {\n\n            this.startListener();\n\n            // First bring the operator's handset up and connect it to the\n            // 'njr-dial' extension where they can\n            // wait whilst we complete the second leg\n            final OriginateResult trcResult = originate.originate(localHandset, pbx.getExtensionAgi(), true,\n                    ((AsteriskPBX) pbx).getManagementContext(), callerID, null, hideCallerId, channelVarsToSet);\n\n            this.result[0] = trcResult;\n            if (trcResult.isSuccess())\n            {\n\n                try\n                {\n                    if (targetEndPoint instanceof HoldAtAgi)\n                    {\n                        if (trcResult.getChannel().waitForChannelToReachAgi(30, TimeUnit.SECONDS))\n                        {\n                            // call is now in agi\n                            System.out.println(\"Call is in agi\");\n                        }\n                        else\n                        {\n                            // call never reached agi\n                            System.out.println(\"Call never reached agi\");\n                        }\n                    }\n                    else\n                    {\n\n                        // The call is now up, so connect it to\n                        // the\n                        // destination.\n                        this._latch = new CountDownLatch(1);\n\n                        trcResult.getChannel().setCurrentActivityAction(\n                                new AgiChannelActivityDial(targetEndPoint.getFullyQualifiedName()));\n\n                        this._latch.await(30, TimeUnit.SECONDS);\n\n                    }\n                }\n                catch (final InterruptedException e)\n                {\n                    // noop\n                }\n            }\n\n            return this.result;\n        }\n        finally\n        {\n            this.close();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Dials the targetEndPoint connecting the call to the localHandset. The dial is done in two parts as we need to set the auto answer header differently for each phone. For the localHandset we set auto answer on, whilst for the remote targetEndPoint we MUST not auto answer the phone.", "call_func_name": ["org.asteriskjava.pbx.PBXFactory.getActivePBX", "org.asteriskjava.pbx.internal.managerAPI.OriginateToExtension.<init>", "org.asteriskjava.pbx.internal.managerAPI.Dial.startListener", "org.asteriskjava.pbx.PBX.getExtensionAgi", "org.asteriskjava.pbx.internal.core.AsteriskPBX.getManagementContext", "org.asteriskjava.pbx.internal.managerAPI.OriginateToExtension.originate", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.isSuccess", "org.asteriskjava.pbx.internal.managerAPI.OriginateResult.getChannel", "org.asteriskjava.pbx.Channel.waitForChannelToReachAgi", "java.io.PrintStream.println", "java.util.concurrent.CountDownLatch.<init>", "org.asteriskjava.pbx.EndPoint.getFullyQualifiedName", "org.asteriskjava.pbx.agi.AgiChannelActivityDial.<init>", "org.asteriskjava.pbx.Channel.setCurrentActivityAction", "java.util.concurrent.CountDownLatch.await", "org.asteriskjava.pbx.internal.managerAPI.OriginateToExtension.close", "java.lang.Throwable.addSuppressed", "org.asteriskjava.pbx.internal.managerAPI.Dial.close"], "call_func_parameter": [[""], ["org.asteriskjava.pbx.NewChannelListener"], [""], [""], [""], ["org.asteriskjava.pbx.EndPoint", "org.asteriskjava.pbx.EndPoint", "boolean", "java.lang.String", "org.asteriskjava.pbx.CallerID", "java.lang.Integer", "boolean", "java.util.Map"], [""], [""], ["long", "java.util.concurrent.TimeUnit"], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["org.asteriskjava.pbx.AgiChannelActivityAction"], ["long", "java.util.concurrent.TimeUnit"], [""], ["java.lang.Throwable"], [""]], "passed_comments": [{"org.asteriskjava.pbx.EndPoint.getFullyQualifiedName": "Returns the fully qualified name of the EndPoint including the tech. e.g. SIP/100"}]}, {"index": "1000", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Activity.java", "methodName": "org.asteriskjava.pbx.Activity.getLastException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Throwable getLastException();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "If an activity fails the getLastError contains a description of the cause of the error. This method should be called from the 'complete' method of the iCallBack listener.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1001", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/Activity.java", "methodName": "org.asteriskjava.pbx.Activity.isSuccess", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isSuccess();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Set to true once the activity has suceeded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1002", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/agi/RateLimiter.java", "methodName": "org.asteriskjava.pbx.agi.RateLimiter.RateLimiter", "methodParameterType": "int#", "methodParameterName": "perSecond#", "methodBody": "RateLimiter(int perSecond)\n    {\n        long now = System.currentTimeMillis();\n        for (int i = 0; i < perSecond; i++)\n        {\n            available.add(now - ONE_THOUSAND_MILLIS);\n        }\n    }", "AST": "Javadoc#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "this is NOT thread safe!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1003", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/agi/config/AgiMappingStragegy.java", "methodName": "org.asteriskjava.pbx.agi.config.AgiMappingStragegy.addServiceAgiScript", "methodParameterType": "Class<? extends ServiceAgiScript>#", "methodParameterName": "handler#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public void addServiceAgiScript(Class< ? extends ServiceAgiScript> handler)\n            throws DuplicateScriptException, InstantiationException, IllegalAccessException\n    {\n\n        logger.info(\"loading agi handler {}\" + handler.getCanonicalName());\n        ServiceAgiScript tmpHandler = handler.newInstance();\n        if (handlers.containsKey(tmpHandler.getScriptName()))\n        {\n            throw new DuplicateScriptException(\"Script \" + tmpHandler.getScriptName() + \" already exists\");\n        }\n        String[] parameters = tmpHandler.getParameters();\n        String sample = \"Agi(agi://localhost/\" + tmpHandler.getScriptName() + \".agi\";\n        logger.info(\"********************************************\");\n        logger.info(\"registered new agi script: \" + tmpHandler.getScriptName());\n        for (int i = 0; i < parameters.length; i++)\n        {\n            logger.info(\"parameter: \" + parameters[i]);\n            if (i == 0)\n                sample += \"?\" + parameters[i] + \"=testdata\";\n            else\n                sample += \"&\" + parameters[i] + \"=testdata\";\n        }\n\n        logger.info(\"sample usage...\");\n        logger.info(sample + \")\");\n        Class<ServiceAgiScript> handler2 = (Class<ServiceAgiScript>) handler;\n        handlers.put(tmpHandler.getScriptName(), handler2);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#ArrayAccess#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#ArrayAccess#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#ArrayAccess#StringLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "this will be a pluggable extension system for the agi core, it's still a work in progress and is not useable", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getCanonicalName", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "java.lang.Class.newInstance", "org.asteriskjava.pbx.agi.config.ServiceAgiScript.getScriptName", "java.util.Map.containsKey", "org.asteriskjava.pbx.agi.config.DuplicateScriptException.<init>", "org.asteriskjava.pbx.agi.config.ServiceAgiScript.getParameters", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1004", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/agi/config/ServiceAgiScriptImpl.java", "methodName": "org.asteriskjava.pbx.agi.config.ServiceAgiScriptImpl.service", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void service() throws AgiException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "field variables request and channel will be set prior to calling service() AgiRequest request AgiChannel channel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1005", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/NewChannelListener.java", "methodName": "org.asteriskjava.pbx.NewChannelListener.channelUpdate", "methodParameterType": "Channel#", "methodParameterName": "channel#", "methodBody": "void channelUpdate(Channel channel);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Allows a listener to be informed as new channels come up during an originate. The OriginateBase class will call this for each channel that comes up (as a result of the originate). Intermediate channels (local etc) that the underlying pbx may create on the way through are ignored with only the final channels being notified. This listener should be used by anyone that needs to have the channel at the earliest possible moment. Listeners should not run long lived process from this call as it will stall the dialer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1006", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/EndPoint.java", "methodName": "org.asteriskjava.pbx.EndPoint.getFullyQualifiedName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getFullyQualifiedName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the fully qualified name of the EndPoint including the tech. e.g. SIP/100", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1007", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/EndPoint.java", "methodName": "org.asteriskjava.pbx.EndPoint.getSimpleName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getSimpleName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the simple name of the EndPoint sans the tech. e.g. SIP/100 would be returned as 100.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1008", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/EndPoint.java", "methodName": "org.asteriskjava.pbx.EndPoint.getSIPSimpleName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getSIPSimpleName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the simple name of a SIP EndPoint sans the tech. e.g. SIP/100 would be returned as 100. If the endpoint is not actually a SIP end point then this method returns the full end point name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1009", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/EndPoint.java", "methodName": "org.asteriskjava.pbx.EndPoint.isUnknown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isUnknown();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the tech is not know for this end point.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1010", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/EndPoint.java", "methodName": "org.asteriskjava.pbx.EndPoint.getTech", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "TechType getTech();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Tech that is used to reach this endpoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1011", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getManagerPortNo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getManagerPortNo();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The port no. that the asterisk manager api listens on. This should be 5060 unless you have re-configured the manager api.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1012", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getManagerPassword", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getManagerPassword();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This password MUST match the password (secret=) in manager.conf", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1013", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getManagerUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getManagerUsername();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This MUST match the section header (e.g. '[myconnection]') in manager.conf", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1014", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getAsteriskIP", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAsteriskIP();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The IP address of FQND of the Asterisk PBX", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1015", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getMeetmeBaseAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getMeetmeBaseAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Asterisk-Java uses conference rooms for a variety of purposes. Just make certain that the base address doesn't overlap any conference rooms you are currently running on your pbx. You should probably allow 200 conference rooms here e.g. (3000-3200) Actions like transfers (and conference calls) use a conference room.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1016", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getDisableBridge", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean getDisableBridge();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if you Asterisk version doesn't support bridging channels. All version after 1.8 support bridging so normally you should returm false;", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1017", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getManagementContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getManagementContext();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This is an asterisk dialplan context. Simply pick a context which doesn't already exist and use AsteriskPBX.createAgiEntryPoint() to inject the necessary dialplan used by asterisk-java", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1018", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getExtensionPark", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getExtensionPark();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return an asterisk dialplan extension (within the above Management Context) that will be used to park calls. Just ensure that its a unique asterisk dialplan extension name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1019", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getDialTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getDialTimeout();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The time (in seconds) to wait for a dial attempt to be answered before giving up. Recommend a value of 30.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1020", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getAutoAnswer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAutoAnswer();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the SIP header to be used to force a handset to auto-answer when dialed. e.g. For Yealink/Snom use return \"Call-Info:\\; answer-after=0\";", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1021", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getAgiExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAgiExtension();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return an asterisk dialplan extension (within the Management Context) that will be used to inject the agi dialplan entry point used by Activites.. Just ensure that its a unique asterisk dialplan extension name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1022", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getCanDetectHangup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean getCanDetectHangup();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if the telephony tech you are dialing from can reliably detect hangups. (for SIP set to true, POTS set false).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1023", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/AsteriskSettings.java", "methodName": "org.asteriskjava.pbx.AsteriskSettings.getAgiHost", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAgiHost();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The IP address of FQDN of the asterisk-java application. Currenly only used if you are doing 'activities' but its safer to just set this.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1024", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.join", "methodParameterType": "OperandChannel#Call#OperandChannel#CallDirection#", "methodParameterName": "originatingOperand#rhs#acceptingOperand#direction#", "methodBody": "public CallImpl join(OperandChannel originatingOperand, Call rhs, OperandChannel acceptingOperand,\n            CallDirection direction) throws PBXException\n    {\n        CallImpl joinTo = (CallImpl) rhs;\n\n        Channel originatingParty = null;\n        Channel acceptingParty = null;\n\n        // Pull the originating party from the this call.\n        originatingParty = this.getOperandChannel(originatingOperand);\n        if (originatingParty != null && originatingParty.isLive())\n            originatingParty.removeListener(this);\n\n        // Pull the accepting party from the other 'call' as the accepting\n        // party.\n        acceptingParty = rhs.getOperandChannel(acceptingOperand);\n        if (acceptingParty != null && acceptingParty.isLive())\n            acceptingParty.removeListener((CallImpl) rhs);\n\n        if (originatingParty == null || !originatingParty.isLive() || acceptingParty == null || !acceptingParty.isLive())\n            throw new PBXException(\"Call.HangupDuringJoin\"); //$NON-NLS-1$\n\n        CallImpl joined = new CallImpl(originatingParty, direction);\n        joined.setAcceptingParty(acceptingParty);\n        joined._owner = OWNER.SELF;\n\n        joined._callStarted = minDate(this._callStarted, joinTo._callStarted);\n\n        joined._holdStarted = minDate(this._holdStarted, joinTo._holdStarted);\n\n        joined._timeAtDialin = minDate(this._timeAtDialin, joinTo._timeAtDialin);\n\n        logger.debug(\"Joined two calls lhs=\" + this + \", rhs=\" + joinTo); //$NON-NLS-1$//$NON-NLS-2$\n\n        return joined;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Joins a specific channel from this call with a specific channel from another call which results in a new Call object being created. Channels that do not participate in the join are left in their original Call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1025", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.split", "methodParameterType": "OperandChannel#", "methodParameterName": "channelToSplit#", "methodBody": "public Call split(OperandChannel channelToSplit) throws PBXException\n    {\n        Channel channel = this.getOperandChannel(channelToSplit);\n        channel.removeListener(this);\n\n        CallDirection direction = CallDirection.INBOUND;\n\n        // If this is the operator channel we need to flip the default\n        // direction.\n        if (this.getLocalParty() != null && this.getLocalParty().isSame(channel))\n        {\n            direction = CallDirection.OUTBOUND;\n        }\n\n        CallImpl call = new CallImpl(channel, direction);\n        call._owner = OWNER.SELF;\n\n        // clear the channel have just split out.\n        switch (channelToSplit)\n        {\n            case ACCEPTING_PARTY :\n                this.setAcceptingParty(null);\n                break;\n            case LOCAL_PARTY :\n                if (this._direction == CallDirection.INBOUND)\n                {\n                    this.setAcceptingParty(null);\n                }\n                else\n                {\n                    this.setOriginatingParty(null);\n                }\n                break;\n            case ORIGINATING_PARTY :\n                this.setOriginatingParty(null);\n                break;\n            case REMOTE_PARTY :\n                if (this._direction == CallDirection.INBOUND)\n                    this.setOriginatingParty(null);\n                else\n                    this.setAcceptingParty(null);\n                break;\n            case TRANSFER_TARGET_PARTY :\n                this.setTransferTargetParty(null);\n                break;\n            default :\n                break;\n        }\n\n        return call;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SwitchCase#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#BreakStatement#SimpleName#SwitchCase#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#IfStatement#BreakStatement#SimpleName#SwitchCase#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#BreakStatement#SwitchStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)IfStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(BreakStatement)BreakStatement)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Splits a channel out of a call into a separate call. This method should only be called from the SplitActivity.", "call_func_name": ["org.asteriskjava.pbx.Channel.removeListener", "org.asteriskjava.pbx.CallImpl.getLocalParty", "org.asteriskjava.pbx.Channel.isSame", "org.asteriskjava.pbx.CallImpl.<init>"], "call_func_parameter": [["org.asteriskjava.pbx.ChannelHangupListener"], [""], ["org.asteriskjava.pbx.Channel"], ["org.asteriskjava.pbx.Channel", "org.asteriskjava.pbx.CallDirection"]], "passed_comments": [{"org.asteriskjava.pbx.CallImpl.getLocalParty": "This method use the CallDirection to determine which leg of the call is the local call and which is the called/calling party. It then returns the local call ."}, {"org.asteriskjava.pbx.Channel.isSame": "Compares if two channels are the same logical channel on the pbx. This comparison uses the full unique name of the channel not just the abbreviated peer name. e.g. SIP/100-00000100"}]}, {"index": "1026", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.getOriginatingParty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Channel getOriginatingParty()\n    {\n        return this._originatingParty;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the originating channel for this call. e.g. the first channel that came up. Whilst a call must always start with an originating channel as a call is shutting down it will get to the point where it will have no channels. In these cases the return will be null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1027", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.callDialedOut", "methodParameterType": "Channel#CallerID#CallerID#", "methodParameterName": "remoteChannel#fromClid#toClid#", "methodBody": "public void callDialedOut(Channel remoteChannel, CallerID fromClid, CallerID toClid) throws PBXException\n    {\n\n        // -- moved to ANSWER\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "Call this method to indicate that this is an outbound call originated by this NJR instance. These type of calls are not seen by a remote operator unless they are put on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1028", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.getTransferTarget", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EndPoint getTransferTarget()\n    {\n        return this._transferTarget;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The current transfer target.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1029", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.setContactId", "methodParameterType": "Integer#", "methodParameterName": "_contactId#", "methodBody": "public void setContactId(final Integer _contactId)\n    {\n        this._contactId = _contactId;\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "The contact id is just used when refilling the list of contacts so we know which one is selected at the moment. It probably should be stored here!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1030", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.addHangupListener", "methodParameterType": "CallHangupListener#", "methodParameterName": "listener#", "methodBody": "public boolean addHangupListener(CallHangupListener listener)\n    {\n        boolean callStillUp = true;\n\n        if ((this._originatingParty != null && this._originatingParty.isLive())\n                || (this._acceptingParty != null && this._acceptingParty.isLive())\n                || (this._transferTargetParty != null && this._transferTargetParty.isLive()))\n            this._hangupListeners.add(listener);\n        else\n            callStillUp = false;\n        return callStillUp;\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Call this method to get a notification when this call hangs up.", "call_func_name": ["org.asteriskjava.pbx.Channel.isLive", "java.util.ArrayList.add"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.pbx.Channel.isLive": "Returns true if the channel is alive. A channel is considered to be alive from the moment it is created until we get a notification that it has been hungup."}]}, {"index": "1031", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.isLive", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isLive()\n    {\n        boolean live = false;\n        if ((this._originatingParty != null && this._originatingParty.isLive())\n                || (this._acceptingParty != null && this._acceptingParty.isLive())\n                || (this._transferTargetParty != null && this._transferTargetParty.isLive()))\n            live = true;\n        return live;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "returns true if the call has any active channels.", "call_func_name": ["org.asteriskjava.pbx.Channel.isLive"], "call_func_parameter": [[""]], "passed_comments": [{"org.asteriskjava.pbx.Channel.isLive": "Returns true if the channel is alive. A channel is considered to be alive from the moment it is created until we get a notification that it has been hungup."}]}, {"index": "1032", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.getOwner", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OWNER getOwner()\n    {\n        return this._owner;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if this call is owned by another instance of NJR.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1033", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.getLocalParty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Channel getLocalParty()\n    {\n\n        if (this.getDirection() == CallDirection.OUTBOUND)\n            return this.getOriginatingParty();\n\n        return this.getAcceptingParty();\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#MethodInvocation#ReturnStatement#IfStatement#ThisExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method use the CallDirection to determine which leg of the call is the local call and which is the called/calling party. It then returns the local call .", "call_func_name": ["org.asteriskjava.pbx.CallImpl.getDirection", "org.asteriskjava.pbx.CallImpl.getOriginatingParty", "org.asteriskjava.pbx.CallImpl.getAcceptingParty"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"org.asteriskjava.pbx.CallImpl.getOriginatingParty": "Returns the originating channel for this call. e.g. the first channel that came up. Whilst a call must always start with an originating channel as a call is shutting down it will get to the point where it will have no channels. In these cases the return will be null."}]}, {"index": "1034", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/pbx/CallImpl.java", "methodName": "org.asteriskjava.pbx.CallImpl.getChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public List<Channel> getChannels()\n    {\n        List<Channel> channels = new LinkedList<>();\n        if (_acceptingParty != null)\n            channels.add(_acceptingParty);\n        if (_originatingParty != null)\n            channels.add(_originatingParty);\n        if (_transferTargetParty != null)\n            channels.add(_transferTargetParty);\n        return channels;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all of the Channels associated with this call.", "call_func_name": ["java.util.LinkedList.<init>", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1035", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/config/Category.java", "methodName": "org.asteriskjava.config.Category.Category", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "//private String trailingComment;\n\n    public Category(String name)\n    {\n        if (name == null)\n        {\n            throw new IllegalArgumentException(\"Name must not be null\");\n        }\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "The last object in the list will get assigned any trailing comments when EOF is hit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1036", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/config/Category.java", "methodName": "org.asteriskjava.config.Category.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this category.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1037", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/config/Category.java", "methodName": "org.asteriskjava.config.Category.isTemplate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isTemplate()\n    {\n        return template;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if this category is a template.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1038", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/config/Category.java", "methodName": "org.asteriskjava.config.Category.getBaseCategories", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Category> getBaseCategories()\n    {\n        return baseCategories;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a list of categories this category inherits from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1039", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/config/ConfigFile.java", "methodName": "org.asteriskjava.config.ConfigFile.getFilename", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getFilename();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1040", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/config/ConfigFile.java", "methodName": "org.asteriskjava.config.ConfigFile.getCategories", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, List<String>> getCategories();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the lines per category.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1041", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.SipNotifyAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SipNotifyAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new SipNotifyAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1042", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.SipNotifyAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public SipNotifyAction(String channel)\n    {\n        super();\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SipNotifyAction that will be sent to the specified peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1043", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SipNotify\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SipNotify\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1044", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the peer to receive the notify to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1045", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the peer that will receive the notify.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1046", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getVariables()\n    {\n        return variables;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the variables to set on the originated call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1047", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.setVariable", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public void setVariable(String name, String value)\n    {\n        if (variables == null)\n        {\n            variables = new LinkedHashMap<>();\n        }\n\n        variables.put(name, value);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets an variable on the originated call.", "call_func_name": ["java.util.LinkedHashMap.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1048", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipNotifyAction.java", "methodName": "org.asteriskjava.manager.action.SipNotifyAction.setVariables", "methodParameterType": "Map<String,String>#", "methodParameterName": "variables#", "methodBody": "public void setVariables(Map<String, String> variables)\n    {\n        this.variables = variables;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the variables to set on the originated call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1049", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapRestartAction.java", "methodName": "org.asteriskjava.manager.action.ZapRestartAction.ZapRestartAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZapRestartAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ZapRestartAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1050", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MWIUpdateAction.java", "methodName": "org.asteriskjava.manager.action.MWIUpdateAction.MWIUpdateAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MWIUpdateAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new MWIUpdateAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1051", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeSetSingleVideoSrcAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeSetSingleVideoSrcAction.ConfbridgeSetSingleVideoSrcAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeSetSingleVideoSrcAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeSetSingleVideoSrcAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1052", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeSetSingleVideoSrcAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeSetSingleVideoSrcAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeSetSingleVideoSrc\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action \"ConfbridgeSetSingleVideoSrc\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1053", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeSetSingleVideoSrcAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeSetSingleVideoSrcAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference for which the video source is to be set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1054", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeSetSingleVideoSrcAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeSetSingleVideoSrcAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference for which the video source is to be set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1055", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeSetSingleVideoSrcAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeSetSingleVideoSrcAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel) {\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the channel which will be the single video source of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1056", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeSetSingleVideoSrcAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeSetSingleVideoSrcAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel() {\n\t\treturn channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel which will be the single video source of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1057", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LogoffAction.java", "methodName": "org.asteriskjava.manager.action.LogoffAction.LogoffAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LogoffAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new LogoffAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1058", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LogoffAction.java", "methodName": "org.asteriskjava.manager.action.LogoffAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"Logoff\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Logoff\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1059", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.GetVarAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GetVarAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty GetVarAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1060", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.GetVarAction", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public GetVarAction(String variable)\n    {\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetVarAction that queries for the given global variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1061", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.GetVarAction", "methodParameterType": "String#String#", "methodParameterName": "channel#variable#", "methodBody": "public GetVarAction(String channel, String variable)\n    {\n        this.channel = channel;\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetVarAction that queries for the given local channel variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1062", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"GetVar\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"GetVar\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1063", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel if you query for a local channel variable or <code>null</code> if it is a global variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1064", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel if you query for a local channel variable. Leave empty to query for a global variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1065", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.getVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariable()\n    {\n        return variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retruns the name of the variable to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1066", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetVarAction.java", "methodName": "org.asteriskjava.manager.action.GetVarAction.setVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public void setVariable(String variable)\n    {\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the variable to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1067", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeLicenseListAction.java", "methodName": "org.asteriskjava.manager.action.SkypeLicenseListAction.SkypeLicenseListAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeLicenseListAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeLicenseListAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1068", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeLicenseListAction.java", "methodName": "org.asteriskjava.manager.action.SkypeLicenseListAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeLicenseList\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeLicenseList\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1069", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/EventsAction.java", "methodName": "org.asteriskjava.manager.action.EventsAction.EventsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EventsAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty EventsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1070", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/EventsAction.java", "methodName": "org.asteriskjava.manager.action.EventsAction.EventsAction", "methodParameterType": "String#", "methodParameterName": "eventMask#", "methodBody": "public EventsAction(String eventMask)\n    {\n        this.eventMask = eventMask;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new EventsAction that applies the given event mask to the current manager connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1071", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/EventsAction.java", "methodName": "org.asteriskjava.manager.action.EventsAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"Events\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Events\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1072", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/EventsAction.java", "methodName": "org.asteriskjava.manager.action.EventsAction.getEventMask", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventMask()\n    {\n        return eventMask;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the event mask.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1073", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/EventsAction.java", "methodName": "org.asteriskjava.manager.action.EventsAction.setEventMask", "methodParameterType": "String#", "methodParameterName": "eventMask#", "methodBody": "public void setEventMask(String eventMask)\n    {\n        this.eventMask = eventMask;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the event mask.<p> Set to \"on\" if all events should be send, \"off\" if not events should be sent or a combination of \"system\", \"call\" and \"log\" (separated by ',') to specify what kind of events should be sent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1074", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddyAction.SkypeBuddyAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeBuddyAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeBuddiesAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1075", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddyAction.SkypeBuddyAction", "methodParameterType": "String#String#", "methodParameterName": "user#buddy#", "methodBody": "public SkypeBuddyAction(String user, String buddy)\n    {\n        this.user = user;\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeBuddiesAction that retrieves the details of the given buddy for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1076", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddyAction.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the Skype for Asterisk user.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1077", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddyAction.setUser", "methodParameterType": "String#", "methodParameterName": "user#", "methodBody": "public void setUser(String user)\n    {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the Skype for Asterisk user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1078", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddyAction.getBuddy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBuddy()\n    {\n        return buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1079", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddyAction.setBuddy", "methodParameterType": "String#", "methodParameterName": "buddy#", "methodBody": "public void setBuddy(String buddy)\n    {\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the buddy.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1080", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddyAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeBuddy\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeBuddy\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1081", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStartRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStartRecordAction.ConfbridgeStartRecordAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeStartRecordAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeStartRecordAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1082", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStartRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStartRecordAction.ConfbridgeStartRecordAction", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public ConfbridgeStartRecordAction(String conference) {\n\t\tthis.setConference(conference);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ConfbridgeStartRecordAction for a specific conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1083", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStartRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStartRecordAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeStartRecord\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ConfbridgeStartRecord\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1084", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStartRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStartRecordAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference for which to start an audio recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1085", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStartRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStartRecordAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference for which to start an audio recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1086", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.AgentLogoffAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AgentLogoffAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty AgentLogoffAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1087", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.AgentLogoffAction", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public AgentLogoffAction(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgentLogoffAction that logs off the given agent", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1088", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.AgentLogoffAction", "methodParameterType": "String#Boolean#", "methodParameterName": "agent#soft#", "methodBody": "public AgentLogoffAction(String agent, Boolean soft)\n    {\n        this(agent);\n        this.soft = soft;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgentLogoffAction that logs off the given agent", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1089", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"AgentLogoff\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"AgentLogoff\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1090", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.getAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgent()\n    {\n        return agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the agent to log off, for example \"1002\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1091", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.setAgent", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public void setAgent(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the agent to log off, for example \"1002\".<p> This is property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1092", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.getSoft", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getSoft()\n    {\n        return soft;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether to hangup existing calls or not.<p> Default is to hangup existing calls on logoff.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1093", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentLogoffAction.java", "methodName": "org.asteriskjava.manager.action.AgentLogoffAction.setSoft", "methodParameterType": "Boolean#", "methodParameterName": "soft#", "methodBody": "public void setSoft(Boolean soft)\n    {\n        this.soft = soft;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether existing calls should be hung up or not.<p> Default is to hangup existing calls on logoff.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1094", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeLockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeLockAction.ConfbridgeLockAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeLockAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeLockAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1095", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeLockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeLockAction.ConfbridgeLockAction", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public ConfbridgeLockAction(String conference) {\n\t\tthis.setConference(conference);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ConfbridgeLockAction for a specific conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1096", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeLockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeLockAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeLock\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action \"ConfbridgeLock\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1097", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeLockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeLockAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference to lock.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1098", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeLockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeLockAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference to lock.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1099", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeKickAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeKickAction.ConfbridgeKickAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeKickAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeKickAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1100", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeKickAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeKickAction.ConfbridgeKickAction", "methodParameterType": "String#String#", "methodParameterName": "conference#channel#", "methodBody": "public ConfbridgeKickAction(String conference, String channel) {\n\t\tthis.setConference(conference);\n\t\tthis.setChannel(channel);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ConfbridgeKickAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1101", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeKickAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeKickAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeKick\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ConfbridgeKick\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1102", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeKickAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeKickAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference to kick a channel from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1103", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeKickAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeKickAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference to kick a channel from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1104", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeKickAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeKickAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel) {\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the channel to kick.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1105", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeKickAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeKickAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel() {\n\t\treturn channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the channel to kick.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1106", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddiesAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddiesAction.SkypeBuddiesAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeBuddiesAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeBuddiesAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1107", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddiesAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddiesAction.SkypeBuddiesAction", "methodParameterType": "String#", "methodParameterName": "user#", "methodBody": "public SkypeBuddiesAction(String user)\n    {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeBuddiesAction that retrieves the buddy list for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1108", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddiesAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddiesAction.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the user to retrieve the buddy list for.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1109", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddiesAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddiesAction.setUser", "methodParameterType": "String#", "methodParameterName": "user#", "methodBody": "public void setUser(String user)\n    {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the user to retrieve the buddy list for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1110", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeBuddiesAction.java", "methodName": "org.asteriskjava.manager.action.SkypeBuddiesAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeBuddies\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeBuddies\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1111", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChangeMonitorAction.java", "methodName": "org.asteriskjava.manager.action.ChangeMonitorAction.ChangeMonitorAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ChangeMonitorAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty ChangeMonitorAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1112", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChangeMonitorAction.java", "methodName": "org.asteriskjava.manager.action.ChangeMonitorAction.ChangeMonitorAction", "methodParameterType": "String#String#", "methodParameterName": "channel#file#", "methodBody": "public ChangeMonitorAction(String channel, String file)\n    {\n        this.channel = channel;\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ChangeMonitorAction that causes monitoring data for the given channel to be written to the given file(s).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1113", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChangeMonitorAction.java", "methodName": "org.asteriskjava.manager.action.ChangeMonitorAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ChangeMonitor\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ChangeMonitor\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1114", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChangeMonitorAction.java", "methodName": "org.asteriskjava.manager.action.ChangeMonitorAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the monitored channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1115", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChangeMonitorAction.java", "methodName": "org.asteriskjava.manager.action.ChangeMonitorAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the monitored channel.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1116", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChangeMonitorAction.java", "methodName": "org.asteriskjava.manager.action.ChangeMonitorAction.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file to which the voice data is written.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1117", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChangeMonitorAction.java", "methodName": "org.asteriskjava.manager.action.ChangeMonitorAction.setFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public void setFile(String file)\n    {\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the (base) name of the file(s) to which the voice data is written.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1118", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.MonitorAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MonitorAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty MonitorAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1119", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.MonitorAction", "methodParameterType": "String#String#", "methodParameterName": "channel#file#", "methodBody": "public MonitorAction(String channel, String file)\n    {\n        super();\n        this.channel = channel;\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new MonitorAction that starts monitoring the given channel and writes voice data to the given files.<p> The format of the files is \"wav\", they are not mixed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1120", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.MonitorAction", "methodParameterType": "String#String#String#", "methodParameterName": "channel#file#format#", "methodBody": "public MonitorAction(String channel, String file, String format)\n    {\n        super();\n        this.channel = channel;\n        this.file = file;\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new MonitorAction that starts monitoring the given channel and writes voice data to the given files.<p> The files are not mixed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1121", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.MonitorAction", "methodParameterType": "String#String#String#Boolean#", "methodParameterName": "channel#file#format#mix#", "methodBody": "public MonitorAction(String channel, String file, String format, Boolean mix)\n    {\n        super();\n        this.channel = channel;\n        this.file = file;\n        this.format = format;\n        this.mix = mix;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new MonitorAction that starts monitoring the given channel and writes voice data to the given file(s).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1122", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"Monitor\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Monitor\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1123", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to monitor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1124", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to monitor.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1125", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file to which the voice data is written.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1126", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.setFile", "methodParameterType": "String#", "methodParameterName": "file#", "methodBody": "public void setFile(String file)\n    {\n        this.file = file;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the (base) name of the file(s) to which the voice data is written.<p> If this property is not set it defaults to to the channel name as per CLI with the '/' replaced by '-'.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1127", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.getFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormat()\n    {\n        return format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the format to use for encoding the voice files.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1128", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.setFormat", "methodParameterType": "String#", "methodParameterName": "format#", "methodBody": "public void setFormat(String format)\n    {\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the format to use for encoding the voice files.<p> If this property is not set it defaults to \"wav\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1129", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.getMix", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getMix()\n    {\n        return mix;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the two voice files should be joined at the end of the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1130", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MonitorAction.java", "methodName": "org.asteriskjava.manager.action.MonitorAction.setMix", "methodParameterType": "Boolean#", "methodParameterName": "mix#", "methodBody": "public void setMix(Boolean mix)\n    {\n        this.mix = mix;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to true if the two voice files should be joined at the end of the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1131", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.HangupAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public HangupAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty HangupAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1132", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.HangupAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public HangupAction(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HangupAction that hangs up the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1133", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.HangupAction", "methodParameterType": "String#int#", "methodParameterName": "channel#cause#", "methodBody": "public HangupAction(String channel, int cause)\n    {\n        this.channel = channel;\n        this.cause = cause;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HangupAction that hangs up the given channel with the given cause code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1134", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Hangup\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Hangup\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1135", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1136", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to hangup.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1137", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.getCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCause()\n    {\n        return cause;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the hangup cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1138", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/HangupAction.java", "methodName": "org.asteriskjava.manager.action.HangupAction.setCause", "methodParameterType": "Integer#", "methodParameterName": "cause#", "methodBody": "public void setCause(Integer cause)\n    {\n        this.cause = cause;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the hangup cause. The cause code must be &gt;= 0 and &lt;= 127.<p> This property is optional.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1139", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeMuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeMuteAction.ConfbridgeMuteAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeMuteAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeMuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1140", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeMuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeMuteAction.ConfbridgeMuteAction", "methodParameterType": "String#String#", "methodParameterName": "conference#channel#", "methodBody": "public ConfbridgeMuteAction(String conference, String channel) {\n\t\tthis.setConference(conference);\n\t\tthis.setChannel(channel);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ConfbridgeMuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1141", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeMuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeMuteAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeMute\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ConfbridgeMute\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1142", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeMuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeMuteAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1143", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeMuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeMuteAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1144", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeMuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeMuteAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel) {\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the channel to mute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1145", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/JabberSendAction.java", "methodName": "org.asteriskjava.manager.action.JabberSendAction.JabberSendAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JabberSendAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new JabberSendAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1146", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/JabberSendAction.java", "methodName": "org.asteriskjava.manager.action.JabberSendAction.JabberSendAction", "methodParameterType": "String#String#String#", "methodParameterName": "jabber#screenName#message#", "methodBody": "public JabberSendAction(String jabber, String screenName, String message)\n    {\n        this.jabber = jabber;\n        this.screenName = screenName;\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new JabberSendAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1147", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/JabberSendAction.java", "methodName": "org.asteriskjava.manager.action.JabberSendAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"JabberSend\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Ping\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1148", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/JabberSendAction.java", "methodName": "org.asteriskjava.manager.action.JabberSendAction.setJabber", "methodParameterType": "String#", "methodParameterName": "jabber#", "methodBody": "public void setJabber(String jabber)\n    {\n        this.jabber = jabber;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the client or transport Asterisk uses to connect to Jabber.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1149", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/JabberSendAction.java", "methodName": "org.asteriskjava.manager.action.JabberSendAction.setScreenName", "methodParameterType": "String#", "methodParameterName": "screenName#", "methodBody": "public void setScreenName(String screenName)\n    {\n        this.screenName = screenName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the JID of the recipient.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1150", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/JabberSendAction.java", "methodName": "org.asteriskjava.manager.action.JabberSendAction.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message)\n    {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the message to send to the recipient.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1151", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ListCommandsAction.java", "methodName": "org.asteriskjava.manager.action.ListCommandsAction.ListCommandsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ListCommandsAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ListCommandsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1152", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ListCommandsAction.java", "methodName": "org.asteriskjava.manager.action.ListCommandsAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ListCommands\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ListCommands\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1153", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MeetMeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.MeetMeUnmuteAction.MeetMeUnmuteAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MeetMeUnmuteAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty MeetMeUnmuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1154", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MeetMeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.MeetMeUnmuteAction.MeetMeUnmuteAction", "methodParameterType": "String#Integer#", "methodParameterName": "meetMe#userNum#", "methodBody": "public MeetMeUnmuteAction(String meetMe, Integer userNum)\n    {\n        super(meetMe, userNum);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MeetMeUnmuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1155", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MeetMeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.MeetMeUnmuteAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"MeetMeUnmute\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"MeetMeUnmute\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1156", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStopRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStopRecordAction.ConfbridgeStopRecordAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeStopRecordAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeStopRecordAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1157", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStopRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStopRecordAction.ConfbridgeStopRecordAction", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public ConfbridgeStopRecordAction(String conference) {\n\t\tthis.setConference(conference);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ConfbridgeStopRecordAction for a specific conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1158", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStopRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStopRecordAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeStopRecord\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ConfbridgeStopRecord\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1159", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStopRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStopRecordAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference for which to stop an audio recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1160", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeStopRecordAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeStopRecordAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference for which to stop an audio recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1161", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n\t{\n\t\treturn this.channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the PJSIP channel to send the NOTIFY on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1162", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.getEndpoint", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEndpoint()\n\t{\n\t\treturn this.endpoint;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the PJSIP endpoint to which to send the NOTIFY.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1163", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.getUri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUri()\n\t{\n\t\treturn this.uri;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the URI to which to send the NOTIFY.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1164", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n\t{\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the PJSIP channel name to send the NOTIFY on. This must be a PJSIP channel, ie. start with \"PJSIP/\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1165", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.setEndpoint", "methodParameterType": "String#", "methodParameterName": "endpoint#", "methodBody": "public void setEndpoint(String endpoint)\n\t{\n\t\tthis.endpoint = endpoint;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the PJSIP endpoint to send to NOTIFY to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1166", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.setUri", "methodParameterType": "String#", "methodParameterName": "uri#", "methodBody": "public void setUri(String uri)\n\t{\n\t\tthis.uri = uri;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set an abritrary URI to send the NOTIFY to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1167", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.setVariable", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public void setVariable(String name, String value)\n\t{\n\t\tif (this.variables == null)\n\t\t{\n\t\t\tthis.variables = new LinkedHashMap<>();\n\t\t}\n\n\t\tthis.variables.put(name, value);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a variable. <p> Use the 'content' variable to specify the NOTIFY body.", "call_func_name": ["java.util.LinkedHashMap.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1168", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.setVariables", "methodParameterType": "Map<String,String>#", "methodParameterName": "variables#", "methodBody": "public void setVariables(Map<String, String> variables)\n\t{\n\t\tthis.variables = variables;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set all variables. See  {@link #setVariable(String,String)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1169", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSIPNotifyAction.java", "methodName": "org.asteriskjava.manager.action.PJSIPNotifyAction.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getVariables()\n\t{\n\t\treturn this.variables;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1170", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ExtensionStateAction.java", "methodName": "org.asteriskjava.manager.action.ExtensionStateAction.ExtensionStateAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ExtensionStateAction()\n    {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ExtensionStateAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1171", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ExtensionStateAction.java", "methodName": "org.asteriskjava.manager.action.ExtensionStateAction.ExtensionStateAction", "methodParameterType": "String#String#", "methodParameterName": "exten#context#", "methodBody": "public ExtensionStateAction(String exten, String context)\n    {\n        this.exten = exten;\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ExtensionStateAction that queries the state of the given extension in the given context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1172", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ExtensionStateAction.java", "methodName": "org.asteriskjava.manager.action.ExtensionStateAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"ExtensionState\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ExtensionState\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1173", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ExtensionStateAction.java", "methodName": "org.asteriskjava.manager.action.ExtensionStateAction.getExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExten()\n    {\n        return exten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1174", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ExtensionStateAction.java", "methodName": "org.asteriskjava.manager.action.ExtensionStateAction.setExten", "methodParameterType": "String#", "methodParameterName": "exten#", "methodBody": "public void setExten(String exten)\n    {\n        this.exten = exten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the extension to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1175", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ExtensionStateAction.java", "methodName": "org.asteriskjava.manager.action.ExtensionStateAction.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the context that contains the extension to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1176", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ExtensionStateAction.java", "methodName": "org.asteriskjava.manager.action.ExtensionStateAction.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public void setContext(String context)\n    {\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the context that contains the extension to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1177", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.UpdateConfigAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UpdateConfigAction()\n    {\n        this.actionCounter = 0;\n        actions = new HashMap<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new UpdateConfigAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1178", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.UpdateConfigAction", "methodParameterType": "String#String#boolean#", "methodParameterName": "srcFilename#dstFilename#reload#", "methodBody": "public UpdateConfigAction(String srcFilename, String dstFilename, boolean reload)\n    {\n        this.actionCounter = 0;\n        this.srcFilename = srcFilename;\n        this.dstFilename = dstFilename;\n        setReload(reload);\n        actions = new HashMap<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new UpdateConfigAction with the given parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1179", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.addCommand", "methodParameterType": "String#String#String#String#String#", "methodParameterName": "action#cat#var#value#match#", "methodBody": "public void addCommand(String action, String cat, String var, String value, String match)\n    {\n        // for convienence of reference, shorter!\n        final String stringCounter = String.format(\"%06d\", this.actionCounter);\n\n        if (action != null)\n        {\n            actions.put(\"Action-\" + stringCounter, action);\n        }\n\n        if (cat != null)\n        {\n            actions.put(\"Cat-\" + stringCounter, cat);\n        }\n\n        if (var != null)\n        {\n            actions.put(\"Var-\" + stringCounter, var);\n        }\n\n        if (value != null)\n        {\n            actions.put(\"Value-\" + stringCounter, value);\n        }\n\n        if (match != null)\n        {\n            actions.put(\"Match-\" + stringCounter, match);\n        }\n\n        this.actionCounter++;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#PostfixExpression#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PostfixExpression)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a command to update a config file while sparing you the details of the Manager's required syntax. If you want to omit one of the command's sections, provide a null value to this method. The command index will be incremented even if you supply a null for all parameters, though the map will be unaffected.", "call_func_name": ["java.lang.Integer.valueOf", "java.lang.String.format", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Map.put"], "call_func_parameter": [["int"], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1180", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"UpdateConfig\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"UpdateConfig\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1181", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.getSrcFilename", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSrcFilename()\n    {\n        return srcFilename;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the source filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1182", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.setSrcFilename", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "public void setSrcFilename(String filename)\n    {\n        this.srcFilename = filename;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the source filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1183", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.getDstFilename", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDstFilename()\n    {\n        return dstFilename;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1184", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.setDstFilename", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "public void setDstFilename(String filename)\n    {\n        this.dstFilename = filename;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the source filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1185", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.getReload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReload()\n    {\n        return reload;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return should Asterisk reload, or the name of a specific module toreload", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1186", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.setReload", "methodParameterType": "String#", "methodParameterName": "reload#", "methodBody": "public void setReload(String reload)\n    {\n        this.reload = reload;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the reload behavior of this action, or sets a specific module to be reloaded", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1187", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.setReload", "methodParameterType": "boolean#", "methodParameterName": "reload#", "methodBody": "public void setReload(boolean reload)\n    {\n        this.reload = reload ? UpdateConfigAction.RELOAD_STRING_YES : UpdateConfigAction.RELOAD_STRING_NO;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the reload behavior of this action. If you don't know what string to feed Asterisk, this method will provide the appropriate one.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1188", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.getAttributes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getAttributes()\n    {\n        return actions;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns Map of the action's desired operations where Map keys contain: action,cat,var,value,match pairs followed by -XXXXXX, and the Map values contain the values for those keys. This method will typically only be used by the ActionBuilder to generate the actual strings to be sent to the manager interface.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1189", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UpdateConfigAction.java", "methodName": "org.asteriskjava.manager.action.UpdateConfigAction.setAttributes", "methodParameterType": "Map<String,String>#", "methodParameterName": "actions#", "methodBody": "public void setAttributes(Map<String, String> actions)\n    {\n        this.actions = actions;\n        this.actionCounter = actions.keySet().size();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "You may use this field to directly, programmatically add your own Map of key,value pairs that you would like to send for this command. Setting your own map will reset the command index to the number of keys in the Map", "call_func_name": ["java.util.Map.keySet", "java.util.Set.size"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "1190", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UnpauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.UnpauseMonitorAction.UnpauseMonitorAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UnpauseMonitorAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty UnpauseMonitorAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1191", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UnpauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.UnpauseMonitorAction.UnpauseMonitorAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public UnpauseMonitorAction(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new UnpauseMonitorAction that re-enables monitoring the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1192", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UnpauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.UnpauseMonitorAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"UnpauseMonitor\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"UnpauseMonitor\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1193", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UnpauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.UnpauseMonitorAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to re-enable monitoring.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1194", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UnpauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.UnpauseMonitorAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to re-enable monitoring. <p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1195", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UserEventAction.java", "methodName": "org.asteriskjava.manager.action.UserEventAction.UserEventAction", "methodParameterType": "UserEvent#", "methodParameterName": "userEvent#", "methodBody": "public UserEventAction(UserEvent userEvent)\n    {\n        this.userEvent = userEvent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create the userevent action with userEvent as the event it will send", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1196", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UserEventAction.java", "methodName": "org.asteriskjava.manager.action.UserEventAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"UserEvent\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name of this action", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1197", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UserEventAction.java", "methodName": "org.asteriskjava.manager.action.UserEventAction.getUserEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UserEvent getUserEvent()\n    {\n        return userEvent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userEvent", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1198", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/UserEventAction.java", "methodName": "org.asteriskjava.manager.action.UserEventAction.setUserEvent", "methodParameterType": "UserEvent#", "methodParameterName": "userEvent#", "methodBody": "public void setUserEvent(UserEvent userEvent)\n    {\n        this.userEvent = userEvent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userEvent the userEvent to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1199", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.MuteAudioAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MuteAudioAction()\n\t{\n\n\t}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty MuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1200", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.MuteAudioAction", "methodParameterType": "String#Direction#State#", "methodParameterName": "channel#direction#state#", "methodBody": "public MuteAudioAction(String channel, Direction direction, State state)\n\t{\n\t\tthis.channel = channel;\n\t\tthis.direction = direction;\n\t\tthis.state = state;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new MuteAction that Mutes or Unmutes the two given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1201", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction()\n\t{\n\t\treturn \"MuteAudio\"; //$NON-NLS-1$\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"MuteAudio\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1202", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n\t{\n\t\treturn this.channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to monitor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1203", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.getDirection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Direction getDirection()\n\t{\n\t\treturn this.direction;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the audio direction which is to be muted/unmuted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1204", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public State getState()\n\t{\n\t\treturn this.state;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state controls whether we are muting or unmuting the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1205", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel) {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to monitor.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1206", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.setDirection", "methodParameterType": "Direction#", "methodParameterName": "direction#", "methodBody": "public void setDirection(Direction direction) {\n        this.direction = direction;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the audio direction which is to be muted/unmuted.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1207", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MuteAudioAction.java", "methodName": "org.asteriskjava.manager.action.MuteAudioAction.setState", "methodParameterType": "State#", "methodParameterName": "state#", "methodBody": "public void setState(State state) {\n        this.state = state;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the state controls whether we are muting or unmuting the channel.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1208", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.AgentCallbackLoginAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AgentCallbackLoginAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty AgentCallbackLoginAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1209", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.AgentCallbackLoginAction", "methodParameterType": "String#String#", "methodParameterName": "agent#exten#", "methodBody": "public AgentCallbackLoginAction(String agent, String exten)\n    {\n        this.agent = agent;\n        this.exten = exten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgentCallbackLoginAction, that logs in the given agent at the given callback extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1210", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.AgentCallbackLoginAction", "methodParameterType": "String#String#String#", "methodParameterName": "agent#exten#context#", "methodBody": "public AgentCallbackLoginAction(String agent, String exten, String context)\n    {\n        this(agent, exten);\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgentCallbackLoginAction, that logs in the given agent at the given callback extension in the given context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1211", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.AgentCallbackLoginAction", "methodParameterType": "String#String#String#Boolean#Long#", "methodParameterName": "agent#exten#context#ackCall#wrapupTime#", "methodBody": "public AgentCallbackLoginAction(String agent, String exten, String context, Boolean ackCall, Long wrapupTime)\n    {\n        this(agent, exten, context);\n        this.ackCall = ackCall;\n        this.wrapupTime = wrapupTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgentCallbackLoginAction, that logs in the given agent at the given callback extension in the given context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1212", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"AgentCallbackLogin\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"AgentCallbackLogin\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1213", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.getAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgent()\n    {\n        return agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the agent to log in, for example \"1002\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1214", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.setAgent", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public void setAgent(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the agent to log in, for example \"1002\".<p> This is property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1215", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.getExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExten()\n    {\n        return exten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension to use for callback.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1216", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.setExten", "methodParameterType": "String#", "methodParameterName": "exten#", "methodBody": "public void setExten(String exten)\n    {\n        this.exten = exten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the extension to use for callback.<p> This is property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1217", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the context of the extension to use for callback.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1218", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public void setContext(String context)\n    {\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the context of the extension to use for callback.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1219", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.getAckCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getAckCall()\n    {\n        return ackCall;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if an acknowledgement is needed when agent is called back.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1220", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.setAckCall", "methodParameterType": "Boolean#", "methodParameterName": "ackCall#", "methodBody": "public void setAckCall(Boolean ackCall)\n    {\n        this.ackCall = ackCall;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if an acknowledgement is needed when agent is called back.<p> This property is optional, it allows you to override the defaults defined in Asterisk's configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1221", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.getWrapupTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getWrapupTime()\n    {\n        return wrapupTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the minimum amount of time after disconnecting before the caller can receive a new call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1222", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentCallbackLoginAction.java", "methodName": "org.asteriskjava.manager.action.AgentCallbackLoginAction.setWrapupTime", "methodParameterType": "Long#", "methodParameterName": "wrapupTime#", "methodBody": "public void setWrapupTime(Long wrapupTime)\n    {\n        this.wrapupTime = wrapupTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the minimum amount of time after disconnecting before the caller can receive a new call.<p> This property is optional, it allows you to override the defaults defined in Asterisk's configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1223", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipShowPeerAction.java", "methodName": "org.asteriskjava.manager.action.SipShowPeerAction.SipShowPeerAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SipShowPeerAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty SipShowPeerAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1224", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipShowPeerAction.java", "methodName": "org.asteriskjava.manager.action.SipShowPeerAction.SipShowPeerAction", "methodParameterType": "String#", "methodParameterName": "peer#", "methodBody": "public SipShowPeerAction(String peer)\n    {\n        this.peer = peer;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SipShowPeerAction that requests the details about the given SIP peer. <p> This is just the peer name without the channel type prefix. For example if your channel is called \"SIP/john\", the peer name is just \"john\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1225", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipShowPeerAction.java", "methodName": "org.asteriskjava.manager.action.SipShowPeerAction.getPeer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPeer()\n    {\n        return peer;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the peer to retrieve.<p> This parameter is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1226", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipShowPeerAction.java", "methodName": "org.asteriskjava.manager.action.SipShowPeerAction.setPeer", "methodParameterType": "String#", "methodParameterName": "peer#", "methodBody": "public void setPeer(String peer)\n    {\n        this.peer = peer;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the peer to retrieve. <p> This is just the peer name without the channel type prefix. For example if your channel is called \"SIP/john\", the peer name is just \"john\". <p> This parameter is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1227", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOnAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOnAction.ZapDndOnAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZapDndOnAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty ZapDndOnAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1228", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOnAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOnAction.ZapDndOnAction", "methodParameterType": "Integer#", "methodParameterName": "zapChannel#", "methodBody": "public ZapDndOnAction(Integer zapChannel)\n    {\n        this.zapChannel = zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ZapDndOnAction that enables \"Do Not Disturb\" status for the given zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1229", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOnAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOnAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ZapDNDOn\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ZapDNDOn\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1230", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOnAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOnAction.getZapChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getZapChannel()\n    {\n        return zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the zap channel to switch to dnd on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1231", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOnAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOnAction.setZapChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setZapChannel(Integer channel)\n    {\n        this.zapChannel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the zap channel to switch to dnd on.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1232", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ManagerAction.java", "methodName": "org.asteriskjava.manager.action.ManagerAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAction();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the action for example \"Hangup\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1233", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ManagerAction.java", "methodName": "org.asteriskjava.manager.action.ManagerAction.getActionId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getActionId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the action id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1234", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ManagerAction.java", "methodName": "org.asteriskjava.manager.action.ManagerAction.setActionId", "methodParameterType": "String#", "methodParameterName": "actionId#", "methodBody": "void setActionId(String actionId);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the action id.<p> If the action id is set and sent to the asterisk server any response returned by the Asterisk server will include the same id. This way the action id can be used to track actions and their corresponding responses and response events.<p> Note that Asterisk-Java uses its own internal action id to match  actions with the corresponding responses and events. Though the internal action is never exposed to the application code. So if you want to  handle reponses or response events on your own your application must set a unique action id using this method otherwise the action id of the reponse and response event objects passed to your application will be null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1235", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.SkypeChatSendAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeChatSendAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeAddBuddyAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1236", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.SkypeChatSendAction", "methodParameterType": "String#String#String#", "methodParameterName": "user#skypename#message#", "methodBody": "public SkypeChatSendAction(String user, String skypename, String message)\n    {\n        this.user = user;\n        this.skypename = skypename;\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeChatSendAction with the given parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1237", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.getSkypename", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSkypename()\n    {\n        return skypename;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the recipient of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1238", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.setSkypename", "methodParameterType": "String#", "methodParameterName": "skypename#", "methodBody": "public void setSkypename(String skypename)\n    {\n        this.skypename = skypename;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the recipient of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1239", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the sender of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1240", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.setUser", "methodParameterType": "String#", "methodParameterName": "user#", "methodBody": "public void setUser(String user)\n    {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the sender of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1241", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage()\n    {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the message to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1242", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message)\n    {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the message to send. Must not contain newlines but you can use \"\\r\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1243", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeChatSendAction.java", "methodName": "org.asteriskjava.manager.action.SkypeChatSendAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeChatSend\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeChatSend\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1244", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleLoadAction.java", "methodName": "org.asteriskjava.manager.action.ModuleLoadAction.ModuleLoadAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ModuleLoadAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ModuleLoadAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1245", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleLoadAction.java", "methodName": "org.asteriskjava.manager.action.ModuleLoadAction.ModuleLoadAction", "methodParameterType": "String#String#", "methodParameterName": "module#loadType#", "methodBody": "public ModuleLoadAction(String module, String loadType)\n    {\n        this.module = module;\n        this.loadType = loadType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ModuleLoadAction with the given parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1246", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleLoadAction.java", "methodName": "org.asteriskjava.manager.action.ModuleLoadAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"ModuleLoad\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ModuleLoad\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1247", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleLoadAction.java", "methodName": "org.asteriskjava.manager.action.ModuleLoadAction.getModule", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getModule()\n    {\n        return module;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the module or subsystem to perform the operation on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1248", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleLoadAction.java", "methodName": "org.asteriskjava.manager.action.ModuleLoadAction.setModule", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "public void setModule(String module)\n    {\n        this.module = module;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the module including the \".so\" extension or subsystem (\"cdr\", \"enum\", \"dnsmgr\", \"extconfig\", \"manager\", \"rtp\" or \"http\") to perform the operation on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1249", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleLoadAction.java", "methodName": "org.asteriskjava.manager.action.ModuleLoadAction.getLoadType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLoadType()\n    {\n        return loadType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the operation to perform.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1250", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleLoadAction.java", "methodName": "org.asteriskjava.manager.action.ModuleLoadAction.setLoadType", "methodParameterType": "String#", "methodParameterName": "loadType#", "methodBody": "public void setLoadType(String loadType)\n    {\n        this.loadType = loadType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the operation to perform (\"load\", \"unload\" or \"reload\").", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1251", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PingAction.java", "methodName": "org.asteriskjava.manager.action.PingAction.PingAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PingAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new PingAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1252", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PingAction.java", "methodName": "org.asteriskjava.manager.action.PingAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"Ping\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Ping\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1253", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DongleShowDevicesAction.java", "methodName": "org.asteriskjava.manager.action.DongleShowDevicesAction.DongleShowDevicesAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DongleShowDevicesAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new DahdiShowChannelsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1254", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DongleShowDevicesAction.java", "methodName": "org.asteriskjava.manager.action.DongleShowDevicesAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"DongleShowDevices\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"DahdiShowChannels\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1255", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleCheckAction.java", "methodName": "org.asteriskjava.manager.action.ModuleCheckAction.ModuleCheckAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ModuleCheckAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ModuleCheckAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1256", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleCheckAction.java", "methodName": "org.asteriskjava.manager.action.ModuleCheckAction.ModuleCheckAction", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "public ModuleCheckAction(String module)\n    {\n        this.module = module;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ModuleCheckAction with the given parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1257", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleCheckAction.java", "methodName": "org.asteriskjava.manager.action.ModuleCheckAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"ModuleCheck\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ModuleLoad\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1258", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleCheckAction.java", "methodName": "org.asteriskjava.manager.action.ModuleCheckAction.getModule", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getModule()\n    {\n        return module;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the module to check.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1259", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ModuleCheckAction.java", "methodName": "org.asteriskjava.manager.action.ModuleCheckAction.setModule", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "public void setModule(String module)\n    {\n        this.module = module;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the module (including or not including the \".so\" extension) to check.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1260", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxStatusAction.java", "methodName": "org.asteriskjava.manager.action.MailboxStatusAction.MailboxStatusAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MailboxStatusAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty MailboxStatusAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1261", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxStatusAction.java", "methodName": "org.asteriskjava.manager.action.MailboxStatusAction.MailboxStatusAction", "methodParameterType": "String#", "methodParameterName": "mailbox#", "methodBody": "public MailboxStatusAction(String mailbox)\n    {\n        this.mailbox = mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new MailboxStatusAction that checks for waiting messages in the given mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1262", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxStatusAction.java", "methodName": "org.asteriskjava.manager.action.MailboxStatusAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"MailboxStatus\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"MailboxStatus\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1263", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxStatusAction.java", "methodName": "org.asteriskjava.manager.action.MailboxStatusAction.getMailbox", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMailbox()\n    {\n        return mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the mailbox to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1264", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxStatusAction.java", "methodName": "org.asteriskjava.manager.action.MailboxStatusAction.setMailbox", "methodParameterType": "String#", "methodParameterName": "mailbox#", "methodBody": "public void setMailbox(String mailbox)\n    {\n        this.mailbox = mailbox;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the mailbox to query.<p> This can either be only the name of the mailbox or a string of the form mailboxnumber@context. If no context is specified \"default\" is assumed.<p> Multiple mailboxes may be given, separated by ','. In this case the action checks whether at least one of the given mailboxes has waiting messages.<p> This property is mandatory.<p> Example: \"1234,1235@mycontext\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1265", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipShowRegistryAction.java", "methodName": "org.asteriskjava.manager.action.SipShowRegistryAction.SipShowRegistryAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SipShowRegistryAction()\n    {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SipShowRegistryAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1266", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.SetCdrUserFieldAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SetCdrUserFieldAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty SetCdrUserFieldAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1267", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.SetCdrUserFieldAction", "methodParameterType": "String#String#", "methodParameterName": "channel#userField#", "methodBody": "public SetCdrUserFieldAction(String channel, String userField)\n    {\n        this.channel = channel;\n        this.userField = userField;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetCdrUserFieldAction that sets the user field of the call detail record for the given channel to the given value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1268", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.SetCdrUserFieldAction", "methodParameterType": "String#String#Boolean#", "methodParameterName": "channel#userField#append#", "methodBody": "public SetCdrUserFieldAction(String channel, String userField,\n            Boolean append)\n    {\n        this.channel = channel;\n        this.userField = userField;\n        this.append = append;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetCDRUserFieldAction that sets the user field of the call detail record for the given channel to the given value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1269", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"SetCDRUserField\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the action, i.e. \"SetCDRUserField\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1270", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to set the cdr user field on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1271", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to set the cdr user field on.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1272", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.getUserField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUserField()\n    {\n        return userField;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the cdr user field to set or append.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1273", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.setUserField", "methodParameterType": "String#", "methodParameterName": "userField#", "methodBody": "public void setUserField(String userField)\n    {\n        this.userField = userField;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the cdr user field to set or append.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1274", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.getAppend", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getAppend()\n    {\n        return append;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the value of the cdr user field is appended or overwritten.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1275", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetCdrUserFieldAction.java", "methodName": "org.asteriskjava.manager.action.SetCdrUserFieldAction.setAppend", "methodParameterType": "Boolean#", "methodParameterName": "append#", "methodBody": "public void setAppend(Boolean append)\n    {\n        this.append = append;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to true to append the value to the cdr user field or false to overwrite.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1276", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetConfigAction.java", "methodName": "org.asteriskjava.manager.action.GetConfigAction.GetConfigAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GetConfigAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new GetConfigAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1277", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetConfigAction.java", "methodName": "org.asteriskjava.manager.action.GetConfigAction.GetConfigAction", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "public GetConfigAction(String filename)\n    {\n        this.filename = filename;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GetConfigAction with the given filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1278", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetConfigAction.java", "methodName": "org.asteriskjava.manager.action.GetConfigAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"GetConfig\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"GetConfig\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1279", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetConfigAction.java", "methodName": "org.asteriskjava.manager.action.GetConfigAction.getFilename", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFilename()\n    {\n        return filename;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1280", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/GetConfigAction.java", "methodName": "org.asteriskjava.manager.action.GetConfigAction.setFilename", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "public void setFilename(String filename)\n    {\n        this.filename = filename;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1281", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SipPeersAction.java", "methodName": "org.asteriskjava.manager.action.SipPeersAction.SipPeersAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SipPeersAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SipPeersAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1282", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelTreeAction.java", "methodName": "org.asteriskjava.manager.action.DbDelTreeAction.DbDelTreeAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DbDelTreeAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty DbDelTreeAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1283", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelTreeAction.java", "methodName": "org.asteriskjava.manager.action.DbDelTreeAction.DbDelTreeAction", "methodParameterType": "String#String#", "methodParameterName": "family#key#", "methodBody": "public DbDelTreeAction(String family, String key)\n    {\n        this.family = family;\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DbDelTreeAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1284", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelTreeAction.java", "methodName": "org.asteriskjava.manager.action.DbDelTreeAction.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the key to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1285", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelTreeAction.java", "methodName": "org.asteriskjava.manager.action.DbDelTreeAction.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the key to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1286", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelTreeAction.java", "methodName": "org.asteriskjava.manager.action.DbDelTreeAction.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the key to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1287", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelTreeAction.java", "methodName": "org.asteriskjava.manager.action.DbDelTreeAction.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key to delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1288", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.MixMonitorMuteAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MixMonitorMuteAction()\n\t{\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty MixMonitorMuteAction", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1289", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.MixMonitorMuteAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public MixMonitorMuteAction(String channel)\n\t{\n\t\tsuper();\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Mutes the monitor on the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1290", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.MixMonitorMuteAction", "methodParameterType": "String#String#", "methodParameterName": "channel#direction#", "methodBody": "public MixMonitorMuteAction(String channel, String direction)\n\t{\n\t\tsuper();\n\t\tthis.channel = channel;\n\t\tthis.direction = direction;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Mutes the monitor on the given channel for the given portion of the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1291", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.MixMonitorMuteAction", "methodParameterType": "String#String#Integer#", "methodParameterName": "channel#direction#state#", "methodBody": "public MixMonitorMuteAction(String channel, String direction, Integer state)\n\t{\n\t\tsuper();\n\t\tthis.channel = channel;\n\t\tthis.direction = direction;\n\t\tthis.state = state;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Either mutes or un-mutes the monitor on the given channel for  the given portion of the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1292", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.MixMonitorMuteAction", "methodParameterType": "String#Integer#", "methodParameterName": "channel#state#", "methodBody": "public MixMonitorMuteAction(String channel, Integer state)\n\t{\n\t\tsuper();\n\t\tthis.channel = channel;\n\t\tthis.state = state;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Either mutes or un-mutes the monitor on the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1293", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"MixMonitorMute\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1294", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel() {\n\t\treturn channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to mute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1295", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel) {\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to mute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1296", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.getDirection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDirection() {\n\t\treturn direction;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the direction of the part of the recording to mute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1297", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.setDirection", "methodParameterType": "String#", "methodParameterName": "direction#", "methodBody": "public void setDirection(String direction) {\n\t\tthis.direction = direction;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the direction of the part of the recording to mute. Can be one of: read, write, or both.  Defaults to both.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1298", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getState() {\n\t\treturn state;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the state of the mute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1299", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorMuteAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorMuteAction.setState", "methodParameterType": "Integer#", "methodParameterName": "state#", "methodBody": "public void setState(Integer state) {\n\t\tthis.state = state;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the state of the mute operation.  1 = on, 0 = off.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1300", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getVariables()\n    {\n        return variables;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the variables to set on the originated call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1301", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.setVariable", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public void setVariable(String name, String value)\n    {\n        if (variables == null)\n        {\n            variables = new LinkedHashMap<>();\n        }\n\n        variables.put(name, value);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets an variable on the originated call.", "call_func_name": ["java.util.LinkedHashMap.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1302", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.getTo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTo()\n    {\n        return to;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrives destination of message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1303", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.setTo", "methodParameterType": "String#", "methodParameterName": "to#", "methodBody": "public void setTo(String to)\n    {\n        this.to = to;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set destination of message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1304", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.getFrom", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFrom()\n    {\n        return from;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "get From String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1305", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.setFrom", "methodParameterType": "String#", "methodParameterName": "from#", "methodBody": "public void setFrom(String from)\n    {\n        this.from = from;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "set From String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1306", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.getBody", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBody()\n    {\n        return body;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Content of the message in plain text ascii Please consider to use getBase64Body instead to avoid encoding problems", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1307", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.setBody", "methodParameterType": "String#", "methodParameterName": "body#", "methodBody": "public void setBody(String body)\n    {\n        this.body = body;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the content of the message Please consider to use setBase64Body instead to avoid encoding problems", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1308", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.getBase64body", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBase64body()\n    {\n        return base64body;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves content encoded in base64", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1309", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MessageSendAction.java", "methodName": "org.asteriskjava.manager.action.MessageSendAction.setBase64body", "methodParameterType": "String#", "methodParameterName": "base64body#", "methodBody": "public void setBase64body(String base64body)\n    {\n        this.base64body = base64body;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the content of the message body encode in base64 {@code    MessageSendAction sipSendMessage = new MessageSendAction();sipSendMessage.setTo(\"sip:phoneuserid\"); sipSendMessage.setVariable(\"Content-Type\", \"text/plain\"); sipSendMessage.setVariable(\"P-hint\", \"usrloc applied\"); sipSendMessage.setActionId(UUID.randomUUID().toString()); sipSendMessage.setBase64body(new String(Base64.encodeBase64(message.getBytes(\"UTF-8\")), \"UTF-8\"));}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1310", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapTransferAction.java", "methodName": "org.asteriskjava.manager.action.ZapTransferAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ZapTransfer\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ZapTransfer\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1311", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapTransferAction.java", "methodName": "org.asteriskjava.manager.action.ZapTransferAction.getZapChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getZapChannel()\n    {\n        return zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the zap channel to transfer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1312", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapTransferAction.java", "methodName": "org.asteriskjava.manager.action.ZapTransferAction.setZapChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setZapChannel(Integer channel)\n    {\n        this.zapChannel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the zap channel to transfer.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1313", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.RedirectAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public RedirectAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty RedirectAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1314", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.RedirectAction", "methodParameterType": "String#String#String#Integer#", "methodParameterName": "channel#context#exten#priority#", "methodBody": "public RedirectAction(String channel, String context, String exten, Integer priority)\n    {\n        this.channel = channel;\n        this.context = context;\n        this.exten = exten;\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new RedirectAction that redirects the given channel to the given context, extension, priority triple.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1315", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.RedirectAction", "methodParameterType": "String#String#String#String#Integer#", "methodParameterName": "channel#extraChannel#context#exten#priority#", "methodBody": "public RedirectAction(String channel, String extraChannel, String context, String exten, Integer priority)\n    {\n        this.channel = channel;\n        this.extraChannel = extraChannel;\n        this.context = context;\n        this.exten = exten;\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new RedirectAction that redirects the given channels to the given context, extension, priority triple. <p> This constructor only works standard versions of Asterisk, i.e. non-BRIstuffed versions. When used with a BRIstuffed version (and not setting extraContext, extraExten and extraPriority) the second channel is just hung up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1316", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.RedirectAction", "methodParameterType": "String#String#String#String#Integer#String#String#Integer#", "methodParameterName": "channel#extraChannel#context#exten#priority#extraContext#extraExten#extraPriority#", "methodBody": "public RedirectAction(String channel, String extraChannel, String context, String exten, Integer priority,\n            String extraContext, String extraExten, Integer extraPriority)\n    {\n        this.channel = channel;\n        this.extraChannel = extraChannel;\n        this.context = context;\n        this.exten = exten;\n        this.priority = priority;\n        this.extraContext = extraContext;\n        this.extraExten = extraExten;\n        this.extraPriority = extraPriority;\n        if (channel.equalsIgnoreCase(extraChannel))\n        {\n            throw new RuntimeException(\"ExtraChannel = channel ... bad things will happen to asterisk\");\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new RedirectAction that redirects the given channels to the given context, extension, priority triples. <p> This constructor works for BRIstuffed versions of Asterisk, if used with a standard version the extraContext, extraExten and extraPriroity attributes are ignored.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1317", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Redirect\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Redirect\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1318", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns name of the channel to redirect.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1319", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to redirect.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1320", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getExtraChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtraChannel()\n    {\n        return extraChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the additional channel to redirect.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1321", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setExtraChannel", "methodParameterType": "String#", "methodParameterName": "extraChannel#", "methodBody": "public void setExtraChannel(String extraChannel)\n    {\n        this.extraChannel = extraChannel;\n        if (channel.equalsIgnoreCase(extraChannel))\n        {\n            throw new RuntimeException(\"ExtraChannel = channel ... bad things will happen to asterisk\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the additional channel to redirect.", "call_func_name": ["java.lang.String.equalsIgnoreCase", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1322", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1323", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public void setContext(String context)\n    {\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1324", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExten()\n    {\n        return exten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1325", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setExten", "methodParameterType": "String#", "methodParameterName": "exten#", "methodBody": "public void setExten(String exten)\n    {\n        this.exten = exten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1326", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPriority()\n    {\n        return priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination priority.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1327", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setPriority", "methodParameterType": "Integer#", "methodParameterName": "priority#", "methodBody": "public void setPriority(Integer priority)\n    {\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination priority.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1328", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getExtraContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtraContext()\n    {\n        return extraContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination context for the additional channel. <p> This property is only used by BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1329", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setExtraContext", "methodParameterType": "String#", "methodParameterName": "extraContext#", "methodBody": "public void setExtraContext(String extraContext)\n    {\n        this.extraContext = extraContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination context for the additional channel. <p> This property is only used by BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1330", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getExtraExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtraExten()\n    {\n        return extraExten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination extension for the additional channel. <p> This property is only used by BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1331", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setExtraExten", "methodParameterType": "String#", "methodParameterName": "extraExten#", "methodBody": "public void setExtraExten(String extraExten)\n    {\n        this.extraExten = extraExten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination extension for the additional channel. <p> This property is only used by BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1332", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.getExtraPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getExtraPriority()\n    {\n        return extraPriority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination priority for the additional channel. <p> This property is only used by BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1333", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/RedirectAction.java", "methodName": "org.asteriskjava.manager.action.RedirectAction.setExtraPriority", "methodParameterType": "Integer#", "methodParameterName": "extraPriority#", "methodBody": "public void setExtraPriority(Integer extraPriority)\n    {\n        this.extraPriority = extraPriority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination priority for the additional channel. <p> This property is only used by BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1334", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbstractMeetMeMuteAction.java", "methodName": "org.asteriskjava.manager.action.AbstractMeetMeMuteAction.getMeetMe", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMeetMe()\n    {\n        return meetMe;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the conference number.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1335", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbstractMeetMeMuteAction.java", "methodName": "org.asteriskjava.manager.action.AbstractMeetMeMuteAction.setMeetMe", "methodParameterType": "String#", "methodParameterName": "meetMe#", "methodBody": "public void setMeetMe(String meetMe)\n    {\n        this.meetMe = meetMe;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the conference number.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1336", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbstractMeetMeMuteAction.java", "methodName": "org.asteriskjava.manager.action.AbstractMeetMeMuteAction.getUserNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getUserNum()\n    {\n        return userNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the index of the user in the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1337", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbstractMeetMeMuteAction.java", "methodName": "org.asteriskjava.manager.action.AbstractMeetMeMuteAction.setUserNum", "methodParameterType": "Integer#", "methodParameterName": "userNum#", "methodBody": "public void setUserNum(Integer userNum)\n    {\n        this.userNum = userNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the index of the user in the conference.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1338", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Originate\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Originate\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1339", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccount()\n    {\n        return account;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the account code to use for the originated call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1340", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setAccount", "methodParameterType": "String#", "methodParameterName": "account#", "methodBody": "public void setAccount(String account)\n    {\n        this.account = account;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the account code to use for the originated call. <p> The account code is included in the call detail record generated for this call and will be used for billing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1341", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the caller id to set on the outgoing channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1342", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the caller id to set on the outgoing channel. <p> This includes both the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1343", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getCallingPres", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCallingPres()\n    {\n        return callingPres;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the calling presentation for the outgoing channel. <p> This property is only available on BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1344", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setCallingPres", "methodParameterType": "Integer#", "methodParameterName": "callingPres#", "methodBody": "public void setCallingPres(Integer callingPres)\n    {\n        this.callingPres = callingPres;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the calling presentation for the outgoing channel. <p> The number is an octet and the only bits you need worry about are bits 1,2,6 and 7. <p> Bits 1 and 2 define the screening indicator and bits 6 and 7 define the presentation indicator. <p> In essence, it says, 'Is the person who has been called allowed to see the callers number?' (presentation) and 'What authority was used to verify that this is a genuine number?' (screening). <p> <br> Presentation indicator (Bits 6 and 7): <pre> Bits Meaning 7 6 0 0 Presentation allowed 0 1 Presentation restricted 1 0 Number not available due to interworking 1 1 Reserved </pre> Screening indicator (Bits 1 and 2): <pre> Bits Meaning 2 1 0 0 User-provided, not screened 0 1 User-provided, verified and passed 1 0 User-provided, verified and failed 1 1 Network provided </pre> Examples for some general settings: <pre> Presentation Allowed, Network Provided: 3 (00000011) Presentation Restricted, User-provided, not screened: 32 (00100000) Presentation Restricted, User-provided, verified, and passed: 33 (00100001) Presentation Restricted, Network Provided: 35 (00100011) </pre> This property is only available on BRIstuffed Asterisk servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1345", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to connect to the outgoing call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1346", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to connect to the outgoing call. <p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1347", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the context of the extension to connect to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1348", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public void setContext(String context)\n    {\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the context of the extension to connect to. <p> If you set the context you also have to set the exten and priority properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1349", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExten()\n    {\n        return exten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension to connect to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1350", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setExten", "methodParameterType": "String#", "methodParameterName": "exten#", "methodBody": "public void setExten(String exten)\n    {\n        this.exten = exten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the extension to connect to. <p> If you set the extension you also have to set the context and priority properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1351", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPriority()\n    {\n        return priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the priority of the extension to connect to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1352", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setPriority", "methodParameterType": "Integer#", "methodParameterName": "priority#", "methodBody": "public void setPriority(Integer priority)\n    {\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the priority of the extension to connect to. If you set the priority you also have to set the context and exten properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1353", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getApplication()\n    {\n        return application;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the application to connect to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1354", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setApplication", "methodParameterType": "String#", "methodParameterName": "application#", "methodBody": "public void setApplication(String application)\n    {\n        this.application = application;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the application to connect to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1355", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getData()\n    {\n        return data;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the parameters to pass to the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1356", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setData", "methodParameterType": "String#", "methodParameterName": "data#", "methodBody": "public void setData(String data)\n    {\n        this.data = data;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the parameters to pass to the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1357", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the timeout for the origination.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1358", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setTimeout", "methodParameterType": "Integer#", "methodParameterName": "timeout#", "methodBody": "@Deprecated\n    public void setTimeout(Integer timeout)\n    {\n        if (timeout != null)\n        {\n            if (timeout < 1000)\n            {\n                logger.error(\"A timeout of 1000 will cause the originate to almost cretainly fail!\");\n            }\n            if (timeout < 10000)\n            {\n                logger.warn(\n                        \"A timeout of less than 10000 will cause the originate to fail if not answered within 10 seconds!\");\n            }\n            this.timeout = timeout.longValue();\n        }\n        else\n        {\n            this.timeout = null;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the timeout (in milliseconds) for the origination. <p> The channel must be answered within this time, otherwise the origination is considered to have failed and an OriginateFailureEvent is generated. <p> If not set, Asterisk assumes a default value of 30000 meaning 30 seconds.", "call_func_name": ["java.lang.Integer.intValue", "org.asteriskjava.util.Log.error", "org.asteriskjava.util.Log.warn", "java.lang.Integer.longValue", "java.lang.Long.valueOf"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.Object"], [""], ["long"]], "passed_comments": "/"}, {"index": "1359", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setTimeout", "methodParameterType": "Long#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(Long timeout)\n    {\n        if (timeout != null)\n        {\n            if (timeout < 1000)\n            {\n                logger.error(\"A timeout of 1000 will cause the originate to almost cretainly fail!\");\n            }\n            if (timeout < 10000)\n            {\n                logger.warn(\n                        \"A timeout of less than 100000 will cause the originate to fail if not answered within 10 seconds!\");\n            }\n        }\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the timeout (in milliseconds) for the origination. <p> The channel must be answered within this time, otherwise the origination is considered to have failed and an OriginateFailureEvent is generated. <p> If not set, Asterisk assumes a default value of 30000 meaning 30 seconds.", "call_func_name": ["java.lang.Long.longValue", "org.asteriskjava.util.Log.error", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1360", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "@Deprecated\n    public void setVariable(String variable)\n    {\n        final StringTokenizer st;\n\n        if (variable == null)\n        {\n            this.variables = null;\n            return;\n        }\n\n        st = new StringTokenizer(variable, \"|\");\n        variables = new LinkedHashMap<>();\n        while (st.hasMoreTokens())\n        {\n            String[] keyValue;\n\n            keyValue = st.nextToken().split(\"=\", 2);\n            if (keyValue.length < 2)\n            {\n                variables.put(keyValue[0], null);\n            }\n            else\n            {\n                variables.put(keyValue[0], keyValue[1]);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Sets the variables to set on the originated call. <p> Variable assignments are of the form \"VARNAME=VALUE\". You can specify multiple variable assignments separated by the '|' character. <p> Example: \"VAR1=abc|VAR2=def\" sets the channel variables VAR1 to \"abc\" and VAR2 to \"def\".", "call_func_name": ["java.util.StringTokenizer.<init>", "java.util.LinkedHashMap.<init>", "java.util.StringTokenizer.hasMoreTokens", "java.util.StringTokenizer.nextToken", "java.lang.String.split", "java.util.Map.put"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String", "int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1361", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setVariable", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public void setVariable(String name, String value)\n    {\n        if (variables == null)\n        {\n            variables = new LinkedHashMap<>();\n        }\n\n        variables.put(name, value);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets an variable on the originated call.", "call_func_name": ["java.util.LinkedHashMap.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1362", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getVariables()\n    {\n        return variables;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the variables to set on the originated call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1363", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setVariables", "methodParameterType": "Map<String,String>#", "methodParameterName": "variables#", "methodBody": "public void setVariables(Map<String, String> variables)\n    {\n        if (this.variables != null)\n        {\n            this.variables.putAll(variables);\n        }\n        else\n        {\n            this.variables = variables;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the variables to set on the originated call.", "call_func_name": ["java.util.Map.putAll"], "call_func_parameter": [["java.util.Map"]], "passed_comments": "/"}, {"index": "1364", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getAsync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getAsync()\n    {\n        return async;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this is a fast origination.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1365", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setAsync", "methodParameterType": "Boolean#", "methodParameterName": "async#", "methodBody": "public void setAsync(Boolean async)\n    {\n        this.async = async;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to true for fast origination. Only with fast origination Asterisk will send OriginateSuccess- and OriginateFailureEvents.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1366", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setEarlyMedia", "methodParameterType": "Boolean#", "methodParameterName": "earlyMedia#", "methodBody": "public void setEarlyMedia(Boolean earlyMedia)\n    {\n        this.earlyMedia = earlyMedia;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param earlyMedia the earlyMedia to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1367", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getEarlyMedia", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getEarlyMedia()\n    {\n        return earlyMedia;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the earlyMedia", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1368", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.getCodecs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCodecs()\n    {\n        return codecs;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the codecs to use for the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1369", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setCodecs", "methodParameterType": "String#", "methodParameterName": "codecs#", "methodBody": "public void setCodecs(String codecs)\n    {\n        this.codecs = codecs;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the codecs to use for the call. For example \"alaw, ulaw, h264\". <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1370", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setCodecs", "methodParameterType": "List<String>#", "methodParameterName": "codecs#", "methodBody": "public void setCodecs(List<String> codecs)\n    {\n        if (codecs == null || codecs.isEmpty())\n        {\n            this.codecs = null;\n            return;\n        }\n\n        Iterator<String> iter = codecs.iterator();\n        StringBuilder buffer = new StringBuilder(iter.next());\n        while (iter.hasNext())\n        {\n            buffer.append(\",\").append(iter.next());\n        }\n        this.codecs = buffer.toString();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the codecs to use for the call. <p> Available since Asterisk 1.6.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.util.Iterator.hasNext", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1371", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/OriginateAction.java", "methodName": "org.asteriskjava.manager.action.OriginateAction.setChannelId", "methodParameterType": "String#", "methodParameterName": "channelId#", "methodBody": "public void setChannelId(String channelId)\n    {\n        this.channelId = channelId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "this will be the channels uniqueID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1372", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CoreSettingsAction.java", "methodName": "org.asteriskjava.manager.action.CoreSettingsAction.CoreSettingsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CoreSettingsAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new CoreSettingsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1373", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CoreSettingsAction.java", "methodName": "org.asteriskjava.manager.action.CoreSettingsAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"CoreSettings\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"CoreSettings\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1374", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.DbPutAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DbPutAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty DbPutAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1375", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.DbPutAction", "methodParameterType": "String#String#String#", "methodParameterName": "family#key#val#", "methodBody": "public DbPutAction(String family, String key, String val)\n    {\n        this.family = family;\n        this.key = key;\n        this.val = val;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DbPutAction that sets the value of the database entry with the given key in the given family.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1376", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1377", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1378", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1379", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1380", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.getVal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVal()\n    {\n        return val;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1381", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.setVal", "methodParameterType": "String#", "methodParameterName": "val#", "methodBody": "public void setVal(String val)\n    {\n        this.val = val;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1382", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbPutAction.java", "methodName": "org.asteriskjava.manager.action.DbPutAction.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue()\n    {\n        return val;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value to set for BRIstuffed versions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1383", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnmuteAction.ConfbridgeUnmuteAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeUnmuteAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeUnmuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1384", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnmuteAction.ConfbridgeUnmuteAction", "methodParameterType": "String#String#", "methodParameterName": "conference#channel#", "methodBody": "public ConfbridgeUnmuteAction(String conference, String channel) {\n\t\tthis.setConference(conference);\n\t\tthis.setChannel(channel);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ConfbridgeUnmuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1385", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnmuteAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeUnmute\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ConfbridgeUnmute\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1386", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnmuteAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1387", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnmuteAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1388", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnmuteAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel) {\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the channel to unmute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1389", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnmuteAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnmuteAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel() {\n\t\treturn channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the channel to unmute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1390", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapShowChannelsAction.java", "methodName": "org.asteriskjava.manager.action.ZapShowChannelsAction.ZapShowChannelsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZapShowChannelsAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ZapShowChannelsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1391", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapShowChannelsAction.java", "methodName": "org.asteriskjava.manager.action.ZapShowChannelsAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ZapShowChannels\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ZapShowChannels\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1392", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CommandAction.java", "methodName": "org.asteriskjava.manager.action.CommandAction.CommandAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CommandAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new CommandAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1393", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CommandAction.java", "methodName": "org.asteriskjava.manager.action.CommandAction.CommandAction", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public CommandAction(String command)\n    {\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new CommandAction with the given command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1394", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CommandAction.java", "methodName": "org.asteriskjava.manager.action.CommandAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Command\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Command\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1395", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CommandAction.java", "methodName": "org.asteriskjava.manager.action.CommandAction.getCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommand()\n    {\n        return command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1396", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CommandAction.java", "methodName": "org.asteriskjava.manager.action.CommandAction.setCommand", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public void setCommand(String command)\n    {\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the CLI command to send to the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1397", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.MixMonitorAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MixMonitorAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty MixMonitorAction", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1398", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.MixMonitorAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public MixMonitorAction(String channel)\n    {\n        this(channel, null, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#NullLiteral#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MixMonitorAction that starts monitoring the given channel using a default filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1399", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.MixMonitorAction", "methodParameterType": "String#String#", "methodParameterName": "channel#filename#", "methodBody": "public MixMonitorAction(String channel, String filename)\n    {\n        this(channel, filename, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MixMonitorAction that starts monitoring the given channel with the specified filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1400", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.MixMonitorAction", "methodParameterType": "String#String#String#", "methodParameterName": "channel#filename#options#", "methodBody": "public MixMonitorAction(String channel, String filename, String options)\n    {\n        this(channel, filename, options, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MixMonitorAction with options that starts monitoring the given channel with the specified filename.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1401", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.MixMonitorAction", "methodParameterType": "String#String#String#String#", "methodParameterName": "channel#filename#options#command#", "methodBody": "public MixMonitorAction(String channel, String filename, String options, String command)\n    {\n        this.channel = channel;\n        this.file = filename;\n        this.options = options;\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new MixMonitorAction with options that starts monitoring the given channel with the specified filename. Also takes a command to execute when the recording has ended. The  {@code command} option has been available since Asterisk 12", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1402", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"MixMonitor\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"MixMonitor\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1403", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the Asterisk channel to monitor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1404", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the Asterisk channel to the given value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1405", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the filename that Asterisk will use when saving the recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1406", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.setFile", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "public void setFile(String filename)\n    {\n        this.file = filename;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the filename that Asterisk will use when saving the recording.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1407", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.getOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOptions()\n    {\n        return options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the options that are passed to MixMonitor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1408", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.setOptions", "methodParameterType": "String#", "methodParameterName": "options#", "methodBody": "public void setOptions(String options)\n    {\n        this.options = options;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the options that are passed to MixMonitor. These should be specified in the same format you would use if you were invoking the MixMonitor dialplan application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1409", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.getCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommand()\n    {\n        return command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the command to be executed when the MixMonitor recording has ended. Available since Asterisk 12", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1410", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.MixMonitorAction.setCommand", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public void setCommand(String command)\n    {\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the command to be executed when the MixMonitor recording has ended. Available since Asterisk 12", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1411", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.ParkAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ParkAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ParkAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1412", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.ParkAction", "methodParameterType": "String#String#", "methodParameterName": "channel#channel2#", "methodBody": "public ParkAction(String channel, String channel2)\n    {\n        super();\n        this.channel = channel;\n        this.channel2 = channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ParkAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1413", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.ParkAction", "methodParameterType": "String#String#Integer#", "methodParameterName": "channel#channel2#timeout#", "methodBody": "public ParkAction(String channel, String channel2, Integer timeout)\n    {\n        super();\n        this.channel = channel;\n        this.channel2 = channel2;\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ParkAction with a timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1414", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"Park\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Park\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1415", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to park.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1416", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to park.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1417", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.getChannel2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel2()\n    {\n        return channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to announce park info to and return to on timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1418", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.setChannel2", "methodParameterType": "String#", "methodParameterName": "channel2#", "methodBody": "public void setChannel2(String channel2)\n    {\n        this.channel2 = channel2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to announce park info to and return to on timeout.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1419", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the timeout in seconds before callback.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1420", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkAction.java", "methodName": "org.asteriskjava.manager.action.ParkAction.setTimeout", "methodParameterType": "Integer#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(Integer timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the timeout in seconds before callback.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1421", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkedCallsAction.java", "methodName": "org.asteriskjava.manager.action.ParkedCallsAction.ParkedCallsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ParkedCallsAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ParkedCallsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1422", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ParkedCallsAction.java", "methodName": "org.asteriskjava.manager.action.ParkedCallsAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ParkedCalls\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ParkedCalls\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1423", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeRemoveBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeRemoveBuddyAction.SkypeRemoveBuddyAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeRemoveBuddyAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeRemoveBuddyAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1424", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeRemoveBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeRemoveBuddyAction.SkypeRemoveBuddyAction", "methodParameterType": "String#String#", "methodParameterName": "user#buddy#", "methodBody": "public SkypeRemoveBuddyAction(String user, String buddy)\n    {\n        this.user = user;\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeRemoveBuddyAction that removes the given buddy from the given Skype for Asterisk user's buddy list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1425", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeRemoveBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeRemoveBuddyAction.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the Skype for Asterisk user.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1426", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeRemoveBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeRemoveBuddyAction.setUser", "methodParameterType": "String#", "methodParameterName": "user#", "methodBody": "public void setUser(String user)\n    {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the Skype for Asterisk user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1427", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeRemoveBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeRemoveBuddyAction.getBuddy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBuddy()\n    {\n        return buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1428", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeRemoveBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeRemoveBuddyAction.setBuddy", "methodParameterType": "String#", "methodParameterName": "buddy#", "methodBody": "public void setBuddy(String buddy)\n    {\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the buddy.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1429", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeRemoveBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeRemoveBuddyAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeRemoveBuddy\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeRemoveBuddy\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1430", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnlockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnlockAction.ConfbridgeUnlockAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConfbridgeUnlockAction() {\n\t\tsuper();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty ConfbridgeUnlockAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1431", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnlockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnlockAction.ConfbridgeUnlockAction", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public ConfbridgeUnlockAction(String conference) {\n\t\tthis.setConference(conference);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ConfbridgeUnlockAction for a specific conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1432", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnlockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnlockAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getAction() {\n\t\treturn \"ConfbridgeUnlock\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action \"ConfbridgeUnlock\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1433", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnlockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnlockAction.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference) {\n\t\tthis.conference = conference;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference to unlock.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1434", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ConfbridgeUnlockAction.java", "methodName": "org.asteriskjava.manager.action.ConfbridgeUnlockAction.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference() {\n\t\treturn conference;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference to unlock.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1435", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.QueuePenaltyAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueuePenaltyAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty QueuePenaltyAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1436", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.QueuePenaltyAction", "methodParameterType": "String#int#", "methodParameterName": "iface#penalty#", "methodBody": "public QueuePenaltyAction(String iface, int penalty)\n    {\n        this.iface = iface;\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueuePenaltyAction that sets the penalty for the given interface on all queues.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1437", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.QueuePenaltyAction", "methodParameterType": "String#int#String#", "methodParameterName": "iface#penalty#queue#", "methodBody": "public QueuePenaltyAction(String iface, int penalty, String queue)\n    {\n        this.iface = iface;\n        this.penalty = penalty;\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueuePenaltyAction that sets the penalty for the given interface on the given queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1438", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"QueuePenalty\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"QueuePenalty\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1439", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the interface of the member to set the penalty for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1440", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the interface of the member to set the penalty for.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1441", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.getPenalty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPenalty()\n    {\n        return penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new penalty.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1442", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.setPenalty", "methodParameterType": "Integer#", "methodParameterName": "penalty#", "methodBody": "public void setPenalty(Integer penalty)\n    {\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the new penalty.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1443", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1444", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePenaltyAction.java", "methodName": "org.asteriskjava.manager.action.QueuePenaltyAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1445", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeLicenseStatusAction.java", "methodName": "org.asteriskjava.manager.action.SkypeLicenseStatusAction.SkypeLicenseStatusAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeLicenseStatusAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeLicenseStatusAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1446", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeLicenseStatusAction.java", "methodName": "org.asteriskjava.manager.action.SkypeLicenseStatusAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeLicenseStatus\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeLicenseStatus\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1447", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.BridgeAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BridgeAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty BridgeAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1448", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.BridgeAction", "methodParameterType": "String#String#", "methodParameterName": "channel1#channel2#", "methodBody": "public BridgeAction(String channel1, String channel2)\n    {\n        this.channel1 = channel1;\n        this.channel2 = channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new BridgeAction that bridges the two given channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1449", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.BridgeAction", "methodParameterType": "String#String#Boolean#", "methodParameterName": "channel1#channel2#tone#", "methodBody": "public BridgeAction(String channel1, String channel2, Boolean tone)\n    {\n        this.channel1 = channel1;\n        this.channel2 = channel2;\n        this.tone = tone;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new BridgeAction that bridges the two given channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1450", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Bridge\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Bridge\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1451", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.getChannel1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel1()\n    {\n        return channel1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to bridge to channel2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1452", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.setChannel1", "methodParameterType": "String#", "methodParameterName": "channel1#", "methodBody": "public void setChannel1(String channel1)\n    {\n        this.channel1 = channel1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to bridge to channel2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1453", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.getChannel2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel2()\n    {\n        return channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to bridge to channel1.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1454", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.setChannel2", "methodParameterType": "String#", "methodParameterName": "channel2#", "methodBody": "public void setChannel2(String channel2)\n    {\n        this.channel2 = channel2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to bridge to channel1.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1455", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.getTone", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getTone()\n    {\n        return tone;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether a courtesy tone will be played to channel2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1456", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/BridgeAction.java", "methodName": "org.asteriskjava.manager.action.BridgeAction.setTone", "methodParameterType": "Boolean#", "methodParameterName": "tone#", "methodBody": "public void setTone(Boolean tone)\n    {\n        this.tone = tone;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether a courtesy tone will be played to channel2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1457", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxCountAction.java", "methodName": "org.asteriskjava.manager.action.MailboxCountAction.MailboxCountAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MailboxCountAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty MailboxCountAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1458", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxCountAction.java", "methodName": "org.asteriskjava.manager.action.MailboxCountAction.MailboxCountAction", "methodParameterType": "String#", "methodParameterName": "mailbox#", "methodBody": "public MailboxCountAction(String mailbox)\n    {\n        this.mailbox = mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new MailboxCountAction that queries the number of unread and read messages in the given mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1459", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxCountAction.java", "methodName": "org.asteriskjava.manager.action.MailboxCountAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"MailboxCount\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"MailboxCount\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1460", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxCountAction.java", "methodName": "org.asteriskjava.manager.action.MailboxCountAction.getMailbox", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMailbox()\n    {\n        return mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the mailbox to query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1461", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MailboxCountAction.java", "methodName": "org.asteriskjava.manager.action.MailboxCountAction.setMailbox", "methodParameterType": "String#", "methodParameterName": "mailbox#", "methodBody": "public void setMailbox(String mailbox)\n    {\n        this.mailbox = mailbox;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the mailbox to query.<p> This can either be only the number of the mailbox or a string of the form mailboxnumber@context.If no context is specified \"default\" is assumed.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1462", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.QueueAddAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueueAddAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty QueueAddAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1463", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.QueueAddAction", "methodParameterType": "String#String#", "methodParameterName": "queue#iface#", "methodBody": "public QueueAddAction(String queue, String iface)\n    {\n        this.queue = queue;\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueueAddAction that adds a new member on the given interface to the given queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1464", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.QueueAddAction", "methodParameterType": "String#String#Integer#", "methodParameterName": "queue#iface#penalty#", "methodBody": "public QueueAddAction(String queue, String iface, Integer penalty)\n    {\n        this.queue = queue;\n        this.iface = iface;\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueueAddAction that adds a new member on the given interface to the given queue with the given penalty.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1465", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"QueueAdd\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"QueueAdd\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1466", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue the new member will be added to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1467", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue the new member will be added to.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1468", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to dial to reach this member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1469", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel (Technology/Location) to dial to reach this member.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1470", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.getPenalty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPenalty()\n    {\n        return penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the penalty for this member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1471", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.setPenalty", "methodParameterType": "Integer#", "methodParameterName": "penalty#", "methodBody": "public void setPenalty(Integer penalty)\n    {\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the penalty for this member.<p> The penalty must be a positive integer or 0 for no penalty. If it is not set 0 is assumed.<p> When calls are distributed members with higher penalties are considered last.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1472", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.getPaused", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getPaused()\n    {\n        return paused;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the queue member should be paused when added.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1473", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.setPaused", "methodParameterType": "Boolean#", "methodParameterName": "paused#", "methodBody": "public void setPaused(Boolean paused)\n    {\n        this.paused = paused;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if the queue member should be paused when added.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1474", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.getMemberName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMemberName()\n    {\n        return memberName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue memeber (agent name).<p> Available since Asterisk 1.4", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1475", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.setMemberName", "methodParameterType": "String#", "methodParameterName": "memberName#", "methodBody": "public void setMemberName(String memberName)\n    {\n        this.memberName = memberName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue memeber (agent name).<p> Available since Asterisk 1.4", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1476", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.getStateInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStateInterface()\n    {\n        return stateInterface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel from which to read devicestate changes.<p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1477", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueAddAction.java", "methodName": "org.asteriskjava.manager.action.QueueAddAction.setStateInterface", "methodParameterType": "String#", "methodParameterName": "stateInterface#", "methodBody": "public void setStateInterface(String stateInterface)\n    {\n        this.stateInterface = stateInterface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel (Technology/Location) from which to read devicestate changes.<p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1478", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LocalOptimizeAwayAction.java", "methodName": "org.asteriskjava.manager.action.LocalOptimizeAwayAction.LocalOptimizeAwayAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LocalOptimizeAwayAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty LocalOptimizeAwayAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1479", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LocalOptimizeAwayAction.java", "methodName": "org.asteriskjava.manager.action.LocalOptimizeAwayAction.LocalOptimizeAwayAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public LocalOptimizeAwayAction(String channel)\n    {\n\tthis.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new LocalOptimizeAwayAction with channel name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1480", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LocalOptimizeAwayAction.java", "methodName": "org.asteriskjava.manager.action.LocalOptimizeAwayAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n\treturn \"LocalOptimizeAway\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"LocalOptimizeAway\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1481", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LocalOptimizeAwayAction.java", "methodName": "org.asteriskjava.manager.action.LocalOptimizeAwayAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n\treturn channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1482", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LocalOptimizeAwayAction.java", "methodName": "org.asteriskjava.manager.action.LocalOptimizeAwayAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n\tthis.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of tha channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1483", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/IaxPeerListAction.java", "methodName": "org.asteriskjava.manager.action.IaxPeerListAction.IaxPeerListAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public IaxPeerListAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new IaxPeersAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1484", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.StopMixMonitorAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StopMixMonitorAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty StopMixMonitorAction", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1485", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.StopMixMonitorAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public StopMixMonitorAction(String channel)\n    {\n        this(channel, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a StopMixMonitorAction that stops all MixMonitors on the specified channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1486", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.StopMixMonitorAction", "methodParameterType": "String#String#", "methodParameterName": "channel#mixMonitorId#", "methodBody": "public StopMixMonitorAction(String channel, String mixMonitorId)\n    {\n        this.channel = channel;\n        this.mixMonitorId = mixMonitorId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a StopMixMonitorAction that stops the specified MixMonitor on the specified channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1487", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"StopMixMonitor\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"StopMixMonitor\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1488", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the Asterisk channel to monitor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1489", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the Asterisk channel to the given value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1490", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.getMixMonitorId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMixMonitorId()\n    {\n        return mixMonitorId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ID of the MixMonitor to stop.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1491", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMixMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMixMonitorAction.setMixMonitorId", "methodParameterType": "String#", "methodParameterName": "mixMonitorId#", "methodBody": "public void setMixMonitorId(String mixMonitorId)\n    {\n        this.mixMonitorId = mixMonitorId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the ID of the MixMonitor so stop.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1492", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.PauseMonitorAction.PauseMonitorAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PauseMonitorAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty PauseMonitorAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1493", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.PauseMonitorAction.PauseMonitorAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public PauseMonitorAction(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PauseMonitorAction that temporarily stops monitoring the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1494", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.PauseMonitorAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"PauseMonitor\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"PauseMonitor\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1495", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.PauseMonitorAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to temporarily stop monitoring.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1496", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PauseMonitorAction.java", "methodName": "org.asteriskjava.manager.action.PauseMonitorAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to temporarily stop monitoring. <p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1497", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelAction.java", "methodName": "org.asteriskjava.manager.action.DbDelAction.DbDelAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DbDelAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty DbDelAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1498", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelAction.java", "methodName": "org.asteriskjava.manager.action.DbDelAction.DbDelAction", "methodParameterType": "String#String#", "methodParameterName": "family#key#", "methodBody": "public DbDelAction(String family, String key)\n    {\n        this.family = family;\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DbDelAction that deletes the value of the database", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1499", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelAction.java", "methodName": "org.asteriskjava.manager.action.DbDelAction.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the key to delete", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1500", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelAction.java", "methodName": "org.asteriskjava.manager.action.DbDelAction.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the key to delete", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1501", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelAction.java", "methodName": "org.asteriskjava.manager.action.DbDelAction.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the key to delete", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1502", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbDelAction.java", "methodName": "org.asteriskjava.manager.action.DbDelAction.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key to delete", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1503", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapHangupAction.java", "methodName": "org.asteriskjava.manager.action.ZapHangupAction.ZapHangupAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZapHangupAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty ZapHangupAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1504", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapHangupAction.java", "methodName": "org.asteriskjava.manager.action.ZapHangupAction.ZapHangupAction", "methodParameterType": "Integer#", "methodParameterName": "zapChannel#", "methodBody": "public ZapHangupAction(Integer zapChannel)\n    {\n        this.zapChannel = zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ZapHangupAction that hangs up the given zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1505", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapHangupAction.java", "methodName": "org.asteriskjava.manager.action.ZapHangupAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ZapHangup\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ZapHangup\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1506", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapHangupAction.java", "methodName": "org.asteriskjava.manager.action.ZapHangupAction.getZapChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getZapChannel()\n    {\n        return zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the zap channel to hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1507", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapHangupAction.java", "methodName": "org.asteriskjava.manager.action.ZapHangupAction.setZapChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setZapChannel(Integer channel)\n    {\n        this.zapChannel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the zap channel to hangup.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1508", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DahdiShowChannelsAction.java", "methodName": "org.asteriskjava.manager.action.DahdiShowChannelsAction.DahdiShowChannelsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DahdiShowChannelsAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new DahdiShowChannelsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1509", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DahdiShowChannelsAction.java", "methodName": "org.asteriskjava.manager.action.DahdiShowChannelsAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"DahdiShowChannels\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"DahdiShowChannels\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1510", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.QueueLogAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueueLogAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty QueueLogAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1511", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.QueueLogAction", "methodParameterType": "String#String#", "methodParameterName": "queue#event#", "methodBody": "public QueueLogAction(String queue, String event)\n    {\n        this.queue = queue;\n        this.event = event;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueueLogAction with the mandatory properties queue and event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1512", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.QueueLogAction", "methodParameterType": "String#String#String#String#String#", "methodParameterName": "queue#event#message#iface#uniqueId#", "methodBody": "public QueueLogAction(String queue, String event, String message, String iface, String uniqueId)\n    {\n        this.queue = queue;\n        this.event = event;\n        this.message = message;\n        this.iface = iface;\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueueLogAction with the mandatory properties queue and event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1513", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"QueueLog\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"QueueLog\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1514", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the interface of the member to log the event for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1515", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the interface of the member to log the event for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1516", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue to log the event for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1517", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue to log the event for.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1518", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel to log the event for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1519", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel to log the event for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1520", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.getEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEvent()\n    {\n        return event;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the event to log.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1521", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.setEvent", "methodParameterType": "String#", "methodParameterName": "event#", "methodBody": "public void setEvent(String event)\n    {\n        this.event = event;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the event to log.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1522", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage()\n    {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the message to log.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1523", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueLogAction.java", "methodName": "org.asteriskjava.manager.action.QueueLogAction.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message)\n    {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the message to log.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1524", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MWIDeleteAction.java", "methodName": "org.asteriskjava.manager.action.MWIDeleteAction.MWIDeleteAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MWIDeleteAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new MWIDeleteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1525", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/VoicemailUsersListAction.java", "methodName": "org.asteriskjava.manager.action.VoicemailUsersListAction.VoicemailUsersListAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public VoicemailUsersListAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new VoicemailUsersListAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1526", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.AtxferAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtxferAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty AtxferAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1527", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.AtxferAction", "methodParameterType": "String#String#String#Integer#", "methodParameterName": "channel#context#exten#priority#", "methodBody": "public AtxferAction(String channel, String context, String exten, Integer priority)\n    {\n        this.channel = channel;\n        this.context = context;\n        this.exten = exten;\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AtxferAction that initiates an attended transfer of the given channel to the given context, extension, priority triple.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1528", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Atxfer\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Atxfer\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1529", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns name of the channel to transfer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1530", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets name of the channel to transfer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1531", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.getContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContext()\n    {\n        return context;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1532", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.setContext", "methodParameterType": "String#", "methodParameterName": "context#", "methodBody": "public void setContext(String context)\n    {\n        this.context = context;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1533", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.getExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExten()\n    {\n        return exten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1534", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.setExten", "methodParameterType": "String#", "methodParameterName": "exten#", "methodBody": "public void setExten(String exten)\n    {\n        this.exten = exten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1535", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPriority()\n    {\n        return priority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination priority.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1536", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AtxferAction.java", "methodName": "org.asteriskjava.manager.action.AtxferAction.setPriority", "methodParameterType": "Integer#", "methodParameterName": "priority#", "methodBody": "public void setPriority(Integer priority)\n    {\n        this.priority = priority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination priority.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1537", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MeetMeMuteAction.java", "methodName": "org.asteriskjava.manager.action.MeetMeMuteAction.MeetMeMuteAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MeetMeMuteAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty MeetMeMuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1538", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MeetMeMuteAction.java", "methodName": "org.asteriskjava.manager.action.MeetMeMuteAction.MeetMeMuteAction", "methodParameterType": "String#Integer#", "methodParameterName": "meetMe#userNum#", "methodBody": "public MeetMeMuteAction(String meetMe, Integer userNum)\n    {\n        super(meetMe, userNum);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MeetMeMuteAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1539", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/MeetMeMuteAction.java", "methodName": "org.asteriskjava.manager.action.MeetMeMuteAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"MeetMeMute\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"MeetMeMute\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1540", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PJSipShowEndpointsAction.java", "methodName": "org.asteriskjava.manager.action.PJSipShowEndpointsAction.PJSipShowEndpointsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PJSipShowEndpointsAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SipPeersAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1541", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PlayDtmfAction.java", "methodName": "org.asteriskjava.manager.action.PlayDtmfAction.PlayDtmfAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PlayDtmfAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty PlayDtmfAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1542", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PlayDtmfAction.java", "methodName": "org.asteriskjava.manager.action.PlayDtmfAction.PlayDtmfAction", "methodParameterType": "String#String#", "methodParameterName": "channel#digit#", "methodBody": "public PlayDtmfAction(String channel, String digit)\n    {\n        this.channel = channel;\n        this.digit = digit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PlayDtmfAction that sends the given DTMF digit to the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1543", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PlayDtmfAction.java", "methodName": "org.asteriskjava.manager.action.PlayDtmfAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"PlayDTMF\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"PlayDTMF\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1544", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PlayDtmfAction.java", "methodName": "org.asteriskjava.manager.action.PlayDtmfAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to send the digit to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1545", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PlayDtmfAction.java", "methodName": "org.asteriskjava.manager.action.PlayDtmfAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to send the digit to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1546", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PlayDtmfAction.java", "methodName": "org.asteriskjava.manager.action.PlayDtmfAction.getDigit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDigit()\n    {\n        return digit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the DTMF digit to play.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1547", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/PlayDtmfAction.java", "methodName": "org.asteriskjava.manager.action.PlayDtmfAction.setDigit", "methodParameterType": "String#", "methodParameterName": "digit#", "methodBody": "public void setDigit(String digit)\n    {\n        this.digit = digit;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the DTMF digit to play.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1548", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/FilterAction.java", "methodName": "org.asteriskjava.manager.action.FilterAction.FilterAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FilterAction()\n    {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new FilterAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1549", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/FilterAction.java", "methodName": "org.asteriskjava.manager.action.FilterAction.FilterAction", "methodParameterType": "String#", "methodParameterName": "filter#", "methodBody": "public FilterAction(String filter)\n    {\n        this.filter = filter;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FilterAction with the filter specified", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1550", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/FilterAction.java", "methodName": "org.asteriskjava.manager.action.FilterAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Filter\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Filter\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1551", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/FilterAction.java", "methodName": "org.asteriskjava.manager.action.FilterAction.getOperation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOperation()\n    {\n        return operation;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the filter operation which is \"Add\" by default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1552", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/FilterAction.java", "methodName": "org.asteriskjava.manager.action.FilterAction.getFilter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFilter()\n    {\n        return filter;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the filter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1553", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/FilterAction.java", "methodName": "org.asteriskjava.manager.action.FilterAction.setFilter", "methodParameterType": "String#", "methodParameterName": "filter#", "methodBody": "public void setFilter(String filter)\n    {\n        this.filter = filter;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the filter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1554", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentsAction.java", "methodName": "org.asteriskjava.manager.action.AgentsAction.AgentsAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AgentsAction()\n    {\n        \n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new AgentsAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1555", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgentsAction.java", "methodName": "org.asteriskjava.manager.action.AgentsAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"Agents\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Agents\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1556", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueResetAction.java", "methodName": "org.asteriskjava.manager.action.QueueResetAction.QueueResetAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueueResetAction()\n    {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new QueueResetAction that resets statistical data of all queues.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1557", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueResetAction.java", "methodName": "org.asteriskjava.manager.action.QueueResetAction.QueueResetAction", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public QueueResetAction(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueueResetAction that resets statistical data of the given queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1558", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueResetAction.java", "methodName": "org.asteriskjava.manager.action.QueueResetAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue to reset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1559", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueResetAction.java", "methodName": "org.asteriskjava.manager.action.QueueResetAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue to reset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1560", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueRemoveAction.java", "methodName": "org.asteriskjava.manager.action.QueueRemoveAction.QueueRemoveAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueueRemoveAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty QueueRemoveAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1561", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueRemoveAction.java", "methodName": "org.asteriskjava.manager.action.QueueRemoveAction.QueueRemoveAction", "methodParameterType": "String#String#", "methodParameterName": "queue#iface#", "methodBody": "public QueueRemoveAction(String queue, String iface)\n    {\n        this.queue = queue;\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueueRemoveAction that removes the member on the given interface from the given queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1562", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueRemoveAction.java", "methodName": "org.asteriskjava.manager.action.QueueRemoveAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"QueueRemove\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"QueueRemove\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1563", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueRemoveAction.java", "methodName": "org.asteriskjava.manager.action.QueueRemoveAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue the member will be removed from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1564", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueRemoveAction.java", "methodName": "org.asteriskjava.manager.action.QueueRemoveAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue the member will be removed from.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1565", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueRemoveAction.java", "methodName": "org.asteriskjava.manager.action.QueueRemoveAction.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the interface to remove.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1566", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueRemoveAction.java", "methodName": "org.asteriskjava.manager.action.QueueRemoveAction.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the interface to remove.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1567", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueSummaryAction.java", "methodName": "org.asteriskjava.manager.action.QueueSummaryAction.QueueSummaryAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueueSummaryAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new QueueSummaryAction that retrieves the summary for all queues.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1568", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueSummaryAction.java", "methodName": "org.asteriskjava.manager.action.QueueSummaryAction.QueueSummaryAction", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public QueueSummaryAction(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueueSummaryAction that retrieves the summary for the given queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1569", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueSummaryAction.java", "methodName": "org.asteriskjava.manager.action.QueueSummaryAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue to retrieve the summary for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1570", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueSummaryAction.java", "methodName": "org.asteriskjava.manager.action.QueueSummaryAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue to retrieve the summary for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1571", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/EventGeneratingAction.java", "methodName": "org.asteriskjava.manager.action.EventGeneratingAction.getActionCompleteEventClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Class<? extends ResponseEvent> getActionCompleteEventClass();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the event type that indicates that Asterisk is finished sending response events for this action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1572", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.QueuePauseAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueuePauseAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty QueuePauseAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1573", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.QueuePauseAction", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public QueuePauseAction(String iface)\n    {\n        this.iface = iface;\n        this.paused = Boolean.TRUE;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueuePauseAction that makes the member on the given interface unavailable on all queues.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1574", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.QueuePauseAction", "methodParameterType": "String#String#", "methodParameterName": "iface#queue#", "methodBody": "public QueuePauseAction(String iface, String queue)\n    {\n        this.iface = iface;\n        this.queue = queue;\n        this.paused = Boolean.TRUE;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueuePauseAction that makes the member on the given interface unavailable on the given queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1575", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.QueuePauseAction", "methodParameterType": "String#Boolean#", "methodParameterName": "iface#paused#", "methodBody": "public QueuePauseAction(String iface, Boolean paused)\n    {\n        this.iface = iface;\n        this.paused = paused;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueuePauseAction that makes the member on the given interface available or unavailable on all queues.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1576", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.QueuePauseAction", "methodParameterType": "String#String#Boolean#", "methodParameterName": "iface#queue#paused#", "methodBody": "public QueuePauseAction(String iface, String queue, Boolean paused)\n    {\n        this.iface = iface;\n        this.queue = queue;\n        this.paused = paused;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new QueuePauseAction that makes the member on the given interface unavailable on the given queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1577", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"QueuePause\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"QueuePause\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1578", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the interface of the member to make available or unavailable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1579", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the interface of the member to make available or unavailable.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1580", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue the member is made available or unavailable on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1581", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue the member is made available or unavailable on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1582", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.getPaused", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getPaused()\n    {\n        return paused;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the member is made available or unavailable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1583", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.setPaused", "methodParameterType": "Boolean#", "methodParameterName": "paused#", "methodBody": "public void setPaused(Boolean paused)\n    {\n        this.paused = paused;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if the member is made available or unavailable.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1584", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason()\n    {\n\treturn reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the local reason.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1585", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueuePauseAction.java", "methodName": "org.asteriskjava.manager.action.QueuePauseAction.setReason", "methodParameterType": "String#", "methodParameterName": "reason#", "methodBody": "public void setReason(String reason)\n    {\n\tthis.reason = reason;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the reason.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1586", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CoreStatusAction.java", "methodName": "org.asteriskjava.manager.action.CoreStatusAction.CoreStatusAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CoreStatusAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new CoreStatusAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1587", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/CoreStatusAction.java", "methodName": "org.asteriskjava.manager.action.CoreStatusAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"CoreStatus\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"CoreStatus\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1588", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbsoluteTimeoutAction.java", "methodName": "org.asteriskjava.manager.action.AbsoluteTimeoutAction.AbsoluteTimeoutAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AbsoluteTimeoutAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty AbsoluteTimeoutAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1589", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbsoluteTimeoutAction.java", "methodName": "org.asteriskjava.manager.action.AbsoluteTimeoutAction.AbsoluteTimeoutAction", "methodParameterType": "String#Integer#", "methodParameterName": "channel#timeout#", "methodBody": "public AbsoluteTimeoutAction(String channel, Integer timeout)\n    {\n        this.channel = channel;\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AbsoluteTimeoutAction with the given channel and timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1590", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbsoluteTimeoutAction.java", "methodName": "org.asteriskjava.manager.action.AbsoluteTimeoutAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"AbsoluteTimeout\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"AbsoluteTimeout\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1591", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbsoluteTimeoutAction.java", "methodName": "org.asteriskjava.manager.action.AbsoluteTimeoutAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1592", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbsoluteTimeoutAction.java", "methodName": "org.asteriskjava.manager.action.AbsoluteTimeoutAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1593", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbsoluteTimeoutAction.java", "methodName": "org.asteriskjava.manager.action.AbsoluteTimeoutAction.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the maximum duation of the call (in seconds) to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1594", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AbsoluteTimeoutAction.java", "methodName": "org.asteriskjava.manager.action.AbsoluteTimeoutAction.setTimeout", "methodParameterType": "Integer#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(Integer timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the the maximum duation of the call (in seconds) to set on channel.<p> Setting the timeout to 0 cancels the timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1595", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StatusAction.java", "methodName": "org.asteriskjava.manager.action.StatusAction.StatusAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StatusAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new StatusAction that retrieves the status of all channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1596", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StatusAction.java", "methodName": "org.asteriskjava.manager.action.StatusAction.StatusAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public StatusAction(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new StatusAction that retrieves the status of the given channel.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1597", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StatusAction.java", "methodName": "org.asteriskjava.manager.action.StatusAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Status\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Status\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1598", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StatusAction.java", "methodName": "org.asteriskjava.manager.action.StatusAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1599", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StatusAction.java", "methodName": "org.asteriskjava.manager.action.StatusAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1600", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StatusAction.java", "methodName": "org.asteriskjava.manager.action.StatusAction.setVariables", "methodParameterType": "String#", "methodParameterName": "variables#", "methodBody": "public void setVariables(String variables)\n    {\n        this.variables = variables;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the names of the channel variables to return for each reported channel.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1601", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StatusAction.java", "methodName": "org.asteriskjava.manager.action.StatusAction.setVariables", "methodParameterType": "List<String>#", "methodParameterName": "variables#", "methodBody": "public void setVariables(List<String> variables)\n    {\n        if (variables == null || variables.isEmpty())\n        {\n            this.variables = null;\n            return;\n        }\n\n        Iterator<String> iter = variables.iterator();\n        StringBuilder buffer = new StringBuilder(iter.next());\n        while (iter.hasNext())\n        {\n            buffer.append(\",\").append(iter.next());\n        }\n        this.variables = buffer.toString();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the names of the channel variables to return for each reported channel.<p> Available since Asterisk 1.6.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.util.Iterator.hasNext", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1602", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.LoginAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LoginAction()\n    {\n        \n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty LoginAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1603", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.LoginAction", "methodParameterType": "String#String#", "methodParameterName": "username#secret#", "methodBody": "public LoginAction(String username, String secret)\n    {\n        this.username = username;\n        this.secret = secret;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new LoginAction that performs a cleartext login.<p> You should not use cleartext login if you are concerned about security, using  {@link ChallengeAction} and login with a password hash instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1604", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.LoginAction", "methodParameterType": "String#String#String#", "methodParameterName": "username#authType#key#", "methodBody": "public LoginAction(String username, String authType, String key)\n    {\n        this.username = username;\n        this.authType = authType;\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new LoginAction that performs a login via challenge/response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1605", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.LoginAction", "methodParameterType": "String#String#String#String#", "methodParameterName": "username#authType#key#events#", "methodBody": "public LoginAction(String username, String authType, String key,\n            String events)\n    {\n        this.username = username;\n        this.authType = authType;\n        this.key = key;\n        this.events = events;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new LoginAction that performs a login via challenge/response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1606", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"Login\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"Login\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1607", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsername()\n    {\n        return username;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the username.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1608", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username)\n    {\n        this.username = username;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the username as configured in asterik's <code>manager.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1609", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.getSecret", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSecret()\n    {\n        return secret;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the secret.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1610", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.setSecret", "methodParameterType": "String#", "methodParameterName": "secret#", "methodBody": "public void setSecret(String secret)\n    {\n        this.secret = secret;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the secret to use when using cleartext login.<p> The secret contains the user's password as configured in Asterisk's <code>manager.conf</code>.<p> The secret and key properties are mutually exclusive.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1611", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.getAuthType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAuthType()\n    {\n        return authType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digest alogrithm when using challenge/response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1612", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.setAuthType", "methodParameterType": "String#", "methodParameterName": "authType#", "methodBody": "public void setAuthType(String authType)\n    {\n        this.authType = authType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digest alogrithm when using challenge/response.<p> The digest algorithm is used to create the key based on the challenge and the user's password.<p> Currently Asterisk supports only \"MD5\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1613", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Returns the key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1614", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param key The key to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1615", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.getEvents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEvents()\n    {\n        return events;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the event mask.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1616", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/LoginAction.java", "methodName": "org.asteriskjava.manager.action.LoginAction.setEvents", "methodParameterType": "String#", "methodParameterName": "events#", "methodBody": "public void setEvents(String events)\n    {\n        this.events = events;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the event mask.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1617", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ShowDialplanAction.java", "methodName": "org.asteriskjava.manager.action.ShowDialplanAction.ShowDialplanAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ShowDialplanAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new ShowDialplanAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1618", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.SetVarAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SetVarAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty SetVarAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1619", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.SetVarAction", "methodParameterType": "String#String#", "methodParameterName": "variable#value#", "methodBody": "public SetVarAction(String variable, String value)\n    {\n        this.variable = variable;\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetVarAction that sets the given global variable to a new value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1620", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.SetVarAction", "methodParameterType": "String#String#String#", "methodParameterName": "channel#variable#value#", "methodBody": "public SetVarAction(String channel, String variable, String value)\n    {\n        this.channel = channel;\n        this.variable = variable;\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SetVarAction that sets the given channel variable of the given channel to a new value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1621", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"SetVar\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SetVar\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1622", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1623", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1624", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.getVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariable()\n    {\n        return variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the variable to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1625", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.setVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public void setVariable(String variable)\n    {\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the variable to set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1626", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue()\n    {\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value to store.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1627", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SetVarAction.java", "methodName": "org.asteriskjava.manager.action.SetVarAction.setValue", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public void setValue(String value)\n    {\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value to store.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1628", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDialOffhookAction.java", "methodName": "org.asteriskjava.manager.action.ZapDialOffhookAction.ZapDialOffhookAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZapDialOffhookAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty ZapDialOffhookAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1629", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDialOffhookAction.java", "methodName": "org.asteriskjava.manager.action.ZapDialOffhookAction.ZapDialOffhookAction", "methodParameterType": "Integer#String#", "methodParameterName": "zapChannel#number#", "methodBody": "public ZapDialOffhookAction(Integer zapChannel, String number)\n    {\n        this.zapChannel = zapChannel;\n        this.number = number;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ZapDialOffhookAction that dials the given number on the given zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1630", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDialOffhookAction.java", "methodName": "org.asteriskjava.manager.action.ZapDialOffhookAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ZapDialOffhook\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ZapDialOffhook\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1631", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDialOffhookAction.java", "methodName": "org.asteriskjava.manager.action.ZapDialOffhookAction.getZapChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getZapChannel()\n    {\n        return zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1632", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDialOffhookAction.java", "methodName": "org.asteriskjava.manager.action.ZapDialOffhookAction.setZapChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setZapChannel(Integer channel)\n    {\n        this.zapChannel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the zap channel.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1633", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDialOffhookAction.java", "methodName": "org.asteriskjava.manager.action.ZapDialOffhookAction.getNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNumber()\n    {\n        return number;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number to dial.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1634", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDialOffhookAction.java", "methodName": "org.asteriskjava.manager.action.ZapDialOffhookAction.setNumber", "methodParameterType": "String#", "methodParameterName": "number#", "methodBody": "public void setNumber(String number)\n    {\n        this.number = number;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number to dial.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1635", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOffAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOffAction.ZapDndOffAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZapDndOffAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty ZapDndOffAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1636", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOffAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOffAction.ZapDndOffAction", "methodParameterType": "Integer#", "methodParameterName": "zapChannel#", "methodBody": "public ZapDndOffAction(Integer zapChannel)\n    {\n        this.zapChannel = zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ZapDndOffAction that disables \"Do Not Disturb\" status for the given zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1637", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOffAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOffAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"ZapDNDOff\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"ZapDNDOff\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1638", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOffAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOffAction.getZapChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getZapChannel()\n    {\n        return zapChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the zap channel to switch to dnd off.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1639", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ZapDndOffAction.java", "methodName": "org.asteriskjava.manager.action.ZapDndOffAction.setZapChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setZapChannel(Integer channel)\n    {\n        this.zapChannel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the zap channel to switch to dnd off.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1640", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SendTextAction.java", "methodName": "org.asteriskjava.manager.action.SendTextAction.SendTextAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SendTextAction()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new empty SendTextAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1641", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SendTextAction.java", "methodName": "org.asteriskjava.manager.action.SendTextAction.SendTextAction", "methodParameterType": "String#String#", "methodParameterName": "channel#message#", "methodBody": "public SendTextAction(String channel, String message)\n    {\n        super();\n        this.channel = channel;\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SendTextAction that sends the given message to the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1642", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SendTextAction.java", "methodName": "org.asteriskjava.manager.action.SendTextAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SendText\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SendText\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1643", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SendTextAction.java", "methodName": "org.asteriskjava.manager.action.SendTextAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to send the message to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1644", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SendTextAction.java", "methodName": "org.asteriskjava.manager.action.SendTextAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to send the message to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1645", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SendTextAction.java", "methodName": "org.asteriskjava.manager.action.SendTextAction.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage()\n    {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the message to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1646", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SendTextAction.java", "methodName": "org.asteriskjava.manager.action.SendTextAction.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message)\n    {\n        this.message = message;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the message to send.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1647", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMonitorAction.StopMonitorAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StopMonitorAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty StopMonitorAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1648", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMonitorAction.StopMonitorAction", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public StopMonitorAction(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new StopMonitorAction that ends monitoring of the given channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1649", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMonitorAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"StopMonitor\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"StopMonitor\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1650", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMonitorAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to end monitoring.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1651", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/StopMonitorAction.java", "methodName": "org.asteriskjava.manager.action.StopMonitorAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to end monitoring.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1652", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.SkypeAddBuddyAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeAddBuddyAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeAddBuddyAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1653", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.SkypeAddBuddyAction", "methodParameterType": "String#String#", "methodParameterName": "user#buddy#", "methodBody": "public SkypeAddBuddyAction(String user, String buddy)\n    {\n        this.user = user;\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeAddBuddyAction that adds the given buddy to the given Skype for Asterisk user's buddy list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1654", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.SkypeAddBuddyAction", "methodParameterType": "String#String#String#", "methodParameterName": "user#buddy#authMsg#", "methodBody": "public SkypeAddBuddyAction(String user, String buddy, String authMsg)\n    {\n        this.user = user;\n        this.buddy = buddy;\n        this.authMsg = authMsg;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeAddBuddyAction that adds the given buddy to the given Skype for Asterisk user's buddy list with a custom auth message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1655", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the Skype for Asterisk user.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1656", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.setUser", "methodParameterType": "String#", "methodParameterName": "user#", "methodBody": "public void setUser(String user)\n    {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the Skype for Asterisk user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1657", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.getBuddy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBuddy()\n    {\n        return buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1658", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.setBuddy", "methodParameterType": "String#", "methodParameterName": "buddy#", "methodBody": "public void setBuddy(String buddy)\n    {\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the buddy.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1659", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.getAuthMsg", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAuthMsg()\n    {\n        return authMsg;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the auth message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1660", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.setAuthMsg", "methodParameterType": "String#", "methodParameterName": "authMsg#", "methodBody": "public void setAuthMsg(String authMsg)\n    {\n        this.authMsg = authMsg;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the auth message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1661", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAddBuddyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAddBuddyAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeAddBuddy\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeAddBuddy\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1662", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChallengeAction.java", "methodName": "org.asteriskjava.manager.action.ChallengeAction.ChallengeAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ChallengeAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty ChallengeAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1663", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChallengeAction.java", "methodName": "org.asteriskjava.manager.action.ChallengeAction.ChallengeAction", "methodParameterType": "String#", "methodParameterName": "authType#", "methodBody": "public ChallengeAction(String authType)\n    {\n        this.authType = authType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ChallengeAction that requests a new login challenge for use with the given digest algorithm.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1664", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChallengeAction.java", "methodName": "org.asteriskjava.manager.action.ChallengeAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"Challenge\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns Returns the name of this action, i.e. \"Challenge\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1665", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChallengeAction.java", "methodName": "org.asteriskjava.manager.action.ChallengeAction.getAuthType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAuthType()\n    {\n        return authType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digest alogrithm to use.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1666", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/ChallengeAction.java", "methodName": "org.asteriskjava.manager.action.ChallengeAction.setAuthType", "methodParameterType": "String#", "methodParameterName": "authType#", "methodBody": "public void setAuthType(String authType)\n    {\n        this.authType = authType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the digest alogrithm to use. Currently asterisk only supports \"MD5\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1667", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.AgiAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AgiAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty AgiAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1668", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.AgiAction", "methodParameterType": "String#String#", "methodParameterName": "channel#command#", "methodBody": "public AgiAction(String channel, String command)\n    {\n        this.channel = channel;\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgiAction with channel and command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1669", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.AgiAction", "methodParameterType": "String#String#String#", "methodParameterName": "channel#command#commandId#", "methodBody": "public AgiAction(String channel, String command, String commandId)\n    {\n        this.channel = channel;\n        this.command = command;\n        this.commandId = commandId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new AgiAction with channel, command and commandId.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1670", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"AGI\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1671", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to execute the AGI command on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1672", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to execute the AGI command on.<p> The channel must be running the Async AGI application \"AGI(agi:async)\".<p> This property is required.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1673", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.getCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommand()\n    {\n        return command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AGI command to execute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1674", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.setCommand", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public void setCommand(String command)\n    {\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the AGI command to execute.<p> This property is required.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1675", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.getCommandId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommandId()\n    {\n        return commandId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the command id to track execution progress.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1676", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/AgiAction.java", "methodName": "org.asteriskjava.manager.action.AgiAction.setCommandId", "methodParameterType": "String#", "methodParameterName": "commandId#", "methodBody": "public void setCommandId(String commandId)\n    {\n        this.commandId = commandId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the command id to track execution progress.<p> This value will be sent back in the CommandID header of AsyncAGI exec event notifications.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1677", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueStatusAction.java", "methodName": "org.asteriskjava.manager.action.QueueStatusAction.QueueStatusAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public QueueStatusAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new QueueStatusAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1678", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueStatusAction.java", "methodName": "org.asteriskjava.manager.action.QueueStatusAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public String getAction()\n    {\n        return \"QueueStatus\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"QueueStatus\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1679", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueStatusAction.java", "methodName": "org.asteriskjava.manager.action.QueueStatusAction.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the queue filter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1680", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueStatusAction.java", "methodName": "org.asteriskjava.manager.action.QueueStatusAction.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the queue filter. If set QueueParamEvents are only generated for the given queue name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1681", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueStatusAction.java", "methodName": "org.asteriskjava.manager.action.QueueStatusAction.getMember", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMember()\n    {\n        return member;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the member filter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1682", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/QueueStatusAction.java", "methodName": "org.asteriskjava.manager.action.QueueStatusAction.setMember", "methodParameterType": "String#", "methodParameterName": "member#", "methodBody": "public void setMember(String member)\n    {\n        this.member = member;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the member filter. If set QueueMemberEvents are only generated for the given member name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1683", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAccountPropertyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAccountPropertyAction.SkypeAccountPropertyAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SkypeAccountPropertyAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeAccountPropertyAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1684", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAccountPropertyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAccountPropertyAction.SkypeAccountPropertyAction", "methodParameterType": "String#Map<String,String>#", "methodParameterName": "user#variables#", "methodBody": "public SkypeAccountPropertyAction(String user, Map<String, String> variables)\n    {\n        this.user = user;\n        setVariables(variables);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SkypeAccountPropertyAction that sets the given properties for the given Skype for Asterisk user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1685", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAccountPropertyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAccountPropertyAction.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the Skype for Asterisk user.<p> This property is mandatory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1686", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAccountPropertyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAccountPropertyAction.setUser", "methodParameterType": "String#", "methodParameterName": "user#", "methodBody": "public void setUser(String user)\n    {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the Skype for Asterisk user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1687", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAccountPropertyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAccountPropertyAction.setLanguage", "methodParameterType": "String#", "methodParameterName": "language#", "methodBody": "public void setLanguage(String language)\n    {\n        variables.put(PROPERTY_LANGUAGE, language);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the ISO language code.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1688", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAccountPropertyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAccountPropertyAction.setCountry", "methodParameterType": "String#", "methodParameterName": "country#", "methodBody": "public void setCountry(String country)\n    {\n        variables.put(PROPERTY_COUNTRY, country);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the country code.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1689", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/SkypeAccountPropertyAction.java", "methodName": "org.asteriskjava.manager.action.SkypeAccountPropertyAction.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAction()\n    {\n        return \"SkypeAccountProperty\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this action, i.e. \"SkypeAccountProperty\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1690", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbGetAction.java", "methodName": "org.asteriskjava.manager.action.DbGetAction.DbGetAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DbGetAction()\n    {\n\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Creates a new empty DbGetAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1691", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbGetAction.java", "methodName": "org.asteriskjava.manager.action.DbGetAction.DbGetAction", "methodParameterType": "String#String#", "methodParameterName": "family#key#", "methodBody": "public DbGetAction(String family, String key)\n    {\n        this.family = family;\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DbGetAction that retrieves the value of the database entry with the given key in the given family.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1692", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbGetAction.java", "methodName": "org.asteriskjava.manager.action.DbGetAction.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1693", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbGetAction.java", "methodName": "org.asteriskjava.manager.action.DbGetAction.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1694", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbGetAction.java", "methodName": "org.asteriskjava.manager.action.DbGetAction.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the key of the entry to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1695", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/action/DbGetAction.java", "methodName": "org.asteriskjava.manager.action.DbGetAction.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key of the entry to retrieve.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1696", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CommandResponse.java", "methodName": "org.asteriskjava.manager.response.CommandResponse.getPrivilege", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPrivilege()\n    {\n        return privilege;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AMI authorization class of this response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1697", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CommandResponse.java", "methodName": "org.asteriskjava.manager.response.CommandResponse.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getResult()\n    {\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a List of strings representing the lines returned by the CLI command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1698", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CommandResponse.java", "methodName": "org.asteriskjava.manager.response.CommandResponse.setResult", "methodParameterType": "List<String>#", "methodParameterName": "result#", "methodBody": "public void setResult(List<String> result)\n    {\n        this.result = result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1699", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/GetConfigResponse.java", "methodName": "org.asteriskjava.manager.response.GetConfigResponse.getCategories", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<Integer, String> getCategories()\n    {\n        if (categories == null)\n        {\n            categories = new TreeMap<>();\n        }\n\n        Map<String, Object> responseMap = super.getAttributes();\n        for (Entry<String, Object> response : responseMap.entrySet())\n        {\n            String key = response.getKey();\n            if (key.toLowerCase(Locale.US).contains(\"category\"))\n            {\n                String[] keyParts = key.split(\"-\");\n\n                // if it doesn't have at least category-XXXXXX, skip\n                if (keyParts.length < 2)\n                    continue;\n\n                // try to get the number of this category, skip if we mess up\n                Integer categoryNumber;\n                try\n                {\n                    categoryNumber = Integer.parseInt(keyParts[1]);\n                }\n                catch (Exception exception)\n                {\n                    continue;\n                }\n\n                categories.put(categoryNumber, (String) response.getValue());\n            }\n        }\n\n        return categories;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ContinueStatement#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ContinueStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(ContinueStatement)ContinueStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ContinueStatement)ContinueStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the map of category numbers to category names.", "call_func_name": ["java.util.TreeMap.<init>", "org.asteriskjava.manager.response.ManagerResponse.getAttributes", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.toLowerCase", "java.lang.String.contains", "java.lang.String.split", "java.lang.Integer.parseInt", "java.lang.Integer.valueOf", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.util.Locale"], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.String"], ["int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.asteriskjava.manager.response.ManagerResponse.getAttributes": "Returns a Map with all attributes of this response. <p> The keys are all lower case!"}]}, {"index": "1700", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/GetConfigResponse.java", "methodName": "org.asteriskjava.manager.response.GetConfigResponse.getLines", "methodParameterType": "int#", "methodParameterName": "categoryNumber#", "methodBody": "public Map<Integer, String> getLines(int categoryNumber)\n    {\n        if (lines == null)\n        {\n            lines = new TreeMap<>();\n        }\n\n        Map<String, Object> responseMap = super.getAttributes();\n        for (Entry<String, Object> response : responseMap.entrySet())\n        {\n            String key = response.getKey();\n            if (key.toLowerCase(Locale.US).contains(\"line\"))\n            {\n                String[] keyParts = key.split(\"-\");\n\n                // if it doesn't have at least line-XXXXXX-XXXXXX, skip\n                if (keyParts.length < 3)\n                {\n                    continue;\n                }\n\n                // try to get the number of this category, skip if we mess up\n                Integer potentialCategoryNumber;\n                try\n                {\n                    potentialCategoryNumber = Integer.parseInt(keyParts[1]);\n                }\n                catch (Exception exception)\n                {\n                    continue;\n                }\n\n                // try to get the number of this line, skip if we mess up\n                Integer potentialLineNumber;\n                try\n                {\n                    potentialLineNumber = Integer.parseInt(keyParts[2]);\n                }\n                catch (Exception exception)\n                {\n                    continue;\n                }\n\n                // get the List out for placing stuff in\n                Map<Integer, String> linesForCategory = lines.get(potentialCategoryNumber);\n                if (linesForCategory == null)\n                {\n                    linesForCategory = new TreeMap<>();\n                }\n\n                // put the line we just parsed into the line map for this category\n                linesForCategory.put(potentialLineNumber, (String) response.getValue());\n                if (!lines.containsKey(potentialCategoryNumber))\n                {\n                    lines.put(potentialCategoryNumber, linesForCategory);\n                }\n            }\n        }\n\n        return lines.get(categoryNumber);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ContinueStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ContinueStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ContinueStatement)ContinueStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ContinueStatement)ContinueStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the map of line number to line value for a given category.", "call_func_name": ["java.util.TreeMap.<init>", "org.asteriskjava.manager.response.ManagerResponse.getAttributes", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.toLowerCase", "java.lang.String.contains", "java.lang.String.split", "java.lang.Integer.parseInt", "java.lang.Integer.valueOf", "java.util.Map.get", "java.util.Map.put", "java.util.Map.containsKey"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.util.Locale"], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.String"], ["int"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.manager.response.ManagerResponse.getAttributes": "Returns a Map with all attributes of this response. <p> The keys are all lower case!"}]}, {"index": "1701", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreSettingsResponse.java", "methodName": "org.asteriskjava.manager.response.CoreSettingsResponse.getAmiVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAmiVersion()\n    {\n        return amiVersion;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the version of the Asterisk Manager Interface (AMI). For Asterisk 1.6 this is \"1.1\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1702", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreSettingsResponse.java", "methodName": "org.asteriskjava.manager.response.CoreSettingsResponse.getAsteriskVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAsteriskVersion()\n    {\n        return asteriskVersion;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the version of the Asterisk server. For example \"1.6.0-beta9\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1703", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreSettingsResponse.java", "methodName": "org.asteriskjava.manager.response.CoreSettingsResponse.isCoreRealtimeEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isCoreRealtimeEnabled()\n    {\n        return coreRealtimeEnabled != null && coreRealtimeEnabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the realtime subsystem is enabled.", "call_func_name": ["java.lang.Boolean.booleanValue"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1704", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreSettingsResponse.java", "methodName": "org.asteriskjava.manager.response.CoreSettingsResponse.isCoreCdrEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isCoreCdrEnabled()\n    {\n        return coreCdrEnabled != null && coreCdrEnabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the CDR (call detail records) subsystem is enabled.", "call_func_name": ["java.lang.Boolean.booleanValue"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1705", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreSettingsResponse.java", "methodName": "org.asteriskjava.manager.response.CoreSettingsResponse.isCoreHttpEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isCoreHttpEnabled()\n    {\n        return coreHttpEnabled != null && coreHttpEnabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the HTTP subsystem is enabled.", "call_func_name": ["java.lang.Boolean.booleanValue"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1706", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getAttributes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> getAttributes()\n    {\n        return attributes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Map with all attributes of this response. <p> The keys are all lower case!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1707", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setAttributes", "methodParameterType": "Map<String,Object>#", "methodParameterName": "attributes#", "methodBody": "public void setAttributes(Map<String, Object> attributes)\n    {\n        this.attributes = attributes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Map with all attributes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1708", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getAttribute", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public String getAttribute(String key)\n    {\n        return (String) attributes.get(key.toLowerCase(Locale.ENGLISH));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the attribute with the given key. <p> This is particulary important when a response contains special attributes that are dependent on the action that has been sent. <p> An example of this is the response to the GetVarAction. It contains the value of the channel variable as an attribute stored under the key of the variable name. <p> Example: <pre> GetVarAction action = new GetVarAction(); action.setChannel(\"SIP/1310-22c3\"); action.setVariable(\"ALERT_INFO\"); ManagerResponse response = connection.sendAction(action); String alertInfo = response.getAttribute(\"ALERT_INFO\"); </pre> As all attributes are internally stored in lower case the key is automatically converted to lower case before lookup.", "call_func_name": ["java.lang.String.toLowerCase", "java.util.Map.get"], "call_func_parameter": [["java.util.Locale"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1709", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getDateReceived", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getDateReceived()\n    {\n        return dateReceived;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the point in time this response was received from the asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1710", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setDateReceived", "methodParameterType": "Date#", "methodParameterName": "dateReceived#", "methodBody": "public void setDateReceived(Date dateReceived)\n    {\n        this.dateReceived = dateReceived;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the point in time this response was received from the asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1711", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getActionId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getActionId()\n    {\n        return actionId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the user provided action id of the ManagerAction that caused this response. If the application did not set an action id this method returns <code>null</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1712", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getServer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getServer()\n    {\n        return server;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the Asterisk server from which this response has been received. <br> This property is only available when using to AstManProxy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1713", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setServer", "methodParameterType": "String#", "methodParameterName": "server#", "methodBody": "public final void setServer(String server)\n    {\n        this.server = server;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the Asterisk server from which this response has been received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1714", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getEventList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventList()\n    {\n        return eventList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sent for manager events that reply with a list of events.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1715", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setEventList", "methodParameterType": "String#", "methodParameterName": "eventList#", "methodBody": "public void setEventList(String eventList)\n    {\n        this.eventList = eventList;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the eventList.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1716", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setActionId", "methodParameterType": "String#", "methodParameterName": "actionId#", "methodBody": "public void setActionId(String actionId)\n    {\n        this.actionId = actionId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the action id of the ManagerAction that caused this response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1717", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage()\n    {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the message received with this response. The content depends on the action that generated this response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1718", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message)\n    {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1719", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResponse()\n    {\n        return response;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the \"Response:\" line. This typically a String like \"Success\" or \"Error\" but depends on the action that generated this response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1720", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setResponse", "methodParameterType": "String#", "methodParameterName": "response#", "methodBody": "public void setResponse(String response)\n    {\n        this.response = response;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1721", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id received with this response. The unique id is used to keep track of channels created by the action sent, for example an OriginateAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1722", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerResponse.java", "methodName": "org.asteriskjava.manager.response.ManagerResponse.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id received with this response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1723", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxCountResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxCountResponse.getMailbox", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMailbox()\n    {\n        return mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1724", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxCountResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxCountResponse.setMailbox", "methodParameterType": "String#", "methodParameterName": "mailbox#", "methodBody": "public void setMailbox(String mailbox)\n    {\n        this.mailbox = mailbox;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1725", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxCountResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxCountResponse.getNewMessages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getNewMessages()\n    {\n        return newMessages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of new messages in the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1726", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxCountResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxCountResponse.setNewMessages", "methodParameterType": "Integer#", "methodParameterName": "newMessages#", "methodBody": "public void setNewMessages(Integer newMessages)\n    {\n        this.newMessages = newMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of new messages in the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1727", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxCountResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxCountResponse.getOldMessages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getOldMessages()\n    {\n        return oldMessages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of old messages in the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1728", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxCountResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxCountResponse.setOldMessages", "methodParameterType": "Integer#", "methodParameterName": "oldMessages#", "methodBody": "public void setOldMessages(Integer oldMessages)\n    {\n        this.oldMessages = oldMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of old messages in the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1729", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/GetVarResponse.java", "methodName": "org.asteriskjava.manager.response.GetVarResponse.getVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariable()\n    {\n        return variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the requested variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1730", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/GetVarResponse.java", "methodName": "org.asteriskjava.manager.response.GetVarResponse.setVariable", "methodParameterType": "String#", "methodParameterName": "variable#", "methodBody": "public void setVariable(String variable)\n    {\n        this.variable = variable;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the requested variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1731", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/GetVarResponse.java", "methodName": "org.asteriskjava.manager.response.GetVarResponse.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue()\n    {\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the requested variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1732", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/GetVarResponse.java", "methodName": "org.asteriskjava.manager.response.GetVarResponse.setValue", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public void setValue(String value)\n    {\n        this.value = value;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the requested variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1733", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ManagerError.java", "methodName": "org.asteriskjava.manager.response.ManagerError.ManagerError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ManagerError()\n    {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new ManagerError.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1734", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ModuleCheckResponse.java", "methodName": "org.asteriskjava.manager.response.ModuleCheckResponse.getVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVersion()\n    {\n        return version;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the version (svn revision) of the module.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1735", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreReloadTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCoreReloadTime()\n    {\n        return coreReloadTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time the server (core module) was last reloaded. The format is %H:%M:%S.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1736", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreReloadDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCoreReloadDate()\n    {\n        return coreReloadDate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the server (core module) was last reloaded. The format is Y-%m-%d.<p> Available since Asterisk 1.6.3", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1737", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreReloadDateTimeAsDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getCoreReloadDateTimeAsDate()\n    {\n        return getCoreReloadDateTimeAsDate(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the and time the server (core module) was last reloaded.<p> If either the date or time property is <code>null</code> (e.g. on Asterisk prior to 1.6.3) this method returns <code>null</code>.", "call_func_name": ["org.asteriskjava.manager.response.CoreStatusResponse.getCoreReloadDateTimeAsDate"], "call_func_parameter": [["java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.manager.response.CoreStatusResponse.getCoreReloadDateTimeAsDate": "Returns the date the server (core module) was last reloaded.<p> If either the date or time property is <code>null</code> (e.g. on Asterisk prior to 1.6.3) this method returns <code>null</code>."}]}, {"index": "1738", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreReloadDateTimeAsDate", "methodParameterType": "TimeZone#", "methodParameterName": "tz#", "methodBody": "public Date getCoreReloadDateTimeAsDate(TimeZone tz)\n    {\n        if (coreReloadDate == null || coreReloadTime == null)\n        {\n            return null;\n        }\n\n        return DateUtil.parseDateTime(coreReloadDate + \" \" + coreReloadTime, tz);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the server (core module) was last reloaded.<p> If either the date or time property is <code>null</code> (e.g. on Asterisk prior to 1.6.3) this method returns <code>null</code>.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the given time zone."}]}, {"index": "1739", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreStartupDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCoreStartupDate()\n    {\n        return coreStartupDate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the server was started. The format is Y-%m-%d.<p> Available since Asterisk 1.6.3", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1740", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreStartupTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCoreStartupTime()\n    {\n        return coreStartupTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time the server was started. The format is %H:%M:%S.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1741", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreStartupDateTimeAsDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getCoreStartupDateTimeAsDate()\n    {\n        return getCoreStartupDateTimeAsDate(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date and time the server was started.<p> If either the date or time property is <code>null</code> (e.g. on Asterisk prior to 1.6.3) this method returns <code>null</code>.", "call_func_name": ["org.asteriskjava.manager.response.CoreStatusResponse.getCoreStartupDateTimeAsDate"], "call_func_parameter": [["java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.manager.response.CoreStatusResponse.getCoreStartupDateTimeAsDate": "Returns the date and time the server was started.<p> If either the date or time property is <code>null</code> (e.g. on Asterisk prior to 1.6.3) this method returns <code>null</code>."}]}, {"index": "1742", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreStartupDateTimeAsDate", "methodParameterType": "TimeZone#", "methodParameterName": "tz#", "methodBody": "public Date getCoreStartupDateTimeAsDate(TimeZone tz)\n    {\n        if (coreStartupDate == null || coreStartupTime == null)\n        {\n            return null;\n        }\n\n        return DateUtil.parseDateTime(coreStartupDate + \" \" + coreStartupTime, tz);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date and time the server was started.<p> If either the date or time property is <code>null</code> (e.g. on Asterisk prior to 1.6.3) this method returns <code>null</code>.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the given time zone."}]}, {"index": "1743", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/CoreStatusResponse.java", "methodName": "org.asteriskjava.manager.response.CoreStatusResponse.getCoreCurrentCalls", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCoreCurrentCalls()\n    {\n        return coreCurrentCalls;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of currently active channels on the server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1744", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxStatusResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxStatusResponse.getMailbox", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMailbox()\n    {\n        return mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the names of the mailboxes, separated by \",\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1745", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxStatusResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxStatusResponse.setMailbox", "methodParameterType": "String#", "methodParameterName": "mailbox#", "methodBody": "public void setMailbox(String mailbox)\n    {\n        this.mailbox = mailbox;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the names of the mailboxes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1746", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxStatusResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxStatusResponse.getWaiting", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getWaiting()\n    {\n        return waiting;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns Boolean.TRUE if at least one of the given mailboxes contains new messages; Boolean.FALSE otherwise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1747", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MailboxStatusResponse.java", "methodName": "org.asteriskjava.manager.response.MailboxStatusResponse.setWaiting", "methodParameterType": "Boolean#", "methodParameterName": "waiting#", "methodBody": "public void setWaiting(Boolean waiting)\n    {\n        this.waiting = waiting;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to Boolean.TRUE if at least one of the mailboxes contains new messages; Boolean.FALSE otherwise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1748", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/ChallengeResponse.java", "methodName": "org.asteriskjava.manager.response.ChallengeResponse.getChallenge", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChallenge()\n    {\n        return challenge;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the challenge to use when creating the key for log in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1749", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MixMonitorResponse.java", "methodName": "org.asteriskjava.manager.response.MixMonitorResponse.getMixMonitorId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMixMonitorId()\n    {\n        return mixMonitorId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ID of the MixMonitor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1750", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/MixMonitorResponse.java", "methodName": "org.asteriskjava.manager.response.MixMonitorResponse.setMixMonitorId", "methodParameterType": "String#", "methodParameterName": "mixMonitorId#", "methodBody": "public void setMixMonitorId(String mixMonitorId)\n    {\n        this.mixMonitorId = mixMonitorId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the ID of the MixMonitor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1751", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/SkypeBuddyResponse.java", "methodName": "org.asteriskjava.manager.response.SkypeBuddyResponse.getLanguage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLanguage()\n    {\n        return language;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ISO language code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1752", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/SkypeBuddyResponse.java", "methodName": "org.asteriskjava.manager.response.SkypeBuddyResponse.setLanguage", "methodParameterType": "String#", "methodParameterName": "language#", "methodBody": "public void setLanguage(String language)\n    {\n        this.language = language;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the ISO language code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1753", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/SkypeBuddyResponse.java", "methodName": "org.asteriskjava.manager.response.SkypeBuddyResponse.getCountry", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCountry()\n    {\n        return country;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ISO country code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1754", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/SkypeBuddyResponse.java", "methodName": "org.asteriskjava.manager.response.SkypeBuddyResponse.setCountry", "methodParameterType": "String#", "methodParameterName": "country#", "methodBody": "public void setCountry(String country)\n    {\n        this.country = country;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the country code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1755", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/SkypeLicenseStatusResponse.java", "methodName": "org.asteriskjava.manager.response.SkypeLicenseStatusResponse.getCallsLicensed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCallsLicensed()\n    {\n        return callsLicensed;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the total number of concurrent Skype calls currently licenced for this system.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1756", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/SkypeLicenseStatusResponse.java", "methodName": "org.asteriskjava.manager.response.SkypeLicenseStatusResponse.setCallsLicensed", "methodParameterType": "Integer#", "methodParameterName": "callsLicensed#", "methodBody": "public void setCallsLicensed(Integer callsLicensed)\n    {\n        this.callsLicensed = callsLicensed;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the total number of concurrent Skype calls currently licenced for this system.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1757", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/PingResponse.java", "methodName": "org.asteriskjava.manager.response.PingResponse.getPing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPing()\n    {\n        return ping;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns always \"Pong\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1758", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/response/PingResponse.java", "methodName": "org.asteriskjava.manager.response.PingResponse.getTimestamp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTimestamp()\n    {\n        return timestamp;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Timestamp for the response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1759", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerEventListener.java", "methodName": "org.asteriskjava.manager.ManagerEventListener.onManagerEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "void onManagerEvent(ManagerEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method is called when an event is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1760", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.PingThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PingThread()\n    {\n        super();\n        this.connections = new HashSet<>();\n        this.die = false;\n        long id = idCounter.getAndIncrement();\n        setName(\"Asterisk-Java Ping-\" + id);\n        setDaemon(true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PingThread. Use  {@link #addConnection(ManagerConnection)} to add connectionsthat will be pinged.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1761", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.PingThread", "methodParameterType": "ManagerConnection#", "methodParameterName": "connection#", "methodBody": "public PingThread(ManagerConnection connection)\n    {\n        this();\n        this.connections.add(connection);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation)ConstructorInvocation(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PingThread that uses the given ManagerConnection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1762", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.setInterval", "methodParameterType": "long#", "methodParameterName": "interval#", "methodBody": "public void setInterval(long interval)\n    {\n        this.interval = interval;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adjusts how often a PingAction is sent. <br> Default is 20000ms, i.e. 20 seconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1763", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.setTimeout", "methodParameterType": "long#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(long timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the timeout to wait for the ManagerResponse before throwing an excpetion. <br> If set to 0 the response will be ignored an no exception will be thrown at all. <br> Default is 0.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1764", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.addConnection", "methodParameterType": "ManagerConnection#", "methodParameterName": "connection#", "methodBody": "public void addConnection(ManagerConnection connection)\n    {\n        synchronized (connections)\n        {\n            connections.add(connection);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Adds a connection to the list of pinged connections.", "call_func_name": ["java.util.Set.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1765", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.removeConnection", "methodParameterType": "ManagerConnection#", "methodParameterName": "connection#", "methodBody": "public void removeConnection(ManagerConnection connection)\n    {\n        synchronized (connections)\n        {\n            connections.remove(connection);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Removes a connection from the list of pinged connections.", "call_func_name": ["java.util.Set.remove"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1766", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.die", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void die()\n    {\n        this.die = true;\n        interrupt();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Terminates this PingThread.", "call_func_name": ["org.asteriskjava.manager.PingThread.interrupt"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1767", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/PingThread.java", "methodName": "org.asteriskjava.manager.PingThread.ping", "methodParameterType": "ManagerConnection#", "methodParameterName": "c#", "methodBody": "protected void ping(ManagerConnection c)\n    {\n        try\n        {\n            if (timeout <= 0)\n            {\n                c.sendAction(new PingAction(), null);\n            }\n            else\n            {\n                final ManagerResponse response;\n\n                response = c.sendAction(new PingAction(), timeout);\n                logger.debug(\"Ping response '\" + response + \"' for \" + c.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            logger.warn(\"Exception on sending Ping to \" + c.toString(), e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#NullLiteral#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sends a ping to Asterisk and logs any errors that may occur.", "call_func_name": ["org.asteriskjava.manager.action.PingAction.<init>", "org.asteriskjava.manager.ManagerConnection.sendAction", "org.asteriskjava.manager.ManagerConnection.sendAction", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.Object.toString", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], ["org.asteriskjava.manager.action.ManagerAction", "org.asteriskjava.manager.SendActionCallback"], ["org.asteriskjava.manager.action.ManagerAction", "long"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.manager.ManagerConnection.sendAction": "Sends a ManagerAction to the Asterisk server and registers a callback handler to be called when the corresponding  {@link ManagerResponse} isreceived. Be very careful that your callbackHandler terminates very quickly and does not do any fancy processing because it is called from the reader thread which is blocked for the time it takes to execute your callbackHandler."}, {"org.asteriskjava.manager.ManagerConnection.sendAction": "Sends a ManagerAction to the Asterisk server and waits for the corresponding  {@link ManagerResponse}."}]}, {"index": "1768", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnectionFactory.java", "methodName": "org.asteriskjava.manager.ManagerConnectionFactory.ManagerConnectionFactory", "methodParameterType": "String#String#String#", "methodParameterName": "hostname#username#password#", "methodBody": "public ManagerConnectionFactory(String hostname, String username, String password)\n    {\n        this.hostname = hostname;\n        this.port = DEFAULT_PORT;\n        this.username = username;\n        this.password = password;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ManagerConnectionFactory with the given connection data and the default port 5038.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1769", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnectionFactory.java", "methodName": "org.asteriskjava.manager.ManagerConnectionFactory.ManagerConnectionFactory", "methodParameterType": "String#int#String#String#", "methodParameterName": "hostname#port#username#password#", "methodBody": "public ManagerConnectionFactory(String hostname, int port, String username, String password)\n    {\n        this.hostname = hostname;\n        this.port = port;\n        this.username = username;\n        this.password = password;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ManagerConnectionFactory with the given connection data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1770", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnectionFactory.java", "methodName": "org.asteriskjava.manager.ManagerConnectionFactory.createManagerConnection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ManagerConnection createManagerConnection()\n    {\n        return new DefaultManagerConnection(hostname, port, username, password);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a new ManagerConnection in state  {@link ManagerConnectionState#CONNECTED}.", "call_func_name": ["org.asteriskjava.manager.DefaultManagerConnection.<init>"], "call_func_parameter": [["java.lang.String", "int", "java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1771", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnectionFactory.java", "methodName": "org.asteriskjava.manager.ManagerConnectionFactory.createSecureManagerConnection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ManagerConnection createSecureManagerConnection()\n    {\n        DefaultManagerConnection dmc;\n        dmc = new DefaultManagerConnection(hostname, port, username, password);\n        dmc.setSsl(true);\n        return dmc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a new SSL secured ManagerConnection in state  {@link ManagerConnectionState#CONNECTED}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1772", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/TimeoutException.java", "methodName": "org.asteriskjava.manager.TimeoutException.TimeoutException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public TimeoutException(final String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new TimeoutException with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1773", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getHostname", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getHostname();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the hostname of the connected Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1774", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getPort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Manager API port of the connected Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1775", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUsername();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the username to use to connect to the Asterisk server. This is the username specified in Asterisk's <code>manager.conf</code> file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1776", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getPassword", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getPassword();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the password to use to connect to the Asterisk server. This is the username specified in Asterisk's <code>manager.conf</code> file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1777", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsteriskVersion getVersion();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the version of Asterisk running in the server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1778", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.setEncoding", "methodParameterType": "Charset#", "methodParameterName": "encoding#", "methodBody": "void setEncoding(Charset encoding);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the encoding to use to connect to the Asterisk server (eg. important for manager/user events). All connections should use the same encoding. The default is UTF-8.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1779", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getEncoding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Charset getEncoding();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the encoding to use to connect to the Asterisk server (eg. important for manager/user events). All connections should use the same encoding. The default is UTF-8.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1780", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.isSsl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isSsl();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns whether to use SSL. <p> Default is false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1781", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getLocalAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetAddress getLocalAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the local address of the underlying socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1782", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getLocalPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getLocalPort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the local port of the underlying socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1783", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getRemoteAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetAddress getRemoteAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the remote address of the underlying socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1784", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getRemotePort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getRemotePort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the remote port of the underlying socket connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1785", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.registerUserEventClass", "methodParameterType": "Class<? extends ManagerEvent>#", "methodParameterName": "userEventClass#", "methodBody": "void registerUserEventClass(Class< ? extends ManagerEvent> userEventClass);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Registers a new user event type. <p> Asterisk allows you to send custom events via the UserEvent application. If you choose to send such events you can extend the abstract class UserEvent provide a name for your new event and optionally add your own attributes. After registering a user event type Asterisk-Java will handle such events the same way it handles the internal events and inform your registered event handlers. <p> Note: If you write your own Asterisk applications that use Asterisk's <code>manager_event()</code> function directly and don't use the channel and uniqueid attributes provided by UserEvent you can also register events that directly subclass  {@link ManagerEvent}. <p> The event class must be a concrete class with a default constructor (one that takes no arguments).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1786", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.setSocketTimeout", "methodParameterType": "int#", "methodParameterName": "socketTimeout#", "methodBody": "void setSocketTimeout(int socketTimeout);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The timeout to use when connecting the the Asterisk server. <p> Default is 0, that is using Java's built-in default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1787", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.setSocketReadTimeout", "methodParameterType": "int#", "methodParameterName": "socketReadTimeout#", "methodBody": "void setSocketReadTimeout(int socketReadTimeout);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Connection is dropped (and restarted) if it stales on read longer than the timeout. <p> If you set this property to a non zero value be sure to also use a {@link PingThread} or somthing similar to make sure there is some networktraffic, otherwise you will encounter lots of unexpected reconnects. The read timeout should be at least twice the interval set for the PingThread. <p> Default is 0, that is no read timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1788", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.setKeepAliveAfterAuthenticationFailure", "methodParameterType": "boolean#", "methodParameterName": "keepAliveAfterAuthenticationFailure#", "methodBody": "void setKeepAliveAfterAuthenticationFailure(boolean keepAliveAfterAuthenticationFailure);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set to <code>true</code> to try reconnecting to ther asterisk serve even if the reconnection attempt threw an AuthenticationFailedException. <br> Default is <code>true</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1789", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.login", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void login() throws IllegalStateException, IOException, AuthenticationFailedException, TimeoutException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Logs in to the Asterisk server with the username and password specified when this connection was created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1790", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.login", "methodParameterType": "String#", "methodParameterName": "events#", "methodBody": "void login(String events) throws IllegalStateException, IOException, AuthenticationFailedException, TimeoutException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Logs in to the Asterisk server with the username and password specified when this connection was created and a given event mask.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1791", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.logoff", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void logoff() throws IllegalStateException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a LogoffAction to the Asterisk server and disconnects.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1792", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getProtocolIdentifier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getProtocolIdentifier();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the protocol identifier, that is a string like \"Asterisk Call Manager/1.0\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1793", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ManagerConnectionState getState();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the lifecycle status of this connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1794", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.sendAction", "methodParameterType": "ManagerAction#", "methodParameterName": "action#", "methodBody": "ManagerResponse sendAction(ManagerAction action)\n            throws IOException, TimeoutException, IllegalArgumentException, IllegalStateException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a ManagerAction to the Asterisk server and waits for the corresponding ManagerResponse.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1795", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.sendAction", "methodParameterType": "ManagerAction#long#", "methodParameterName": "action#timeout#", "methodBody": "ManagerResponse sendAction(ManagerAction action, long timeout)\n            throws IOException, TimeoutException, IllegalArgumentException, IllegalStateException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a ManagerAction to the Asterisk server and waits for the corresponding  {@link ManagerResponse}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1796", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.sendAction", "methodParameterType": "ManagerAction#SendActionCallback#", "methodParameterName": "action#callback#", "methodBody": "void sendAction(ManagerAction action, SendActionCallback callback)\n            throws IOException, IllegalArgumentException, IllegalStateException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a ManagerAction to the Asterisk server and registers a callback handler to be called when the corresponding  {@link ManagerResponse} isreceived. Be very careful that your callbackHandler terminates very quickly and does not do any fancy processing because it is called from the reader thread which is blocked for the time it takes to execute your callbackHandler.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1797", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.sendEventGeneratingAction", "methodParameterType": "EventGeneratingAction#", "methodParameterName": "action#", "methodBody": "ResponseEvents sendEventGeneratingAction(EventGeneratingAction action)\n            throws IOException, EventTimeoutException, IllegalArgumentException, IllegalStateException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends an  {@link EventGeneratingAction} to the Asterisk server and waitsfor the corresponding  {@link ManagerResponse} and the{@link org.asteriskjava.manager.event.ResponseEvent}s <p> EventGeneratingActions are  {@link ManagerAction}s that don't return their response in the corresponding  {@link ManagerResponse} but send a seriesof events that contain the payload. <p> This method will block until the correpsonding action complete event has been received. The action complete event is determined by {@link EventGeneratingAction#getActionCompleteEventClass()}. <p> Examples for EventGeneratingActions are {@link org.asteriskjava.manager.action.StatusAction}, {@link org.asteriskjava.manager.action.QueueStatusAction} or{@link org.asteriskjava.manager.action.AgentsAction}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1798", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.sendEventGeneratingAction", "methodParameterType": "EventGeneratingAction#long#", "methodParameterName": "action#timeout#", "methodBody": "ResponseEvents sendEventGeneratingAction(EventGeneratingAction action, long timeout)\n            throws IOException, EventTimeoutException, IllegalArgumentException, IllegalStateException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends an  {@link EventGeneratingAction} to the Asterisk server and waitsfor the corresponding  {@link ManagerResponse} and the{@link org.asteriskjava.manager.event.ResponseEvent}s <p> EventGeneratingActions are  {@link ManagerAction}s that don't return their response in the corresponding  {@link ManagerResponse} but send a seriesof events that contain the payload. <p> This method will block until the correpsonding action complete event has been received but no longer that timeout seconds. The action complete event is determined by {@link EventGeneratingAction#getActionCompleteEventClass()}. <p> Examples for EventGeneratingActions are the {@link org.asteriskjava.manager.action.StatusAction}, the {@link org.asteriskjava.manager.action.QueueStatusAction} or the{@link org.asteriskjava.manager.action.AgentsAction}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1799", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.addEventListener", "methodParameterType": "ManagerEventListener#", "methodParameterName": "eventListener#", "methodBody": "void addEventListener(ManagerEventListener eventListener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Registers an event listener that is called whenever an {@link org.asteriskjava.manager.event.ManagerEvent} is receiced from theAsterisk server. <p> Event listeners are notified about new events in the same order as they were registered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1800", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerConnection.java", "methodName": "org.asteriskjava.manager.ManagerConnection.removeEventListener", "methodParameterType": "ManagerEventListener#", "methodParameterName": "eventListener#", "methodBody": "void removeEventListener(ManagerEventListener eventListener);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Unregisters a previously registered event listener. <p> Does nothing if the given event listener hasn't be been regiered before.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1801", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.ZapShowChannelsEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ZapShowChannelsEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1802", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of this zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1803", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.setChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setChannel(Integer channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of this zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1804", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.getSignalling", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSignalling()\n    {\n        return signalling;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the signalling of this zap channel. <p> Possible values are: <ul> <li>E &amp; M Immediate</li> <li>E &amp; M Wink</li> <li>E &amp; M E1</li> <li>Feature Group D (DTMF)</li> <li>Feature Group D (MF)</li> <li>Feature Group B (MF)</li> <li>E911 (MF)</li> <li>FXS Loopstart</li> <li>FXS Groundstart</li> <li>FXS Kewlstart</li> <li>FXO Loopstart</li> <li>FXO Groundstart</li> <li>FXO Kewlstart</li> <li>PRI Signalling</li> <li>R2 Signalling</li> <li>SF (Tone) Signalling Immediate</li> <li>SF (Tone) Signalling Wink</li> <li>SF (Tone) Signalling with Feature Group D (DTMF)</li> <li>SF (Tone) Signalling with Feature Group D (MF)</li> <li>SF (Tone) Signalling with Feature Group B (MF)</li> <li>GR-303 Signalling with FXOKS</li> <li>GR-303 Signalling with FXSKS</li> <li>Pseudo Signalling</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1805", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.setSignalling", "methodParameterType": "String#", "methodParameterName": "signalling#", "methodBody": "public void setSignalling(String signalling)\n    {\n        this.signalling = signalling;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the signalling of this zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1806", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.getDnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getDnd()\n    {\n        return dnd;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether dnd (do not disturb) is enabled for this zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1807", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.setDnd", "methodParameterType": "Boolean#", "methodParameterName": "dnd#", "methodBody": "public void setDnd(Boolean dnd)\n    {\n        this.dnd = dnd;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether dnd (do not disturb) is enabled for this zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1808", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.getAlarm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAlarm()\n    {\n        return alarm;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the alarm state of this zap channel. <p> This may be one of <ul> <li>Red Alarm</li> <li>Yellow Alarm</li> <li>Blue Alarm</li> <li>Recovering</li> <li>Loopback</li> <li>Not Open</li> <li>No Alarm</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1809", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsEvent.setAlarm", "methodParameterType": "String#", "methodParameterName": "alarm#", "methodBody": "public void setAlarm(String alarm)\n    {\n        this.alarm = alarm;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the alarm state of this zap channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1810", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DongleShowDevicesCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DongleShowDevicesCompleteEvent.DongleShowDevicesCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public DongleShowDevicesCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1811", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DongleShowDevicesCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DongleShowDevicesCompleteEvent.getEventlist", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventlist()\n    {\n        return eventlist;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the status of the eventlist (should be Complete).<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1812", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DongleShowDevicesCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DongleShowDevicesCompleteEvent.getListitems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListitems()\n    {\n        return listitems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of channels reported.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1813", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DongleShowDevicesCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DongleShowDevicesCompleteEvent.setListitems", "methodParameterType": "Integer#", "methodParameterName": "listitems#", "methodBody": "public void setListitems(Integer listitems)\n    {\n        this.listitems = listitems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of channels reported.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1814", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListEvent.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference)\n    {\n        this.conference = conference;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference to be listed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1815", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListEvent.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference()\n    {\n        return conference;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference to be listed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1816", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListEvent.setAdmin", "methodParameterType": "Boolean#", "methodParameterName": "admin#", "methodBody": "public void setAdmin(Boolean admin)\n    {\n        this.admin = admin;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the role of the caller in the list admin = yes or no of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1817", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListEvent.getAdmin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getAdmin()\n    {\n        return admin;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the role of the caller in the list admin = yes or no of the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1818", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel in the list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1819", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel in the list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1820", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtpReceiverStatEvent.java", "methodName": "org.asteriskjava.manager.event.RtpReceiverStatEvent.getReceivedPackets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getReceivedPackets()\n    {\n        return receivedPackets;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of packets received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1821", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtpReceiverStatEvent.java", "methodName": "org.asteriskjava.manager.event.RtpReceiverStatEvent.getRrCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getRrCount()\n    {\n        return rrCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of receiver reports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1822", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtpSenderStatEvent.java", "methodName": "org.asteriskjava.manager.event.RtpSenderStatEvent.getSentPackets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getSentPackets()\n    {\n        return sentPackets;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of packets sent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1823", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtpSenderStatEvent.java", "methodName": "org.asteriskjava.manager.event.RtpSenderStatEvent.getSrCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getSrCount()\n    {\n        return srCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of sender reports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1824", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeJoinEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeJoinEvent.MeetMeJoinEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public MeetMeJoinEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1825", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PriEventEvent.java", "methodName": "org.asteriskjava.manager.event.PriEventEvent.getPriEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPriEvent()\n    {\n        return priEvent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the textual representation of the event code.<p> This is one of <ul> <li>\"On hook\" <li>\"Ring/Answered\" <li>\"Wink/Flash\" <li>\"Alarm\" <li>\"No more alarm\" <li>\"HDLC Abort\" <li>\"HDLC Overrun\" <li>\"HDLC Bad FCS\" <li>\"Dial Complete\" <li>\"Ringer On\" <li>\"Ringer Off\" <li>\"Hook Transition Complete\" <li>\"Bits Changed\" <li>\"Pulse Start\" <li>\"Timer Expired\" <li>\"Timer Ping\" <li>\"Polarity Reversal\" <li>\"Ring Begin\" </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1826", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PriEventEvent.java", "methodName": "org.asteriskjava.manager.event.PriEventEvent.getPriEventCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPriEventCode()\n    {\n        return priEventCode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the numerical pri event code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1827", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PriEventEvent.java", "methodName": "org.asteriskjava.manager.event.PriEventEvent.getDChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDChannel()\n    {\n        return dChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the D-Channel the event occurred on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1828", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PriEventEvent.java", "methodName": "org.asteriskjava.manager.event.PriEventEvent.getSpan", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getSpan()\n    {\n        return span;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the span the event occurred on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1829", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getAccountcode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccountcode()\n    {\n        return accountcode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Account code", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1830", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getApplication()\n    {\n        return application;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Aplication is runnning that channel at that time", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1831", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getApplicationdata", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getApplicationdata()\n    {\n        return applicationdata;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Aplication Data is runnning that channel at that time this is the parameters passed to that dialplan application", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1832", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getBridgedChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgedChannel()\n    {\n        return bridgedChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Bridged Channel if is bridged to one", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1833", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getBridgeduniqueid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getBridgeduniqueid()\n    {\n        return bridgeid;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Bridged UniqueID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1834", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getBridgeid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeid()\n    {\n        return bridgeid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Bridged UniqueID Case params name return \"bridgeid\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1835", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Originate Channel name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1836", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDuration()\n    {\n        return duration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the duration of the call", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1837", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtension()\n    {\n        return extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Extension dialed", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1838", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getUniqueid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueid()\n    {\n        return uniqueid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Uniqueid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1839", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getLinkedid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLinkedid() {\n        return linkedid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Channel LinkedID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1840", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelEvent.getLanguage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLanguage() {\n        return language;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Channel Language", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1841", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ShowDialplanCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ShowDialplanCompleteEvent.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the total number of list items reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1842", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ShowDialplanCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ShowDialplanCompleteEvent.getListExtensions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListExtensions()\n    {\n        return listExtensions;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of extensions reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1843", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ShowDialplanCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ShowDialplanCompleteEvent.getListPriorities", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListPriorities()\n    {\n        return listPriorities;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of priorites reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1844", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ShowDialplanCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ShowDialplanCompleteEvent.getListContexts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListContexts()\n    {\n        return listContexts;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of contexts reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1845", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getFromAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InetAddress getFromAddress()\n    {\n        return fromAddress;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the IP address the RTCP message has been received from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1846", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getFromPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getFromPort()\n    {\n        return fromPort;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port of the RTCP message has been received from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1847", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getPt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getPt()\n    {\n        return pt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Indicates the format of the payload, typical values are 200 for sender reports and 201 for receiver reports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1848", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getToAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InetAddress getToAddress()\n    {\n        return toAddress;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the IP address the RTCP message has been sent to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1849", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getToPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getToPort()\n    {\n        return toPort;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port the RTCP message has been sent to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1850", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getOurSsrc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getOurSsrc()\n    {\n        return ourSsrc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns our synchronization source identifier that uniquely identifies the source of a stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1851", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getSentPackets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getSentPackets()\n    {\n        return sentPackets;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of packets sent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1852", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpSentEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpSentEvent.getSentOctets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getSentOctets()\n    {\n        return sentOctets;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of octets (bytes) sent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1853", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DisconnectEvent.java", "methodName": "org.asteriskjava.manager.event.DisconnectEvent.DisconnectEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public DisconnectEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1854", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SoftHangupRequestEvent.java", "methodName": "org.asteriskjava.manager.event.SoftHangupRequestEvent.getCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCause()\n    {\n        return cause;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cause of the hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1855", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SoftHangupRequestEvent.java", "methodName": "org.asteriskjava.manager.event.SoftHangupRequestEvent.setCause", "methodParameterType": "Integer#", "methodParameterName": "cause#", "methodBody": "public void setCause(Integer cause)\n    {\n        this.cause = cause;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the cause of the hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1856", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.PeerStatusEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public PeerStatusEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1857", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.getChannelType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannelType()\n    {\n        return channelType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of channel that registers, that is \"IAX2\" for an IAX2 channel or \"SIP\" for a SIP channel.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1858", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.setChannelType", "methodParameterType": "String#", "methodParameterName": "channelType#", "methodBody": "public void setChannelType(String channelType)\n    {\n        this.channelType = channelType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the type of channel that registers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1859", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.getPeer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPeer()\n    {\n        return peer;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the peer that registered.<p> The peer name includes the channel type prefix. So if you receive a PeerStatusEvent for a SIP peer defined as \"john\" in <code>sip.conf</code> this method returns \"SIP/john\". <br> Peer names for IAX clients start with \"IAX2/\", peer names for SIP clients start with \"SIP/\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1860", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.setPeer", "methodParameterType": "String#", "methodParameterName": "peer#", "methodBody": "public void setPeer(String peer)\n    {\n        this.peer = peer;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the peer that registered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1861", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.getPeerStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPeerStatus()\n    {\n        return peerStatus;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the registration state.<p> This may be one of <ul> <li>Registered</li> <li>Unregistered</li> <li>Reachable</li> <li>Lagged</li> <li>Unreachable</li> <li>Rejected (IAX only)</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1862", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.setPeerStatus", "methodParameterType": "String#", "methodParameterName": "peerStatus#", "methodBody": "public void setPeerStatus(String peerStatus)\n    {\n        this.peerStatus = peerStatus;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the registration state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1863", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.getCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCause()\n    {\n        return cause;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cause of a rejection or unregistration.<p> For IAX peers this is set only if the status equals \"Rejected\".<p> For SIP peers this is set if the status equals \"Unregistered\" and the peer was unregistered due to an expiration. In that case the cause is set to \"Expired\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1864", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.setCause", "methodParameterType": "String#", "methodParameterName": "cause#", "methodBody": "public void setCause(String cause)\n    {\n        this.cause = cause;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the cause of the rejection or unregistration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1865", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.getTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTime()\n    {\n        return time;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ping time of the client if status equals \"Reachable\" or \"Lagged\"; if the status equals \"Unreachable\" it returns how long the last response took (in ms) for IAX peers or -1 for SIP peers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1866", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.getAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAddress()\n    {\n        return address;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the IP address of the peer that registered. Only available for SIP channels.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1867", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerStatusEvent.java", "methodName": "org.asteriskjava.manager.event.PeerStatusEvent.getPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPort()\n    {\n        return port;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port of the peer that registered. Only available for SIP channels.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1868", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the status", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1869", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param status the status to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1870", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the callerId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1871", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param callerId the callerId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1872", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.getLocalStationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocalStationId()\n    {\n        return localStationId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localStationId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1873", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.setLocalStationId", "methodParameterType": "String#", "methodParameterName": "localStationId#", "methodBody": "public void setLocalStationId(String localStationId)\n    {\n        this.localStationId = localStationId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localStationId the localStationId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1874", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.getFileName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFileName()\n    {\n        return fileName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the fileName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1875", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxStatusEvent.setFileName", "methodParameterType": "String#", "methodParameterName": "fileName#", "methodBody": "public void setFileName(String fileName)\n    {\n        this.fileName = fileName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param fileName the fileName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1876", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.RegistryEntryEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public RegistryEntryEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1877", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.getRegistrationTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getRegistrationTime()\n    {\n        return registrationTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the epoch since the last registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1878", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.setRegistrationTime", "methodParameterType": "String#", "methodParameterName": "registrationTime#", "methodBody": "public void setRegistrationTime(String registrationTime)\n    {\n        this.registrationTime = Long.valueOf(registrationTime);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the epoch (unix Timestamp) of the last registration. Will be casted to Long.", "call_func_name": ["java.lang.Long.valueOf"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1879", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.getPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPort()\n    {\n        return port;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port number used for the registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1880", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.setPort", "methodParameterType": "Integer#", "methodParameterName": "port#", "methodBody": "public void setPort(Integer port)\n    {\n        this.port = port;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the port number used for the registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1881", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsername()\n    {\n        return username;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the username used for the registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1882", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username)\n    {\n        this.username = username;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the username used for the registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1883", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.getHost", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHost()\n    {\n        return host;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the IP address or hostname used for the registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1884", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.setHost", "methodParameterType": "String#", "methodParameterName": "host#", "methodBody": "public void setHost(String host)\n    {\n        this.host = host;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the IP address or hostname used for the registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1885", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getState()\n    {\n        return state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1886", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.setState", "methodParameterType": "String#", "methodParameterName": "state#", "methodBody": "public void setState(String state)\n    {\n        this.state = state;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the value of state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1887", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.getRefresh", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getRefresh()\n    {\n        return refresh;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of refresh.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1888", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEntryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEntryEvent.setRefresh", "methodParameterType": "Integer#", "methodParameterName": "refresh#", "methodBody": "public void setRefresh(Integer refresh)\n    {\n        this.refresh = refresh;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the value of refresh.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1889", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.AbstractQueueMemberEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "protected AbstractQueueMemberEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1890", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1891", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1892", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public String getInterface()\n    {\n        return _interface;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member's interface.<p> E.g. the channel name or agent group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1893", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.setInterface", "methodParameterType": "String#", "methodParameterName": "_interface#", "methodBody": "final public void setInterface(String _interface)\n    {\n        this._interface = _interface;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the member's interface.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1894", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    final public String getLocation()\n    {\n        return _interface;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member's interface.<p> E.g. the channel name or agent group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1895", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.setLocation", "methodParameterType": "String#", "methodParameterName": "_interface#", "methodBody": "@Deprecated\n    final public void setLocation(String _interface)\n    {\n        if ((_interface != null) && (!\"null\".equals(_interface)))\n        {  // Location is not in use since asterisk 12\n            this._interface = _interface;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ParenthesizedExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the member's interface.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1896", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.getMemberName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMemberName()\n    {\n        return memberName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retruns the name of the queue member. <p> Available since Asterisk 1.4", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1897", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractQueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractQueueMemberEvent.setMemberName", "methodParameterType": "String#", "methodParameterName": "memberName#", "methodBody": "public void setMemberName(String memberName)\n    {\n        this.memberName = memberName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue member. <p> Available since Asterisk 1.4", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1898", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.ChannelReloadEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ChannelReloadEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1899", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getChannelType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannelType()\n    {\n        return channelType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of channel that was reloaded. For <code>channels/chan_sip.c</code>, this would be \"SIP\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1900", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated public String getChannel()\n    {\n        return channelType;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel that was reloaded. For <code>channels/chan_sip.c</code>, this would be \"SIP\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1901", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getPeerCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPeerCount()\n    {\n        return peerCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of peers defined during the configuration of this channel (e.g. sip peer definitions).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1902", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.setPeerCount", "methodParameterType": "Integer#", "methodParameterName": "peerCount#", "methodBody": "public void setPeerCount(Integer peerCount)\n    {\n        this.peerCount = peerCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param peerCount the number of peers defined during the configuration ofthis channel (e.g. sip peer definitions)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1903", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getRegistryCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getRegistryCount()\n    {\n        return registryCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the number of registrations with other channels (e.g.registrations with other sip proxies)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1904", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.setRegistryCount", "methodParameterType": "Integer#", "methodParameterName": "registryCount#", "methodBody": "public void setRegistryCount(Integer registryCount)\n    {\n        this.registryCount = registryCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param registryCount the number of registrations with other channels(e.g. registrations with other sip proxies)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1905", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getReloadReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReloadReason()\n    {\n        return reloadReason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the reason that this channel was reloaded as received from Asterisk, for example \"CLIRELOAD (Channel module reload by CLI command)\". <br> Usually you don't want to use this method directly.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1906", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.setReloadReason", "methodParameterType": "String#", "methodParameterName": "reloadReason#", "methodBody": "public void setReloadReason(String reloadReason)\n    {\n        Matcher matcher;\n\n        this.reloadReason = reloadReason;\n        if (reloadReason == null)\n        {\n            return;\n        }\n\n        matcher = REASON_PATTERN.matcher(reloadReason);\n        if (matcher.matches())\n        {\n            reloadReasonCode = matcher.group(1);\n            reloadReasonDescription = matcher.group(2);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the reason that this channel was reloaded, for example \"CLIRELOAD (Channel module reload by CLI command)\".", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.group"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["int"]], "passed_comments": "/"}, {"index": "1907", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getReloadReasonCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReloadReasonCode()\n    {\n        return reloadReasonCode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the reason that this channel was reloaded.<p> Only the code part of the reason is returned. This is one of <ul> <li>LOAD</li> <li>RELOAD</li> <li>CLIRELOAD</li> <li>MANAGERRELOAD</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1908", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getReloadReasonDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReloadReasonDescription()\n    {\n        return reloadReasonDescription;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the reason that this channel was reloaded as a human readable descriptive string, for example \"Channel module reload by CLI command\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1909", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.getUserCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getUserCount()\n    {\n        return userCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the number of users defined during the configuration of thischannel (e.g. sip user definitions)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1910", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelReloadEvent.setUserCount", "methodParameterType": "Integer#", "methodParameterName": "userCount#", "methodBody": "public void setUserCount(Integer userCount)\n    {\n        this.userCount = userCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userCount the number of users defined during the configuration ofthis channel (e.g. sip user definitions)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1911", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HangupEvent.java", "methodName": "org.asteriskjava.manager.event.HangupEvent.getCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCause()\n    {\n        return cause;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cause of the hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1912", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HangupEvent.java", "methodName": "org.asteriskjava.manager.event.HangupEvent.setCause", "methodParameterType": "Integer#", "methodParameterName": "cause#", "methodBody": "public void setCause(Integer cause)\n    {\n        this.cause = cause;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the cause of the hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1913", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HangupEvent.java", "methodName": "org.asteriskjava.manager.event.HangupEvent.getCauseTxt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCauseTxt()\n    {\n        return causeTxt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the textual representation of the hangup cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1914", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HangupEvent.java", "methodName": "org.asteriskjava.manager.event.HangupEvent.setCauseTxt", "methodParameterType": "String#", "methodParameterName": "causeTxt#", "methodBody": "public void setCauseTxt(String causeTxt)\n    {\n        this.causeTxt = causeTxt;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the textual representation of the hangup cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1915", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeTalkingEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeTalkingEvent.setTalkingStatus", "methodParameterType": "Boolean#", "methodParameterName": "talkingStatus#", "methodBody": "public void setTalkingStatus(Boolean talkingStatus)\n    {\n        this.talkingStatus = talkingStatus;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the talking status on or off.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1916", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeTalkingEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeTalkingEvent.getTalkingStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getTalkingStatus()\n    {\n        return talkingStatus;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the talking status.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1917", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallEvent.ParkedCallEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ParkedCallEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1918", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallEvent.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTimeout()\n    {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of seconds this call will be parked. <p> This corresponds to the <code>parkingtime</code> option in <code>features.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1919", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallEvent.setTimeout", "methodParameterType": "Integer#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(Integer timeout)\n    {\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of seconds this call will be parked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1920", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallEvent.setUnqiueId", "methodParameterType": "String#", "methodParameterName": "unqiueId#", "methodBody": "public void setUnqiueId(String unqiueId)\n    {\n        setUniqueId(unqiueId);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the parked channel as a workaround for a typo in asterisk manager event.", "call_func_name": ["org.asteriskjava.manager.event.ParkedCallEvent.setUniqueId"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1921", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallEvent.setParkeelinkedid", "methodParameterType": "String#", "methodParameterName": "parkeelinkedid#", "methodBody": "public void setParkeelinkedid(String parkeelinkedid)\n    {\n        this.parkeelinkedid = parkeelinkedid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param parkeelinkedid the parkeelinkedid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1922", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallEvent.getParkeelinkedid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getParkeelinkedid()\n    {\n        return parkeelinkedid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the parkeelinkedid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1923", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1924", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1925", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public final String getCallerId()\n    {\n        return getCallerIdNum();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": ["org.asteriskjava.manager.event.AbstractChannelEvent.getCallerIdNum"], "call_func_parameter": [[""]], "passed_comments": [{"org.asteriskjava.manager.event.AbstractChannelEvent.getCallerIdNum": "Returns the Caller"}]}, {"index": "1926", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "@Deprecated\n    public final void setCallerId(String callerId)\n    {\n        setCallerIdNum(callerId);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": ["org.asteriskjava.manager.event.AbstractChannelEvent.setCallerIdNum"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1927", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelEvent.getCallerIdNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getCallerIdNum()\n    {\n        return callerIdNum;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1928", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelEvent.getCallerIdName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getCallerIdName()\n    {\n        return callerIdName;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1929", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeTalkingRequestEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeTalkingRequestEvent.MeetMeTalkingRequestEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public MeetMeTalkingRequestEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1930", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeTalkingRequestEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeTalkingRequestEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the user has started or stopped requesting talking.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1931", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyListCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyListCompleteEvent.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of buddies that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1932", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyListCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyListCompleteEvent.setListItems", "methodParameterType": "Integer#", "methodParameterName": "listItems#", "methodBody": "public void setListItems(Integer listItems)\n    {\n        this.listItems = listItems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of buddies that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1933", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.AbstractHoldEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AbstractHoldEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new HoldEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1934", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1935", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1936", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1937", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1938", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is a hold or unhold event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1939", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.setStatus", "methodParameterType": "Boolean#", "methodParameterName": "status#", "methodBody": "public void setStatus(Boolean status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is a hold or unhold event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1940", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.isHold", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isHold()\n    {\n        return status != null && status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is a hold event.", "call_func_name": ["java.lang.Boolean.booleanValue"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1941", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractHoldEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractHoldEvent.isUnhold", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUnhold()\n    {\n        return status != null && !status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is an unhold event.", "call_func_name": ["java.lang.Boolean.booleanValue"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1942", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MusicOnHoldEvent.java", "methodName": "org.asteriskjava.manager.event.MusicOnHoldEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1943", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MusicOnHoldEvent.java", "methodName": "org.asteriskjava.manager.event.MusicOnHoldEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1944", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MusicOnHoldEvent.java", "methodName": "org.asteriskjava.manager.event.MusicOnHoldEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1945", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MusicOnHoldEvent.java", "methodName": "org.asteriskjava.manager.event.MusicOnHoldEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1946", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MusicOnHoldEvent.java", "methodName": "org.asteriskjava.manager.event.MusicOnHoldEvent.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getState()\n    {\n        return state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state. This is either \"Start\" or \"Stop\" depending on whether music on hold started or stopped on the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1947", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MusicOnHoldEvent.java", "methodName": "org.asteriskjava.manager.event.MusicOnHoldEvent.isStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStart()\n    {\n        return STATE_START.equals(state);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is a start event.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1948", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MusicOnHoldEvent.java", "methodName": "org.asteriskjava.manager.event.MusicOnHoldEvent.isStop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStop()\n    {\n        return STATE_STOP.equals(state);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is a stop event.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1949", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLogoffEvent.AgentCallbackLogoffEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgentCallbackLogoffEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1950", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLogoffEvent.getAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgent()\n    {\n        return agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the agent that logged off.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1951", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLogoffEvent.setAgent", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public void setAgent(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the agent that logged off.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1952", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLogoffEvent.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason()\n    {\n        return reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the reason for the logoff. The reason is set to Autologoff if the agent has been logged off due to not answering the phone in time. Autologoff is configured by setting <code>autologoff</code> to the appropriate number of seconds in <code>agents.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1953", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLogoffEvent.setReason", "methodParameterType": "String#", "methodParameterName": "reason#", "methodBody": "public void setReason(String reason)\n    {\n        this.reason = reason;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the reason for the logoff.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1954", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.QueueMemberEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueMemberEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1955", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1956", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1957", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public String getInterface()\n    {\n        return _interface;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member's interface.<p> E.g. the channel name or agent group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1958", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setInterface", "methodParameterType": "String#", "methodParameterName": "_interface#", "methodBody": "final public void setInterface(String _interface)\n    {\n        this._interface = _interface;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the member's interface.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1959", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    final public String getLocation()\n    {\n        return _interface;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member's interface.<p> E.g. the channel name or agent group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1960", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setLocation", "methodParameterType": "String#", "methodParameterName": "_interface#", "methodBody": "@Deprecated\n    final public void setLocation(String _interface)\n    {\n        if ((_interface != null) && (!\"null\".equals(_interface)))\n        {  // Location is not in use since asterisk 12\n            this._interface = _interface;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ParenthesizedExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the member's interface.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1961", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getMembership", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMembership()\n    {\n        return membership;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if this member has been dynamically added by the QueueAdd command (in the dialplan or via the Manager API) or if this member is has been statically defined in <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1962", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.isStatic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStatic()\n    {\n        return MEMBERSHIP_STATIC.equals(membership);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method that checks whether this member has been statically defined in <code>queues.conf</code>.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1963", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.isDynamic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDynamic()\n    {\n        return MEMBERSHIP_DYNAMIC.equals(membership);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method that checks whether this member has been dynamically added by the QueueAdd command.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1964", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setMembership", "methodParameterType": "String#", "methodParameterName": "membership#", "methodBody": "public void setMembership(String membership)\n    {\n        this.membership = membership;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if this member has been dynamically or statically added.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1965", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getPenalty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPenalty()\n    {\n        return penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the penalty for the added member. When calls are distributed members with higher penalties are considered last.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1966", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setPenalty", "methodParameterType": "Integer#", "methodParameterName": "penalty#", "methodBody": "public void setPenalty(Integer penalty)\n    {\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the penalty for this member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1967", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getCallsTaken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCallsTaken()\n    {\n        return callsTaken;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of calls answered by the member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1968", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setCallsTaken", "methodParameterType": "Integer#", "methodParameterName": "callsTaken#", "methodBody": "public void setCallsTaken(Integer callsTaken)\n    {\n        this.callsTaken = callsTaken;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of calls answered by the added member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1969", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getLastCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getLastCall()\n    {\n        return lastCall;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time the last successful call answered by the added member was hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1970", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setLastCall", "methodParameterType": "Long#", "methodParameterName": "lastCall#", "methodBody": "public void setLastCall(Long lastCall)\n    {\n        this.lastCall = lastCall;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time the last successful call answered by this member was hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1971", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of this queue member. <p> Available since Asterisk 1.2 <p> Valid status codes are: <dl> <dt>AST_DEVICE_UNKNOWN (0)</dt> <dd>Device valid but unknown channel state</dd> <dt>AST_DEVICE_NOT_INUSE (1)</dt> <dd>Device is not used</dd> <dt>AST_DEVICE_INUSE (2)</dt> <dd>Device is in use</dd> <dt>AST_DEVICE_BUSY (3)</dt> <dd>Device is Busy</dd> <dt>AST_DEVICE_INVALID (4)</dt> <dd>Device is invalid</dd> <dt>AST_DEVICE_UNAVAILABLE (5)</dt> <dd>Device is unavaiable</dd> <dt>AST_DEVICE_RINGING (6)</dt> <dd>Device is ringing</dd> <dt>AST_DEVICE_RINGINUSE (7)</dt> <dd>Device is ringing and in use</dd> <dt>AST_DEVICE_ONHOLD (8)</dt> <dd>Device is on hold</dd> </dl>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1972", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setStatus", "methodParameterType": "Integer#", "methodParameterName": "status#", "methodBody": "public void setStatus(Integer status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status of this queue member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1973", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getPaused", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getPaused()\n    {\n        return paused;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is this queue member paused (not accepting calls)? <p> Available since Asterisk 1.2.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1974", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.setPaused", "methodParameterType": "Boolean#", "methodParameterName": "paused#", "methodBody": "public void setPaused(Boolean paused)\n    {\n        this.paused = paused;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if this member has been paused.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1975", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1976", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getMemberName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated public String getMemberName()\n    {\n        return name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1977", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getStateinterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStateinterface()\n    {\n        return stateinterface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Name of the interface where device state is taken from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1978", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberEvent.getIncall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getIncall() \n    {\n        return incall;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return 1 if is incall 0 if not", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1979", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeersEvent.java", "methodName": "org.asteriskjava.manager.event.PeersEvent.PeersEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public PeersEvent( Object source )\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1980", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryCompleteEvent.VoicemailUserEntryCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public VoicemailUserEntryCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1981", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListCompleteEvent.ConfbridgeListCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ConfbridgeListCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1982", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListCompleteEvent.setEventList", "methodParameterType": "String#", "methodParameterName": "eventList#", "methodBody": "public void setEventList(String eventList)\n    {\n        this.eventList = eventList;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status of the list e.g. complete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1983", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListCompleteEvent.getEventList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventList()\n    {\n        return eventList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of the list e.g. complete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1984", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListCompleteEvent.setListItems", "methodParameterType": "String#", "methodParameterName": "listItems#", "methodBody": "public void setListItems(String listItems)\n    {\n        this.listItems = listItems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number listitems.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1985", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListCompleteEvent.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number listitems.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1986", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsEvent.DahdiShowChannelsEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public DahdiShowChannelsEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1987", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsEvent.getSignalling", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSignalling()\n    {\n        return signalling;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the signalling of this Dahdi channel.<p> Possible values are: <ul> <li>E &amp; M Immediate</li> <li>E &amp; M Wink</li> <li>E &amp; M E1</li> <li>Feature Group D (DTMF)</li> <li>Feature Group D (MF)</li> <li>Feature Group B (MF)</li> <li>E911 (MF)</li> <li>FXS Loopstart</li> <li>FXS Groundstart</li> <li>FXS Kewlstart</li> <li>FXO Loopstart</li> <li>FXO Groundstart</li> <li>FXO Kewlstart</li> <li>PRI Signalling</li> <li>R2 Signalling</li> <li>SF (Tone) Signalling Immediate</li> <li>SF (Tone) Signalling Wink</li> <li>SF (Tone) Signalling with Feature Group D (DTMF)</li> <li>SF (Tone) Signalling with Feature Group D (MF)</li> <li>SF (Tone) Signalling with Feature Group B (MF)</li> <li>GR-303 Signalling with FXOKS</li> <li>GR-303 Signalling with FXSKS</li> <li>Pseudo Signalling</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1988", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsEvent.setSignalling", "methodParameterType": "String#", "methodParameterName": "signalling#", "methodBody": "public void setSignalling(String signalling)\n    {\n        this.signalling = signalling;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the signalling of this Dahdi channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1989", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsEvent.getDnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getDnd()\n    {\n        return dnd;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether dnd (do not disturb) is enabled for this Dahdi channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1990", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsEvent.setDnd", "methodParameterType": "Boolean#", "methodParameterName": "dnd#", "methodBody": "public void setDnd(Boolean dnd)\n    {\n        this.dnd = dnd;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether dnd (do not disturb) is enabled for this Dahdi channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1991", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsEvent.getAlarm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAlarm()\n    {\n        return alarm;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the alarm state of this Dahdi channel.<p> This may be one of <ul> <li>Red Alarm</li> <li>Yellow Alarm</li> <li>Blue Alarm</li> <li>Recovering</li> <li>Loopback</li> <li>Not Open</li> <li>No Alarm</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1992", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsEvent.setAlarm", "methodParameterType": "String#", "methodParameterName": "alarm#", "methodBody": "public void setAlarm(String alarm)\n    {\n        this.alarm = alarm;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the alarm state of this Dahdi channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1993", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpReceivedEvent.getFromAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InetAddress getFromAddress()\n    {\n        return fromAddress;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the IP address the RTCP message has been received from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1994", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpReceivedEvent.getFromPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getFromPort()\n    {\n        return fromPort;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port of the RTCP message has been received from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1995", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpReceivedEvent.getToPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getToPort()\n    {\n        return toPort;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port the RTCP message has been sent to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1996", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpReceivedEvent.getPt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getPt()\n    {\n        return pt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Indicates the format of the payload, typical values are 200 for sender reports and 201 for receiver reports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1997", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpReceivedEvent.getSenderSsrc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getSenderSsrc()\n    {\n        return senderSsrc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the synchronization source identifier of the sender.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1998", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpReceivedEvent.getPacketsLost", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getPacketsLost()\n    {\n        return packetsLost;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of packets lost so far.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1999", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RtcpReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.RtcpReceivedEvent.getRtt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Double getRtt()\n    {\n        return rtt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the round trip time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2000", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ShutdownEvent.java", "methodName": "org.asteriskjava.manager.event.ShutdownEvent.ShutdownEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ShutdownEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2001", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ShutdownEvent.java", "methodName": "org.asteriskjava.manager.event.ShutdownEvent.getShutdown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getShutdown()\n    {\n        return shutdown;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the kind of shutdown or restart. Possible values are \"Uncleanly\" and \"Cleanly\". A shutdown is considered unclean if there are any active channels when the system is shut down.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2002", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ShutdownEvent.java", "methodName": "org.asteriskjava.manager.event.ShutdownEvent.getRestart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getRestart()\n    {\n        return restart;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns <code>true</code> if the server has been restarted; <code>false</code> if it has been halted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2003", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2004", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2005", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.getLoggedIn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getLoggedIn()\n    {\n        return loggedIn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of members logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2006", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.setLoggedIn", "methodParameterType": "Integer#", "methodParameterName": "loggedIn#", "methodBody": "public void setLoggedIn(Integer loggedIn)\n    {\n        this.loggedIn = loggedIn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of members logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2007", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.getAvailable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getAvailable()\n    {\n        return available;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of members logged in and not in a call. <br> This is the number of queue members currently available for calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2008", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.setAvailable", "methodParameterType": "Integer#", "methodParameterName": "available#", "methodBody": "public void setAvailable(Integer available)\n    {\n        this.available = available;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of members logged in and not in a call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2009", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.getCallers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCallers()\n    {\n        return callers;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of callers currently waiting in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2010", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.setCallers", "methodParameterType": "Integer#", "methodParameterName": "callers#", "methodBody": "public void setCallers(Integer callers)\n    {\n        this.callers = callers;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of callers currently waiting in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2011", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.getHoldTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getHoldTime()\n    {\n        return holdTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current avarage hold time for this queue based on an exponential average.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2012", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.setHoldTime", "methodParameterType": "Integer#", "methodParameterName": "holdTime#", "methodBody": "public void setHoldTime(Integer holdTime)\n    {\n        this.holdTime = holdTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the current avarage hold time for this queue based on an exponential average.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2013", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.getTalkTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTalkTime()\n    {\n        return talkTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current avarage talk time for this queue based on an exponential average.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2014", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.setTalkTime", "methodParameterType": "Integer#", "methodParameterName": "talkTime#", "methodBody": "public void setTalkTime(Integer talkTime)\n    {\n        this.talkTime = talkTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the current avarage talk time for this queue based on an exponential average.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2015", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.getLongestHoldTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getLongestHoldTime()\n    {\n        return longestHoldTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the longest hold time of the a queue entry currently in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2016", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueSummaryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueSummaryEvent.setLongestHoldTime", "methodParameterType": "Integer#", "methodParameterName": "longestHoldTime#", "methodBody": "public void setLongestHoldTime(Integer longestHoldTime)\n    {\n        this.longestHoldTime = longestHoldTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the longest hold time of the a queue entry currently in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2017", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.AsyncAgiEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AsyncAgiEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AsyncAgiEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2018", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel this event occurred on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2019", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel this event occurred on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2020", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.getSubEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSubEvent()\n    {\n        return subEvent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the sub event type. This is either \"Start\", \"Exec\" or \"End\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2021", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.setSubEvent", "methodParameterType": "String#", "methodParameterName": "subEvent#", "methodBody": "public void setSubEvent(String subEvent)\n    {\n        this.subEvent = subEvent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the sub event type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2022", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.getCommandId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommandId()\n    {\n        return commandId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the command id of the corresponding  {@link org.asteriskjava.manager.action.AgiAction}.<p> This property is only available for the \"Exec\" sub event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2023", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.setCommandId", "methodParameterType": "String#", "methodParameterName": "commandId#", "methodBody": "public void setCommandId(String commandId)\n    {\n        this.commandId = commandId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the command id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2024", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResult()\n    {\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the raw result of a command execution in response to the corresponding {@link org.asteriskjava.manager.action.AgiAction}.<p> This property is only available for the \"Exec\" sub event.<p> The result is URL encoded and ends with a newline (\"\\n\").<p> Example: <pre> 200%20result%3d0 </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2025", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.decodeResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> decodeResult()\n    {\n        return decode(getResult());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes the result.", "call_func_name": ["org.asteriskjava.manager.event.AsyncAgiEvent.getResult", "org.asteriskjava.manager.event.AsyncAgiEvent.decode"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.event.AsyncAgiEvent.getResult": "Returns the raw result of a command execution in response to the corresponding {@link org.asteriskjava.manager.action.AgiAction}.<p> This property is only available for the \"Exec\" sub event.<p> The result is URL encoded and ends with a newline (\"\\n\").<p> Example: <pre> 200%20result%3d0 </pre>"}]}, {"index": "2026", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.setResult", "methodParameterType": "String#", "methodParameterName": "result#", "methodBody": "public void setResult(String result)\n    {\n        this.result = result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the raw result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2027", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.getEnv", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEnv()\n    {\n        return env;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the raw AGI environment similar to the AGI request for FastAGI.<p> This property is only available for the \"Start\" sub event.<p> The environment is passed in multiple lines (separated by \"\\n\"). Each line is URL encoded and contains a key and a value. The environment ends with two newline characters (\"\\n\\n\").<p> Example: <pre> ... agi_channel%3a%20IAX2%2fpbx0-1 agi_language%3a%20de agi_type%3a%20IAX2 agi_uniqueid%3a%201201838738.19 agi_version%3a%201.6.0-beta1 ... </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2028", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.decodeEnv", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> decodeEnv()\n    {\n        return decode(getEnv());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes the AGI environment and returns a list of lines.", "call_func_name": ["org.asteriskjava.manager.event.AsyncAgiEvent.getEnv", "org.asteriskjava.manager.event.AsyncAgiEvent.decode"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.event.AsyncAgiEvent.getEnv": "Returns the raw AGI environment similar to the AGI request for FastAGI.<p> This property is only available for the \"Start\" sub event.<p> The environment is passed in multiple lines (separated by \"\\n\"). Each line is URL encoded and contains a key and a value. The environment ends with two newline characters (\"\\n\\n\").<p> Example: <pre> ... agi_channel%3a%20IAX2%2fpbx0-1 agi_language%3a%20de agi_type%3a%20IAX2 agi_uniqueid%3a%201201838738.19 agi_version%3a%201.6.0-beta1 ... </pre>"}]}, {"index": "2029", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.setEnv", "methodParameterType": "String#", "methodParameterName": "env#", "methodBody": "public void setEnv(String env)\n    {\n        this.env = env;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the AGI environment.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2030", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.isStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStart()\n    {\n        return isSubEvent(SUB_EVENT_START);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks is this a start sub event.", "call_func_name": ["org.asteriskjava.manager.event.AsyncAgiEvent.isSubEvent"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2031", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.isExec", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isExec()\n    {\n        return isSubEvent(SUB_EVENT_EXEC);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks is this an exec sub event.", "call_func_name": ["org.asteriskjava.manager.event.AsyncAgiEvent.isSubEvent"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2032", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AsyncAgiEvent.java", "methodName": "org.asteriskjava.manager.event.AsyncAgiEvent.isEnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEnd()\n    {\n        return isSubEvent(SUB_EVENT_END);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks is this an end sub event.", "call_func_name": ["org.asteriskjava.manager.event.AsyncAgiEvent.isSubEvent"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2033", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ProtocolIdentifierReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.ProtocolIdentifierReceivedEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ProtocolIdentifierReceivedEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2034", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ProtocolIdentifierReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.getProtocolIdentifier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getProtocolIdentifier()\n    {\n        return protocolIdentifier;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the version of the protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2035", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ProtocolIdentifierReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.setProtocolIdentifier", "methodParameterType": "String#", "methodParameterName": "protocolIdentifier#", "methodBody": "public void setProtocolIdentifier(String protocolIdentifier)\n    {\n        this.protocolIdentifier = protocolIdentifier;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the version of the protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2036", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getMembership", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMembership()\n    {\n        return membership;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the membership", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2037", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setMembership", "methodParameterType": "String#", "methodParameterName": "membership#", "methodBody": "public void setMembership(String membership)\n    {\n        this.membership = membership;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param membership the membership to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2038", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getLastcall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getLastcall()\n    {\n        return lastcall;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the lastcall", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2039", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setLastcall", "methodParameterType": "Long#", "methodParameterName": "lastcall#", "methodBody": "public void setLastcall(Long lastcall)\n    {\n        this.lastcall = lastcall;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param lastcall the lastcall to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2040", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getCallsTaken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCallsTaken()\n    {\n        return callsTaken;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the callsTaken", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2041", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setCallsTaken", "methodParameterType": "Integer#", "methodParameterName": "callsTaken#", "methodBody": "public void setCallsTaken(Integer callsTaken)\n    {\n        this.callsTaken = callsTaken;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param callsTaken the callsTaken to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2042", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getPenalty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPenalty()\n    {\n        return penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the penalty", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2043", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setPenalty", "methodParameterType": "Integer#", "methodParameterName": "penalty#", "methodBody": "public void setPenalty(Integer penalty)\n    {\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param penalty the penalty to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2044", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the status", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2045", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setStatus", "methodParameterType": "Integer#", "methodParameterName": "status#", "methodBody": "public void setStatus(Integer status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param status the status to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2046", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getRinginuse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getRinginuse()\n    {\n        return ringinuse;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ringinuse", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2047", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setRinginuse", "methodParameterType": "Boolean#", "methodParameterName": "ringinuse#", "methodBody": "public void setRinginuse(Boolean ringinuse)\n    {\n        this.ringinuse = ringinuse;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param ringinuse the ringinuse to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2048", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getStateInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStateInterface()\n    {\n        return stateInterface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the stateInterface", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2049", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setStateInterface", "methodParameterType": "String#", "methodParameterName": "stateInterface#", "methodBody": "public void setStateInterface(String stateInterface)\n    {\n        this.stateInterface = stateInterface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param stateInterface the stateInterface to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2050", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.getIncall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getIncall()\n    {\n        return incall;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return get Incall", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2051", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPauseEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPauseEvent.setIncall", "methodParameterType": "Integer#", "methodParameterName": "incall#", "methodBody": "public void setIncall(Integer incall)\n    {\n        this.incall = incall;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param setIncall the incall to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2052", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeLeaveEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeLeaveEvent.MeetMeLeaveEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public MeetMeLeaveEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2053", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeLeaveEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeLeaveEvent.getDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getDuration()\n    {\n        return duration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns how long the user spent in the conference. <p> This property is available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2054", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeLeaveEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeLeaveEvent.setDuration", "methodParameterType": "Long#", "methodParameterName": "duration#", "methodBody": "public void setDuration(Long duration)\n    {\n        this.duration = duration;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets how long the user spent in the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2055", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.NewExtenEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public NewExtenEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2056", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2057", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2058", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.getApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getApplication()\n    {\n        return application;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the application that is executed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2059", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.setApplication", "methodParameterType": "String#", "methodParameterName": "application#", "methodBody": "public void setApplication(String application)\n    {\n        this.application = application;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the application that is executed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2060", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.getAppData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAppData()\n    {\n        return appData;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the parameters passed to the application that is executed. The parameters are separated by a '|' character.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2061", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.setAppData", "methodParameterType": "String#", "methodParameterName": "appData#", "methodBody": "public void setAppData(String appData)\n    {\n        this.appData = appData;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the parameters passed to the application that is executed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2062", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2063", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2064", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.getExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtension()\n    {\n        return extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2065", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewExtenEvent.java", "methodName": "org.asteriskjava.manager.event.NewExtenEvent.setExtension", "methodParameterType": "String#", "methodParameterName": "extension#", "methodBody": "public void setExtension(String extension)\n    {\n        this.extension = extension;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2066", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractRtcpEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractRtcpEvent.getFractionLost", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getFractionLost()\n    {\n        return fractionLost;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the short term loss ratio. This is the fraction of packets lost since the last RR or SR packet was sent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2067", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractRtcpEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractRtcpEvent.getIaJitter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Double getIaJitter()\n    {\n        return iaJitter;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the interarrival jitter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2068", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractRtcpEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractRtcpEvent.getDlSr", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Double getDlSr()\n    {\n        return dlSr;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the delay since the last SR.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2069", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractUnParkedEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractUnParkedEvent.AbstractUnParkedEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AbstractUnParkedEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2070", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractRtpStatEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractRtpStatEvent.getSsrc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getSsrc()\n    {\n        return ssrc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the synchronization source identifier that uniquely identifies the source of a stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2071", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractRtpStatEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractRtpStatEvent.getLostPackets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getLostPackets()\n    {\n        return lostPackets;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of lost packets.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2072", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerAbandonEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerAbandonEvent.QueueCallerAbandonEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueCallerAbandonEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2073", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerAbandonEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerAbandonEvent.getHoldTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getHoldTime()\n    {\n        return holdTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the amount of time in seconds the caller was on hold", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2074", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerAbandonEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerAbandonEvent.setHoldTime", "methodParameterType": "Integer#", "methodParameterName": "holdTime#", "methodBody": "public void setHoldTime(Integer holdTime)\n    {\n        this.holdTime = holdTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param holdTime the amount of time in seconds the caller was on hold", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2075", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerAbandonEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerAbandonEvent.getOriginalPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getOriginalPosition()\n    {\n        return originalPosition;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the original position of the caller in the queue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2076", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerAbandonEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerAbandonEvent.setOriginalPosition", "methodParameterType": "Integer#", "methodParameterName": "originalPosition#", "methodBody": "public void setOriginalPosition(Integer originalPosition)\n    {\n        this.originalPosition = originalPosition;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param originalPosition the original position of the caller in the queue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2077", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerAbandonEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerAbandonEvent.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPosition()\n    {\n        return position;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the position of the caller at the time they abandoned the queue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2078", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerAbandonEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerAbandonEvent.setPosition", "methodParameterType": "Integer#", "methodParameterName": "position#", "methodBody": "public void setPosition(Integer position)\n    {\n        this.position = position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param position the position of the caller at the time they abandoned thequeue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2079", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LeaveEvent.java", "methodName": "org.asteriskjava.manager.event.LeaveEvent.LeaveEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public LeaveEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2080", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LeaveEvent.java", "methodName": "org.asteriskjava.manager.event.LeaveEvent.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPosition()\n    {\n        return position;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the position of the caller at the time they leave the queue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2081", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeEndEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeEndEvent.MeetMeEndEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public MeetMeEndEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2082", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeEndEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeEndEvent.getMeetMe", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMeetMe()\n    {\n        return meetMe;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the conference number.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2083", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmEvent.AlarmEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AlarmEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2084", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmEvent.getAlarm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAlarm()\n    {\n        return alarm;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the kind of alarm that happened.<p> This may be one of <ul> <li>Red Alarm</li> <li>Yellow Alarm</li> <li>Blue Alarm</li> <li>Recovering</li> <li>Loopback</li> <li>Not Open</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2085", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmEvent.setAlarm", "methodParameterType": "String#", "methodParameterName": "alarm#", "methodBody": "public void setAlarm(String alarm)\n    {\n        this.alarm = alarm;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the kind of alarm that happened.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2086", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the channel the alarm occured on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2087", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmEvent.setChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setChannel(Integer channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the channel the alarm occured on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2088", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallsCompleteEvent.ParkedCallsCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ParkedCallsCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2089", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeMuteEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeMuteEvent.MeetMeMuteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public MeetMeMuteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2090", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeMuteEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeMuteEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the user was muted or unmuted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2091", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeMuteEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeMuteEvent.setStatus", "methodParameterType": "Boolean#", "methodParameterName": "status#", "methodBody": "public void setStatus(Boolean status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether the user was muted or unmuted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2092", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelStateEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelStateEvent.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getState()\n    {\n        return getChannelStateDesc();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new state of the channel as a descriptive text. <br> This is an alias for  {@link #getChannelStateDesc()}.", "call_func_name": ["org.asteriskjava.manager.event.AbstractChannelStateEvent.getChannelStateDesc"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "2093", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractChannelStateEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractChannelStateEvent.setState", "methodParameterType": "String#", "methodParameterName": "state#", "methodBody": "public void setState(String state)\n    {\n        setChannelStateDesc(state);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the new state of the channel as a descriptive text. <p> The state property is used by Asterisk versions prior to 1.6.", "call_func_name": ["org.asteriskjava.manager.event.AbstractChannelStateEvent.setChannelStateDesc"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2094", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MasqueradeEvent.java", "methodName": "org.asteriskjava.manager.event.MasqueradeEvent.getClone", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getClone()\n    {\n        return clone;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the clone channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2095", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MasqueradeEvent.java", "methodName": "org.asteriskjava.manager.event.MasqueradeEvent.getCloneState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCloneState()\n    {\n        return AstState.str2state(cloneStateDesc);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state of the clone channel.", "call_func_name": ["org.asteriskjava.util.AstState.str2state"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.AstState.str2state": "This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>."}]}, {"index": "2096", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MasqueradeEvent.java", "methodName": "org.asteriskjava.manager.event.MasqueradeEvent.getCloneStateDesc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCloneStateDesc()\n    {\n        return cloneStateDesc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state of the clone channel as a descriptive text.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2097", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MasqueradeEvent.java", "methodName": "org.asteriskjava.manager.event.MasqueradeEvent.getOriginal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOriginal()\n    {\n        return original;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the original channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2098", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MasqueradeEvent.java", "methodName": "org.asteriskjava.manager.event.MasqueradeEvent.getOriginalState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getOriginalState()\n    {\n        return AstState.str2state(originalStateDesc);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state of the original channel.", "call_func_name": ["org.asteriskjava.util.AstState.str2state"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.AstState.str2state": "This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>."}]}, {"index": "2099", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MasqueradeEvent.java", "methodName": "org.asteriskjava.manager.event.MasqueradeEvent.getOriginalStateDesc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOriginalStateDesc()\n    {\n        return originalStateDesc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state of the original channel as a descriptive text.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2100", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VarSetEvent.java", "methodName": "org.asteriskjava.manager.event.VarSetEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel or <code>null</code> for global variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2101", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VarSetEvent.java", "methodName": "org.asteriskjava.manager.event.VarSetEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel or <code>null</code> for global variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2102", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VarSetEvent.java", "methodName": "org.asteriskjava.manager.event.VarSetEvent.getVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariable()\n    {\n        return variable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the variable that has been set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2103", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VarSetEvent.java", "methodName": "org.asteriskjava.manager.event.VarSetEvent.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue()\n    {\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new value of the variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2104", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.AgentLoginEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgentLoginEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2105", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.getAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgent()\n    {\n        return agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the agent that logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2106", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.setAgent", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public void setAgent(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the agent that logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2107", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.getLoginChan", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated public String getLoginChan()\n    {\n        return channel;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel associated with the logged in agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2108", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel associated with the logged in agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2109", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel associated with the logged in agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2110", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel associated with the logged in agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2111", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLoginEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel associated with the logged in agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2112", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.DialEvent", "methodParameterType": "DialBeginEvent#", "methodParameterName": "dialBeginEvent#", "methodBody": "public DialEvent(DialBeginEvent dialBeginEvent)\n    {\n        this(dialBeginEvent.getSource());\n        setDateReceived(dialBeginEvent.getDateReceived());\n        setTimestamp(dialBeginEvent.getTimestamp());\n        setPrivilege(dialBeginEvent.getPrivilege());\n        setCallerId(dialBeginEvent.getCallerIdNum());\n        setCallerIdName(dialBeginEvent.getCallerIdName());\n        setSrc(dialBeginEvent.getChannel());\n        setUniqueId(dialBeginEvent.getSrcUniqueId());\n        setDestUniqueId(dialBeginEvent.getDestUniqueId());\n        setDestination(dialBeginEvent.getDestChannel());\n        setDialStatus(dialBeginEvent.getDialStatus());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enro 2015-03 Workaround to build legacy DialEvent (unsupported in Asterisk 13) from new DialBeginEvent Asterisk 13.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2113", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getSubEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSubEvent()\n    {\n        return subEvent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Since Asterisk 1.6 the begin and the end of a dial command generate a Dial event. The subEvent property returns whether the dial started execution (\"Begin\") or completed (\"End\"). As Asterisk prior to 1.6 only sends one event per Dial command this always returns \"Begin\" for Asterisk prior to 1.6.<br> For an \"End\" sub event only the properies channel, unqiue id and dial status are available, for a \"Begin\" sub event all properties are available except for the dial status.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2114", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the source channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2115", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the source channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2116", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getSrc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getSrc()\n    {\n        return channel;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the source channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2117", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setSrc", "methodParameterType": "String#", "methodParameterName": "src#", "methodBody": "public void setSrc(String src)\n    {\n        this.channel = src;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the source channel. <p> Asterisk versions up to 1.4 use the \"Source\" property instead of \"Channel\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2118", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getDestination", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestination()\n    {\n        return destination;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the destination channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2119", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setDestination", "methodParameterType": "String#", "methodParameterName": "destination#", "methodBody": "public void setDestination(String destination)\n    {\n        this.destination = destination;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the destination channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2120", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getCallerId()\n    {\n        return getCallerIdNum();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": ["org.asteriskjava.manager.event.DialEvent.getCallerIdNum"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "2121", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "@Deprecated\n    public void setCallerId(String callerId)\n    {\n        setCallerIdNum(callerId);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the caller", "call_func_name": ["org.asteriskjava.manager.event.DialEvent.setCallerIdNum"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2122", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique ID of the source channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2123", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "srcUniqueId#", "methodBody": "public void setUniqueId(String srcUniqueId)\n    {\n        this.uniqueId = srcUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique ID of the source channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2124", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getSrcUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getSrcUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique ID of the source channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2125", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setSrcUniqueId", "methodParameterType": "String#", "methodParameterName": "srcUniqueId#", "methodBody": "public void setSrcUniqueId(String srcUniqueId)\n    {\n        this.uniqueId = srcUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique ID of the source channel. <p> Asterisk versions up to 1.4 use the \"SrcUniqueId\" property instead of \"UniqueId\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2126", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getDestUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestUniqueId()\n    {\n        return destUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique ID of the destination channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2127", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setDestUniqueId", "methodParameterType": "String#", "methodParameterName": "destUniqueId#", "methodBody": "public void setDestUniqueId(String destUniqueId)\n    {\n        this.destUniqueId = destUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique ID of the destination channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2128", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getDialString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDialString()\n    {\n        return dialString;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the dial string passed to the Dial application. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2129", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.setDialString", "methodParameterType": "String#", "methodParameterName": "dialString#", "methodBody": "public void setDialString(String dialString)\n    {\n        this.dialString = dialString;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the dial string passed to the Dial application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2130", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DialEvent.java", "methodName": "org.asteriskjava.manager.event.DialEvent.getDialStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDialStatus()\n    {\n        return dialStatus;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For end subevents this returns whether the completion status of the dial application.<br> Possible values are: <ul> <li>CHANUNAVAIL</li> <li>CONGESTION</li> <li>NOANSWER</li> <li>BUSY</li> <li>ANSWER</li> <li>CANCEL</li> <li>DONTCALL</li> <li>TORTURE</li> <li>INVALIDARGS</li> </ul> It corresponds the the DIALSTATUS variable used in the dialplan. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2131", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/JoinEvent.java", "methodName": "org.asteriskjava.manager.event.JoinEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getCallerId()\n    {\n        return callerIdNum;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2132", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/JoinEvent.java", "methodName": "org.asteriskjava.manager.event.JoinEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerIdNum = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2133", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/JoinEvent.java", "methodName": "org.asteriskjava.manager.event.JoinEvent.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPosition()\n    {\n        return position;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the position of the joined channel in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2134", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/JoinEvent.java", "methodName": "org.asteriskjava.manager.event.JoinEvent.setPosition", "methodParameterType": "Integer#", "methodParameterName": "position#", "methodBody": "public void setPosition(Integer position)\n    {\n        this.position = position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the position of the joined channel in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2135", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelsCompleteEvent.getEventlist", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventlist()\n    {\n        return eventlist;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the status of the eventlist (should be Complete).<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2136", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelsCompleteEvent.getListitems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListitems()\n    {\n        return listitems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of channels reported.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2137", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CoreShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.CoreShowChannelsCompleteEvent.setListitems", "methodParameterType": "Integer#", "methodParameterName": "listitems#", "methodBody": "public void setListitems(Integer listitems)\n    {\n        this.listitems = listitems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of channels reported.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2138", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewCallerIdEvent.java", "methodName": "org.asteriskjava.manager.event.NewCallerIdEvent.getCidCallingPres", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCidCallingPres()\n    {\n        return cidCallingPres;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the CallerId presentation/screening.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2139", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewCallerIdEvent.java", "methodName": "org.asteriskjava.manager.event.NewCallerIdEvent.getCidCallingPresTxt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCidCallingPresTxt()\n    {\n        return cidCallingPresTxt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the textual respresentation of the CallerId presentation/screening.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2140", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewCallerIdEvent.java", "methodName": "org.asteriskjava.manager.event.NewCallerIdEvent.setCidCallingPres", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public void setCidCallingPres(String s)\n    {\n        int spaceIdx;\n\n        if (s == null)\n        {\n            return;\n        }\n\n        spaceIdx = s.indexOf(' ');\n        if (spaceIdx <= 0)\n        {\n            spaceIdx = s.length();\n        }\n\n        try\n        {\n            this.cidCallingPres = Integer.valueOf(s.substring(0, spaceIdx));\n        }\n        catch (NumberFormatException e)\n        {\n            return;\n        }\n\n        if (s.length() > spaceIdx + 3)\n        {\n            this.cidCallingPresTxt = s.substring(spaceIdx + 2, s.length() - 1);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the CallerId presentation/screening in the form \"%d (%s)\".", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.length", "java.lang.String.substring", "java.lang.Integer.valueOf"], "call_func_parameter": [["int"], [""], ["int", "int"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "2141", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateResponseEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateResponseEvent.OriginateResponseEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public OriginateResponseEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2142", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateResponseEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateResponseEvent.getResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResponse()\n    {\n        return response;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the result of the corresponding Originate action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2143", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateResponseEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateResponseEvent.setResponse", "methodParameterType": "String#", "methodParameterName": "response#", "methodBody": "public void setResponse(String response)\n    {\n        this.response = response;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the result of the corresponding Originate action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2144", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateResponseEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateResponseEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel to connect to the outgoing call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2145", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateResponseEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateResponseEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel to connect to the outgoing call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2146", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateResponseEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateResponseEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the originated channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2147", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HangupRequestEvent.java", "methodName": "org.asteriskjava.manager.event.HangupRequestEvent.getCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCause()\n    {\n        return cause;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cause of the hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2148", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HangupRequestEvent.java", "methodName": "org.asteriskjava.manager.event.HangupRequestEvent.setCause", "methodParameterType": "Integer#", "methodParameterName": "cause#", "methodBody": "public void setCause(Integer cause)\n    {\n        this.cause = cause;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the cause of the hangup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2149", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.QueueEntryEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueEntryEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2150", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue that contains this entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2151", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue that contains this entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2152", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPosition()\n    {\n        return position;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the position of this entry in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2153", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.setPosition", "methodParameterType": "Integer#", "methodParameterName": "position#", "methodBody": "public void setPosition(Integer position)\n    {\n        this.position = position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the position of this entry in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2154", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel of this entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2155", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel of this entry. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2156", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel of this entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2157", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2158", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2159", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.getWait", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getWait()\n    {\n        return wait;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of seconds this entry has spent in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2160", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEntryEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEntryEvent.setWait", "methodParameterType": "Long#", "methodParameterName": "wait#", "methodBody": "public void setWait(Long wait)\n    {\n        this.wait = wait;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of seconds this entry has spent in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2161", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getAdmin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAdmin()\n    {\n        return admin;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the admin", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2162", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setAdmin", "methodParameterType": "String#", "methodParameterName": "admin#", "methodBody": "public void setAdmin(String admin)\n    {\n        this.admin = admin;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param admin the admin to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2163", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getBridgeType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeType()\n    {\n        return bridgeType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgeType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2164", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setBridgeType", "methodParameterType": "String#", "methodParameterName": "bridgeType#", "methodBody": "public void setBridgeType(String bridgeType)\n    {\n        this.bridgeType = bridgeType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgeType the bridgeType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2165", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getBridgeNumChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeNumChannels()\n    {\n        return bridgeNumChannels;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgeNumChannels", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2166", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setBridgeNumChannels", "methodParameterType": "String#", "methodParameterName": "bridgeNumChannels#", "methodBody": "public void setBridgeNumChannels(String bridgeNumChannels)\n    {\n        this.bridgeNumChannels = bridgeNumChannels;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgeNumChannels the bridgeNumChannels to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2167", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getBridgeUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeUniqueId()\n    {\n        return bridgeUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgeUniqueId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2168", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setBridgeUniqueId", "methodParameterType": "String#", "methodParameterName": "bridgeUniqueId#", "methodBody": "public void setBridgeUniqueId(String bridgeUniqueId)\n    {\n        this.bridgeUniqueId = bridgeUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgeUniqueId the bridgeUniqueId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2169", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getBridgeTechnology", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeTechnology()\n    {\n        return bridgeTechnology;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgeTechnology", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2170", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setBridgeTechnology", "methodParameterType": "String#", "methodParameterName": "bridgeTechnology#", "methodBody": "public void setBridgeTechnology(String bridgeTechnology)\n    {\n        this.bridgeTechnology = bridgeTechnology;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgeTechnology the bridgeTechnology to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2171", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getBridgeName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeName()\n    {\n        return bridgeName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgeName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2172", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setBridgeName", "methodParameterType": "String#", "methodParameterName": "bridgeName#", "methodBody": "public void setBridgeName(String bridgeName)\n    {\n        this.bridgeName = bridgeName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgeName the bridgeName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2173", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getBridgeCreator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeCreator()\n    {\n        return bridgeCreator;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgeCreator", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2174", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setBridgeCreator", "methodParameterType": "String#", "methodParameterName": "bridgeCreator#", "methodBody": "public void setBridgeCreator(String bridgeCreator)\n    {\n        this.bridgeCreator = bridgeCreator;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgeCreator the bridgeCreator to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2175", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public final void setConference(String conference)\n    {\n        this.conference = conference;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference the participant left.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2176", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractConfbridgeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractConfbridgeEvent.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getConference()\n    {\n        return conference;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference the participant left.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2177", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.StatusCompleteEvent.getItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getItems()\n    {\n        return items;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of channels reported. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2178", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.StatusCompleteEvent.setItems", "methodParameterType": "Integer#", "methodParameterName": "items#", "methodBody": "public void setItems(Integer items)\n    {\n        this.items = items;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of channels reported. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2179", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeLicenseEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeLicenseEvent.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the license key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2180", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeLicenseEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeLicenseEvent.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the license key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2181", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeLicenseEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeLicenseEvent.getExpires", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExpires()\n    {\n        return expires;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the date the license expires in the format \"YYYY-MM-DD\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2182", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeLicenseEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeLicenseEvent.setExpires", "methodParameterType": "String#", "methodParameterName": "expires#", "methodBody": "public void setExpires(String expires)\n    {\n        this.expires = expires;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the date the license expires in the format \"YYYY-MM-DD\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2183", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeLicenseEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeLicenseEvent.getChannels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getChannels()\n    {\n        return channels;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of licensed channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2184", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeLicenseEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeLicenseEvent.setChannels", "methodParameterType": "Integer#", "methodParameterName": "channels#", "methodBody": "public void setChannels(Integer channels)\n    {\n        this.channels = channels;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of licensed channels.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2185", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.MessageWaitingEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public MessageWaitingEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2186", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.getMailbox", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMailbox()\n    {\n        return mailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the mailbox that has waiting messages.<p> The name of the mailbox is of the form numberOfMailbox@context, e.g. 1234@default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2187", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.setMailbox", "methodParameterType": "String#", "methodParameterName": "mailbox#", "methodBody": "public void setMailbox(String mailbox)\n    {\n        this.mailbox = mailbox;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the mailbox that has waiting messages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2188", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.getWaiting", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getWaiting()\n    {\n        return waiting;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of new messages in the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2189", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.setWaiting", "methodParameterType": "Integer#", "methodParameterName": "waiting#", "methodBody": "public void setWaiting(Integer waiting)\n    {\n        this.waiting = waiting;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of new messages in the mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2190", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.getNew", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getNew()\n    {\n        return newMessages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of new messages in this mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2191", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.setNew", "methodParameterType": "Integer#", "methodParameterName": "newMessages#", "methodBody": "public void setNew(Integer newMessages)\n    {\n        this.newMessages = newMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of new messages in this mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2192", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.getOld", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getOld()\n    {\n        return oldMessages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of old messages in this mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2193", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MessageWaitingEvent.java", "methodName": "org.asteriskjava.manager.event.MessageWaitingEvent.setOld", "methodParameterType": "Integer#", "methodParameterName": "oldMessages#", "methodBody": "public void setOld(Integer oldMessages)\n    {\n        this.oldMessages = oldMessages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of old messages in this mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2194", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerJoinEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerJoinEvent.QueueCallerJoinEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueCallerJoinEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2195", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerJoinEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerJoinEvent.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPosition()\n    {\n        return position;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the position of the caller at the time they abandoned the queue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2196", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerJoinEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerJoinEvent.setPosition", "methodParameterType": "Integer#", "methodParameterName": "position#", "methodBody": "public void setPosition(Integer position)\n    {\n        this.position = position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param position the position of the caller at the time they abandoned thequeue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2197", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLogoffEvent.AgentLogoffEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgentLogoffEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2198", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLogoffEvent.getAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgent()\n    {\n        return agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the agent that logged off.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2199", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentLogoffEvent.java", "methodName": "org.asteriskjava.manager.event.AgentLogoffEvent.setAgent", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public void setAgent(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the agent that logged off.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2200", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallTimeOutEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallTimeOutEvent.ParkedCallTimeOutEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ParkedCallTimeOutEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2201", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLoginEvent.AgentCallbackLoginEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgentCallbackLoginEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2202", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLoginEvent.getAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgent()\n    {\n        return agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the agent that logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2203", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCallbackLoginEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCallbackLoginEvent.setAgent", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public void setAgent(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the agent that logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2204", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ReloadEvent.getModule", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getModule()\n    {\n        return module;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the module that has been reloaded.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2205", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ReloadEvent.setModule", "methodParameterType": "String#", "methodParameterName": "module#", "methodBody": "public void setModule(String module)\n    {\n        this.module = module;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the module that has been reloaded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2206", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ReloadEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new status of the module.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2207", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ReloadEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the new status of the module.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2208", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ReloadEvent.isEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEnabled()\n    {\n        return STATUS_ENABLED.equalsIgnoreCase(status);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the module is now enabled.<p> Available since Asterisk 1.6.", "call_func_name": ["java.lang.String.equalsIgnoreCase"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2209", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ReloadEvent.java", "methodName": "org.asteriskjava.manager.event.ReloadEvent.isDisabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDisabled()\n    {\n        return STATUS_DISABLED.equalsIgnoreCase(status);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the module is now disabled.<p> Available since Asterisk 1.6.", "call_func_name": ["java.lang.String.equalsIgnoreCase"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2210", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ExtensionStatusEvent.java", "methodName": "org.asteriskjava.manager.event.ExtensionStatusEvent.getHint", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHint()\n    {\n        return hint;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the hint assigned to the extension. The hint is used to map a channel (e.g. \"SIP/123\") to an extension (e.g. \"123\").<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2211", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ExtensionStatusEvent.java", "methodName": "org.asteriskjava.manager.event.ExtensionStatusEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state of the extension.<p> Possible values are: <ul> <li>RINGING</li> <li>INUSE | RINGING</li> <li>INUSE</li> <li>NOT_INUSE</li> <li>BUSY</li> <li>UNAVAILABLE</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2212", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ExtensionStatusEvent.java", "methodName": "org.asteriskjava.manager.event.ExtensionStatusEvent.setStatus", "methodParameterType": "Integer#", "methodParameterName": "status#", "methodBody": "public void setStatus(Integer status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the state of the extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2213", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ExtensionStatusEvent.java", "methodName": "org.asteriskjava.manager.event.ExtensionStatusEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2214", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ExtensionStatusEvent.java", "methodName": "org.asteriskjava.manager.event.ExtensionStatusEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2215", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.DbGetResponseEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public DbGetResponseEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2216", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.getFamily", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFamily()\n    {\n        return family;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the family of the database entry that was queried.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2217", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.setFamily", "methodParameterType": "String#", "methodParameterName": "family#", "methodBody": "public void setFamily(String family)\n    {\n        this.family = family;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the family of the database entry that was queried.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2218", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKey()\n    {\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the key of the database entry that was queried.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2219", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.setKey", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public void setKey(String key)\n    {\n        this.key = key;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key of the database entry that was queried.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2220", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.getVal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVal()\n    {\n        return val;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the database entry that was queried.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2221", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.setVal", "methodParameterType": "String#", "methodParameterName": "val#", "methodBody": "public void setVal(String val)\n    {\n        this.val = val;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the database entry that was queried.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2222", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DbGetResponseEvent.java", "methodName": "org.asteriskjava.manager.event.DbGetResponseEvent.setValue", "methodParameterType": "String#", "methodParameterName": "val#", "methodBody": "public void setValue(String val)\n    {\n        this.val = val;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the database entry that was queried. It seems that in ast 1.2 ( 1.2.9 +BRIStuff ? ) at least the key is not val anymore but value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2223", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/UnparkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.UnparkedCallEvent.UnparkedCallEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public UnparkedCallEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2224", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2225", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2226", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.getRemoteStationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRemoteStationId()\n    {\n        return remoteStationId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retruns the identifier of the remote fax station.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2227", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.setRemoteStationId", "methodParameterType": "String#", "methodParameterName": "remoteStationId#", "methodBody": "public void setRemoteStationId(String remoteStationId)\n    {\n        this.remoteStationId = remoteStationId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the identifier of the remote fax station.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2228", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.getLocalStationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocalStationId()\n    {\n        return localStationId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the identifier of the local fax station.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2229", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.setLocalStationId", "methodParameterType": "String#", "methodParameterName": "localStationId#", "methodBody": "public void setLocalStationId(String localStationId)\n    {\n        this.localStationId = localStationId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the identifier of the local fax station.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2230", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.getPagesTransferred", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPagesTransferred()\n    {\n        return pagesTransferred;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of pages transferred.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2231", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.setPagesTransferred", "methodParameterType": "Integer#", "methodParameterName": "pagesTransferred#", "methodBody": "public void setPagesTransferred(Integer pagesTransferred)\n    {\n        this.pagesTransferred = pagesTransferred;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of pages transferred.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2232", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.getResolution", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getResolution()\n    {\n        return resolution;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the row resolution of the received fax.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2233", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.setResolution", "methodParameterType": "Integer#", "methodParameterName": "resolution#", "methodBody": "public void setResolution(Integer resolution)\n    {\n        this.resolution = resolution;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the row resolution of the received fax.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2234", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.getTransferRate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTransferRate()\n    {\n        return transferRate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the transfer rate in bits/s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2235", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.setTransferRate", "methodParameterType": "Integer#", "methodParameterName": "transferRate#", "methodBody": "public void setTransferRate(Integer transferRate)\n    {\n        this.transferRate = transferRate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the transfer rate in bits/s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2236", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.getFilename", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFilename()\n    {\n        return filename;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the filename of the received fax including its full path on the Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2237", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxReceivedEvent.java", "methodName": "org.asteriskjava.manager.event.FaxReceivedEvent.setFilename", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "public void setFilename(String filename)\n    {\n        this.filename = filename;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the filename of the received fax.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2238", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LocalBridgeEvent.java", "methodName": "org.asteriskjava.manager.event.LocalBridgeEvent.getChannel1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel1() {\n        return channel1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The name of the Local Channel half that bridges to another channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2239", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LocalBridgeEvent.java", "methodName": "org.asteriskjava.manager.event.LocalBridgeEvent.getChannel2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel2() {\n        return channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The name of the Local Channel half that executes the dialplan.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2240", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LocalBridgeEvent.java", "methodName": "org.asteriskjava.manager.event.LocalBridgeEvent.getLocalOptimization", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocalOptimization() {\n        return localOptimization;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Local optimization values Yes No", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2241", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerlistCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.PeerlistCompleteEvent.PeerlistCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public PeerlistCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2242", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerlistCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.PeerlistCompleteEvent.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of PeerEvents that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2243", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerlistCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.PeerlistCompleteEvent.setListItems", "methodParameterType": "Integer#", "methodParameterName": "listItems#", "methodBody": "public void setListItems(Integer listItems)\n    {\n        this.listItems = listItems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of PeerEvents that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2244", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerlistCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.PeerlistCompleteEvent.getEventList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventList()\n    {\n        return eventList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns always \"Complete\".<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2245", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointListComplete.java", "methodName": "org.asteriskjava.manager.event.EndpointListComplete.EndpointListComplete", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public EndpointListComplete(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2246", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointListComplete.java", "methodName": "org.asteriskjava.manager.event.EndpointListComplete.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of PeerEvents that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2247", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointListComplete.java", "methodName": "org.asteriskjava.manager.event.EndpointListComplete.setListItems", "methodParameterType": "Integer#", "methodParameterName": "listItems#", "methodBody": "public void setListItems(Integer listItems)\n    {\n        this.listItems = listItems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of PeerEvents that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2248", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointListComplete.java", "methodName": "org.asteriskjava.manager.event.EndpointListComplete.getEventList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventList()\n    {\n        return eventList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns always \"Complete\". <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2249", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPenaltyEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPenaltyEvent.QueueMemberPenaltyEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueMemberPenaltyEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2250", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPenaltyEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPenaltyEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2251", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPenaltyEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPenaltyEvent.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2252", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPenaltyEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPenaltyEvent.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocation()\n    {\n        return location;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member's interface.<p> E.g. the channel name or agent group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2253", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPenaltyEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPenaltyEvent.setLocation", "methodParameterType": "String#", "methodParameterName": "member#", "methodBody": "public void setLocation(String member)\n    {\n        this.location = member;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the member's interface.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2254", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPenaltyEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPenaltyEvent.getPenalty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPenalty()\n    {\n        return penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new penalty.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2255", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPenaltyEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPenaltyEvent.setPenalty", "methodParameterType": "Integer#", "methodParameterName": "penalty#", "methodBody": "public void setPenalty(Integer penalty)\n    {\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the new penalty.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2256", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ResponseEvent.java", "methodName": "org.asteriskjava.manager.event.ResponseEvent.getActionId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getActionId()\n    {\n        return actionId;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the user provided action id of the ManagerAction that caused this event. If the application did not set an action id this method returns <code>null</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2257", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ResponseEvent.java", "methodName": "org.asteriskjava.manager.event.ResponseEvent.setActionId", "methodParameterType": "String#", "methodParameterName": "actionId#", "methodBody": "public final void setActionId(String actionId)\n    {\n        this.actionId = actionId;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the action id of the ManagerAction that caused this event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2258", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ResponseEvent.java", "methodName": "org.asteriskjava.manager.event.ResponseEvent.getInternalActionId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getInternalActionId()\n    {\n        return internalActionId;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the internal action id of the ManagerAction that caused this event.<p> Warning: This method is internal to Asterisk-Java and should never be used in application code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2259", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ResponseEvent.java", "methodName": "org.asteriskjava.manager.event.ResponseEvent.setInternalActionId", "methodParameterType": "String#", "methodParameterName": "internalActionId#", "methodBody": "public final void setInternalActionId(String internalActionId)\n    {\n        this.internalActionId = internalActionId;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the internal action id of the ManagerAction that caused this event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2260", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.DtmfEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public DtmfEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DtmfEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2261", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel the DTMF digit was sent or received on. The channel name is of the form \"Zap/&lt;channel number&gt;\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2262", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2263", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the the channel the DTMF digit was sent or received on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2264", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2265", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.getDigit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDigit()\n    {\n        return digit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the DTMF digit that was sent or received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2266", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.setDigit", "methodParameterType": "String#", "methodParameterName": "digit#", "methodBody": "public void setDigit(String digit)\n    {\n        this.digit = digit;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the DTMF digit that was sent or received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2267", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.getDirection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDirection()\n    {\n        return direction;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the DTMF digit was sent or received.<p> Possible values are: <ul> <li>Received</li> <li>Sent</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2268", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.setDirection", "methodParameterType": "String#", "methodParameterName": "direction#", "methodBody": "public void setDirection(String direction)\n    {\n        this.direction = direction;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether the DTMF digit was sent or received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2269", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.isBegin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean isBegin()\n    {\n        return begin != null && begin;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this event represents an <code>AST_FRAME_DTMF_BEGIN</code> frame.<p> Gerally your application will want to ignore begin events. You will only need them if you want to make use of the duration a DTMF key was pressed.<p> Note that there will be DTMF end events without a corresponding begin event as not all systems (including Asterisk prior to 1.4.0) support variable-length DTMF.", "call_func_name": ["java.lang.Boolean.booleanValue", "java.lang.Boolean.valueOf"], "call_func_parameter": [[""], ["boolean"]], "passed_comments": "/"}, {"index": "2270", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.setBegin", "methodParameterType": "Boolean#", "methodParameterName": "begin#", "methodBody": "public void setBegin(Boolean begin)\n    {\n        this.begin = begin;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether this event represents an <code>AST_FRAME_DTMF_BEGIN</code> frame.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2271", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.isEnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEnd()\n    {\n        return end != null && end;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this event represents an <code>AST_FRAME_DTMF_END</code> frame.<p> DTMF information received from systems that do not support variable-length DTMF you will only see DTMF end events.", "call_func_name": ["java.lang.Boolean.booleanValue"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "2272", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.setEnd", "methodParameterType": "Boolean#", "methodParameterName": "end#", "methodBody": "public void setEnd(Boolean end)\n    {\n        this.end = end;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether this event represents an <code>AST_FRAME_DTMF_END</code> frame.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2273", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.isReceived", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isReceived()\n    {\n        return DIRECTION_RECEIVED.equalsIgnoreCase(direction);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the DTMF digit was received by Asterisk (sent from the device to Asterisk).", "call_func_name": ["java.lang.String.equalsIgnoreCase"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2274", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DtmfEvent.java", "methodName": "org.asteriskjava.manager.event.DtmfEvent.isSent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSent()\n    {\n        return DIRECTION_SENT.equalsIgnoreCase(direction);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the DTMF digit was sent from Asterisk to the device.", "call_func_name": ["java.lang.String.equalsIgnoreCase"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2275", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.getNewname", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getNewname()\n    {\n        return newname;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2276", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.setNewname", "methodParameterType": "String#", "methodParameterName": "newname#", "methodBody": "public final void setNewname(final String newname)\n    {\n        this.newname = newname;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the new name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2277", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the old name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2278", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the old name of the channel.<p> The \"Oldchannel\" property has been renamed to \"Channel\" as of Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2279", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.getOldname", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated public final String getOldname()\n    {\n        return channel;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the old name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2280", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.setOldname", "methodParameterType": "String#", "methodParameterName": "oldname#", "methodBody": "public final void setOldname(final String oldname)\n    {\n        this.channel = oldname;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the old name of the channel.<p> The \"Oldchannel\" property is used by Asterisk up to 1.4 and has been renamed to \"Channel\" as of Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2281", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2282", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public final void setUniqueId(final String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2283", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.getNewUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getNewUniqueId()\n    {\n        return newUniqueId;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new unique id of the channel. <p> This property is only available on BRIstuffed Asterisk servers. <p> The purpose of this property is unclear as the unique id is supposed to never change.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2284", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RenameEvent.java", "methodName": "org.asteriskjava.manager.event.RenameEvent.setNewUniqueId", "methodParameterType": "String#", "methodParameterName": "newUniqueId#", "methodBody": "public final void setNewUniqueId(final String newUniqueId)\n    {\n        this.newUniqueId = newUniqueId;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the new unique id of the channel. <p> This property is only available on BRIstuffed Asterisk servers. <p> The purpose of this property is unclear as the unique id is supposed to never change.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2285", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateSuccessEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateSuccessEvent.OriginateSuccessEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public OriginateSuccessEvent(Object source)\n    {\n        super(source);\n        setResponse(\"Success\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2286", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyEntryEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyEntryEvent.getBuddy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBuddy()\n    {\n        return buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2287", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyEntryEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyEntryEvent.setBuddy", "methodParameterType": "String#", "methodParameterName": "buddy#", "methodBody": "public void setBuddy(String buddy)\n    {\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2288", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyEntryEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyEntryEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2289", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyEntryEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyEntryEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2290", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyEntryEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyEntryEvent.getFullname", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFullname()\n    {\n        return fullname;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the full name of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2291", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyEntryEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyEntryEvent.setFullname", "methodParameterType": "String#", "methodParameterName": "fullname#", "methodBody": "public void setFullname(String fullname)\n    {\n        this.fullname = fullname;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the full name of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2292", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerLeaveEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerLeaveEvent.QueueCallerLeaveEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueCallerLeaveEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2293", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerLeaveEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerLeaveEvent.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPosition()\n    {\n        return position;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the position of the caller at the time they abandoned the queue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2294", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueCallerLeaveEvent.java", "methodName": "org.asteriskjava.manager.event.QueueCallerLeaveEvent.setPosition", "methodParameterType": "Integer#", "methodParameterName": "position#", "methodBody": "public void setPosition(Integer position)\n    {\n        this.position = position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param position the position of the caller at the time they abandoned thequeue", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2295", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.RegistryEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public RegistryEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2296", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.getChannelType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannelType()\n    {\n        return channelType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of channel that is registered, that is \"IAX2\" for an IAX2 channel or \"SIP\" for a SIP channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2297", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setChannelType", "methodParameterType": "String#", "methodParameterName": "channelType#", "methodBody": "public void setChannelType(String channelType)\n    {\n        this.channelType = channelType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the type of channel that is registered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2298", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.getChannelDriver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated public String getChannelDriver()\n    {\n        return channelType;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of channel that is registered, that is \"IAX2\" for an IAX2 channel or \"SIP\" for a SIP channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2299", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setChannelDriver", "methodParameterType": "String#", "methodParameterName": "channelDriver#", "methodBody": "@Deprecated public void setChannelDriver(String channelDriver)\n    {\n        this.channelType = channelDriver;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the type of channel that is registered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2300", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated public String getChannel()\n    {\n        return channelType;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of channel that is registered, that is \"IAX2\" for an IAX2 channel or \"SIP\" for a SIP channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2301", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "@Deprecated public void setChannel(String channel)\n    {\n        this.channelType = channel;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the type of channel that is registered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2302", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.getDomain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDomain()\n    {\n        return domain;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the domain or host name of the SIP or IAX2 server.<p> This is the host part used in the <code>register</code> lines in <code>iax.conf</code> and <code>sip.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2303", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setDomain", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public void setDomain(String domain)\n    {\n        this.domain = domain;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the domain or host name of the SIP or IAX2 server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2304", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsername()\n    {\n        return username;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the username used for registration.<p> SIP send the username in case of a registration timeout, IAX2 in case of a registration failure. Otherwise the username is <code>null</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2305", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username)\n    {\n        this.username = username;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the username used for registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2306", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setUser", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "@Deprecated public void setUser(String username)\n    {\n        this.username = username;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the username used for registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2307", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the registration state.<p> For sip this may be one of (not sure if all of these are exposed via the manager api, at least \"Registered\" and \"Timeout\" are used though) <ul> <li>Registered</li> <li>Unregistered</li> <li>Request Sent</li> <li>Auth. Sent</li> <li>Rejected</li> <li>Timeout</li> <li>No Authentication</li> <li>Unreachable</li> </ul> IAX2 only uses <ul> <li>Rejected</li> </ul> Successful IAX2 registrations do not use the this property at all.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2308", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the registration state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2309", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.getCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCause()\n    {\n        return cause;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cause of a rejected registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2310", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistryEvent.java", "methodName": "org.asteriskjava.manager.event.RegistryEvent.setCause", "methodParameterType": "String#", "methodParameterName": "cause#", "methodBody": "public void setCause(String cause)\n    {\n        this.cause = cause;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the cause of a rejected registration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2311", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeChatMessageEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeChatMessageEvent.getTo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTo()\n    {\n        return to;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the recipient of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2312", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeChatMessageEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeChatMessageEvent.setTo", "methodParameterType": "String#", "methodParameterName": "to#", "methodBody": "public void setTo(String to)\n    {\n        this.to = to;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the recipient of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2313", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeChatMessageEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeChatMessageEvent.getFrom", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFrom()\n    {\n        return from;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the sender of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2314", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeChatMessageEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeChatMessageEvent.setFrom", "methodParameterType": "String#", "methodParameterName": "from#", "methodBody": "public void setFrom(String from)\n    {\n        this.from = from;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype username of the sender of this chat message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2315", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeChatMessageEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeChatMessageEvent.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage()\n    {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Base64 encoded message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2316", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeChatMessageEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeChatMessageEvent.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message)\n    {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Base64 encoded message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2317", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeChatMessageEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeChatMessageEvent.getDecodedMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDecodedMessage()\n    {\n        if (message == null)\n        {\n            return null;\n        }\n        return new String(Base64.base64ToByteArray(message), StandardCharsets.UTF_8);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the decoded message.", "call_func_name": ["org.asteriskjava.util.Base64.base64ToByteArray", "java.lang.String.<init>"], "call_func_parameter": [["java.lang.String"], ["byte[]", "java.nio.charset.Charset"]], "passed_comments": [{"org.asteriskjava.util.Base64.base64ToByteArray": "Translates the specified Base64 string (as per Preferences.get(byte[])) into a byte array."}]}, {"index": "2318", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getHoldTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getHoldTime()\n    {\n        return holdTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the amount of time the caller was on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2319", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setHoldTime", "methodParameterType": "Long#", "methodParameterName": "holdtime#", "methodBody": "public void setHoldTime(Long holdtime)\n    {\n        this.holdTime = holdtime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the amount of time the caller was on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2320", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getBridgedChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgedChannel()\n    {\n        return bridgedChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique ID of the queue member channel that is taking the call. This is useful when trying to link recording filenames back to a particular call from the queue. <p> Available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2321", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setBridgedChannel", "methodParameterType": "String#", "methodParameterName": "bridgedChannel#", "methodBody": "public void setBridgedChannel(String bridgedChannel)\n    {\n        this.bridgedChannel = bridgedChannel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique ID of the queue member channel that is taking the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2322", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getRingtime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getRingtime()\n    {\n        return ringtime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the amount of time the agent's channel was ringing before answered. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2323", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestExten()\n    {\n        return destExten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destExten", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2324", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestExten", "methodParameterType": "String#", "methodParameterName": "destExten#", "methodBody": "public void setDestExten(String destExten)\n    {\n        this.destExten = destExten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destExten the destExten to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2325", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestChannelStateDesc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelStateDesc()\n    {\n        return destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelStateDesc", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2326", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestChannelStateDesc", "methodParameterType": "String#", "methodParameterName": "destChannelStateDesc#", "methodBody": "public void setDestChannelStateDesc(String destChannelStateDesc)\n    {\n        this.destChannelStateDesc = destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelStateDesc the destChannelStateDesc to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2327", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestUniqueId()\n    {\n        return destUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destUniqueId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2328", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestUniqueId", "methodParameterType": "String#", "methodParameterName": "destUniqueId#", "methodBody": "public void setDestUniqueId(String destUniqueId)\n    {\n        this.destUniqueId = destUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destUniqueId the destUniqueId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2329", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestConnectedLineNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineNum()\n    {\n        return destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2330", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestConnectedLineNum", "methodParameterType": "String#", "methodParameterName": "destConnectedLineNum#", "methodBody": "public void setDestConnectedLineNum(String destConnectedLineNum)\n    {\n        this.destConnectedLineNum = destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineNum the destConnectedLineNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2331", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestConnectedLineName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineName()\n    {\n        return destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2332", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestConnectedLineName", "methodParameterType": "String#", "methodParameterName": "destConnectedLineName#", "methodBody": "public void setDestConnectedLineName(String destConnectedLineName)\n    {\n        this.destConnectedLineName = destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineName the destConnectedLineName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2333", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestCallerIdName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdName()\n    {\n        return destCallerIdName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2334", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestCallerIdName", "methodParameterType": "String#", "methodParameterName": "destCallerIdName#", "methodBody": "public void setDestCallerIdName(String destCallerIdName)\n    {\n        this.destCallerIdName = destCallerIdName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdName the destCallerIdName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2335", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestCallerIdNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdNum()\n    {\n        return destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2336", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestCallerIdNum", "methodParameterType": "String#", "methodParameterName": "destCallerIdNum#", "methodBody": "public void setDestCallerIdNum(String destCallerIdNum)\n    {\n        this.destCallerIdNum = destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdNum the destCallerIdNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2337", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestContext()\n    {\n        return destContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destContext", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2338", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestContext", "methodParameterType": "String#", "methodParameterName": "destContext#", "methodBody": "public void setDestContext(String destContext)\n    {\n        this.destContext = destContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destContext the destContext to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2339", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestPriority()\n    {\n        return destPriority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destPriority", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2340", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestPriority", "methodParameterType": "String#", "methodParameterName": "destPriority#", "methodBody": "public void setDestPriority(String destPriority)\n    {\n        this.destPriority = destPriority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destPriority the destPriority to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2341", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannel()\n    {\n        return destChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2342", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestChannel", "methodParameterType": "String#", "methodParameterName": "destChannel#", "methodBody": "public void setDestChannel(String destChannel)\n    {\n        this.destChannel = destChannel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannel the destChannel to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2343", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getDestChannelState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelState()\n    {\n        return destChannelState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelState", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2344", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setDestChannelState", "methodParameterType": "String#", "methodParameterName": "destChannelState#", "methodBody": "public void setDestChannelState(String destChannelState)\n    {\n        this.destChannelState = destChannelState;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelState the destChannelState to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2345", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the iface", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2346", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentConnectEvent.java", "methodName": "org.asteriskjava.manager.event.AgentConnectEvent.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param iface the iface to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2347", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ModuleLoadReportEvent.java", "methodName": "org.asteriskjava.manager.event.ModuleLoadReportEvent.getModuleLoadStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getModuleLoadStatus()\n    {\n        return moduleLoadStatus;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the load status. Currently this is always \"Done\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2348", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ModuleLoadReportEvent.java", "methodName": "org.asteriskjava.manager.event.ModuleLoadReportEvent.getModuleSelection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getModuleSelection()\n    {\n        return moduleSelection;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether loading the pre-load modules has been completed or all modules have been loaded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2349", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ModuleLoadReportEvent.java", "methodName": "org.asteriskjava.manager.event.ModuleLoadReportEvent.getModuleCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getModuleCount()\n    {\n        return moduleCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of modules that have been loaded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2350", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChallengeResponseFailedEvent.java", "methodName": "org.asteriskjava.manager.event.ChallengeResponseFailedEvent.ChallengeResponseFailedEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ChallengeResponseFailedEvent(Object source) {\n\t\tsuper(source);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2351", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsCompleteEvent.AgentsCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgentsCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2352", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the callerId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2353", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param callerId the callerId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2354", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.getLocalStationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocalStationId()\n    {\n        return localStationId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localStationId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2355", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.setLocalStationId", "methodParameterType": "String#", "methodParameterName": "localStationId#", "methodBody": "public void setLocalStationId(String localStationId)\n    {\n        this.localStationId = localStationId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localStationId the localStationId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2356", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.getRemoteStationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRemoteStationId()\n    {\n        return remoteStationId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the remoteStationId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2357", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.setRemoteStationId", "methodParameterType": "String#", "methodParameterName": "remoteStationId#", "methodBody": "public void setRemoteStationId(String remoteStationId)\n    {\n        this.remoteStationId = remoteStationId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param remoteStationId the remoteStationId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2358", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.getPagesTransferred", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPagesTransferred()\n    {\n        return pagesTransferred;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the pagesTransferred", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2359", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.setPagesTransferred", "methodParameterType": "String#", "methodParameterName": "pagesTransferred#", "methodBody": "public void setPagesTransferred(String pagesTransferred)\n    {\n        this.pagesTransferred = pagesTransferred;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param pagesTransferred the pagesTransferred to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2360", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.getResolution", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResolution()\n    {\n        return resolution;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resolution", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2361", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.setResolution", "methodParameterType": "String#", "methodParameterName": "resolution#", "methodBody": "public void setResolution(String resolution)\n    {\n        this.resolution = resolution;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resolution the resolution to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2362", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.getTransferRate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTransferRate()\n    {\n        return transferRate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the transferRate", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2363", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.setTransferRate", "methodParameterType": "String#", "methodParameterName": "transferRate#", "methodBody": "public void setTransferRate(String transferRate)\n    {\n        this.transferRate = transferRate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param transferRate the transferRate to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2364", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.getFileName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFileName()\n    {\n        return fileName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the fileName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2365", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SendFaxEvent.java", "methodName": "org.asteriskjava.manager.event.SendFaxEvent.setFileName", "methodParameterType": "String#", "methodParameterName": "fileName#", "methodBody": "public void setFileName(String fileName)\n    {\n        this.fileName = fileName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param fileName the fileName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2366", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueStatusCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.QueueStatusCompleteEvent.QueueStatusCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueStatusCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2367", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldEvent.java", "methodName": "org.asteriskjava.manager.event.HoldEvent.HoldEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public HoldEvent(Object source)\n    {\n        super(source);\n        /*\n         * Asterisk prior to 1.6 and after 11 uses Hold and Unhold events\n         * instead of the status So we set the status to true in the Hold event\n         * and to false in Unhold. For Asterisk 1.6-11 this is overridden by the\n         * status property received with the hold event.\n         */\n        setStatus(true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HoldEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2368", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.CdrEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public CdrEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2369", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getAccountCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccountCode()\n    {\n        return accountCode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the account number that is usually used to identify the party to bill for the call.<p> Corresponds to CDR field <code>accountcode</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2370", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setAccountCode", "methodParameterType": "String#", "methodParameterName": "accountCode#", "methodBody": "public void setAccountCode(String accountCode)\n    {\n        this.accountCode = accountCode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the account number.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2371", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getSrc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSrc()\n    {\n        return src;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2372", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setSrc", "methodParameterType": "String#", "methodParameterName": "source#", "methodBody": "public void setSrc(String source)\n    {\n        this.src = source;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2373", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getDestination", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestination()\n    {\n        return destination;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination extension.<p> Corresponds to CDR field <code>dst</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2374", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setDestination", "methodParameterType": "String#", "methodParameterName": "destination#", "methodBody": "public void setDestination(String destination)\n    {\n        this.destination = destination;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2375", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getDestinationContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestinationContext()\n    {\n        return destinationContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the destination context.<p> Corresponds to CDR field <code>dcontext</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2376", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setDestinationContext", "methodParameterType": "String#", "methodParameterName": "destinationContext#", "methodBody": "public void setDestinationContext(String destinationContext)\n    {\n        this.destinationContext = destinationContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the destination context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2377", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2378", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerId = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2379", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel, for example \"SIP/1310-asfe\".<p> Corresponds to CDR field <code>channel</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2380", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2381", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getDestinationChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestinationChannel()\n    {\n        return destinationChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the destination channel if appropriate.<p> Corresponds to CDR field <code>dstchannel</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2382", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setDestinationChannel", "methodParameterType": "String#", "methodParameterName": "destinationChannel#", "methodBody": "public void setDestinationChannel(String destinationChannel)\n    {\n        this.destinationChannel = destinationChannel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the destination channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2383", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getLastApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLastApplication()\n    {\n        return lastApplication;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the last application if appropriate, for example \"VoiceMail\".<p> Corresponds to CDR field <code>lastapp</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2384", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setLastApplication", "methodParameterType": "String#", "methodParameterName": "lastApplication#", "methodBody": "public void setLastApplication(String lastApplication)\n    {\n        this.lastApplication = lastApplication;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the last application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2385", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getLastData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLastData()\n    {\n        return lastData;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the last application's data (arguments), for example \"s1234\".<p> Corresponds to CDR field <code>lastdata</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2386", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setLastData", "methodParameterType": "String#", "methodParameterName": "lastData#", "methodBody": "public void setLastData(String lastData)\n    {\n        this.lastData = lastData;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the last application's data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2387", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getStartTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStartTime()\n    {\n        return startTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns when the call has started.<p> This corresponds to CDR field <code>start</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2388", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getStartTimeAsDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getStartTimeAsDate()\n    {\n        return DateUtil.parseDateTime(startTime);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the start time as Date object.<p> This method asumes that the Asterisk server's timezone equals the default  timezone of your JVM.", "call_func_name": ["org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the default time zone."}]}, {"index": "2389", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getStartTimeAsDate", "methodParameterType": "TimeZone#", "methodParameterName": "tz#", "methodBody": "public Date getStartTimeAsDate(TimeZone tz)\n    {\n        return DateUtil.parseDateTime(startTime, tz);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the start time as Date object.", "call_func_name": ["org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [["java.lang.String", "java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the given time zone."}]}, {"index": "2390", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setStartTime", "methodParameterType": "String#", "methodParameterName": "startTime#", "methodBody": "public void setStartTime(String startTime)\n    {\n        this.startTime = startTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the date/time when the call has started.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2391", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getAnswerTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAnswerTime()\n    {\n        return answerTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns when the call was answered.<p> This corresponds to CDR field <code>answered</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2392", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getAnswerTimeAsDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getAnswerTimeAsDate()\n    {\n        return DateUtil.parseDateTime(answerTime);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the answer time as Date object.<p> This method asumes that the Asterisk server's timezone equals the default  timezone of your JVM.", "call_func_name": ["org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the default time zone."}]}, {"index": "2393", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getAnswerTimeAsDate", "methodParameterType": "TimeZone#", "methodParameterName": "tz#", "methodBody": "public Date getAnswerTimeAsDate(TimeZone tz)\n    {\n        return DateUtil.parseDateTime(answerTime, tz);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the answer time as Date object.", "call_func_name": ["org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [["java.lang.String", "java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the given time zone."}]}, {"index": "2394", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setAnswerTime", "methodParameterType": "String#", "methodParameterName": "answerTime#", "methodBody": "public void setAnswerTime(String answerTime)\n    {\n        this.answerTime = answerTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the date/time when the call was answered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2395", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getEndTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEndTime()\n    {\n        return endTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns when the call has ended.<p> This corresponds to CDR field <code>end</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2396", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getEndTimeAsDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getEndTimeAsDate()\n    {\n        return DateUtil.parseDateTime(endTime);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the end time as Date object.<p> This method asumes that the Asterisk server's timezone equals the default  timezone of your JVM.", "call_func_name": ["org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the default time zone."}]}, {"index": "2397", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getEndTimeAsDate", "methodParameterType": "TimeZone#", "methodParameterName": "tz#", "methodBody": "public Date getEndTimeAsDate(TimeZone tz)\n    {\n        return DateUtil.parseDateTime(endTime, tz);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the end time as Date object.", "call_func_name": ["org.asteriskjava.util.DateUtil.parseDateTime"], "call_func_parameter": [["java.lang.String", "java.util.TimeZone"]], "passed_comments": [{"org.asteriskjava.util.DateUtil.parseDateTime": "Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using the given time zone."}]}, {"index": "2398", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setEndTime", "methodParameterType": "String#", "methodParameterName": "endTime#", "methodBody": "public void setEndTime(String endTime)\n    {\n        this.endTime = endTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the date/time when the call has ended.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2399", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getDuration()\n    {\n        return duration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the total time (in seconds) the caller spent in the system from dial to hangup.<p> Corresponds to CDR field <code>duration</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2400", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setDuration", "methodParameterType": "Integer#", "methodParameterName": "duration#", "methodBody": "public void setDuration(Integer duration)\n    {\n        this.duration = duration;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the total time in system.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2401", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getBillableSeconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getBillableSeconds()\n    {\n        return billableSeconds;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the total time (in seconds) the call was up from answer to hangup.<p> Corresponds to CDR field <code>billsec</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2402", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setBillableSeconds", "methodParameterType": "Integer#", "methodParameterName": "billableSeconds#", "methodBody": "public void setBillableSeconds(Integer billableSeconds)\n    {\n        this.billableSeconds = billableSeconds;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the total time in call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2403", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getDisposition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDisposition()\n    {\n        return disposition;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns what happened to the call.<p> This is one of <ul> <li> {@link #DISPOSITION_NO_ANSWER}<li> {@link #DISPOSITION_FAILED}<li> {@link #DISPOSITION_BUSY}<li> {@link #DISPOSITION_ANSWERED}<li> {@link #DISPOSITION_UNKNOWN}</ul> Corresponds to CDR field <code>disposition</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2404", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setDisposition", "methodParameterType": "String#", "methodParameterName": "disposition#", "methodBody": "public void setDisposition(String disposition)\n    {\n        this.disposition = disposition;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the disposition.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2405", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getAmaFlags", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAmaFlags()\n    {\n        return amaFlags;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AMA (Automated Message Accounting) flags.<p> This is one of <ul> <li> {@link #AMA_FLAG_OMIT}<li> {@link #AMA_FLAG_BILLING}<li> {@link #AMA_FLAG_DOCUMENTATION}<li> {@link #AMA_FLAG_UNKNOWN}</ul> Corresponds to CDR field <code>amaflags</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2406", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setAmaFlags", "methodParameterType": "String#", "methodParameterName": "amaFlags#", "methodBody": "public void setAmaFlags(String amaFlags)\n    {\n        this.amaFlags = amaFlags;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the AMA (Automated Message Accounting) flags.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2407", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2408", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2409", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.getUserField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUserField()\n    {\n        return userField;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the user-defined field as set by <code>Set(CDR(userfield)=Value)</code>.<p> Corresponds to CDR field <code>userfield</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2410", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/CdrEvent.java", "methodName": "org.asteriskjava.manager.event.CdrEvent.setUserField", "methodParameterType": "String#", "methodParameterName": "userField#", "methodBody": "public void setUserField(String userField)\n    {\n        this.userField = userField;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the user-defined field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2411", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.PeerEntryEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public PeerEntryEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2412", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getChannelType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannelType()\n    {\n        return channelType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this event represents a SIP or an IAX peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2413", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getObjectUserName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getObjectUserName()\n    {\n        return objectUserName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2414", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getChanObjectType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChanObjectType()\n    {\n        return chanObjectType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For SIP peers this is either \"peer\" or \"user\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2415", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getIpAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getIpAddress()\n    {\n        return ipAddress;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the IP address of the peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2416", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setIpAddress", "methodParameterType": "String#", "methodParameterName": "ipAddress#", "methodBody": "public void setIpAddress(String ipAddress)\n    {\n        this.ipAddress = ipAddress;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the IP address of the peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2417", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getIpPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public Integer getIpPort()\n    {\n        return port;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port of the peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2418", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPort()\n    {\n        return port;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the port of the peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2419", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getForceRport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getForceRport()\n    {\n        return forceRport;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the nat option is set to <code>force_rport</code>.<br/> Available since Asterisk 1.8", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2420", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getVideoSupport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getVideoSupport()\n    {\n        return videoSupport;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2421", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setVideoSupport", "methodParameterType": "Boolean#", "methodParameterName": "videoSupport#", "methodBody": "public void setVideoSupport(Boolean videoSupport)\n    {\n        this.videoSupport = videoSupport;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2422", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getTextSupport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getTextSupport()\n    {\n        return textSupport;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the peer supports text messages. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2423", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of this peer. <p> For SIP peers this is one of: <dl> <dt>\"UNREACHABLE\"</dt> <dd></dd> <dt>\"LAGGED (%d ms)\"</dt> <dd></dd> <dt>\"OK (%d ms)\"</dt> <dd></dd> <dt>\"UNKNOWN\"</dt> <dd></dd> <dt>\"Unmonitored\"</dt> <dd></dd> </dl>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2424", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status of this peer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2425", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getRealtimeDevice", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRealtimeDevice()\n    {\n        return realtimeDevice;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2426", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setRealtimeDevice", "methodParameterType": "String#", "methodParameterName": "realtimeDevice#", "methodBody": "public void setRealtimeDevice(String realtimeDevice)\n    {\n        this.realtimeDevice = realtimeDevice;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2427", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getTrunk", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getTrunk()\n    {\n        return trunk;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether to use IAX2 trunking with this peer. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2428", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getAutoComedia", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAutoComedia()\n    {\n        return autoComedia;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the autoComedia", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2429", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setAutoComedia", "methodParameterType": "String#", "methodParameterName": "autoComedia#", "methodBody": "public void setAutoComedia(String autoComedia)\n    {\n        this.autoComedia = autoComedia;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param autoComedia the autoComedia to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2430", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getAutoForcerport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAutoForcerport()\n    {\n        return autoForcerport;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the autoForcerport", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2431", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setAutoForcerport", "methodParameterType": "String#", "methodParameterName": "autoForcerport#", "methodBody": "public void setAutoForcerport(String autoForcerport)\n    {\n        this.autoForcerport = autoForcerport;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param autoForcerport the autoForcerport to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2432", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getComedia", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getComedia()\n    {\n        return comedia;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the comedia", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2433", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setComedia", "methodParameterType": "String#", "methodParameterName": "comedia#", "methodBody": "public void setComedia(String comedia)\n    {\n        this.comedia = comedia;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param comedia the comedia to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2434", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription()\n    {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2435", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description)\n    {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2436", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.getAccountcode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccountcode()\n    {\n        return accountcode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the accountcode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2437", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/PeerEntryEvent.java", "methodName": "org.asteriskjava.manager.event.PeerEntryEvent.setAccountcode", "methodParameterType": "String#", "methodParameterName": "accountcode#", "methodBody": "public void setAccountcode(String accountcode)\n    {\n        this.accountcode = accountcode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param the accountcode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2438", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyStatusEvent.getBuddy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBuddy()\n    {\n        return buddy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the address of the buddy. The format is \"Skype/user@buddy\" where user is the Skype username of the Skype for Asterisk user and buddy is the Skype username of the buddy who changed his status.<p> For ease of use consider using  {@link #getUser()} and {@link #getBuddySkypename()} which already dothe parsing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2439", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyStatusEvent.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUser()\n    {\n        return buddyGroup(1);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the Skype for Asterisk user whose buddy changed his status.", "call_func_name": ["org.asteriskjava.manager.event.SkypeBuddyStatusEvent.buddyGroup"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "2440", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyStatusEvent.getBuddySkypename", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBuddySkypename()\n    {\n        return buddyGroup(2);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype username of the buddy who changed his status.", "call_func_name": ["org.asteriskjava.manager.event.SkypeBuddyStatusEvent.buddyGroup"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "2441", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyStatusEvent.setBuddy", "methodParameterType": "String#", "methodParameterName": "buddy#", "methodBody": "public void setBuddy(String buddy)\n    {\n        this.buddy = buddy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the address of buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2442", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeBuddyStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeBuddyStatusEvent.getBuddyStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBuddyStatus()\n    {\n        return buddyStatus;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of the buddy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2443", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsCompleteEvent.setEventList", "methodParameterType": "String#", "methodParameterName": "eventList#", "methodBody": "public void setEventList(String eventList)\n    {\n        this.eventList = eventList;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status of the list that is always \"Complete\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2444", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsCompleteEvent.getEventList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventList()\n    {\n        return eventList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of the list that is always \"Complete\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2445", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsCompleteEvent.setListItems", "methodParameterType": "String#", "methodParameterName": "listItems#", "methodBody": "public void setListItems(String listItems)\n    {\n        this.listItems = listItems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number items returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2446", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsCompleteEvent.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number listitems.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2447", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConnectEvent.java", "methodName": "org.asteriskjava.manager.event.ConnectEvent.ConnectEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ConnectEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2448", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConnectEvent.java", "methodName": "org.asteriskjava.manager.event.ConnectEvent.getProtocolIdentifier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getProtocolIdentifier()\n    {\n        return protocolIdentifier;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the version of the protocol. For example \"Asterisk Call Manager/1.0\" for Asterisk up to 1.4 and \"Asterisk Call Manager/1.1\" for Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2449", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConnectEvent.java", "methodName": "org.asteriskjava.manager.event.ConnectEvent.setProtocolIdentifier", "methodParameterType": "String#", "methodParameterName": "protocolIdentifier#", "methodBody": "public void setProtocolIdentifier(String protocolIdentifier)\n    {\n        this.protocolIdentifier = protocolIdentifier;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the version of the protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2450", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ListDialplanEvent.java", "methodName": "org.asteriskjava.manager.event.ListDialplanEvent.getExtension", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtension()\n    {\n        return extension;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension or extension pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2451", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ListDialplanEvent.java", "methodName": "org.asteriskjava.manager.event.ListDialplanEvent.getExtensionLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExtensionLabel()\n    {\n        return extensionLabel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the extension label.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2452", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ListDialplanEvent.java", "methodName": "org.asteriskjava.manager.event.ListDialplanEvent.isHint", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isHint()\n    {\n        return hint;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether this is a hint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2453", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ListDialplanEvent.java", "methodName": "org.asteriskjava.manager.event.ListDialplanEvent.getApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getApplication()\n    {\n        return application;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the application configured to handle this priority.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2454", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ListDialplanEvent.java", "methodName": "org.asteriskjava.manager.event.ListDialplanEvent.getAppData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAppData()\n    {\n        return appData;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the parameters of the application configured to handle this priority.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2455", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ListDialplanEvent.java", "methodName": "org.asteriskjava.manager.event.ListDialplanEvent.getRegistrar", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRegistrar()\n    {\n        return registrar;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the registrar that registered this priority.<p> Typical values are \"features\" for the parkedcalls context, \"pbx_config\" for priorities defined in <code>extensions.conf</code> or \"app_dial\" for the  app_dial_gosub_virtual_context context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2456", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getRingtime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getRingtime()\n    {\n        return ringtime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the amount of time the agent's channel was ringing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2457", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestExten()\n    {\n        return destExten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destExten", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2458", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestExten", "methodParameterType": "String#", "methodParameterName": "destExten#", "methodBody": "public void setDestExten(String destExten)\n    {\n        this.destExten = destExten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destExten the destExten to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2459", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestChannelStateDesc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelStateDesc()\n    {\n        return destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelStateDesc", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2460", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestChannelStateDesc", "methodParameterType": "String#", "methodParameterName": "destChannelStateDesc#", "methodBody": "public void setDestChannelStateDesc(String destChannelStateDesc)\n    {\n        this.destChannelStateDesc = destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelStateDesc the destChannelStateDesc to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2461", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestUniqueId()\n    {\n        return destUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destUniqueId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2462", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestUniqueId", "methodParameterType": "String#", "methodParameterName": "destUniqueId#", "methodBody": "public void setDestUniqueId(String destUniqueId)\n    {\n        this.destUniqueId = destUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destUniqueId the destUniqueId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2463", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestConnectedLineNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineNum()\n    {\n        return destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2464", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestConnectedLineNum", "methodParameterType": "String#", "methodParameterName": "destConnectedLineNum#", "methodBody": "public void setDestConnectedLineNum(String destConnectedLineNum)\n    {\n        this.destConnectedLineNum = destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineNum the destConnectedLineNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2465", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestConnectedLineName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineName()\n    {\n        return destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2466", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestConnectedLineName", "methodParameterType": "String#", "methodParameterName": "destConnectedLineName#", "methodBody": "public void setDestConnectedLineName(String destConnectedLineName)\n    {\n        this.destConnectedLineName = destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineName the destConnectedLineName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2467", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestCallerIdName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdName()\n    {\n        return destCallerIdName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2468", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestCallerIdName", "methodParameterType": "String#", "methodParameterName": "destCallerIdName#", "methodBody": "public void setDestCallerIdName(String destCallerIdName)\n    {\n        this.destCallerIdName = destCallerIdName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdName the destCallerIdName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2469", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestCallerIdNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdNum()\n    {\n        return destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2470", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestCallerIdNum", "methodParameterType": "String#", "methodParameterName": "destCallerIdNum#", "methodBody": "public void setDestCallerIdNum(String destCallerIdNum)\n    {\n        this.destCallerIdNum = destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdNum the destCallerIdNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2471", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestContext()\n    {\n        return destContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destContext", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2472", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestContext", "methodParameterType": "String#", "methodParameterName": "destContext#", "methodBody": "public void setDestContext(String destContext)\n    {\n        this.destContext = destContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destContext the destContext to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2473", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestPriority()\n    {\n        return destPriority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destPriority", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2474", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestPriority", "methodParameterType": "String#", "methodParameterName": "destPriority#", "methodBody": "public void setDestPriority(String destPriority)\n    {\n        this.destPriority = destPriority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destPriority the destPriority to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2475", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannel()\n    {\n        return destChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2476", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestChannel", "methodParameterType": "String#", "methodParameterName": "destChannel#", "methodBody": "public void setDestChannel(String destChannel)\n    {\n        this.destChannel = destChannel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannel the destChannel to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2477", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getDestChannelState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelState()\n    {\n        return destChannelState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelState", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2478", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setDestChannelState", "methodParameterType": "String#", "methodParameterName": "destChannelState#", "methodBody": "public void setDestChannelState(String destChannelState)\n    {\n        this.destChannelState = destChannelState;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelState the destChannelState to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2479", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the iface", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2480", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentRingNoAnswerEvent.java", "methodName": "org.asteriskjava.manager.event.AgentRingNoAnswerEvent.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param iface the iface to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2481", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getOperatingMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOperatingMode()\n    {\n        return operatingMode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the operatingMode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2482", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setOperatingMode", "methodParameterType": "String#", "methodParameterName": "operatingMode#", "methodBody": "public void setOperatingMode(String operatingMode)\n    {\n        this.operatingMode = operatingMode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param operatingMode the operatingMode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2483", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResult()\n    {\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the result", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2484", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setResult", "methodParameterType": "String#", "methodParameterName": "result#", "methodBody": "public void setResult(String result)\n    {\n        this.result = result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param result the result to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2485", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getError()\n    {\n        return error;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the error", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2486", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setError", "methodParameterType": "String#", "methodParameterName": "error#", "methodBody": "public void setError(String error)\n    {\n        this.error = error;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param error the error to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2487", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getCallDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Double getCallDuration()\n    {\n        return callDuration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the callDuration", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2488", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setCallDuration", "methodParameterType": "Double#", "methodParameterName": "callDuration#", "methodBody": "public void setCallDuration(Double callDuration)\n    {\n        this.callDuration = callDuration;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param callDuration the callDuration to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2489", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getEcmMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEcmMode()\n    {\n        return ecmMode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ecmMode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2490", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setEcmMode", "methodParameterType": "String#", "methodParameterName": "ecmMode#", "methodBody": "public void setEcmMode(String ecmMode)\n    {\n        this.ecmMode = ecmMode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param ecmMode the ecmMode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2491", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getDataRate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getDataRate()\n    {\n        return dataRate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dataRate", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2492", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setDataRate", "methodParameterType": "Integer#", "methodParameterName": "dataRate#", "methodBody": "public void setDataRate(Integer dataRate)\n    {\n        this.dataRate = dataRate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dataRate the dataRate to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2493", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getImageResolution", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getImageResolution()\n    {\n        return imageResolution;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the imageResolution", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2494", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setImageResolution", "methodParameterType": "String#", "methodParameterName": "imageResolution#", "methodBody": "public void setImageResolution(String imageResolution)\n    {\n        this.imageResolution = imageResolution;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param imageResolution the imageResolution to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2495", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getImageEncoding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getImageEncoding()\n    {\n        return imageEncoding;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the imageEncoding", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2496", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setImageEncoding", "methodParameterType": "String#", "methodParameterName": "imageEncoding#", "methodBody": "public void setImageEncoding(String imageEncoding)\n    {\n        this.imageEncoding = imageEncoding;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param imageEncoding the imageEncoding to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2497", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getPageSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPageSize()\n    {\n        return pageSize;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the pageSize", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2498", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setPageSize", "methodParameterType": "String#", "methodParameterName": "pageSize#", "methodBody": "public void setPageSize(String pageSize)\n    {\n        this.pageSize = pageSize;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param pageSize the pageSize to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2499", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getDocumentNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getDocumentNumber()\n    {\n        return documentNumber;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the documentNumber", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2500", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setDocumentNumber", "methodParameterType": "Integer#", "methodParameterName": "documentNumber#", "methodBody": "public void setDocumentNumber(Integer documentNumber)\n    {\n        this.documentNumber = documentNumber;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param documentNumber the documentNumber to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2501", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getPageNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPageNumber()\n    {\n        return pageNumber;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the pageNumber", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2502", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setPageNumber", "methodParameterType": "Integer#", "methodParameterName": "pageNumber#", "methodBody": "public void setPageNumber(Integer pageNumber)\n    {\n        this.pageNumber = pageNumber;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param pageNumber the pageNumber to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2503", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getFileName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFileName()\n    {\n        return fileName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the fileName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2504", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setFileName", "methodParameterType": "String#", "methodParameterName": "fileName#", "methodBody": "public void setFileName(String fileName)\n    {\n        this.fileName = fileName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param fileName the fileName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2505", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getTxPages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTxPages()\n    {\n        return txPages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the txPages", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2506", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setTxPages", "methodParameterType": "Integer#", "methodParameterName": "txPages#", "methodBody": "public void setTxPages(Integer txPages)\n    {\n        this.txPages = txPages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param txPages the txPages to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2507", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getTxBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTxBytes()\n    {\n        return txBytes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the txBytes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2508", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setTxBytes", "methodParameterType": "Integer#", "methodParameterName": "txBytes#", "methodBody": "public void setTxBytes(Integer txBytes)\n    {\n        this.txBytes = txBytes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param txBytes the txBytes to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2509", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getTotalTxLines", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTotalTxLines()\n    {\n        return totalTxLines;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the totalTxLines", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2510", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setTotalTxLines", "methodParameterType": "Integer#", "methodParameterName": "totalTxLines#", "methodBody": "public void setTotalTxLines(Integer totalTxLines)\n    {\n        this.totalTxLines = totalTxLines;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param totalTxLines the totalTxLines to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2511", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getRxPages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getRxPages()\n    {\n        return rxPages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the rxPages", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2512", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setRxPages", "methodParameterType": "Integer#", "methodParameterName": "rxPages#", "methodBody": "public void setRxPages(Integer rxPages)\n    {\n        this.rxPages = rxPages;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param rxPages the rxPages to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2513", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getRxBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getRxBytes()\n    {\n        return rxBytes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the rxBytes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2514", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setRxBytes", "methodParameterType": "Integer#", "methodParameterName": "rxBytes#", "methodBody": "public void setRxBytes(Integer rxBytes)\n    {\n        this.rxBytes = rxBytes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param rxBytes the rxBytes to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2515", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getTotalRxLines", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTotalRxLines()\n    {\n        return totalRxLines;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the totalRxLines", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2516", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setTotalRxLines", "methodParameterType": "Integer#", "methodParameterName": "totalRxLines#", "methodBody": "public void setTotalRxLines(Integer totalRxLines)\n    {\n        this.totalRxLines = totalRxLines;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param totalRxLines the totalRxLines to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2517", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getTotalBadLines", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTotalBadLines()\n    {\n        return totalBadLines;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the totalBadLines", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2518", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setTotalBadLines", "methodParameterType": "Integer#", "methodParameterName": "totalBadLines#", "methodBody": "public void setTotalBadLines(Integer totalBadLines)\n    {\n        this.totalBadLines = totalBadLines;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param totalBadLines the totalBadLines to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2519", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getDisDcsDtcCtcCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getDisDcsDtcCtcCount()\n    {\n        return disDcsDtcCtcCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the disDcsDtcCtcCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2520", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setDisDcsDtcCtcCount", "methodParameterType": "Integer#", "methodParameterName": "disDcsDtcCtcCount#", "methodBody": "public void setDisDcsDtcCtcCount(Integer disDcsDtcCtcCount)\n    {\n        this.disDcsDtcCtcCount = disDcsDtcCtcCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param disDcsDtcCtcCount the disDcsDtcCtcCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2521", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getCfrCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCfrCount()\n    {\n        return cfrCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the cfrCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2522", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setCfrCount", "methodParameterType": "Integer#", "methodParameterName": "cfrCount#", "methodBody": "public void setCfrCount(Integer cfrCount)\n    {\n        this.cfrCount = cfrCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param cfrCount the cfrCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2523", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getFttCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getFttCount()\n    {\n        return fttCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the fttCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2524", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setFttCount", "methodParameterType": "Integer#", "methodParameterName": "fttCount#", "methodBody": "public void setFttCount(Integer fttCount)\n    {\n        this.fttCount = fttCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param fttCount the fttCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2525", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getMcfCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getMcfCount()\n    {\n        return mcfCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the mcfCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2526", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setMcfCount", "methodParameterType": "Integer#", "methodParameterName": "mcfCount#", "methodBody": "public void setMcfCount(Integer mcfCount)\n    {\n        this.mcfCount = mcfCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param mcfCount the mcfCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2527", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getPprCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPprCount()\n    {\n        return pprCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the pprCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2528", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setPprCount", "methodParameterType": "Integer#", "methodParameterName": "pprCount#", "methodBody": "public void setPprCount(Integer pprCount)\n    {\n        this.pprCount = pprCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param pprCount the pprCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2529", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getRtnCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getRtnCount()\n    {\n        return rtnCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the rtnCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2530", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setRtnCount", "methodParameterType": "Integer#", "methodParameterName": "rtnCount#", "methodBody": "public void setRtnCount(Integer rtnCount)\n    {\n        this.rtnCount = rtnCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param rtnCount the rtnCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2531", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getDcnCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getDcnCount()\n    {\n        return dcnCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dcnCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2532", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setDcnCount", "methodParameterType": "Integer#", "methodParameterName": "dcnCount#", "methodBody": "public void setDcnCount(Integer dcnCount)\n    {\n        this.dcnCount = dcnCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dcnCount the dcnCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2533", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getRemoteStationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRemoteStationId()\n    {\n        return remoteStationId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the remoteStationId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2534", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setRemoteStationId", "methodParameterType": "String#", "methodParameterName": "remoteStationId#", "methodBody": "public void setRemoteStationId(String remoteStationId)\n    {\n        this.remoteStationId = remoteStationId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param remoteStationId the remoteStationId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2535", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getLocalStationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocalStationId()\n    {\n        return localStationId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localStationId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2536", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setLocalStationId", "methodParameterType": "String#", "methodParameterName": "localStationId#", "methodBody": "public void setLocalStationId(String localStationId)\n    {\n        this.localStationId = localStationId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localStationId the localStationId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2537", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId()\n    {\n        return callerId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the callerId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2538", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerid#", "methodBody": "public void setCallerId(String callerid)\n    {\n        this.callerId = callerid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param callerId the callerId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2539", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the status", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2540", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param status the status to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2541", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.getOperation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOperation()\n    {\n        return operation;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the operation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2542", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxStatusEvent.setOperation", "methodParameterType": "String#", "methodParameterName": "operation#", "methodBody": "public void setOperation(String operation)\n    {\n        this.operation = operation;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param context the context to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2543", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.LogChannelEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public LogChannelEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2544", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the log channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2545", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the log channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2546", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.getEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getEnabled()\n    {\n        return enabled;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if logging has been enabled or disabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2547", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.setEnabled", "methodParameterType": "Boolean#", "methodParameterName": "enabled#", "methodBody": "public void setEnabled(Boolean enabled)\n    {\n        this.enabled = enabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if logging has been enabled or disabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2548", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getReason()\n    {\n        return reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the reason code for disabling logging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2549", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.getReasonTxt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReasonTxt()\n    {\n        return reasonTxt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the textual representation of the reason for disabling logging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2550", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/LogChannelEvent.java", "methodName": "org.asteriskjava.manager.event.LogChannelEvent.setReason", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public void setReason(String s)\n    {\n        int spaceIdx;\n\n        if (s == null)\n        {\n            return;\n        }\n\n        spaceIdx = s.indexOf(' ');\n        if (spaceIdx <= 0)\n        {\n            spaceIdx = s.length();\n        }\n\n        try\n        {\n            this.reason = Integer.valueOf(s.substring(0, spaceIdx));\n        }\n        catch (NumberFormatException e)\n        {\n            return;\n        }\n\n        if (s.length() > spaceIdx + 3)\n        {\n            this.reasonTxt = s.substring(spaceIdx + 3, s.length());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the reason for disabling logging.", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.length", "java.lang.String.substring", "java.lang.Integer.valueOf"], "call_func_parameter": [["int"], [""], ["int", "int"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "2551", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeCreateEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeCreateEvent.setBridgevideosourcemode", "methodParameterType": "String#", "methodParameterName": "bridgevideosourcemode#", "methodBody": "public void setBridgevideosourcemode(String bridgevideosourcemode) {\n\t\tthis.bridgevideosourcemode = bridgevideosourcemode;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgevideosourcemode the bridgevideosourcemode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2552", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeCreateEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeCreateEvent.getBridgevideosourcemode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgevideosourcemode() {\n\t\treturn bridgevideosourcemode;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgevideosourcemode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2553", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointList.java", "methodName": "org.asteriskjava.manager.event.EndpointList.EndpointList", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public EndpointList(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2554", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointList.java", "methodName": "org.asteriskjava.manager.event.EndpointList.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of PeerEvents that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2555", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointList.java", "methodName": "org.asteriskjava.manager.event.EndpointList.setListItems", "methodParameterType": "Integer#", "methodParameterName": "listItems#", "methodBody": "public void setListItems(Integer listItems)\n    {\n        this.listItems = listItems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of PeerEvents that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2556", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/EndpointList.java", "methodName": "org.asteriskjava.manager.event.EndpointList.getEventList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventList()\n    {\n        return eventList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns always \"Complete\". <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2557", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ParkedCallGiveUpEvent.java", "methodName": "org.asteriskjava.manager.event.ParkedCallGiveUpEvent.ParkedCallGiveUpEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ParkedCallGiveUpEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2558", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmClearEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmClearEvent.AlarmClearEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AlarmClearEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2559", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmClearEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmClearEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of the zap channel that left alarm state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2560", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AlarmClearEvent.java", "methodName": "org.asteriskjava.manager.event.AlarmClearEvent.setChannel", "methodParameterType": "Integer#", "methodParameterName": "channel#", "methodBody": "public void setChannel(Integer channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of the zap channel that left alarm state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2561", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.VoicemailUserEntryEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public VoicemailUserEntryEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2562", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getVmContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVmContext()\n    {\n        return vmContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the voicemail context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2563", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setVmContext", "methodParameterType": "String#", "methodParameterName": "vmContext#", "methodBody": "public void setVmContext(String vmContext)\n    {\n        this.vmContext = vmContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the voicemail context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2564", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getVoicemailbox", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVoicemailbox()\n    {\n        return voicemailbox;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the mailbox id. The mailbox is unique within the voicemail context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2565", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setVoicemailbox", "methodParameterType": "String#", "methodParameterName": "voicemailbox#", "methodBody": "public void setVoicemailbox(String voicemailbox)\n    {\n        this.voicemailbox = voicemailbox;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the mailbox id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2566", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getFullname", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFullname()\n    {\n        return fullname;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the full name of the voicemail user that is used for the directory application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2567", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setFullname", "methodParameterType": "String#", "methodParameterName": "fullname#", "methodBody": "public void setFullname(String fullname)\n    {\n        this.fullname = fullname;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the full name of the voicemail user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2568", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getEmail", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEmail()\n    {\n        return email;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the email address of the voicemail user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2569", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setEmail", "methodParameterType": "String#", "methodParameterName": "email#", "methodBody": "public void setEmail(String email)\n    {\n        this.email = email;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the email address of the voicemail user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2570", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getPager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPager()\n    {\n        return pager;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the email adress of pager of the voicemail user. This email will not receive attachments.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2571", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setPager", "methodParameterType": "String#", "methodParameterName": "pager#", "methodBody": "public void setPager(String pager)\n    {\n        this.pager = pager;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the email adress of pager of the voicemail user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2572", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getServerEmail", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getServerEmail()\n    {\n        return serverEmail;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the email address used for the \"from\" header when sending notification emails.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2573", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setServerEmail", "methodParameterType": "String#", "methodParameterName": "serverEmail#", "methodBody": "public void setServerEmail(String serverEmail)\n    {\n        this.serverEmail = serverEmail;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the email address used for the \"from\" header when sending notification emails.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2574", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getMailCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMailCommand()\n    {\n        return mailCommand;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the custom mail command used to send notifications to the voicemail user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2575", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setMailCommand", "methodParameterType": "String#", "methodParameterName": "mailCommand#", "methodBody": "public void setMailCommand(String mailCommand)\n    {\n        this.mailCommand = mailCommand;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the custom mail command used to send notifications to the voicemail user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2576", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getCallback", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallback()\n    {\n        return callback;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the dialplan context used by the \"return phone call\" feature in the advanced voicemail features menu.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2577", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setCallback", "methodParameterType": "String#", "methodParameterName": "callback#", "methodBody": "public void setCallback(String callback)\n    {\n        this.callback = callback;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the dialplan context used by the \"return phone call\" feature in the advanced voicemail features menu.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2578", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getDialout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDialout()\n    {\n        return dialout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the dialplan context used by the \"place an outgoing call\" feature in the advanced voicemail features menu.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2579", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setDialout", "methodParameterType": "String#", "methodParameterName": "dialout#", "methodBody": "public void setDialout(String dialout)\n    {\n        this.dialout = dialout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the dialplan context used by the \"place an outgoing call\" feature in the advanced voicemail features menu.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2580", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getExitContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getExitContext()\n    {\n        return exitContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the dialplan context the user is dropped into after he has pressed", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2581", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setExitContext", "methodParameterType": "String#", "methodParameterName": "exitContext#", "methodBody": "public void setExitContext(String exitContext)\n    {\n        this.exitContext = exitContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the dialplan context the user is dropped into after he has pressed", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2582", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getAttachMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getAttachMessage()\n    {\n        return attachMessage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether Asterisk copies a voicemail message to an audio file and sends it to the user as an attachment in an eemail voicemail notification message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2583", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setAttachMessage", "methodParameterType": "Boolean#", "methodParameterName": "attachMessage#", "methodBody": "public void setAttachMessage(Boolean attachMessage)\n    {\n        this.attachMessage = attachMessage;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether Asterisk copies a voicemail message to an audio file and sends it to the user as an attachment in an eemail voicemail notification message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2584", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getDeleteMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getDeleteMessage()\n    {\n        return deleteMessage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether messages will be deleted from the voicemailbox (after having been emailed).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2585", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setDeleteMessage", "methodParameterType": "Boolean#", "methodParameterName": "deleteMessage#", "methodBody": "public void setDeleteMessage(Boolean deleteMessage)\n    {\n        this.deleteMessage = deleteMessage;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether messages will be deleted from the voicemailbox (after having been emailed).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2586", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getVolumeGain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Double getVolumeGain()\n    {\n        return volumeGain;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the volume gain used for voicemails sent via email.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2587", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setVolumeGain", "methodParameterType": "Double#", "methodParameterName": "volumeGain#", "methodBody": "public void setVolumeGain(Double volumeGain)\n    {\n        this.volumeGain = volumeGain;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the volume gain used for voicemails sent via email.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2588", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getMaxMessageCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getMaxMessageCount()\n    {\n        return maxMessageCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum number of messages per folder. 0 indicated unlimited.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2589", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setMaxMessageCount", "methodParameterType": "Integer#", "methodParameterName": "maxMessageCount#", "methodBody": "public void setMaxMessageCount(Integer maxMessageCount)\n    {\n        this.maxMessageCount = maxMessageCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum number of messages per folder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2590", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getMaxMessageLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getMaxMessageLength()\n    {\n        return maxMessageLength;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum duration per message for voicemails in this mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2591", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setMaxMessageLength", "methodParameterType": "Integer#", "methodParameterName": "maxMessageLength#", "methodBody": "public void setMaxMessageLength(Integer maxMessageLength)\n    {\n        this.maxMessageLength = maxMessageLength;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum duration per message for voicemails in this mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2592", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getOldMessageCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getOldMessageCount()\n    {\n        return oldMessageCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of old (\"read\" or listened to) messages for this voicemail user.<p> This property is only available if the IMAP storage backend is used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2593", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setOldMessageCount", "methodParameterType": "Integer#", "methodParameterName": "oldMessageCount#", "methodBody": "public void setOldMessageCount(Integer oldMessageCount)\n    {\n        this.oldMessageCount = oldMessageCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of old messages for this voicemail user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2594", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.getImapUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getImapUser()\n    {\n        return imapUser;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the username of the IMAP account associated with this mailbox.<p> This property is only available if the IMAP storage backend is used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2595", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/VoicemailUserEntryEvent.java", "methodName": "org.asteriskjava.manager.event.VoicemailUserEntryEvent.setImapUser", "methodParameterType": "String#", "methodParameterName": "imapUser#", "methodBody": "public void setImapUser(String imapUser)\n    {\n        this.imapUser = imapUser;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the username of the IMAP account associated with this mailbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2596", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsEvent.setConference", "methodParameterType": "String#", "methodParameterName": "conference#", "methodBody": "public void setConference(String conference)\n    {\n        this.conference = conference;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the id of the conference to be listed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2597", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsEvent.getConference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getConference()\n    {\n        return conference;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the id of the conference to be listed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2598", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsEvent.setParties", "methodParameterType": "Integer#", "methodParameterName": "parties#", "methodBody": "public void setParties(Integer parties)\n    {\n        this.parties = parties;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of participants in this conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2599", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsEvent.getParties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getParties()\n    {\n        return parties;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of participants in this conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2600", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsEvent.setMarked", "methodParameterType": "Integer#", "methodParameterName": "marked#", "methodBody": "public void setMarked(Integer marked)\n    {\n        this.marked = marked;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of marked participants in this conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2601", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ConfbridgeListRoomsEvent.java", "methodName": "org.asteriskjava.manager.event.ConfbridgeListRoomsEvent.getMarked", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getMarked()\n    {\n        return marked;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of marked participants in this conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2602", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/MeetMeTalkingEvent.java", "methodName": "org.asteriskjava.manager.event.MeetMeTalkingEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the user has started or stopped talking.<p> Until Asterisk 1.2 Asterisk used different events to indicate start and stop: This MeetMeTalkingEvent when the user started talking and the {@link MeetMeStopTalkingEvent} when he stopped. With Asterisk 1.2only this MeetMeTalkingEvent is used with the status property indicating start and stop. For backwards compatibility this property defaults to <code>true</code> so when used with version 1.2 of Asterisk you get <code>true</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2603", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getCallerIdName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerIdName()\n    {\n        return callerIdName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller ID name of the caller's channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2604", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getDateReceived", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getDateReceived()\n    {\n        return dateReceived;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the point in time this event was received from the Asterisk server. <br> Pseudo events that are not directly received from the asterisk server (for example ConnectEvent and DisconnectEvent) may return <code>null</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2605", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.setDateReceived", "methodParameterType": "Date#", "methodParameterName": "dateReceived#", "methodBody": "public void setDateReceived(Date dateReceived)\n    {\n        this.dateReceived = dateReceived;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the point in time this event was received from the asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2606", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getPrivilege", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPrivilege()\n    {\n        return privilege;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AMI authorization class of this event. <br> This is one or more of system, call, log, verbose, command, agent or user. Multiple privileges are separated by comma. <br> Note: This property is not available from Asterisk 1.0 servers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2607", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.setPrivilege", "methodParameterType": "String#", "methodParameterName": "privilege#", "methodBody": "public void setPrivilege(String privilege)\n    {\n        this.privilege = privilege;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the AMI authorization class of this event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2608", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getTimestamp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Double getTimestamp()\n    {\n        return timestamp;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the timestamp for this event. <br> The timestamp property is available in Asterisk since 1.4 if enabled in <code>manager.conf</code> by setting <code>timestampevents = yes</code>. <br> In contains the time the event was generated in seconds since the epoch. <br> Example: 1159310429.569108", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2609", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.setTimestamp", "methodParameterType": "Double#", "methodParameterName": "timestamp#", "methodBody": "public final void setTimestamp(Double timestamp)\n    {\n        this.timestamp = timestamp;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the timestamp for this event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2610", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getServer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getServer()\n    {\n        return server;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the Asterisk server from which this event has been received. <br> This property is only available when using to AstManProxy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2611", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.setServer", "methodParameterType": "String#", "methodParameterName": "server#", "methodBody": "public final void setServer(String server)\n    {\n        this.server = server;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the Asterisk server from which this event has been received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2612", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFile()\n    {\n        return file;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the file in Asterisk's source code that triggered this event. For example <code>pbx.c</code>. <p> This property is only available if debugging for the Manager API has been turned on in Asterisk. This can be done by calling <code>manager debug on</code> on Asterisk's command line interface or by adding <code>debug=on</code> to Asterisk's <code>manager.conf</code>. This feature is availble in Asterisk since 1.6.0.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2613", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getLine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getLine()\n    {\n        return line;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the line number in Asterisk's source code where this event was triggered. <p> This property is only available if debugging for the Manager API has been turned on in Asterisk. This can be done by calling <code>manager debug on</code> on Asterisk's command line interface or by adding <code>debug=on</code> to Asterisk's <code>manager.conf</code>. This feature is availble in Asterisk since 1.6.0.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2614", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getFunc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFunc()\n    {\n        return func;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the C function in Asterisk's source code that triggered this event. For example <code>pbx_builtin_setvar_helper</code> <p> This property is only available if debugging for the Manager API has been turned on in Asterisk. This can be done by calling <code>manager debug on</code> on Asterisk's command line interface or by adding <code>debug=on</code> to Asterisk's <code>manager.conf</code>. This feature is availble in Asterisk since 1.6.0.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2615", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ManagerEvent.java", "methodName": "org.asteriskjava.manager.event.ManagerEvent.getSequenceNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getSequenceNumber()\n    {\n        return sequenceNumber;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the sequence numbers of this event. Sequence numbers are only incremented while debugging is enabled. <p> This property is only available if debugging for the Manager API has been turned on in Asterisk. This can be done by calling <code>manager debug on</code> on Asterisk's command line interface or by adding <code>debug=on</code> to Asterisk's <code>manager.conf</code>. This feature is availble in Asterisk since 1.6.0.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2616", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the transfering channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2617", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the transfering channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2618", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getTransferMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTransferMethod()\n    {\n        return transferMethod;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the transfer method. Currently this is always \"SIP\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2619", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getTransferType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTransferType()\n    {\n        return transferType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is an attended or a blind transfer. Possible values are \"Attended\" and \"Blind\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2620", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.isAttended", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAttended()\n    {\n        return TRANSFER_TYPE_ATTENDED.equals(transferType);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether this is an attended transfer or not.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "2621", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.isBlind", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isBlind()\n    {\n        return TRANSFER_TYPE_BLIND.equals(transferType);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether this is a blind transfer or not.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "2622", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getSipCallId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSipCallId()\n    {\n        return sipCallId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the SIP call id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2623", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getTargetChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTargetChannel()\n    {\n        return targetChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the target channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2624", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getTargetUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTargetUniqueId()\n    {\n        return targetUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the target channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2625", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getTransferExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTransferExten()\n    {\n        return transferExten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the target extension the call is transfered to. This is only available for blind transfers. If the call is transfered to a parking extension, the parking extension is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2626", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getTransferContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTransferContext()\n    {\n        return transferContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the target context (in the dialplan) the call is transfered to. This is only available for blind transfers. If the call is transfered to a parking extension <code>null</code> is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2627", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.getTransfer2Parking", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getTransfer2Parking()\n    {\n        return transfer2Parking;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this is a transfer to a parking extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2628", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/TransferEvent.java", "methodName": "org.asteriskjava.manager.event.TransferEvent.isParking", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isParking()\n    {\n        return transfer2Parking != null && transfer2Parking;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method to check if this is a transfer to a parking extension.", "call_func_name": ["java.lang.Boolean.booleanValue"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "2629", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.HoldedCallEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public HoldedCallEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2630", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.getUniqueId1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId1()\n    {\n        return uniqueId1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel that put the other channel on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2631", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.setUniqueId1", "methodParameterType": "String#", "methodParameterName": "uniqueId1#", "methodBody": "public void setUniqueId1(String uniqueId1)\n    {\n        this.uniqueId1 = uniqueId1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel that put the other channel on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2632", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.getUniqueId2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId2()\n    {\n        return uniqueId2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel that has been put on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2633", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.setUniqueId2", "methodParameterType": "String#", "methodParameterName": "uniqueId2#", "methodBody": "public void setUniqueId2(String uniqueId2)\n    {\n        this.uniqueId2 = uniqueId2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel that has been put on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2634", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.getChannel1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel1()\n    {\n        return channel1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel that put the other channel on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2635", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.setChannel1", "methodParameterType": "String#", "methodParameterName": "channel1#", "methodBody": "public void setChannel1(String channel1)\n    {\n        this.channel1 = channel1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel that put the other channel on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2636", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.getChannel2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel2()\n    {\n        return channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel that has been put on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2637", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/HoldedCallEvent.java", "methodName": "org.asteriskjava.manager.event.HoldedCallEvent.setChannel2", "methodParameterType": "String#", "methodParameterName": "channel2#", "methodBody": "public void setChannel2(String channel2)\n    {\n        this.channel2 = channel2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel that has been put on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2638", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.AgentsEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgentsEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2639", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.getAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgent()\n    {\n        return agent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the agentid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2640", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.setAgent", "methodParameterType": "String#", "methodParameterName": "agent#", "methodBody": "public void setAgent(String agent)\n    {\n        this.agent = agent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the agentid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2641", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName()\n    {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2642", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name)\n    {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of this agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2643", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of this agent. <p> This is one of <dl> <dt>\"AGENT_LOGGEDOFF\"</dt> <dd>Agent isn't logged in</dd> <dt>\"AGENT_IDLE\"</dt> <dd>Agent is logged in and waiting for call</dd> <dt>\"AGENT_ONCALL\"</dt> <dd>Agent is logged in and on a call</dd> <dt>\"AGENT_UNKNOWN\"</dt> <dd>Don't know anything about agent. Shouldn't ever get this.</dd> </dl>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2644", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status of this agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2645", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.getLoggedInChan", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLoggedInChan()\n    {\n        return loggedInChan;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of channel this agent logged in from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2646", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.setLoggedInChan", "methodParameterType": "String#", "methodParameterName": "loggedInChan#", "methodBody": "public void setLoggedInChan(String loggedInChan)\n    {\n        this.loggedInChan = loggedInChan;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of channel this agent logged in from.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2647", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.getLoggedInTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getLoggedInTime()\n    {\n        return loggedInTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time (in seconds since 01/01/1970) when the agent logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2648", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.setLoggedInTime", "methodParameterType": "Long#", "methodParameterName": "loggedInTime#", "methodBody": "public void setLoggedInTime(Long loggedInTime)\n    {\n        this.loggedInTime = loggedInTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time when the agent logged in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2649", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.getTalkingTo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTalkingTo()\n    {\n        return talkingTo;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the numerical Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2650", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.setTalkingTo", "methodParameterType": "String#", "methodParameterName": "talkingTo#", "methodBody": "public void setTalkingTo(String talkingTo)\n    {\n        this.talkingTo = talkingTo;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the numerical Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2651", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentsEvent.java", "methodName": "org.asteriskjava.manager.event.AgentsEvent.getTalkingToChan", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTalkingToChan()\n    {\n        return talkingToChan;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel this agent is talking to.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2652", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberStatusEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberStatusEvent.QueueMemberStatusEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueMemberStatusEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2653", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberStatusEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberStatusEvent.getRinginuse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRinginuse()\n    {\n        return ringinuse;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ringinuse", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2654", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberStatusEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberStatusEvent.setRinginuse", "methodParameterType": "String#", "methodParameterName": "ringinuse#", "methodBody": "public void setRinginuse(String ringinuse)\n    {\n        this.ringinuse = ringinuse;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param ringinuse the ringinuse to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2655", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsCompleteEvent.DahdiShowChannelsCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public DahdiShowChannelsCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2656", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsCompleteEvent.getEventlist", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventlist()\n    {\n        return eventlist;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the status of the eventlist (should be Complete).<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2657", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsCompleteEvent.getListitems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListitems()\n    {\n        return listitems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of channels reported.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2658", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DahdiShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.DahdiShowChannelsCompleteEvent.setListitems", "methodParameterType": "Integer#", "methodParameterName": "listitems#", "methodBody": "public void setListitems(Integer listitems)\n    {\n        this.listitems = listitems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of channels reported.<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2659", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeExecEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeExecEvent.getResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResponse()\n    {\n        return response;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether bridging succeeded or failed. Possible values are <ul> <li>Failed</li> <li>Success</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2660", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeExecEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeExecEvent.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason()\n    {\n        return reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the reason for failure. Possible values are <ul> <li>Unable to bridge channel to itself</li> <li>Cannot grab end point</li> <li>cannot create placeholder</li> <li>Could not make channels compatible for bridge</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2661", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeExecEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeExecEvent.getChannel1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel1()\n    {\n        return channel1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The name of the first channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2662", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeExecEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeExecEvent.getChannel2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel2()\n    {\n        return channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The name of the second channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2663", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.AgiExecEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgiExecEvent(Object source)\n\t{\n\t\tsuper(source);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AgiExecEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2664", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n\t{\n\t\treturn channel;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel this event occurred on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2665", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n\t{\n\t\tthis.channel = channel;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel this event occurred on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2666", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.getSubEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSubEvent()\n\t{\n\t\treturn subEvent;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the sub event type. This is either \"Start\" or \"End\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2667", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.setSubEvent", "methodParameterType": "String#", "methodParameterName": "subEvent#", "methodBody": "public void setSubEvent(String subEvent)\n\t{\n\t\tthis.subEvent = subEvent;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the sub event type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2668", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.getCommandId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommandId()\n\t{\n\t\treturn commandId;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the command id. The command is a random number generated by Asterisk that allows matching the \"End\" sub event with the corresponding \"Start\" sub event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2669", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.setCommandId", "methodParameterType": "String#", "methodParameterName": "commandId#", "methodBody": "public void setCommandId(String commandId)\n\t{\n\t\tthis.commandId = commandId;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the command id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2670", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.getCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommand()\n\t{\n\t\treturn command;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AGI command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2671", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.setCommand", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public void setCommand(String command)\n\t{\n\t\tthis.command = command;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the AGI command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2672", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.getResultCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getResultCode()\n\t{\n\t\treturn resultCode;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the result code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2673", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.setResultCode", "methodParameterType": "Integer#", "methodParameterName": "resultCode#", "methodBody": "public void setResultCode(Integer resultCode)\n\t{\n\t\tthis.resultCode = resultCode;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the result code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2674", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResult()\n\t{\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the result as a string.<p> They correspond to the numeric values returned by  {@link #getResultCode()}. Usually you will want to stick with the numeric values.<p> Possible values are: <ul> <li>Failure (corresponds to result code -1)</li> <li>Success (corresponds to result code 200)</li> <li>KeepAlive (corresponds to result code 210)</li> <li>Command not permitted on a dead channel (corresponds to result code 511)</li> <li>Usage (corresponds to result code 520)</li> </ul>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2675", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.setResult", "methodParameterType": "String#", "methodParameterName": "result#", "methodBody": "public void setResult(String result)\n\t{\n\t\tthis.result = result;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the string respresentation of the result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2676", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.getAccountCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccountCode()\n\t{\n\t\treturn accountCode;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the account code set for CDR.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2677", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.setAccountCode", "methodParameterType": "String#", "methodParameterName": "accountCode#", "methodBody": "public void setAccountCode(String accountCode)\n\t{\n\t\tthis.accountCode = accountCode;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the account code used for billing in the CDR. <br> This will be the filename asterisk stores the billing informations in, so it should only use lowercase letters, numbers, hyphen and underscore.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2678", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.isStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStart()\n\t{\n\t\treturn isSubEvent(SUB_EVENT_START);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks is this a start sub event.", "call_func_name": ["org.asteriskjava.manager.event.AgiExecEvent.isSubEvent"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2679", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgiExecEvent.java", "methodName": "org.asteriskjava.manager.event.AgiExecEvent.isEnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEnd()\n\t{\n\t\treturn isSubEvent(SUB_EVENT_END);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks is this an end sub event.", "call_func_name": ["org.asteriskjava.manager.event.AgiExecEvent.isSubEvent"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2680", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2681", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2682", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getMax", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getMax()\n    {\n        return max;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum number of people waiting in the queue or 0 for unlimited.<p> This corresponds to the <code>maxlen</code> setting in <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2683", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setMax", "methodParameterType": "Integer#", "methodParameterName": "max#", "methodBody": "public void setMax(Integer max)\n    {\n        this.max = max;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum number of people waiting in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2684", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStrategy()\n    {\n        return strategy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the strategy used for this queue.<p> Possible values are:<p> <ul> <li>ringall</li> <li>roundrobin</li> <li>leastrecent</li> <li>fewestcalls</li> <li>random</li> <li>rrmemory</li> </ul> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2685", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setStrategy", "methodParameterType": "String#", "methodParameterName": "strategy#", "methodBody": "public void setStrategy(String strategy)\n    {\n        this.strategy = strategy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the strategy used for this queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2686", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getCalls", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCalls()\n    {\n        return calls;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of calls currently waiting in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2687", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setCalls", "methodParameterType": "Integer#", "methodParameterName": "calls#", "methodBody": "public void setCalls(Integer calls)\n    {\n        this.calls = calls;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of calls currently waiting in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2688", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getHoldTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getHoldTime()\n    {\n        return holdTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current average holdtime for this queue (in seconds).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2689", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setHoldTime", "methodParameterType": "Integer#", "methodParameterName": "holdTime#", "methodBody": "public void setHoldTime(Integer holdTime)\n    {\n        this.holdTime = holdTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the current average holdtime for this queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2690", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getTalkTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTalkTime()\n    {\n        return talkTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current avarage talk time for this queue based on an exponential average.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2691", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setTalkTime", "methodParameterType": "Integer#", "methodParameterName": "talkTime#", "methodBody": "public void setTalkTime(Integer talkTime)\n    {\n        this.talkTime = talkTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the current avarage talk time for this queue based on an exponential average.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2692", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getCompleted", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCompleted()\n    {\n        return completed;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of completed calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2693", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setCompleted", "methodParameterType": "Integer#", "methodParameterName": "complete#", "methodBody": "public void setCompleted(Integer complete)\n    {\n        this.completed = complete;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of completed calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2694", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getAbandoned", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getAbandoned()\n    {\n        return abandoned;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of abandoned calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2695", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setAbandoned", "methodParameterType": "Integer#", "methodParameterName": "abandoned#", "methodBody": "public void setAbandoned(Integer abandoned)\n    {\n        this.abandoned = abandoned;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of abandoned calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2696", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getServiceLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getServiceLevel()\n    {\n        return serviceLevel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the service level (in seconds) as defined by the <code>servicelevel</code> setting in <code>queues.conf</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2697", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setServiceLevel", "methodParameterType": "Integer#", "methodParameterName": "serviceLevel#", "methodBody": "public void setServiceLevel(Integer serviceLevel)\n    {\n        this.serviceLevel = serviceLevel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the service level.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2698", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getServiceLevelPerf", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Double getServiceLevelPerf()\n    {\n        return serviceLevelPerf;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ratio of calls answered within the specified service level per total completed calls (in percent).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2699", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setServiceLevelPerf", "methodParameterType": "Double#", "methodParameterName": "serviceLevelPerf#", "methodBody": "public void setServiceLevelPerf(Double serviceLevelPerf)\n    {\n        this.serviceLevelPerf = serviceLevelPerf;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the ratio of calls answered within the specified service level per total completed calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2700", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.getWeight", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getWeight()\n    {\n        return weight;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the weight of this queue.<p> A queue can be assigned a 'weight' to ensure calls waiting in a higher priority queue will deliver its calls first. Only delays the lower weight queue's call if the member is also in the higher weight queue.<p> Available since Asterisk 1.2", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2701", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueParamsEvent.java", "methodName": "org.asteriskjava.manager.event.QueueParamsEvent.setWeight", "methodParameterType": "Integer#", "methodParameterName": "weight#", "methodBody": "public void setWeight(Integer weight)\n    {\n        this.weight = weight;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the weight of this queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2702", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DndStateEvent.java", "methodName": "org.asteriskjava.manager.event.DndStateEvent.DndStateEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public DndStateEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DNDStateEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2703", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DndStateEvent.java", "methodName": "org.asteriskjava.manager.event.DndStateEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel. The channel name is of the form \"Zap/&lt;channel number&gt;\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2704", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DndStateEvent.java", "methodName": "org.asteriskjava.manager.event.DndStateEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2705", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DndStateEvent.java", "methodName": "org.asteriskjava.manager.event.DndStateEvent.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getState()\n    {\n        return state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns DND state of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2706", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/DndStateEvent.java", "methodName": "org.asteriskjava.manager.event.DndStateEvent.setState", "methodParameterType": "Boolean#", "methodParameterName": "state#", "methodBody": "public void setState(Boolean state)\n    {\n        this.state = state;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the DND state of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2707", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.QueueEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public QueueEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2708", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel that joines or leaves the queue.<p> This property is only available since Asterisk 1.4. Up to Asterisk 1.2 this method always returns <code>null</code>.<p> See Asterisk issues 6458 and 7002.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2709", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel that joines or leaves the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2710", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel that joines or leaves the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2711", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel that joines or leaves the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2712", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.getCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCount()\n    {\n        return count;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements in the queue, i.e. the number of calls waiting to be answered by an agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2713", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.setCount", "methodParameterType": "Integer#", "methodParameterName": "count#", "methodBody": "public void setCount(Integer count)\n    {\n        this.count = count;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of elements in the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2714", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2715", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueEvent.java", "methodName": "org.asteriskjava.manager.event.QueueEvent.setQueue", "methodParameterType": "String#", "methodParameterName": "queue#", "methodBody": "public void setQueue(String queue)\n    {\n        this.queue = queue;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2716", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeAccountStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeAccountStatusEvent.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsername()\n    {\n        return username;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the Skype user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2717", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeAccountStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeAccountStatusEvent.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username)\n    {\n        this.username = username;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the Skype user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2718", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeAccountStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeAccountStatusEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Skype user status.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2719", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/SkypeAccountStatusEvent.java", "methodName": "org.asteriskjava.manager.event.SkypeAccountStatusEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Skype user status.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2720", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPausedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPausedEvent.getPaused", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getPaused()\n    {\n        return paused;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if this queue member is paused (not accepting calls).<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2721", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPausedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPausedEvent.setPaused", "methodParameterType": "Boolean#", "methodParameterName": "paused#", "methodBody": "public void setPaused(Boolean paused)\n    {\n        this.paused = paused;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if this member is paused.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2722", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPausedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPausedEvent.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason()\n    {\n        return reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the reason why the queue member has been paused. Will be set to <code>Auto-Pause</code> for the case that the queue member has been paused for not answering the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2723", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberPausedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberPausedEvent.setReason", "methodParameterType": "String#", "methodParameterName": "reason#", "methodBody": "public void setReason(String reason)\n    {\n        this.reason = reason;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the reason why the queue member has been paused.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2724", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/UnholdEvent.java", "methodName": "org.asteriskjava.manager.event.UnholdEvent.UnholdEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public UnholdEvent(Object source)\n    {\n        super(source);\n        setStatus(false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new UnholdEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2725", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractParkedCallEvent.getFrom", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getFrom()\n    {\n        return getParkerDialString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel that parked the call. use getParkerDialString() instead", "call_func_name": ["org.asteriskjava.manager.event.AbstractParkedCallEvent.getParkerDialString"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "2726", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractParkedCallEvent.setFrom", "methodParameterType": "String#", "methodParameterName": "from#", "methodBody": "@Deprecated\n    public void setFrom(String from)\n    {\n        this.setParkerDialString(from);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel that parked the call.", "call_func_name": ["org.asteriskjava.manager.event.AbstractParkedCallEvent.setParkerDialString"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2727", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractParkedCallEvent.getParkingLot", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getParkingLot()\n    {\n        return parkingLot;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the parking lot. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2728", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractParkedCallEvent.setParkingLot", "methodParameterType": "String#", "methodParameterName": "parkingLot#", "methodBody": "public void setParkingLot(String parkingLot)\n    {\n        this.parkingLot = parkingLot;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the parking lot.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2729", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractParkedCallEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the parked channel. <p> Note: This property is not set properly by all versions of Asterisk, see <a href=\"http://bugs.digium.com/view.php?id=13323\">http://bugs.digium. com/ view.php?id=13323</a> and <a href=\"http://bugs.digium.com/view.php?id=13358\" >http://bugs.digium. com/view.php?id=13358</a> for more information. Use  {@link #getChannel()}instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2730", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractParkedCallEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractParkedCallEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getChannel()\n    {\n        return this.getParkeeChannel();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "use getParkeeChannel() instead", "call_func_name": ["org.asteriskjava.manager.event.AbstractParkedCallEvent.getParkeeChannel"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "2731", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.AgentCalledEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public AgentCalledEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2732", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2733", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getAgentCalled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAgentCalled()\n    {\n        return agentCalled;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the member interface of the agent that has been called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2734", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setAgentCalled", "methodParameterType": "String#", "methodParameterName": "agentCalled#", "methodBody": "public void setAgentCalled(String agentCalled)\n    {\n        this.agentCalled = agentCalled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the member interface of the agent that has been called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2735", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getAgentName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getAgentName()\n    {\n        return memberName;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the agent that has been called. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2736", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getChannelCalling", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannelCalling()\n    {\n        return channelCalling;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the caller's channel that is about to be handled by the agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2737", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setChannelCalling", "methodParameterType": "String#", "methodParameterName": "channelCalling#", "methodBody": "public void setChannelCalling(String channelCalling)\n    {\n        this.channelCalling = channelCalling;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the caller's channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2738", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestinationChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestinationChannel()\n    {\n        return destinationChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel calling the agent. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2739", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getCallerId()\n    {\n        return callerIdNum;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller ID number of the caller's channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2740", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerId#", "methodBody": "public void setCallerId(String callerId)\n    {\n        this.callerIdNum = callerId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller ID number of the caller's channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2741", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the caller's channel that is about to be handled by the agent. This corresponds to  {@link #getChannelCalling()}. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2742", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getMemberName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMemberName()\n    {\n        return memberName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Queue Member name. <p> Available since Asterisk 13 replace agentName </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2743", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getVariables()\n    {\n        return variables;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel variables if <code>eventwhencalled</code> is set to <code>vars</code> in <code>queues.conf</code>. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2744", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setVariables", "methodParameterType": "Map<String,String>#", "methodParameterName": "variables#", "methodBody": "public void setVariables(Map<String, String> variables)\n    {\n        this.variables = variables;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the channel variables. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2745", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestExten()\n    {\n        return destExten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destExten", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2746", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestExten", "methodParameterType": "String#", "methodParameterName": "destExten#", "methodBody": "public void setDestExten(String destExten)\n    {\n        this.destExten = destExten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destExten the destExten to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2747", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestChannelStateDesc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelStateDesc()\n    {\n        return destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelStateDesc", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2748", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestChannelStateDesc", "methodParameterType": "String#", "methodParameterName": "destChannelStateDesc#", "methodBody": "public void setDestChannelStateDesc(String destChannelStateDesc)\n    {\n        this.destChannelStateDesc = destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelStateDesc the destChannelStateDesc to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2749", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestUniqueId()\n    {\n        return destUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destUniqueId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2750", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestUniqueId", "methodParameterType": "String#", "methodParameterName": "destUniqueId#", "methodBody": "public void setDestUniqueId(String destUniqueId)\n    {\n        this.destUniqueId = destUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destUniqueId the destUniqueId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2751", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestConnectedLineNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineNum()\n    {\n        return destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2752", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestConnectedLineNum", "methodParameterType": "String#", "methodParameterName": "destConnectedLineNum#", "methodBody": "public void setDestConnectedLineNum(String destConnectedLineNum)\n    {\n        this.destConnectedLineNum = destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineNum the destConnectedLineNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2753", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestCallerIdName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdName()\n    {\n        return destCallerIdName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2754", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestCallerIdName", "methodParameterType": "String#", "methodParameterName": "destCallerIdName#", "methodBody": "public void setDestCallerIdName(String destCallerIdName)\n    {\n        this.destCallerIdName = destCallerIdName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdName the destCallerIdName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2755", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestCallerIdNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdNum()\n    {\n        return destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2756", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestCallerIdNum", "methodParameterType": "String#", "methodParameterName": "destCallerIdNum#", "methodBody": "public void setDestCallerIdNum(String destCallerIdNum)\n    {\n        this.destCallerIdNum = destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdNum the destCallerIdNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2757", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestContext()\n    {\n        return destContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destContext", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2758", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestContext", "methodParameterType": "String#", "methodParameterName": "destContext#", "methodBody": "public void setDestContext(String destContext)\n    {\n        this.destContext = destContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destContext the destContext to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2759", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestPriority()\n    {\n        return destPriority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destPriority", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2760", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestPriority", "methodParameterType": "String#", "methodParameterName": "destPriority#", "methodBody": "public void setDestPriority(String destPriority)\n    {\n        this.destPriority = destPriority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destPriority the destPriority to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2761", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannel()\n    {\n        return destChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2762", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestChannel", "methodParameterType": "String#", "methodParameterName": "destChannel#", "methodBody": "public void setDestChannel(String destChannel)\n    {\n        this.destChannel = destChannel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannel the destChannel to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2763", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestChannelState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelState()\n    {\n        return destChannelState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelState", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2764", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestChannelState", "methodParameterType": "String#", "methodParameterName": "destChannelState#", "methodBody": "public void setDestChannelState(String destChannelState)\n    {\n        this.destChannelState = destChannelState;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelState the destChannelState to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2765", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the iface", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2766", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param iface the iface to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2767", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the channel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2768", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param channel the channel to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2769", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.getDestConnectedLineName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineName()\n    {\n        return destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2770", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCalledEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCalledEvent.setDestConnectedLineName", "methodParameterType": "String#", "methodParameterName": "destConnectedLineName#", "methodBody": "public void setDestConnectedLineName(String destConnectedLineName)\n    {\n        this.destConnectedLineName = destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineName the destConnectedLineName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2771", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getBridgeState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeState()\n    {\n        return bridgeState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the bridge state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2772", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setBridgeState", "methodParameterType": "String#", "methodParameterName": "bridgeState#", "methodBody": "public void setBridgeState(String bridgeState)\n    {\n        this.bridgeState = bridgeState;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the bridge state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2773", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getBridgeType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeType()\n    {\n        return bridgeType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the bridge type.<p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2774", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setBridgeType", "methodParameterType": "String#", "methodParameterName": "bridgeType#", "methodBody": "public void setBridgeType(String bridgeType)\n    {\n        this.bridgeType = bridgeType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the bridge type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2775", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getUniqueId1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId1()\n    {\n        return uniqueId1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the first channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2776", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setUniqueId1", "methodParameterType": "String#", "methodParameterName": "uniqueId1#", "methodBody": "public void setUniqueId1(String uniqueId1)\n    {\n        this.uniqueId1 = uniqueId1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the first channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2777", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getUniqueId2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId2()\n    {\n        return uniqueId2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the second channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2778", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setUniqueId2", "methodParameterType": "String#", "methodParameterName": "uniqueId2#", "methodBody": "public void setUniqueId2(String uniqueId2)\n    {\n        this.uniqueId2 = uniqueId2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the second channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2779", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getChannel1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel1()\n    {\n        return channel1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the first channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2780", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setChannel1", "methodParameterType": "String#", "methodParameterName": "channel1#", "methodBody": "public void setChannel1(String channel1)\n    {\n        this.channel1 = channel1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the first channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2781", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getChannel2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel2()\n    {\n        return channel2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the second channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2782", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setChannel2", "methodParameterType": "String#", "methodParameterName": "channel2#", "methodBody": "public void setChannel2(String channel2)\n    {\n        this.channel2 = channel2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the second channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2783", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getCallerId1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId1()\n    {\n        return callerId1;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2784", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setCallerId1", "methodParameterType": "String#", "methodParameterName": "callerId1#", "methodBody": "public void setCallerId1(String callerId1)\n    {\n        this.callerId1 = callerId1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2785", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.getCallerId2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCallerId2()\n    {\n        return callerId2;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2786", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.setCallerId2", "methodParameterType": "String#", "methodParameterName": "callerId2#", "methodBody": "public void setCallerId2(String callerId2)\n    {\n        this.callerId2 = callerId2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2787", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.isLink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isLink()\n    {\n        return BRIDGE_STATE_LINK.equalsIgnoreCase(bridgeState);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two channels have been linked.", "call_func_name": ["java.lang.String.equalsIgnoreCase"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2788", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/BridgeEvent.java", "methodName": "org.asteriskjava.manager.event.BridgeEvent.isUnlink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUnlink()\n    {\n        return BRIDGE_STATE_UNLINK.equalsIgnoreCase(bridgeState);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two channels have been unlinked.", "call_func_name": ["java.lang.String.equalsIgnoreCase"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "2789", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FullyBootedEvent.java", "methodName": "org.asteriskjava.manager.event.FullyBootedEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status. Currently this is always \"Fully Booted\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2790", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FullyBootedEvent.java", "methodName": "org.asteriskjava.manager.event.FullyBootedEvent.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2791", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getDocumentNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getDocumentNumber()\n    {\n        return documentNumber;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the documentNumber", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2792", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setDocumentNumber", "methodParameterType": "Integer#", "methodParameterName": "documentNumber#", "methodBody": "public void setDocumentNumber(Integer documentNumber)\n    {\n        this.documentNumber = documentNumber;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param documentNumber the documentNumber to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2793", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getLastError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getLastError()\n    {\n        return lastError;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the lastError", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2794", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setLastError", "methodParameterType": "Integer#", "methodParameterName": "lastError#", "methodBody": "public void setLastError(Integer lastError)\n    {\n        this.lastError = lastError;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param lastError the lastError to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2795", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getPageCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPageCount()\n    {\n        return pageCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the pageCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2796", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setPageCount", "methodParameterType": "Integer#", "methodParameterName": "pageCount#", "methodBody": "public void setPageCount(Integer pageCount)\n    {\n        this.pageCount = pageCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param pageCount the pageCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2797", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getStartPage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getStartPage()\n    {\n        return startPage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the startPage", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2798", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setStartPage", "methodParameterType": "Integer#", "methodParameterName": "startPage#", "methodBody": "public void setStartPage(Integer startPage)\n    {\n        this.startPage = startPage;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param startPage the startPage to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2799", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getLastPageProcessed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getLastPageProcessed()\n    {\n        return lastPageProcessed;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the lastPageProcessed", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2800", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setLastPageProcessed", "methodParameterType": "Integer#", "methodParameterName": "lastPageProcessed#", "methodBody": "public void setLastPageProcessed(Integer lastPageProcessed)\n    {\n        this.lastPageProcessed = lastPageProcessed;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param lastPageProcessed the lastPageProcessed to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2801", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getRetransmitCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getRetransmitCount()\n    {\n        return retransmitCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the retransmitCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2802", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setRetransmitCount", "methodParameterType": "Integer#", "methodParameterName": "retransmitCount#", "methodBody": "public void setRetransmitCount(Integer retransmitCount)\n    {\n        this.retransmitCount = retransmitCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param retransmitCount the retransmitCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2803", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getTransferPels", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTransferPels()\n    {\n        return transferPels;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the transferPels", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2804", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setTransferPels", "methodParameterType": "Integer#", "methodParameterName": "transferPels#", "methodBody": "public void setTransferPels(Integer transferPels)\n    {\n        this.transferPels = transferPels;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param transferPels the transferPels to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2805", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getTransferRate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTransferRate()\n    {\n        return transferRate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the transferRate", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2806", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setTransferRate", "methodParameterType": "Integer#", "methodParameterName": "transferRate#", "methodBody": "public void setTransferRate(Integer transferRate)\n    {\n        this.transferRate = transferRate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param transferRate the transferRate to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2807", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getTransferDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTransferDuration()\n    {\n        return transferDuration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the transferDuration", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2808", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setTransferDuration", "methodParameterType": "String#", "methodParameterName": "transferDuration#", "methodBody": "public void setTransferDuration(String transferDuration)\n    {\n        this.transferDuration = transferDuration;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param transferDuration the transferDuration to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2809", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getBadLineCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getBadLineCount()\n    {\n        return badLineCount;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the badLineCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2810", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setBadLineCount", "methodParameterType": "Integer#", "methodParameterName": "badLineCount#", "methodBody": "public void setBadLineCount(Integer badLineCount)\n    {\n        this.badLineCount = badLineCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param badLineCount the badLineCount to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2811", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getProcessedStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getProcessedStatus()\n    {\n        return processedStatus;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the processedStatus", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2812", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setProcessedStatus", "methodParameterType": "String#", "methodParameterName": "processedStatus#", "methodBody": "public void setProcessedStatus(String processedStatus)\n    {\n        this.processedStatus = processedStatus;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param processedStatus the processedStatus to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2813", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getDocumentTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDocumentTime()\n    {\n        return documentTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the documentTime", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2814", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setDocumentTime", "methodParameterType": "String#", "methodParameterName": "documentTime#", "methodBody": "public void setDocumentTime(String documentTime)\n    {\n        this.documentTime = documentTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param documentTime the documentTime to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2815", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getLocalSid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocalSid()\n    {\n        return localSid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localSid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2816", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setLocalSid", "methodParameterType": "String#", "methodParameterName": "localSid#", "methodBody": "public void setLocalSid(String localSid)\n    {\n        this.localSid = localSid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localSid the localSid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2817", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getLocalDis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocalDis()\n    {\n        return localDis;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localDis", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2818", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setLocalDis", "methodParameterType": "String#", "methodParameterName": "localDis#", "methodBody": "public void setLocalDis(String localDis)\n    {\n        this.localDis = localDis;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localDis the localDis to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2819", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getRemoteSid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRemoteSid()\n    {\n        return remoteSid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the remoteSid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2820", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setRemoteSid", "methodParameterType": "String#", "methodParameterName": "remoteSid#", "methodBody": "public void setRemoteSid(String remoteSid)\n    {\n        this.remoteSid = remoteSid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param remoteSid the remoteSid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2821", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.getRemoteDis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRemoteDis()\n    {\n        return remoteDis;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the remoteDis", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2822", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/FaxDocumentStatusEvent.java", "methodName": "org.asteriskjava.manager.event.FaxDocumentStatusEvent.setRemoteDis", "methodParameterType": "String#", "methodParameterName": "remoteDis#", "methodBody": "public void setRemoteDis(String remoteDis)\n    {\n        this.remoteDis = remoteDis;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param remoteDis the remoteDis to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2823", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.AbstractMeetMeEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "protected AbstractMeetMeEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2824", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel. <p> This property is available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2825", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel. <p> This property is available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2826", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel. <p> This property is available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2827", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the channel. <p> This property is available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2828", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.getMeetMe", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMeetMe()\n    {\n        return meetMe;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the conference number.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2829", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.setMeetMe", "methodParameterType": "String#", "methodParameterName": "meetMe#", "methodBody": "public void setMeetMe(String meetMe)\n    {\n        this.meetMe = meetMe;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the conference number.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2830", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.getUserNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public Integer getUserNum()\n    {\n        return getUser();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the index of the user in the conference. <p> This can be used for the \"meetme (mute|unmute|kick)\" commands. use getUser() instead", "call_func_name": ["org.asteriskjava.manager.event.AbstractMeetMeEvent.getUser"], "call_func_parameter": [[""]], "passed_comments": [{"org.asteriskjava.manager.event.AbstractMeetMeEvent.getUser": "Returns the index of the user in the conference. <p> This can be used for the \"meetme (mute|unmute|kick)\" commands."}]}, {"index": "2831", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.setUserNum", "methodParameterType": "Integer#", "methodParameterName": "userNum#", "methodBody": "@Deprecated\n    public void setUserNum(Integer userNum)\n    {\n        this.setUser(userNum);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the index of the user in the conference.", "call_func_name": ["org.asteriskjava.manager.event.AbstractMeetMeEvent.setUser"], "call_func_parameter": [["java.lang.Integer"]], "passed_comments": [{"org.asteriskjava.manager.event.AbstractMeetMeEvent.setUser": "Sets the index of the user in the conference."}]}, {"index": "2832", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getUser()\n    {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the index of the user in the conference. <p> This can be used for the \"meetme (mute|unmute|kick)\" commands.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2833", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMeetMeEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMeetMeEvent.setUser", "methodParameterType": "Integer#", "methodParameterName": "userNum#", "methodBody": "public void setUser(Integer userNum)\n    {\n        this.user = userNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the index of the user in the conference.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2834", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.getMembership", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMembership()\n    {\n        return membership;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the added member is a dynamic or static queue member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2835", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.setMembership", "methodParameterType": "String#", "methodParameterName": "membership#", "methodBody": "public void setMembership(String membership)\n    {\n        this.membership = membership;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if the added member is a dynamic or static queue member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2836", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.getPenalty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getPenalty()\n    {\n        return penalty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the penalty for the added member. When calls are distributed members with higher penalties are considered last.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2837", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.setPenalty", "methodParameterType": "Integer#", "methodParameterName": "penalty#", "methodBody": "public void setPenalty(Integer penalty)\n    {\n        this.penalty = penalty;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the penalty for this member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2838", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.getCallsTaken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getCallsTaken()\n    {\n        return callsTaken;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of calls answered by the member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2839", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.setCallsTaken", "methodParameterType": "Integer#", "methodParameterName": "callsTaken#", "methodBody": "public void setCallsTaken(Integer callsTaken)\n    {\n        this.callsTaken = callsTaken;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of calls answered by the added member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2840", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.getLastCall", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getLastCall()\n    {\n        return lastCall;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the time the last successful call answered by the added member was hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2841", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.setLastCall", "methodParameterType": "Long#", "methodParameterName": "lastCall#", "methodBody": "public void setLastCall(Long lastCall)\n    {\n        this.lastCall = lastCall;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time the last successful call answered by this member was hungup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2842", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getStatus()\n    {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the status of this queue member.<p> Valid status codes are: <dl> <dt>AST_DEVICE_UNKNOWN (0)</dt> <dd>Queue member is available</dd> <dt>AST_DEVICE_NOT_INUSE (1)</dt> <dd>?</dd> <dt>AST_DEVICE_INUSE (2)</dt> <dd>?</dd> <dt>AST_DEVICE_BUSY (3)</dt> <dd>?</dd> <dt>AST_DEVICE_INVALID (4)</dt> <dd>?</dd> <dt>AST_DEVICE_UNAVAILABLE (5)</dt> <dd>?</dd> </dl>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2843", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.setStatus", "methodParameterType": "Integer#", "methodParameterName": "status#", "methodBody": "public void setStatus(Integer status)\n    {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the status of this queue member.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2844", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.getPaused", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getPaused()\n    {\n        return paused;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if this queue member is paused (not accepting calls).<p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2845", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/QueueMemberAddedEvent.java", "methodName": "org.asteriskjava.manager.event.QueueMemberAddedEvent.setPaused", "methodParameterType": "Boolean#", "methodParameterName": "paused#", "methodBody": "public void setPaused(Boolean paused)\n    {\n        this.paused = paused;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if this member is paused.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2846", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractFaxEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractFaxEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the channel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2847", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractFaxEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractFaxEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param channel the channel to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2848", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractFaxEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractFaxEvent.getFaxSession", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getFaxSession()\n    {\n        return faxSession;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the faxSession", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2849", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractFaxEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractFaxEvent.setFaxSession", "methodParameterType": "Integer#", "methodParameterName": "faxSession#", "methodBody": "public void setFaxSession(Integer faxSession)\n    {\n        this.faxSession = faxSession;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param faxSession the faxSession to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2850", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/OriginateFailureEvent.java", "methodName": "org.asteriskjava.manager.event.OriginateFailureEvent.OriginateFailureEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public OriginateFailureEvent(Object source)\n    {\n        super(source);\n        setResponse(\"Failure\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2851", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistrationsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.RegistrationsCompleteEvent.RegistrationsCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public RegistrationsCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new RegistrationsCompleteEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2852", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistrationsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.RegistrationsCompleteEvent.getListItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getListItems()\n    {\n        return listItems;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of SIP registrations that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2853", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistrationsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.RegistrationsCompleteEvent.setListItems", "methodParameterType": "Integer#", "methodParameterName": "listItems#", "methodBody": "public void setListItems(Integer listItems)\n    {\n        this.listItems = listItems;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of SIP registrations that have been reported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2854", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/RegistrationsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.RegistrationsCompleteEvent.getEventList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventList()\n    {\n        return eventList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns always \"Complete\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2855", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/JitterBufStatsEvent.java", "methodName": "org.asteriskjava.manager.event.JitterBufStatsEvent.getOwner", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOwner()\n    {\n        return owner;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2856", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/UserEvent.java", "methodName": "org.asteriskjava.manager.event.UserEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel this event occured in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2857", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/UserEvent.java", "methodName": "org.asteriskjava.manager.event.UserEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the channel this event occured in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2858", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/UserEvent.java", "methodName": "org.asteriskjava.manager.event.UserEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unqiue id of the channel this event occured in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2859", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/UserEvent.java", "methodName": "org.asteriskjava.manager.event.UserEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unqiue id of the channel this event occured in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2860", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getMaxLag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMaxLag()\n    {\n        return maxLag;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the maxLag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2861", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setMaxLag", "methodParameterType": "String#", "methodParameterName": "maxLag#", "methodBody": "public void setMaxLag(String maxLag)\n    {\n        this.maxLag = maxLag;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param maxLag the maxLag to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2862", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getTotalLag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTotalLag()\n    {\n        return totalLag;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the totalLag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2863", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setTotalLag", "methodParameterType": "String#", "methodParameterName": "totalLag#", "methodBody": "public void setTotalLag(String totalLag)\n    {\n        this.totalLag = totalLag;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param totalLag the totalLag to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2864", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getAverageLag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAverageLag()\n    {\n        return averageLag;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the averageLag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2865", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setAverageLag", "methodParameterType": "String#", "methodParameterName": "averageLag#", "methodBody": "public void setAverageLag(String averageLag)\n    {\n        this.averageLag = averageLag;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param averageLag the averageLag to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2866", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getTotalEvents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTotalEvents()\n    {\n        return totalEvents;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the totalEvents", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2867", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setTotalEvents", "methodParameterType": "Integer#", "methodParameterName": "totalEvents#", "methodBody": "public void setTotalEvents(Integer totalEvents)\n    {\n        this.totalEvents = totalEvents;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param totalEvents the totalEvents to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2868", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getT38SessionDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getT38SessionDuration()\n    {\n        return t38SessionDuration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the t38SessionDuration", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2869", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setT38SessionDuration", "methodParameterType": "String#", "methodParameterName": "t38SessionDuration#", "methodBody": "public void setT38SessionDuration(String t38SessionDuration)\n    {\n        this.t38SessionDuration = t38SessionDuration;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param t38SessionDuration the t38SessionDuration to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2870", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getT38PacketsSent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getT38PacketsSent()\n    {\n        return t38PacketsSent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the t38PacketsSent", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2871", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setT38PacketsSent", "methodParameterType": "Integer#", "methodParameterName": "t38PacketsSent#", "methodBody": "public void setT38PacketsSent(Integer t38PacketsSent)\n    {\n        this.t38PacketsSent = t38PacketsSent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param t38PacketsSent the t38PacketsSent to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2872", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getT38OctetsSent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getT38OctetsSent()\n    {\n        return t38OctetsSent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the t38OctetsSent", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2873", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setT38OctetsSent", "methodParameterType": "Integer#", "methodParameterName": "t38OctetsSent#", "methodBody": "public void setT38OctetsSent(Integer t38OctetsSent)\n    {\n        this.t38OctetsSent = t38OctetsSent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param t38OctetsSent the t38OctetsSent to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2874", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getAverageTxDataRate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAverageTxDataRate()\n    {\n        return averageTxDataRate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the averageTxDataRate", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2875", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setAverageTxDataRate", "methodParameterType": "String#", "methodParameterName": "averageTxDataRate#", "methodBody": "public void setAverageTxDataRate(String averageTxDataRate)\n    {\n        this.averageTxDataRate = averageTxDataRate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param averageTxDataRate the averageTxDataRate to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2876", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getT38PacketsReceived", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getT38PacketsReceived()\n    {\n        return t38PacketsReceived;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the t38PacketsReceived", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2877", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setT38PacketsReceived", "methodParameterType": "Integer#", "methodParameterName": "t38PacketsReceived#", "methodBody": "public void setT38PacketsReceived(Integer t38PacketsReceived)\n    {\n        this.t38PacketsReceived = t38PacketsReceived;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param t38PacketsReceived the t38PacketsReceived to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2878", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getT38OctetsReceived", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getT38OctetsReceived()\n    {\n        return t38OctetsReceived;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the t38OctetsReceived", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2879", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setT38OctetsReceived", "methodParameterType": "Integer#", "methodParameterName": "t38OctetsReceived#", "methodBody": "public void setT38OctetsReceived(Integer t38OctetsReceived)\n    {\n        this.t38OctetsReceived = t38OctetsReceived;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param t38OctetsReceived the t38OctetsReceived to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2880", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getAverageRxDataRate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAverageRxDataRate()\n    {\n        return averageRxDataRate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the averageRxDataRate", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2881", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setAverageRxDataRate", "methodParameterType": "String#", "methodParameterName": "averageRxDataRate#", "methodBody": "public void setAverageRxDataRate(String averageRxDataRate)\n    {\n        this.averageRxDataRate = averageRxDataRate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param averageRxDataRate the averageRxDataRate to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2882", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getJitterBufferOverflows", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getJitterBufferOverflows()\n    {\n        return jitterBufferOverflows;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the jitterBufferOverflows", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2883", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setJitterBufferOverflows", "methodParameterType": "Integer#", "methodParameterName": "jitterBufferOverflows#", "methodBody": "public void setJitterBufferOverflows(Integer jitterBufferOverflows)\n    {\n        this.jitterBufferOverflows = jitterBufferOverflows;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param jitterBufferOverflows the jitterBufferOverflows to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2884", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getMinimumJitterSpace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getMinimumJitterSpace()\n    {\n        return minimumJitterSpace;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the minimumJitterSpace", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2885", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setMinimumJitterSpace", "methodParameterType": "Integer#", "methodParameterName": "minimumJitterSpace#", "methodBody": "public void setMinimumJitterSpace(Integer minimumJitterSpace)\n    {\n        this.minimumJitterSpace = minimumJitterSpace;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param minimumJitterSpace the minimumJitterSpace to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2886", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.getUnrecoverablePackets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getUnrecoverablePackets()\n    {\n        return unrecoverablePackets;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the unrecoverablePackets", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2887", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/T38FaxStatusEvent.java", "methodName": "org.asteriskjava.manager.event.T38FaxStatusEvent.setUnrecoverablePackets", "methodParameterType": "Integer#", "methodParameterName": "unrecoverablePackets#", "methodBody": "public void setUnrecoverablePackets(Integer unrecoverablePackets)\n    {\n        this.unrecoverablePackets = unrecoverablePackets;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param unrecoverablePackets the unrecoverablePackets to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2888", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMonitorEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMonitorEvent.AbstractMonitorEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "protected AbstractMonitorEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2889", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMonitorEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMonitorEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2890", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractMonitorEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractMonitorEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2891", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2892", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setChannel", "methodParameterType": "String#", "methodParameterName": "channel#", "methodBody": "public void setChannel(String channel)\n    {\n        this.channel = channel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2893", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getCallerId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getCallerId()\n    {\n        return callerIdNum;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2894", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setCallerId", "methodParameterType": "String#", "methodParameterName": "callerIdNum#", "methodBody": "public void setCallerId(String callerIdNum)\n    {\n        this.callerIdNum = callerIdNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Caller", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2895", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getAccountCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccountCode()\n    {\n        return accountCode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the account code of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2896", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setAccountCode", "methodParameterType": "String#", "methodParameterName": "accountCode#", "methodBody": "public void setAccountCode(String accountCode)\n    {\n        this.accountCode = accountCode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the account code of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2897", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getAccount()\n    {\n        return accountCode;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the account code of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2898", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setAccount", "methodParameterType": "String#", "methodParameterName": "account#", "methodBody": "public void setAccount(String account)\n    {\n        this.accountCode = account;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the account code of this channel. <p> Asterisk versions up to 1.4 use the \"Account\" property instead of \"AccountCode\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2899", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getState()\n    {\n        return getChannelStateDesc();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the state of the channel as a descriptive text.", "call_func_name": ["org.asteriskjava.manager.event.StatusEvent.getChannelStateDesc"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "2900", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getSeconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getSeconds()\n    {\n        return seconds;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elapsed seconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2901", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setSeconds", "methodParameterType": "Integer#", "methodParameterName": "seconds#", "methodBody": "public void setSeconds(Integer seconds)\n    {\n        this.seconds = seconds;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the number of elapsed seconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2902", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getBridgedChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgedChannel()\n    {\n        return bridgedChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the linked channel if this channel is bridged.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2903", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setBridgedChannel", "methodParameterType": "String#", "methodParameterName": "bridgedChannel#", "methodBody": "public void setBridgedChannel(String bridgedChannel)\n    {\n        this.bridgedChannel = bridgedChannel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the linked channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2904", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getLink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getLink()\n    {\n        return bridgedChannel;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the linked channel if this channel is bridged.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2905", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setLink", "methodParameterType": "String#", "methodParameterName": "link#", "methodBody": "public void setLink(String link)\n    {\n        this.bridgedChannel = link;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the name of the linked channel. <p> Asterisk versions up to 1.4 use \"Link\" instead of \"BridgedChannel\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2906", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getBridgedUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgedUniqueId()\n    {\n        return bridgedUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the linked channel if this channel is bridged. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2907", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setBridgedUniqueId", "methodParameterType": "String#", "methodParameterName": "bridgedUniqueId#", "methodBody": "public void setBridgedUniqueId(String bridgedUniqueId)\n    {\n        this.bridgedUniqueId = bridgedUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of the linked channel if this channel is bridged. <p> Available since Asterisk 1.6.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2908", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2909", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setUniqueId", "methodParameterType": "String#", "methodParameterName": "uniqueId#", "methodBody": "public void setUniqueId(String uniqueId)\n    {\n        this.uniqueId = uniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the unique id of this channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2910", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getVariables()\n    {\n        return variables;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel variables if the {@link org.asteriskjava.manager.action.StatusAction#setVariables(String)}property has been set. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2911", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setVariables", "methodParameterType": "Map<String,String>#", "methodParameterName": "variables#", "methodBody": "public void setVariables(Map<String, String> variables)\n    {\n        this.variables = variables;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the channel variables. <p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2912", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getDnid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDnid()\n    {\n        return dnid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dnid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2913", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setDnid", "methodParameterType": "String#", "methodParameterName": "dnid#", "methodBody": "public void setDnid(String dnid)\n    {\n        this.dnid = dnid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dnid the dnid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2914", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getWritetrans", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getWritetrans()\n    {\n        return writetrans;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the writetrans", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2915", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setWritetrans", "methodParameterType": "String#", "methodParameterName": "writetrans#", "methodBody": "public void setWritetrans(String writetrans)\n    {\n        this.writetrans = writetrans;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param writetrans the writetrans to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2916", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getBridgeId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBridgeId()\n    {\n        return bridgeId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the bridgeid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2917", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setBridgeId", "methodParameterType": "String#", "methodParameterName": "bridgeid#", "methodBody": "public void setBridgeId(String bridgeid)\n    {\n        this.bridgeId = bridgeid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param bridgeid the bridgeid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2918", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.getReadtrans", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReadtrans()\n    {\n        return readtrans;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the readtrans", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2919", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/StatusEvent.java", "methodName": "org.asteriskjava.manager.event.StatusEvent.setReadtrans", "methodParameterType": "String#", "methodParameterName": "readtrans#", "methodBody": "public void setReadtrans(String readtrans)\n    {\n        this.readtrans = readtrans;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param readtrans the readtrans to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2920", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractAgentEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractAgentEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2921", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractAgentEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractAgentEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2922", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractAgentEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractAgentEvent.getQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getQueue()\n    {\n        return queue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the queue.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2923", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractAgentEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractAgentEvent.getMember", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMember()\n    {\n        return member;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the member's interface.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2924", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractAgentEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractAgentEvent.getMemberName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMemberName()\n    {\n        return memberName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the member name supplied for logging when the member is added. <br> Available since Asterisk 1.4.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2925", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractAgentEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractAgentEvent.getVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getVariables()\n    {\n        return variables;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the channel variables if <code>eventwhencalled</code> is set to <code>vars</code> in <code>queues.conf</code>.<p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2926", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AbstractAgentEvent.java", "methodName": "org.asteriskjava.manager.event.AbstractAgentEvent.setVariables", "methodParameterType": "Map<String,String>#", "methodParameterName": "variables#", "methodBody": "public void setVariables(Map<String, String> variables)\n    {\n        this.variables = variables;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the channel variables.<p> Available since Asterisk 1.6", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2927", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getHoldTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getHoldTime()\n    {\n        return holdTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the amount of time the caller was on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2928", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setHoldTime", "methodParameterType": "Long#", "methodParameterName": "holdtime#", "methodBody": "public void setHoldTime(Long holdtime)\n    {\n        this.holdTime = holdtime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the amount of time the caller was on hold.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2929", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getTalkTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getTalkTime()\n    {\n        return talkTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the amount of time the caller talked to the agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2930", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setTalkTime", "methodParameterType": "Long#", "methodParameterName": "talkTime#", "methodBody": "public void setTalkTime(Long talkTime)\n    {\n        this.talkTime = talkTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the amount of time the caller talked to the agent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2931", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason()\n    {\n        return reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the agent or the caller terminated the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2932", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setReason", "methodParameterType": "String#", "methodParameterName": "reason#", "methodBody": "public void setReason(String reason)\n    {\n        this.reason = reason;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets if the agent or the caller terminated the call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2933", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestExten", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestExten()\n    {\n        return destExten;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destExten", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2934", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestExten", "methodParameterType": "String#", "methodParameterName": "destExten#", "methodBody": "public void setDestExten(String destExten)\n    {\n        this.destExten = destExten;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destExten the destExten to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2935", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestChannelStateDesc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelStateDesc()\n    {\n        return destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelStateDesc", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2936", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestChannelStateDesc", "methodParameterType": "String#", "methodParameterName": "destChannelStateDesc#", "methodBody": "public void setDestChannelStateDesc(String destChannelStateDesc)\n    {\n        this.destChannelStateDesc = destChannelStateDesc;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelStateDesc the destChannelStateDesc to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2937", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestUniqueId()\n    {\n        return destUniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destUniqueId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2938", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestUniqueId", "methodParameterType": "String#", "methodParameterName": "destUniqueId#", "methodBody": "public void setDestUniqueId(String destUniqueId)\n    {\n        this.destUniqueId = destUniqueId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destUniqueId the destUniqueId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2939", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestConnectedLineNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineNum()\n    {\n        return destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2940", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestConnectedLineNum", "methodParameterType": "String#", "methodParameterName": "destConnectedLineNum#", "methodBody": "public void setDestConnectedLineNum(String destConnectedLineNum)\n    {\n        this.destConnectedLineNum = destConnectedLineNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineNum the destConnectedLineNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2941", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestConnectedLineName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestConnectedLineName()\n    {\n        return destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destConnectedLineName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2942", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestConnectedLineName", "methodParameterType": "String#", "methodParameterName": "destConnectedLineName#", "methodBody": "public void setDestConnectedLineName(String destConnectedLineName)\n    {\n        this.destConnectedLineName = destConnectedLineName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destConnectedLineName the destConnectedLineName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2943", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestCallerIdName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdName()\n    {\n        return destCallerIdName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2944", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestCallerIdName", "methodParameterType": "String#", "methodParameterName": "destCallerIdName#", "methodBody": "public void setDestCallerIdName(String destCallerIdName)\n    {\n        this.destCallerIdName = destCallerIdName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdName the destCallerIdName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2945", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestCallerIdNum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestCallerIdNum()\n    {\n        return destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destCallerIdNum", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2946", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestCallerIdNum", "methodParameterType": "String#", "methodParameterName": "destCallerIdNum#", "methodBody": "public void setDestCallerIdNum(String destCallerIdNum)\n    {\n        this.destCallerIdNum = destCallerIdNum;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destCallerIdNum the destCallerIdNum to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2947", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestContext()\n    {\n        return destContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destContext", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2948", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestContext", "methodParameterType": "String#", "methodParameterName": "destContext#", "methodBody": "public void setDestContext(String destContext)\n    {\n        this.destContext = destContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destContext the destContext to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2949", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestPriority()\n    {\n        return destPriority;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destPriority", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2950", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestPriority", "methodParameterType": "String#", "methodParameterName": "destPriority#", "methodBody": "public void setDestPriority(String destPriority)\n    {\n        this.destPriority = destPriority;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destPriority the destPriority to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2951", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannel()\n    {\n        return destChannel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2952", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestChannel", "methodParameterType": "String#", "methodParameterName": "destChannel#", "methodBody": "public void setDestChannel(String destChannel)\n    {\n        this.destChannel = destChannel;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannel the destChannel to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2953", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getDestChannelState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestChannelState()\n    {\n        return destChannelState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destChannelState", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2954", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setDestChannelState", "methodParameterType": "String#", "methodParameterName": "destChannelState#", "methodBody": "public void setDestChannelState(String destChannelState)\n    {\n        this.destChannelState = destChannelState;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destChannelState the destChannelState to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2955", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.getInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInterface()\n    {\n        return iface;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the iface", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2956", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/AgentCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.AgentCompleteEvent.setInterface", "methodParameterType": "String#", "methodParameterName": "iface#", "methodBody": "public void setInterface(String iface)\n    {\n        this.iface = iface;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param iface the iface to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2957", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ZapShowChannelsCompleteEvent.java", "methodName": "org.asteriskjava.manager.event.ZapShowChannelsCompleteEvent.ZapShowChannelsCompleteEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ZapShowChannelsCompleteEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2958", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewAccountCodeEvent.java", "methodName": "org.asteriskjava.manager.event.NewAccountCodeEvent.NewAccountCodeEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public NewAccountCodeEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2959", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewAccountCodeEvent.java", "methodName": "org.asteriskjava.manager.event.NewAccountCodeEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2960", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewAccountCodeEvent.java", "methodName": "org.asteriskjava.manager.event.NewAccountCodeEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2961", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewAccountCodeEvent.java", "methodName": "org.asteriskjava.manager.event.NewAccountCodeEvent.getAccountCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccountCode()\n    {\n        return accountCode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new account code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2962", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/NewAccountCodeEvent.java", "methodName": "org.asteriskjava.manager.event.NewAccountCodeEvent.getOldAccountCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOldAccountCode()\n    {\n        return oldAccountCode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the old account code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2963", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelUpdateEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelUpdateEvent.ChannelUpdateEvent", "methodParameterType": "Object#", "methodParameterName": "source#", "methodBody": "public ChannelUpdateEvent(Object source)\n    {\n        super(source);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param source", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2964", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelUpdateEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelUpdateEvent.getChannelType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannelType()\n    {\n        return channelType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of channel, that is \"IAX2\" for an IAX2 channel or \"SIP\" for a SIP channel.<br> For Google Talk it is either \"GTALK\" or \"Gtalk\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2965", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelUpdateEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelUpdateEvent.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChannel()\n    {\n        return channel;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2966", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/event/ChannelUpdateEvent.java", "methodName": "org.asteriskjava.manager.event.ChannelUpdateEvent.getUniqueId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUniqueId()\n    {\n        return uniqueId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique id of the channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2967", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ManagerEventListenerProxy.java", "methodName": "org.asteriskjava.manager.ManagerEventListenerProxy.ManagerEventListenerProxy", "methodParameterType": "ManagerEventListener#", "methodParameterName": "target#", "methodBody": "public ManagerEventListenerProxy(ManagerEventListener target) {\n\t    executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), new DaemonThreadFactory());\n\t    this.target = target;\n\t    if (target == null) {\n\t\t    throw new NullPointerException(\"ManagerEventListener target is null!\");\n\t    }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#NumberLiteral#NumberLiteral#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ManagerEventListenerProxy that notifies the given target asynchronously when new events are received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2968", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.DefaultManagerConnection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DefaultManagerConnection()\n    {\n        this.impl = new ManagerConnectionImpl();\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2969", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.DefaultManagerConnection", "methodParameterType": "String#String#String#", "methodParameterName": "hostname#username#password#", "methodBody": "public DefaultManagerConnection(String hostname, String username, String password)\n    {\n        this();\n        impl.setHostname(hostname);\n        impl.setUsername(username);\n        impl.setPassword(password);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ConstructorInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given connection parameters using Asterisk's default port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2970", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.DefaultManagerConnection", "methodParameterType": "String#int#String#String#", "methodParameterName": "hostname#port#username#password#", "methodBody": "public DefaultManagerConnection(String hostname, int port, String username, String password)\n    {\n        this();\n        impl.setHostname(hostname);\n        impl.setPort(port);\n        impl.setUsername(username);\n        impl.setPassword(password);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ConstructorInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance with the given connection parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2971", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setHostname", "methodParameterType": "String#", "methodParameterName": "hostname#", "methodBody": "public void setHostname(String hostname)\n    {\n        impl.setHostname(hostname);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the hostname of the Asterisk server to connect to. <p> Default is <code>localhost</code>.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setHostname"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setHostname": "Sets the hostname of the asterisk server to connect to. <p/> Default is <code>localhost</code>."}]}, {"index": "2972", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setPort", "methodParameterType": "int#", "methodParameterName": "port#", "methodBody": "public void setPort(int port)\n    {\n        impl.setPort(port);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the port to use to connect to the Asterisk server. This is the port specified in Asterisk's <code>manager.conf</code> file. <p> Default is 5038.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setPort"], "call_func_parameter": [["int"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setPort": "Sets the port to use to connect to the asterisk server. This is the port specified in asterisk's <code>manager.conf</code> file. <p/> Default is 5038."}]}, {"index": "2973", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setSsl", "methodParameterType": "boolean#", "methodParameterName": "ssl#", "methodBody": "public void setSsl(boolean ssl)\n    {\n        impl.setSsl(ssl);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether to use SSL. <p> Default is false.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setSsl"], "call_func_parameter": [["boolean"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setSsl": "Sets whether to use SSL. <br> Default is false."}]}, {"index": "2974", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username)\n    {\n        impl.setUsername(username);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the username to use to connect to the Asterisk server. This is the username specified in Asterisk's <code>manager.conf</code> file.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setUsername"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setUsername": "Sets the username to use to connect to the asterisk server. This is the username specified in asterisk's <code>manager.conf</code> file."}]}, {"index": "2975", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setPassword", "methodParameterType": "String#", "methodParameterName": "password#", "methodBody": "public void setPassword(String password)\n    {\n        impl.setPassword(password);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the password to use to connect to the Asterisk server. This is the password specified in Asterisk's <code>manager.conf</code> file.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setPassword"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setPassword": "Sets the password to use to connect to the asterisk server. This is the password specified in Asterisk's <code>manager.conf</code> file."}]}, {"index": "2976", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setDefaultTimeout", "methodParameterType": "long#", "methodParameterName": "defaultTimeout#", "methodBody": "@Deprecated\n    public void setDefaultTimeout(long defaultTimeout)\n    {\n        impl.setDefaultResponseTimeout(defaultTimeout);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time in milliseconds the synchronous sendAction methods {@link #sendAction(ManagerAction)} will wait for a response beforethrowing a TimeoutException. <p> Default is 2000.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultResponseTimeout"], "call_func_parameter": [["long"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultResponseTimeout": "Sets the time in milliseconds the synchronous method {@link #sendAction(ManagerAction)} will wait for a response beforethrowing a TimeoutException. <br> Default is 2000."}]}, {"index": "2977", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setDefaultResponseTimeout", "methodParameterType": "long#", "methodParameterName": "defaultResponseTimeout#", "methodBody": "public void setDefaultResponseTimeout(long defaultResponseTimeout)\n    {\n        impl.setDefaultResponseTimeout(defaultResponseTimeout);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time in milliseconds the synchronous method {@link #sendAction(ManagerAction)} will wait for a response beforethrowing a TimeoutException. <p> Default is 2000.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultResponseTimeout"], "call_func_parameter": [["long"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultResponseTimeout": "Sets the time in milliseconds the synchronous method {@link #sendAction(ManagerAction)} will wait for a response beforethrowing a TimeoutException. <br> Default is 2000."}]}, {"index": "2978", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setDefaultEventTimeout", "methodParameterType": "long#", "methodParameterName": "defaultEventTimeout#", "methodBody": "public void setDefaultEventTimeout(long defaultEventTimeout)\n    {\n        impl.setDefaultEventTimeout(defaultEventTimeout);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time in milliseconds the synchronous method {@link #sendEventGeneratingAction(EventGeneratingAction)} will wait for aresponse and the last response event before throwing a TimeoutException. <p> Default is 5000.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultEventTimeout"], "call_func_parameter": [["long"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultEventTimeout": "Sets the time in milliseconds the synchronous method {@link #sendEventGeneratingAction(EventGeneratingAction)} will wait for aresponse and the last response event before throwing a TimeoutException. <br> Default is 5000."}]}, {"index": "2979", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setSleepTime", "methodParameterType": "long#", "methodParameterName": "sleepTime#", "methodBody": "@Deprecated\n    public void setSleepTime(long sleepTime)\n    {\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "This method is deprecated and will be removed in Asterisk-Java 0.4. <p> It does nothing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2980", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/DefaultManagerConnection.java", "methodName": "org.asteriskjava.manager.DefaultManagerConnection.setKeepAliveAfterAuthenticationFailure", "methodParameterType": "boolean#", "methodParameterName": "keepAliveAfterAuthenticationFailure#", "methodBody": "public void setKeepAliveAfterAuthenticationFailure(boolean keepAliveAfterAuthenticationFailure)\n    {\n        impl.setKeepAliveAfterAuthenticationFailure(keepAliveAfterAuthenticationFailure);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to <code>true</code> to try reconnecting to ther asterisk serve even if the reconnection attempt threw an AuthenticationFailedException. <p> Default is <code>true</code>.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.setKeepAliveAfterAuthenticationFailure"], "call_func_parameter": [["boolean"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.setKeepAliveAfterAuthenticationFailure": "Set to <code>true</code> to try reconnecting to ther asterisk serve even if the reconnection attempt threw an AuthenticationFailedException. <br> Default is <code>true</code>."}]}, {"index": "2981", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReader.java", "methodName": "org.asteriskjava.manager.internal.ManagerReader.setSocket", "methodParameterType": "SocketConnectionFacade#", "methodParameterName": "socket#", "methodBody": "void setSocket(final SocketConnectionFacade socket);", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the socket to use for reading from the asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2982", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReader.java", "methodName": "org.asteriskjava.manager.internal.ManagerReader.registerEventClass", "methodParameterType": "Class<? extends ManagerEvent>#", "methodParameterName": "event#", "methodBody": "void registerEventClass(Class< ? extends ManagerEvent> event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Registers a new event type with the underlying EventBuilderImpl. <p> The eventClass must extend ManagerEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2983", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReader.java", "methodName": "org.asteriskjava.manager.internal.ManagerReader.die", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void die();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Terminates this reader.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2984", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReader.java", "methodName": "org.asteriskjava.manager.internal.ManagerReader.isDead", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isDead();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks whether this reader is terminating or terminated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2985", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReader.java", "methodName": "org.asteriskjava.manager.internal.ManagerReader.getTerminationException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "IOException getTerminationException();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the Exception that caused this reader to terminate if any.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2986", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/backwardsCompatibility/bridge/BridgeState.java", "methodName": "org.asteriskjava.manager.internal.backwardsCompatibility.bridge.BridgeState.addMember", "methodParameterType": "BridgeEnterEvent#", "methodParameterName": "event#", "methodBody": "ManagerEvent addMember(BridgeEnterEvent event)\n    {\n        List<BridgeEnterEvent> remaining = null;\n\n        synchronized (members)\n        {\n            if (members.put(event.getChannel(), event) == null && members.size() == 2)\n            {\n                remaining = new ArrayList<>(members.values());\n            }\n        }\n\n        if (remaining == null)\n        {\n            return null;\n        }\n\n        logger.info(\"Members size \" + remaining.size() + \" \" + event);\n\n        BridgeEvent bridgeEvent = buildBridgeEvent(BridgeEvent.BRIDGE_STATE_LINK, remaining);\n\n        logger.info(\"Bridge \" + bridgeEvent.getChannel1() + \" \" + bridgeEvent.getChannel2());\n\n        return bridgeEvent;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "if there are exactly 2 members in the bridge, return a BridgeEvent", "call_func_name": ["org.asteriskjava.manager.event.BridgeEnterEvent.getChannel", "java.util.Map.put", "java.util.Map.size", "java.util.Map.values", "java.util.ArrayList.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.util.List.size", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "org.asteriskjava.manager.internal.backwardsCompatibility.bridge.BridgeState.buildBridgeEvent", "org.asteriskjava.manager.event.BridgeEvent.getChannel1", "org.asteriskjava.manager.event.BridgeEvent.getChannel2"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], [""], [""], ["java.util.Collection"], [""], ["java.lang.String"], [""], ["int"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String", "java.util.List"], [""], [""]], "passed_comments": [{"org.asteriskjava.manager.event.BridgeEvent.getChannel1": "Returns the name of the first channel."}, {"org.asteriskjava.manager.event.BridgeEvent.getChannel2": "Returns the name of the second channel."}]}, {"index": "2987", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/backwardsCompatibility/bridge/BridgeState.java", "methodName": "org.asteriskjava.manager.internal.backwardsCompatibility.bridge.BridgeState.removeMember", "methodParameterType": "BridgeLeaveEvent#", "methodParameterName": "event#", "methodBody": "ManagerEvent removeMember(BridgeLeaveEvent event)\n    {\n        List<BridgeEnterEvent> remaining = new LinkedList<>();\n\n        synchronized (members)\n        {\n            remaining.addAll(members.values());\n\n            if (members.remove(event.getChannel()) != null)\n            {\n                if (remaining.size() == 2)\n                {\n                    return buildBridgeEvent(BridgeEvent.BRIDGE_STATE_UNLINK, remaining);\n                }\n            }\n        }\n\n        // If we didn't remove anything, or we aren't at exactly 2 members,\n        // there's nothing else for us to do\n\n        return null;\n\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#SynchronizedStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)SynchronizedStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If there are exactly 2 members in the bridge, return a BridgeEvent", "call_func_name": ["java.util.LinkedList.<init>", "java.util.Map.values", "java.util.List.addAll", "org.asteriskjava.manager.event.BridgeLeaveEvent.getChannel", "java.util.Map.remove", "java.util.List.size", "org.asteriskjava.manager.internal.backwardsCompatibility.bridge.BridgeState.buildBridgeEvent"], "call_func_parameter": [[""], [""], ["java.util.Collection"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.util.List"]], "passed_comments": "/"}, {"index": "2988", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/EventBuilder.java", "methodName": "org.asteriskjava.manager.internal.EventBuilder.registerEventClass", "methodParameterType": "Class<? extends ManagerEvent>#", "methodParameterName": "clazz#", "methodBody": "void registerEventClass(Class< ? extends ManagerEvent> clazz) throws IllegalArgumentException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Registers a new event class. The event this class is registered for is simply derived from the name of the class by stripping any package name (if present) and stripping the sufffix \"Event\". For example <code>org.asteriskjava.manager.event.JoinEvent</code> is registered for the event \"Join\". <p> The event class must be a concrete class with a default constructor (one that takes no arguments).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2989", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/EventBuilder.java", "methodName": "org.asteriskjava.manager.internal.EventBuilder.buildEvent", "methodParameterType": "Object#Map<String,Object>#", "methodParameterName": "source#attributes#", "methodBody": "ManagerEvent buildEvent(Object source, Map<String, Object> attributes);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds the event based on the given map of attributes and the registered event classes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2990", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerWriter.java", "methodName": "org.asteriskjava.manager.internal.ManagerWriter.setTargetVersion", "methodParameterType": "AsteriskVersion#", "methodParameterName": "targetVersion#", "methodBody": "void setTargetVersion(AsteriskVersion targetVersion);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the version of the target Asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2991", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerWriter.java", "methodName": "org.asteriskjava.manager.internal.ManagerWriter.setSocket", "methodParameterType": "SocketConnectionFacade#", "methodParameterName": "socket#", "methodBody": "void setSocket(final SocketConnectionFacade socket);", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the socket to use for writing to Asterisk.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2992", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerWriter.java", "methodName": "org.asteriskjava.manager.internal.ManagerWriter.sendAction", "methodParameterType": "ManagerAction#String#", "methodParameterName": "action#internalActionId#", "methodBody": "void sendAction(final ManagerAction action, String internalActionId) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends the given action to the asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2993", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ActionBuilder.java", "methodName": "org.asteriskjava.manager.internal.ActionBuilder.setTargetVersion", "methodParameterType": "AsteriskVersion#", "methodParameterName": "targetVersion#", "methodBody": "void setTargetVersion(AsteriskVersion targetVersion);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the version of the Asterisk server to built the action for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2994", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ActionBuilder.java", "methodName": "org.asteriskjava.manager.internal.ActionBuilder.buildAction", "methodParameterType": "ManagerAction#", "methodParameterName": "action#", "methodBody": "String buildAction(final ManagerAction action);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds a String suitable to be sent to Asterisk based on the given action object.<p> Asterisk actions consist of an unordered set of key value pairs corresponding to the attributes of the ManagerActions. Key and value are separated by a colon (\":\"), key value pairs by a CR/NL (\"\\r\\n\"). An action is terminated by an empty line (\"\\r\\n\\r\\n\").", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2995", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ActionBuilder.java", "methodName": "org.asteriskjava.manager.internal.ActionBuilder.buildAction", "methodParameterType": "ManagerAction#String#", "methodParameterName": "action#internalActionId#", "methodBody": "String buildAction(final ManagerAction action, final String internalActionId);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds a String suitable to be sent to Asterisk based on the given action object.<p> Asterisk actions consist of an unordered set of key value pairs corresponding to the attributes of the ManagerActions. Key and value are separated by a colon (\":\"), key value pairs by a CR/NL (\"\\r\\n\"). An action is terminated by an empty line (\"\\r\\n\\r\\n\").", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2996", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ResponseEventsImpl.java", "methodName": "org.asteriskjava.manager.internal.ResponseEventsImpl.ResponseEventsImpl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResponseEventsImpl()\n    {\n        this.events = new ArrayList<>();\n        this.complete = false;\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2997", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ResponseEventsImpl.java", "methodName": "org.asteriskjava.manager.internal.ResponseEventsImpl.setRepsonse", "methodParameterType": "ManagerResponse#", "methodParameterName": "response#", "methodBody": "public void setRepsonse(ManagerResponse response)\n    {\n        this.response = response;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the ManagerResponse received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2998", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ResponseEventsImpl.java", "methodName": "org.asteriskjava.manager.internal.ResponseEventsImpl.addEvent", "methodParameterType": "ResponseEvent#", "methodParameterName": "event#", "methodBody": "public void addEvent(ResponseEvent event)\n    {\n        synchronized (events)\n        {\n            events.add(event);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Adds a ResponseEvent that has been received.", "call_func_name": ["java.util.Collection.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "2999", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ResponseEventsImpl.java", "methodName": "org.asteriskjava.manager.internal.ResponseEventsImpl.setComplete", "methodParameterType": "boolean#", "methodParameterName": "complete#", "methodBody": "public void setComplete(boolean complete)\n    {\n        this.complete = complete;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Indicats if all events have been received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3000", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ResponseEventsImpl.java", "methodName": "org.asteriskjava.manager.internal.ResponseEventsImpl.await", "methodParameterType": "long#", "methodParameterName": "timeout#", "methodBody": "public void await(long timeout) throws InterruptedException\n    {\n        latch.await(timeout, TimeUnit.MILLISECONDS);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param timeout - milliseconds", "call_func_name": ["java.util.concurrent.CountDownLatch.await"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "3001", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerWriterImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerWriterImpl.ManagerWriterImpl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ManagerWriterImpl()\n    {\n        this.actionBuilder = new ActionBuilderImpl();\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ManagerWriter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3002", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.ManagerConnectionImpl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ManagerConnectionImpl()\n    {\n        this.id = idCounter.getAndIncrement();\n        this.responseListeners = new HashMap<>();\n        this.responseEventListeners = new HashMap<>();\n        this.eventListeners = new ArrayList<>();\n        this.protocolIdentifier = new ProtocolIdentifierWrapper();\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3003", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setHostname", "methodParameterType": "String#", "methodParameterName": "hostname#", "methodBody": "public void setHostname(String hostname)\n    {\n        this.hostname = hostname;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the hostname of the asterisk server to connect to. <p/> Default is <code>localhost</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3004", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setPort", "methodParameterType": "int#", "methodParameterName": "port#", "methodBody": "public void setPort(int port)\n    {\n        if (port <= 0)\n        {\n            this.port = DEFAULT_PORT;\n        }\n        else\n        {\n            this.port = port;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the port to use to connect to the asterisk server. This is the port specified in asterisk's <code>manager.conf</code> file. <p/> Default is 5038.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3005", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setSsl", "methodParameterType": "boolean#", "methodParameterName": "ssl#", "methodBody": "public void setSsl(boolean ssl)\n    {\n        this.ssl = ssl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets whether to use SSL. <br> Default is false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3006", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username)\n    {\n        this.username = username;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the username to use to connect to the asterisk server. This is the username specified in asterisk's <code>manager.conf</code> file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3007", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setPassword", "methodParameterType": "String#", "methodParameterName": "password#", "methodBody": "public void setPassword(String password)\n    {\n        this.password = password;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the password to use to connect to the asterisk server. This is the password specified in Asterisk's <code>manager.conf</code> file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3008", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultResponseTimeout", "methodParameterType": "long#", "methodParameterName": "defaultResponseTimeout#", "methodBody": "public void setDefaultResponseTimeout(long defaultResponseTimeout)\n    {\n        this.defaultResponseTimeout = defaultResponseTimeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time in milliseconds the synchronous method {@link #sendAction(ManagerAction)} will wait for a response beforethrowing a TimeoutException. <br> Default is 2000.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3009", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setDefaultEventTimeout", "methodParameterType": "long#", "methodParameterName": "defaultEventTimeout#", "methodBody": "public void setDefaultEventTimeout(long defaultEventTimeout)\n    {\n        this.defaultEventTimeout = defaultEventTimeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the time in milliseconds the synchronous method {@link #sendEventGeneratingAction(EventGeneratingAction)} will wait for aresponse and the last response event before throwing a TimeoutException. <br> Default is 5000.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3010", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setKeepAliveAfterAuthenticationFailure", "methodParameterType": "boolean#", "methodParameterName": "keepAliveAfterAuthenticationFailure#", "methodBody": "public void setKeepAliveAfterAuthenticationFailure(boolean keepAliveAfterAuthenticationFailure)\n    {\n        this.keepAliveAfterAuthenticationFailure = keepAliveAfterAuthenticationFailure;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to <code>true</code> to try reconnecting to ther asterisk serve even if the reconnection attempt threw an AuthenticationFailedException. <br> Default is <code>true</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3011", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.doLogin", "methodParameterType": "long#String#", "methodParameterName": "timeout#eventMask#", "methodBody": "protected synchronized void doLogin(long timeout, String eventMask)\n            throws IOException, AuthenticationFailedException, TimeoutException\n    {\n        ChallengeAction challengeAction;\n        ManagerResponse challengeResponse;\n        String challenge;\n        String key;\n        LoginAction loginAction;\n        ManagerResponse loginResponse;\n\n        if (socket == null)\n        {\n            connect();\n        }\n\n        if (protocolIdentifier.getValue() == null)\n        {\n            try\n            {\n                protocolIdentifier.await(timeout);\n            }\n            catch (InterruptedException e) // NOPMD\n            {\n                Thread.currentThread().interrupt();\n            }\n        }\n\n        if (protocolIdentifier.getValue() == null)\n        {\n            disconnect();\n            if (reader != null && reader.getTerminationException() != null)\n            {\n                throw reader.getTerminationException();\n            }\n            throw new TimeoutException(\"Timeout waiting for protocol identifier\");\n        }\n\n        challengeAction = new ChallengeAction(\"MD5\");\n        try\n        {\n            challengeResponse = sendAction(challengeAction);\n        }\n        catch (Exception e)\n        {\n            disconnect();\n            throw new AuthenticationFailedException(\"Unable to send challenge action\", e);\n        }\n\n        if (challengeResponse instanceof ChallengeResponse)\n        {\n            challenge = ((ChallengeResponse) challengeResponse).getChallenge();\n        }\n        else\n        {\n            disconnect();\n            throw new AuthenticationFailedException(\n                    \"Unable to get challenge from Asterisk. ChallengeAction returned: \" + challengeResponse.getMessage());\n        }\n\n        try\n        {\n            MessageDigest md;\n\n            md = MessageDigest.getInstance(\"MD5\");\n            if (challenge != null)\n            {\n                md.update(challenge.getBytes(StandardCharsets.UTF_8));\n            }\n            if (password != null)\n            {\n                md.update(password.getBytes(StandardCharsets.UTF_8));\n            }\n            key = ManagerUtil.toHexString(md.digest());\n        }\n        catch (NoSuchAlgorithmException ex)\n        {\n            disconnect();\n            throw new AuthenticationFailedException(\"Unable to create login key using MD5 Message Digest\", ex);\n        }\n\n        loginAction = new LoginAction(username, \"MD5\", key, eventMask);\n        try\n        {\n            loginResponse = sendAction(loginAction);\n        }\n        catch (Exception e)\n        {\n            disconnect();\n            throw new AuthenticationFailedException(\"Unable to send login action\", e);\n        }\n\n        if (loginResponse instanceof ManagerError)\n        {\n            disconnect();\n            throw new AuthenticationFailedException(loginResponse.getMessage());\n        }\n\n        logger.info(\"Successfully logged in\");\n\n        version = determineVersion();\n\n        state = CONNECTED;\n\n        writer.setTargetVersion(version);\n\n        logger.info(\"Determined Asterisk version: \" + version);\n\n        // generate pseudo event indicating a successful login\n        ConnectEvent connectEvent = new ConnectEvent(this);\n        connectEvent.setProtocolIdentifier(getProtocolIdentifier());\n        connectEvent.setDateReceived(DateUtil.getDate());\n        // TODO could this cause a deadlock?\n        fireEvent(connectEvent);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Does the real login, following the steps outlined below. <br> <ol> <li>Connects to the asterisk server by calling  {@link #connect()} if notalready connected <li>Waits until the protocol identifier is received but not longer than timeout ms. <li>Sends a  {@link ChallengeAction} requesting a challenge for authTypeMD5. <li>When the  {@link ChallengeResponse} is received a {@link LoginAction}is sent using the calculated key (MD5 hash of the password appended to the received challenge). </ol>", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.connect", "org.asteriskjava.manager.internal.ProtocolIdentifierWrapper.getValue", "org.asteriskjava.manager.internal.ProtocolIdentifierWrapper.await", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt", "org.asteriskjava.manager.internal.ManagerConnectionImpl.disconnect", "org.asteriskjava.manager.internal.ManagerReader.getTerminationException", "org.asteriskjava.manager.TimeoutException.<init>", "org.asteriskjava.manager.action.ChallengeAction.<init>", "org.asteriskjava.manager.internal.ManagerConnectionImpl.sendAction", "org.asteriskjava.manager.AuthenticationFailedException.<init>", "org.asteriskjava.manager.response.ChallengeResponse.getChallenge", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.response.ManagerResponse.getMessage", "java.lang.StringBuilder.toString", "org.asteriskjava.manager.AuthenticationFailedException.<init>", "java.security.MessageDigest.getInstance", "java.lang.String.getBytes", "java.security.MessageDigest.update", "java.security.MessageDigest.digest", "org.asteriskjava.manager.internal.ManagerUtil.toHexString", "org.asteriskjava.manager.action.LoginAction.<init>", "org.asteriskjava.util.Log.info", "org.asteriskjava.manager.internal.ManagerConnectionImpl.determineVersion", "org.asteriskjava.manager.internal.ManagerWriter.setTargetVersion", "java.lang.StringBuilder.append", "org.asteriskjava.manager.event.ConnectEvent.<init>", "org.asteriskjava.manager.internal.ManagerConnectionImpl.getProtocolIdentifier", "org.asteriskjava.manager.event.ConnectEvent.setProtocolIdentifier", "org.asteriskjava.util.DateUtil.getDate", "org.asteriskjava.manager.event.ConnectEvent.setDateReceived", "org.asteriskjava.manager.internal.ManagerConnectionImpl.fireEvent"], "call_func_parameter": [[""], [""], ["long"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["org.asteriskjava.manager.action.ManagerAction"], ["java.lang.String", "java.lang.Throwable"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.nio.charset.Charset"], ["byte[]"], [""], ["byte[]"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"], [""], ["org.asteriskjava.AsteriskVersion"], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.util.Date"], ["org.asteriskjava.manager.event.ManagerEvent"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.disconnect": "Closes the socket connection."}, {"org.asteriskjava.manager.internal.ManagerReader.getTerminationException": "Returns the Exception that caused this reader to terminate if any."}, {"org.asteriskjava.manager.response.ChallengeResponse.getChallenge": "Returns the challenge to use when creating the key for log in."}, {"org.asteriskjava.manager.response.ManagerResponse.getMessage": "Returns the message received with this response. The content depends on the action that generated this response."}, {"org.asteriskjava.manager.internal.ManagerUtil.toHexString": "Converts a byte array to a hex string representing it. The hex digits are lower case."}, {"org.asteriskjava.manager.internal.ManagerWriter.setTargetVersion": "Sets the version of the target Asterisk server."}, {"org.asteriskjava.manager.event.ConnectEvent.setProtocolIdentifier": "Sets the version of the protocol."}, {"org.asteriskjava.util.DateUtil.getDate": "Returns the real current date or the date set with overrideCurrentDate()."}, {"org.asteriskjava.manager.internal.ManagerConnectionImpl.fireEvent": "Notifies all  {@link ManagerEventListener}s registered by users."}]}, {"index": "3012", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.determineVersionByCoreSettings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected AsteriskVersion determineVersionByCoreSettings() throws Exception\n    {\n\n        ManagerResponse response = sendAction(new CoreSettingsAction());\n        if (!(response instanceof CoreSettingsResponse))\n        {\n            // NOTE: you need system or reporting permissions\n            logger.info(\"Could not get core settings, do we have the necessary permissions?\");\n            return null;\n        }\n\n        String ver = ((CoreSettingsResponse) response).getAsteriskVersion();\n        return AsteriskVersion.getDetermineVersionFromString(\"Asterisk \" + ver);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get asterisk version by 'core settings' actions. This is supported from Asterisk 1.6 onwards.", "call_func_name": ["org.asteriskjava.manager.action.CoreSettingsAction.<init>", "org.asteriskjava.manager.internal.ManagerConnectionImpl.sendAction", "org.asteriskjava.util.Log.info", "org.asteriskjava.manager.response.CoreSettingsResponse.getAsteriskVersion", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.AsteriskVersion.getDetermineVersionFromString"], "call_func_parameter": [[""], ["org.asteriskjava.manager.action.ManagerAction"], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.response.CoreSettingsResponse.getAsteriskVersion": "Returns the version of the Asterisk server. For example \"1.6.0-beta9\"."}, {"org.asteriskjava.AsteriskVersion.getDetermineVersionFromString": "Determine the Asterisk version from the string returned by Asterisk. The string should contain \"Asterisk \" followed by a version number."}]}, {"index": "3013", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.determineVersionByCoreShowVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected AsteriskVersion determineVersionByCoreShowVersion() throws Exception\n    {\n        final ManagerResponse coreShowVersionResponse = sendAction(new CommandAction(CMD_SHOW_VERSION));\n\n        if (coreShowVersionResponse == null || !(coreShowVersionResponse instanceof CommandResponse))\n        {\n            // this needs 'command' permissions\n            logger.info(\"Could not get response for 'core show version'\");\n            return null;\n        }\n\n        final List<String> coreShowVersionResult = ((CommandResponse) coreShowVersionResponse).getResult();\n        if (coreShowVersionResult == null || coreShowVersionResult.isEmpty())\n        {\n            logger.warn(\"Got empty response for 'core show version'\");\n            return null;\n        }\n\n        final String coreLine = coreShowVersionResult.get(0);\n        return AsteriskVersion.getDetermineVersionFromString(coreLine);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine version by the 'core show version' command. This needs 'command' permissions.", "call_func_name": ["org.asteriskjava.manager.action.CommandAction.<init>", "org.asteriskjava.manager.internal.ManagerConnectionImpl.sendAction", "org.asteriskjava.util.Log.info", "org.asteriskjava.manager.response.CommandResponse.getResult", "java.util.List.isEmpty", "org.asteriskjava.util.Log.warn", "java.util.List.get", "org.asteriskjava.AsteriskVersion.getDetermineVersionFromString"], "call_func_parameter": [["java.lang.String"], ["org.asteriskjava.manager.action.ManagerAction"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["int"], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.response.CommandResponse.getResult": "Returns a List of strings representing the lines returned by the CLI command."}, {"org.asteriskjava.AsteriskVersion.getDetermineVersionFromString": "Determine the Asterisk version from the string returned by Asterisk. The string should contain \"Asterisk \" followed by a version number."}]}, {"index": "3014", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.disconnect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected synchronized void disconnect()\n    {\n        if (socket != null)\n        {\n            logger.info(\"Closing socket.\");\n            try\n            {\n                socket.close();\n            }\n            catch (IOException ex)\n            {\n                logger.warn(\"Unable to close socket: \" + ex.getMessage());\n            }\n            socket = null;\n        }\n        protocolIdentifier.reset();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Closes the socket connection.", "call_func_name": ["org.asteriskjava.util.Log.info", "org.asteriskjava.util.SocketConnectionFacade.close", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.io.IOException.getMessage", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.warn", "org.asteriskjava.manager.internal.ProtocolIdentifierWrapper.reset"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""]], "passed_comments": [{"org.asteriskjava.util.SocketConnectionFacade.close": "Closes the socket connection including its input and output stream and frees all associated ressources.<p> When calling close() any Thread currently blocked by a call to readLine() will be unblocked and receive an IOException."}]}, {"index": "3015", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.sendAction", "methodParameterType": "ManagerAction#long#", "methodParameterName": "action#timeout#", "methodBody": "public ManagerResponse sendAction(ManagerAction action, long timeout)\n            throws IOException, TimeoutException, IllegalArgumentException, IllegalStateException\n    {\n        ResponseHandlerResult result = new ResponseHandlerResult();\n        SendActionCallback callbackHandler = new DefaultSendActionCallback(result);\n\n        sendAction(action, callbackHandler);\n\n        // definitely return null for the response of user events\n        if (action instanceof UserEventAction)\n        {\n            return null;\n        }\n\n        // only wait if we did not yet receive the response.\n        // Responses may be returned really fast.\n        if (result.getResponse() == null)\n        {\n            try\n            {\n                result.await(timeout);\n            }\n            catch (InterruptedException ex)\n            {\n                logger.warn(\"Interrupted while waiting for result\");\n                Thread.currentThread().interrupt();\n            }\n        }\n\n        // still no response?\n        if (result.getResponse() == null)\n        {\n            throw new TimeoutException(\"Timeout waiting for response to \" + action.getAction()\n                    + (action.getActionId() == null ? \"\" : \" (actionId: \" + action.getActionId() + \")\"));\n        }\n\n        return result.getResponse();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ConditionalExpression#ParenthesizedExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)ParenthesizedExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Implements synchronous sending of \"simple\" actions.", "call_func_name": ["org.asteriskjava.manager.internal.ManagerConnectionImpl.sendAction", "org.asteriskjava.util.Log.warn", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.action.ManagerAction.getAction", "org.asteriskjava.manager.action.ManagerAction.getActionId", "java.lang.StringBuilder.toString", "org.asteriskjava.manager.TimeoutException.<init>"], "call_func_parameter": [["org.asteriskjava.manager.action.ManagerAction", "org.asteriskjava.manager.SendActionCallback"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"]], "passed_comments": [{"org.asteriskjava.manager.action.ManagerAction.getAction": "Returns the name of the action for example \"Hangup\"."}, {"org.asteriskjava.manager.action.ManagerAction.getActionId": "Returns the action id."}]}, {"index": "3016", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.createInternalActionId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String createInternalActionId()\n    {\n        final StringBuilder sb;\n\n        sb = new StringBuilder();\n        sb.append(this.hashCode());\n        sb.append(\"_\");\n        sb.append(actionIdCounter.getAndIncrement());\n\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new unique internal action id based on the hash code of this connection and a sequence.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.Object.hashCode", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.util.concurrent.atomic.AtomicLong.getAndIncrement", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String"], [""], ["long"], [""]], "passed_comments": "/"}, {"index": "3017", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.dispatchResponse", "methodParameterType": "ManagerResponse#", "methodParameterName": "response#", "methodBody": "public void dispatchResponse(ManagerResponse response)\n    {\n        final String actionId;\n        String internalActionId;\n        SendActionCallback listener;\n\n        // shouldn't happen\n        if (response == null)\n        {\n            logger.error(\"Unable to dispatch null response. This should never happen. Please file a bug.\");\n            return;\n        }\n\n        actionId = response.getActionId();\n        internalActionId = null;\n        listener = null;\n\n        if (actionId != null)\n        {\n            internalActionId = ManagerUtil.getInternalActionId(actionId);\n            response.setActionId(ManagerUtil.stripInternalActionId(actionId));\n        }\n\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Dispatching response with internalActionId '\" + internalActionId + \"':\\n\" + response);\n        }\n\n        if (internalActionId != null)\n        {\n            synchronized (this.responseListeners)\n            {\n                listener = responseListeners.get(internalActionId);\n                if (listener != null)\n                {\n                    this.responseListeners.remove(internalActionId);\n                }\n                else\n                {\n                    // when using the async sendAction it's ok not to register a\n                    // callback so if we don't find a response handler thats ok\n                    logger.debug(\"No response listener registered for \" + \"internalActionId '\" + internalActionId + \"'\");\n                }\n            }\n        }\n        else\n        {\n            logger.error(\n                    \"Unable to retrieve internalActionId from response: \" + \"actionId '\" + actionId + \"':\\n\" + response);\n        }\n\n        if (listener != null)\n        {\n            try\n            {\n                listener.onResponse(response);\n            }\n            catch (Exception e)\n            {\n                logger.warn(\"Unexpected exception in response listener \" + listener.getClass().getName(), e);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Block#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "This method is called by the reader whenever a  {@link ManagerResponse} isreceived. The response is dispatched to the associated {@link SendActionCallback}.", "call_func_name": ["org.asteriskjava.util.Log.error", "org.asteriskjava.manager.response.ManagerResponse.getActionId", "org.asteriskjava.manager.internal.ManagerUtil.getInternalActionId", "org.asteriskjava.manager.internal.ManagerUtil.stripInternalActionId", "org.asteriskjava.manager.response.ManagerResponse.setActionId", "org.asteriskjava.util.Log.isDebugEnabled", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "java.util.Map.get", "java.util.Map.remove", "org.asteriskjava.manager.SendActionCallback.onResponse", "java.lang.Object.getClass", "java.lang.Class.getName", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["org.asteriskjava.manager.response.ManagerResponse"], [""], [""], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.manager.response.ManagerResponse.getActionId": "Returns the user provided action id of the ManagerAction that caused this response. If the application did not set an action id this method returns <code>null</code>."}, {"org.asteriskjava.manager.internal.ManagerUtil.getInternalActionId": "Returns the internal action id contained in the given action id."}, {"org.asteriskjava.manager.internal.ManagerUtil.stripInternalActionId": "Strips the internal action id from the given action id."}, {"org.asteriskjava.manager.response.ManagerResponse.setActionId": "Sets the action id of the ManagerAction that caused this response."}, {"org.asteriskjava.manager.SendActionCallback.onResponse": "This method is called when a response is received."}]}, {"index": "3018", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.dispatchEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "public void dispatchEvent(ManagerEvent event)\n    {\n        // shouldn't happen\n        if (event == null)\n        {\n            logger.error(\"Unable to dispatch null event. This should never happen. Please file a bug.\");\n            return;\n        }\n        dispatchLegacyEventIfNeeded(event);\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Dispatching event:\\n\" + event.toString());\n        }\n\n        // Some events need special treatment besides forwarding them to the\n        // registered eventListeners (clients)\n        // These events are handled here at first:\n\n        // Dispatch ResponseEvents to the appropriate responseEventListener\n        if (event instanceof ResponseEvent)\n        {\n            ResponseEvent responseEvent;\n            String internalActionId;\n\n            responseEvent = (ResponseEvent) event;\n            internalActionId = responseEvent.getInternalActionId();\n            if (internalActionId != null)\n            {\n                synchronized (responseEventListeners)\n                {\n                    ManagerEventListener listener;\n\n                    listener = responseEventListeners.get(internalActionId);\n                    if (listener != null)\n                    {\n                        try\n                        {\n                            listener.onManagerEvent(event);\n                        }\n                        catch (Exception e)\n                        {\n                            logger.warn(\"Unexpected exception in response event listener \" + listener.getClass().getName(),\n                                    e);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                // ResponseEvent without internalActionId:\n                // this happens if the same event class is used as response\n                // event\n                // and as an event that is not triggered by a Manager command\n                // Example: QueueMemberStatusEvent.\n                // logger.debug(\"ResponseEvent without \"\n                // + \"internalActionId:\\n\" + responseEvent);\n            } // NOPMD\n        }\n        if (event instanceof DisconnectEvent)\n        {\n            // When we receive get disconnected while we are connected start\n            // a new reconnect thread and set the state to RECONNECTING.\n            synchronized (this)\n            {\n                if (state == CONNECTED)\n                {\n                    state = RECONNECTING;\n                    // close socket if still open and remove reference to\n                    // readerThread\n                    // After sending the DisconnectThread that thread will die\n                    // anyway.\n                    cleanup();\n                    Thread reconnectThread = new Thread(new Runnable()\n                    {\n\n                        public void run()\n                        {\n                            reconnect();\n                        }\n                    });\n                    reconnectThread.setName(\"Asterisk-Java ManagerConnection-\" + id + \"-Reconnect-\"\n                            + reconnectThreadCounter.getAndIncrement());\n                    reconnectThread.setDaemon(true);\n                    reconnectThread.start();\n                    // now the DisconnectEvent is dispatched to registered\n                    // eventListeners\n                    // (clients) and after that the ManagerReaderThread is gone.\n                    // So effectively we replaced the reader thread by a\n                    // ReconnectThread.\n                }\n                else\n                {\n                    // when we receive a DisconnectEvent while not connected we\n                    // ignore it and do not send it to clients\n                    return;\n                }\n            }\n        }\n        if (event instanceof ProtocolIdentifierReceivedEvent)\n        {\n            ProtocolIdentifierReceivedEvent protocolIdentifierReceivedEvent;\n            String protocolIdentifier;\n\n            protocolIdentifierReceivedEvent = (ProtocolIdentifierReceivedEvent) event;\n            protocolIdentifier = protocolIdentifierReceivedEvent.getProtocolIdentifier();\n            setProtocolIdentifier(protocolIdentifier);\n            // no need to send this event to clients\n            return;\n        }\n\n        fireEvent(event);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#SynchronizedStatement#Block#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ThisExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ReturnStatement#Block#IfStatement#Block#SynchronizedStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)SynchronizedStatement)Block(Block)Block)IfStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(SynchronizedStatement(ThisExpression)ThisExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ReturnStatement)ReturnStatement)Block)IfStatement)Block)SynchronizedStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This method is called by the reader whenever a ManagerEvent is received. The event is dispatched to all registered ManagerEventHandlers.", "call_func_name": ["org.asteriskjava.util.Log.error", "org.asteriskjava.manager.internal.ManagerConnectionImpl.dispatchLegacyEventIfNeeded", "org.asteriskjava.util.Log.isDebugEnabled", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.event.ManagerEvent.toString", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.debug", "org.asteriskjava.manager.event.ResponseEvent.getInternalActionId", "java.util.Map.get", "org.asteriskjava.manager.ManagerEventListener.onManagerEvent", "java.lang.Object.getClass", "java.lang.Class.getName", "org.asteriskjava.util.Log.warn", "org.asteriskjava.manager.internal.ManagerConnectionImpl.cleanup", "java.lang.Thread.<init>", "java.lang.StringBuilder.append", "java.util.concurrent.atomic.AtomicLong.getAndIncrement", "java.lang.Thread.setName", "java.lang.Thread.setDaemon", "java.lang.Thread.start", "org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.getProtocolIdentifier", "org.asteriskjava.manager.internal.ManagerConnectionImpl.setProtocolIdentifier", "org.asteriskjava.manager.internal.ManagerConnectionImpl.fireEvent"], "call_func_parameter": [["java.lang.Object"], ["org.asteriskjava.manager.event.ManagerEvent"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["org.asteriskjava.manager.event.ManagerEvent"], [""], [""], ["java.lang.Object", "java.lang.Throwable"], [""], ["java.lang.Runnable"], ["long"], [""], ["java.lang.String"], ["boolean"], [""], [""], ["java.lang.String"], ["org.asteriskjava.manager.event.ManagerEvent"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.dispatchLegacyEventIfNeeded": "Enro 2015-03 Workaround to continue having Legacy Events from Asterisk 13."}, {"org.asteriskjava.manager.event.ResponseEvent.getInternalActionId": "Returns the internal action id of the ManagerAction that caused this event.<p> Warning: This method is internal to Asterisk-Java and should never be used in application code."}, {"org.asteriskjava.manager.ManagerEventListener.onManagerEvent": "This method is called when an event is received."}, {"org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.getProtocolIdentifier": "Returns the version of the protocol."}, {"org.asteriskjava.manager.internal.ManagerConnectionImpl.setProtocolIdentifier": "This method is called when a  {@link ProtocolIdentifierReceivedEvent} isreceived from the reader. Having received a correct protocol identifier is the precondition for logging in."}, {"org.asteriskjava.manager.internal.ManagerConnectionImpl.fireEvent": "Notifies all  {@link ManagerEventListener}s registered by users."}]}, {"index": "3019", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.dispatchLegacyEventIfNeeded", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "private void dispatchLegacyEventIfNeeded(ManagerEvent event)\n    {\n        if (event instanceof DialBeginEvent)\n        {\n            DialEvent legacyEvent = new DialEvent((DialBeginEvent) event);\n            dispatchEvent(legacyEvent);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#CastExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Enro 2015-03 Workaround to continue having Legacy Events from Asterisk 13.", "call_func_name": ["org.asteriskjava.manager.event.DialEvent.<init>", "org.asteriskjava.manager.internal.ManagerConnectionImpl.dispatchEvent"], "call_func_parameter": [["org.asteriskjava.manager.event.DialBeginEvent"], ["org.asteriskjava.manager.event.ManagerEvent"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.dispatchEvent": "This method is called by the reader whenever a ManagerEvent is received. The event is dispatched to all registered ManagerEventHandlers."}]}, {"index": "3020", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.fireEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "private void fireEvent(ManagerEvent event)\n    {\n        synchronized (eventListeners)\n        {\n            for (ManagerEventListener listener : eventListeners)\n            {\n                try\n                {\n                    listener.onManagerEvent(event);\n                }\n                catch (RuntimeException e)\n                {\n                    logger.warn(\"Unexpected exception in eventHandler \" + listener.getClass().getName(), e);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SynchronizedStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Notifies all  {@link ManagerEventListener}s registered by users.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.manager.ManagerEventListener.onManagerEvent", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [[""], [""], [""], ["org.asteriskjava.manager.event.ManagerEvent"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.Object", "java.lang.Throwable"]], "passed_comments": [{"org.asteriskjava.manager.ManagerEventListener.onManagerEvent": "This method is called when an event is received."}]}, {"index": "3021", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.setProtocolIdentifier", "methodParameterType": "String#", "methodParameterName": "identifier#", "methodBody": "private void setProtocolIdentifier(final String identifier)\n    {\n        logger.info(\"Connected via \" + identifier);\n\n        if (identifier == null || !isSupportedProtocolIdentifier(identifier))\n        {\n            logger.warn(\"Unsupported protocol version '\" + identifier + \"'. Use at your own risk.\");\n        }\n\n        protocolIdentifier.setValue(identifier);\n        protocolIdentifier.countDown();\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This method is called when a  {@link ProtocolIdentifierReceivedEvent} isreceived from the reader. Having received a correct protocol identifier is the precondition for logging in.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info", "org.asteriskjava.manager.internal.ManagerConnectionImpl.isSupportedProtocolIdentifier", "org.asteriskjava.util.Log.warn", "org.asteriskjava.manager.internal.ProtocolIdentifierWrapper.setValue", "org.asteriskjava.manager.internal.ProtocolIdentifierWrapper.countDown"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "3022", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerConnectionImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerConnectionImpl.reconnect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void reconnect()\n    {\n        int numTries;\n\n        // try to reconnect\n        numTries = 0;\n        while (true)\n        {\n            try\n            {\n                if (numTries < 10)\n                {\n                    // try to reconnect quite fast for the firt 10 times\n                    // this succeeds if the server has just been restarted\n                    Thread.sleep(RECONNECTION_INTERVAL_1);\n                }\n                else\n                {\n                    // slow down after 10 unsuccessful attempts asuming a\n                    // shutdown of the server\n                    Thread.sleep(RECONNECTION_INTERVAL_2);\n                }\n            }\n            catch (InterruptedException e)\n            {\n                Thread.currentThread().interrupt();\n            }\n\n            try\n            {\n                synchronized (this)\n                {\n                    if (state != RECONNECTING)\n                    {\n                        break;\n                    }\n                    connect();\n\n                    try\n                    {\n                        doLogin(defaultResponseTimeout, eventMask);\n                        logger.info(\"Successfully reconnected.\");\n                        // everything is ok again, so we leave\n                        // when successful doLogin set the state to CONNECTED so\n                        // no\n                        // need to adjust it\n                        break;\n                    }\n                    catch (AuthenticationFailedException e1)\n                    {\n                        if (keepAliveAfterAuthenticationFailure)\n                        {\n                            logger.error(\"Unable to log in after reconnect: \" + e1.getMessage());\n                        }\n                        else\n                        {\n                            logger.error(\"Unable to log in after reconnect: \" + e1.getMessage() + \". Giving up.\");\n                            state = DISCONNECTED;\n                        }\n                    }\n                    catch (TimeoutException e1)\n                    {\n                        // shouldn't happen - but happens!\n                        logger.error(\"TimeoutException while trying to log in \" + \"after reconnect.\");\n                    }\n                }\n            }\n            catch (IOException e)\n            {\n                // server seems to be still down, just continue to attempt\n                // reconnection\n                String message = e.getClass().getSimpleName();\n                if (e.getMessage() != null)\n                {\n                    message = e.getMessage();\n                }\n\n                logger.warn(\"Exception while trying to reconnect: \" + message);\n            }\n            numTries++;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#BooleanLiteral#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#ThisExpression#SimpleName#SimpleName#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SynchronizedStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(TryStatement(Block(SynchronizedStatement(ThisExpression)ThisExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)SynchronizedStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Reconnects to the asterisk server when the connection is lost. <br> While keepAlive is <code>true</code> we will try to reconnect. Reconnection attempts will be stopped when the  {@link #logoff()} methodis called or when the login after a successful reconnect results in an {@link AuthenticationFailedException} suggesting that the managercredentials have changed and keepAliveAfterAuthenticationFailure is not set. <br> This method is called when a  {@link DisconnectEvent} is received from thereader.", "call_func_name": ["java.lang.Thread.sleep", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt", "org.asteriskjava.manager.internal.ManagerConnectionImpl.connect", "org.asteriskjava.manager.internal.ManagerConnectionImpl.doLogin", "org.asteriskjava.util.Log.info", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.asteriskjava.manager.AuthenticationFailedException.getMessage", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "java.io.IOException.getMessage", "org.asteriskjava.util.Log.warn"], "call_func_parameter": [["long"], [""], [""], [""], ["long", "java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.manager.internal.ManagerConnectionImpl.doLogin": "Does the real login, following the steps outlined below. <br> <ol> <li>Connects to the asterisk server by calling  {@link #connect()} if notalready connected <li>Waits until the protocol identifier is received but not longer than timeout ms. <li>Sends a  {@link ChallengeAction} requesting a challenge for authTypeMD5. <li>When the  {@link ChallengeResponse} is received a {@link LoginAction}is sent using the calculated key (MD5 hash of the password appended to the received challenge). </ol>"}]}, {"index": "3023", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ActionBuilderImpl.java", "methodName": "org.asteriskjava.manager.internal.ActionBuilderImpl.ActionBuilderImpl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ActionBuilderImpl()\n    {\n        this.targetVersion = AsteriskVersion.ASTERISK_1_0;\n        \n        /*\n         * When using the Reflection API to get all of the getters for building\n         * actions to send, we ignore some of the getters\n         */\n        this.membersToIgnore.add(\"class\");\n        this.membersToIgnore.add(\"action\");\n        this.membersToIgnore.add(\"actionid\");\n        this.membersToIgnore.add(ATTRIBUTES_PROPERTY_NAME);\n    }", "AST": "Javadoc#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ActionBuilder for Asterisk 1.0.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3024", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ActionBuilderImpl.java", "methodName": "org.asteriskjava.manager.internal.ActionBuilderImpl.lcFirst", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "private static String lcFirst(String s)\n    {\n        if (s == null || s.isEmpty())\n        {\n            return s;\n        }\n\n        return Character.toLowerCase(s.charAt(0))\n                + (s.length() == 1 ? \"\" : s.substring(1));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ConditionalExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ConditionalExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts the first character to lower case.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.StringBuilder.<init>", "java.lang.String.charAt", "java.lang.Character.toLowerCase", "java.lang.StringBuilder.append", "java.lang.String.length", "java.lang.String.substring", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["int"], ["char"], ["char"], [""], ["int"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "3025", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerUtil.java", "methodName": "org.asteriskjava.manager.internal.ManagerUtil.toHexString", "methodParameterType": "byte[]#", "methodParameterName": "b#", "methodBody": "public static String toHexString(byte[] b)\n    {\n        final StringBuilder sb;\n\n        sb = new StringBuilder(b.length * 2);\n        for (byte aB : b)\n        {\n            sb.append(hexChar[(aB & 0xf0) >>> 4]);\n            sb.append(hexChar[aB & 0x0f]);\n        }\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ClassInstanceCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ClassInstanceCreation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a byte array to a hex string representing it. The hex digits are lower case.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["int"], ["char"], [""]], "passed_comments": "/"}, {"index": "3026", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerUtil.java", "methodName": "org.asteriskjava.manager.internal.ManagerUtil.getInternalActionId", "methodParameterType": "String#", "methodParameterName": "actionId#", "methodBody": "public static String getInternalActionId(String actionId)\n    {\n        final int delimiterIndex;\n\n        if (actionId == null)\n        {\n            return null;\n        }\n\n        delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n        if (delimiterIndex > 0)\n        {\n            return actionId.substring(0, delimiterIndex);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the internal action id contained in the given action id.", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.substring"], "call_func_parameter": [["int"], ["int", "int"]], "passed_comments": "/"}, {"index": "3027", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerUtil.java", "methodName": "org.asteriskjava.manager.internal.ManagerUtil.stripInternalActionId", "methodParameterType": "String#", "methodParameterName": "actionId#", "methodBody": "public static String stripInternalActionId(String actionId)\n    {\n        int delimiterIndex;\n\n        delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n        if (delimiterIndex > 0)\n        {\n            if (actionId.length() > delimiterIndex + 1)\n            {\n                return actionId.substring(delimiterIndex + 1);\n            }\n            return null;\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Strips the internal action id from the given action id.", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [["int"], [""], ["int"]], "passed_comments": "/"}, {"index": "3028", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerUtil.java", "methodName": "org.asteriskjava.manager.internal.ManagerUtil.addInternalActionId", "methodParameterType": "String#String#", "methodParameterName": "actionId#internalActionId#", "methodBody": "public static String addInternalActionId(String actionId, String internalActionId)\n    {\n        if (actionId == null)\n        {\n            return internalActionId + INTERNAL_ACTION_ID_DELIMITER;\n        }\n        return internalActionId + INTERNAL_ACTION_ID_DELIMITER + actionId;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds the internal action id to the given action id.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["char"], [""]], "passed_comments": "/"}, {"index": "3029", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/Dispatcher.java", "methodName": "org.asteriskjava.manager.internal.Dispatcher.dispatchResponse", "methodParameterType": "ManagerResponse#", "methodParameterName": "response#", "methodBody": "void dispatchResponse(ManagerResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method is called by the reader whenever a  {@link ManagerResponse} isreceived. The response is dispatched to the associated {@link org.asteriskjava.manager.SendActionCallback}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3030", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/Dispatcher.java", "methodName": "org.asteriskjava.manager.internal.Dispatcher.dispatchEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "void dispatchEvent(ManagerEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method is called by the reader whenever a ManagerEvent is received. The event is dispatched to all registered ManagerEventHandlers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3031", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java", "methodName": "org.asteriskjava.manager.internal.EventBuilderImpl.registerBuiltinEventClasses", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void registerBuiltinEventClasses()\n    {\n        for (Class< ? extends ManagerEvent> managerEventClass : knownManagerEventClasses)\n        {\n            registerEventClass(managerEventClass);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "register the known ManagerEventClasses for this builder", "call_func_name": ["java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.asteriskjava.manager.internal.EventBuilderImpl.registerEventClass"], "call_func_parameter": [[""], [""], [""], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "3032", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java", "methodName": "org.asteriskjava.manager.internal.EventBuilderImpl.registerEventClass", "methodParameterType": "String#Class<? extends ManagerEvent>#", "methodParameterName": "eventType#clazz#", "methodBody": "public final void registerEventClass(String eventType, Class< ? extends ManagerEvent> clazz)\n            throws IllegalArgumentException\n    {\n        Constructor< ? > defaultConstructor;\n\n        if (!ManagerEvent.class.isAssignableFrom(clazz))\n        {\n            throw new IllegalArgumentException(clazz + \" is not a ManagerEvent\");\n        }\n\n        if ((clazz.getModifiers() & Modifier.ABSTRACT) != 0)\n        {\n            throw new IllegalArgumentException(clazz + \" is abstract\");\n        }\n\n        try\n        {\n            defaultConstructor = clazz.getConstructor(Object.class);\n        }\n        catch (NoSuchMethodException ex)\n        {\n            throw new IllegalArgumentException(clazz + \" has no usable constructor\");\n        }\n\n        if ((defaultConstructor.getModifiers() & Modifier.PUBLIC) == 0)\n        {\n            throw new IllegalArgumentException(clazz + \" has no public default constructor\");\n        }\n\n        registeredEventClasses.put(eventType.toLowerCase(Locale.US), clazz);\n\n        logger.debug(\"Registered event type '\" + eventType + \"' (\" + clazz + \")\");\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers a new event class for the event given by eventType.", "call_func_name": ["java.lang.Class.isAssignableFrom", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.lang.Class.getModifiers", "java.lang.Class.getConstructor", "java.lang.reflect.Constructor.getModifiers", "java.lang.String.toLowerCase", "java.util.Map.put", "org.asteriskjava.util.Log.debug"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Class[]"], [""], ["java.util.Locale"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "3033", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReaderImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerReaderImpl.ManagerReaderImpl", "methodParameterType": "Dispatcher#Object#", "methodParameterName": "dispatcher#source#", "methodBody": "public ManagerReaderImpl(final Dispatcher dispatcher, Object source)\n    {\n        this.dispatcher = dispatcher;\n        this.source = source;\n\n        this.eventBuilder = new EventBuilderImpl();\n        this.responseBuilder = new ResponseBuilderImpl();\n        this.expectedResponseClasses = new ConcurrentHashMap<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ManagerReaderImpl.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3034", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReaderImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerReaderImpl.setSocket", "methodParameterType": "SocketConnectionFacade#", "methodParameterName": "socket#", "methodBody": "public void setSocket(final SocketConnectionFacade socket)\n    {\n        this.socket = socket;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the socket to use for reading from the asterisk server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3035", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ManagerReaderImpl.java", "methodName": "org.asteriskjava.manager.internal.ManagerReaderImpl.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void run()\n    {\n        final Map<String, Object> buffer = new HashMap<>();\n        String line;\n\n        if (socket == null)\n        {\n            throw new IllegalStateException(\"Unable to run: socket is null.\");\n        }\n\n        this.die = false;\n        this.dead = false;\n\n        try\n        {\n            // main loop\n            while (!this.die && (line = socket.readLine()) != null)\n            {\n                // maybe we will find a better way to identify the protocol\n                // identifier but for now\n                // this works quite well.\n                if (line.startsWith(\"Asterisk Call Manager/\") || line.startsWith(\"Asterisk Call Manager Proxy/\")\n                        || line.startsWith(\"Asterisk Manager Proxy/\") || line.startsWith(\"OpenPBX Call Manager/\")\n                        || line.startsWith(\"CallWeaver Call Manager/\"))\n                {\n                    ProtocolIdentifierReceivedEvent protocolIdentifierReceivedEvent;\n                    protocolIdentifierReceivedEvent = new ProtocolIdentifierReceivedEvent(source);\n                    protocolIdentifierReceivedEvent.setProtocolIdentifier(line);\n                    protocolIdentifierReceivedEvent.setDateReceived(DateUtil.getDate());\n                    dispatcher.dispatchEvent(protocolIdentifierReceivedEvent);\n                    continue;\n                }\n\n                /*\n                 * Special handling for \"Response: Follows\" (CommandResponse) As\n                 * we are using \"\\r\\n\" as the delimiter for line this also\n                 * handles multiline results as long as they only contain \"\\n\".\n                 */\n                if (\"Follows\".equals(buffer.get(\"response\")) && line.endsWith(\"--END COMMAND--\"))\n                {\n                    buffer.put(COMMAND_RESULT_RESPONSE_KEY, line);\n                    continue;\n                }\n\n                if (line.length() > 0)\n                {\n                    // begin of workaround for Astersik bug 13319\n                    // see AJ-77\n                    // Use this workaround only when line starts from \"From \"\n                    // and \"To \"\n                    int isFromAtStart = line.indexOf(\"From \");\n                    int isToAtStart = line.indexOf(\"To \");\n\n                    int delimiterIndex = isFromAtStart == 0 || isToAtStart == 0\n                        ? line.indexOf(\" \") : line.indexOf(\":\");\n                    // end of workaround for Astersik bug 13319\n\n                    int delimiterLength = 1;\n\n                    if (delimiterIndex > 0 && line.length() > delimiterIndex + delimiterLength)\n                    {\n                        String name = line.substring(0, delimiterIndex).toLowerCase(Locale.ENGLISH).trim();\n                        String value = line.substring(delimiterIndex + delimiterLength).trim();\n\n                        addToBuffer(buffer, name, value);\n                        // TODO tracing\n                        // logger.debug(\"Got name [\" + name + \"], value: [\" +\n                        // value + \"]\");\n                    }\n                }\n\n                // an empty line indicates a normal response's or event's end so\n                // we build\n                // the corresponding value object and dispatch it through the\n                // ManagerConnection.\n                if (line.length() == 0)\n                {\n                    if (buffer.containsKey(\"event\"))\n                    {\n                        // TODO tracing\n                        // logger.debug(\"attempting to build event: \" +\n                        // buffer.get(\"event\"));\n                        ManagerEvent event = buildEvent(source, buffer);\n                        if (event != null)\n                        {\n                            dispatcher.dispatchEvent(event);\n\n                            // Backwards compatibility for bridge events.\n                            // Asterisk 13 uses BridgeCreate,\n                            // BridgeEnter, BridgeLeave and BridgeDestroy\n                            // events.\n                            // So here we track active bridges and simulate\n                            // BridgeEvent's for them allowing legacy code to\n                            // still work with BridgeEvent's\n                            ManagerEvent secondaryEvent = compatibility.handleEvent(event);\n                            if (secondaryEvent != null)\n                            {\n                                dispatcher.dispatchEvent(secondaryEvent);\n                            }\n                        }\n                        else\n                        {\n                            logger.debug(\"buildEvent returned null\");\n                        }\n                    }\n                    else if (buffer.containsKey(\"response\"))\n                    {\n                        ManagerResponse response = buildResponse(buffer);\n                        // TODO tracing\n                        // logger.debug(\"attempting to build response\");\n                        if (response != null)\n                        {\n                            dispatcher.dispatchResponse(response);\n                        }\n                    }\n                    else\n                    {\n                        if (!buffer.isEmpty())\n                        {\n                            logger.debug(\"Buffer contains neither response nor event\");\n                        }\n                    }\n\n                    buffer.clear();\n                }\n            }\n            this.dead = true;\n            logger.debug(\"Reached end of stream, terminating reader.\");\n        }\n        catch (IOException e)\n        {\n            this.terminationException = e;\n            this.dead = true;\n            logger.info(\"Terminating reader thread: \" + e.getMessage());\n        }\n        finally\n        {\n            this.dead = true;\n            // cleans resources and reconnects if needed\n            DisconnectEvent disconnectEvent = new DisconnectEvent(source);\n            disconnectEvent.setDateReceived(DateUtil.getDate());\n            dispatcher.dispatchEvent(disconnectEvent);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(TryStatement(Block(WhileStatement(InfixExpression(PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PrefixExpression(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Reads line by line from the asterisk server, sets the protocol identifier (using a generated {@link org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent}) as soon as it is received and dispatches the received events and responses via the associated dispatcher.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.IllegalStateException.<init>", "org.asteriskjava.util.SocketConnectionFacade.readLine", "java.lang.String.startsWith", "org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.<init>", "org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.setProtocolIdentifier", "org.asteriskjava.util.DateUtil.getDate", "org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.setDateReceived", "org.asteriskjava.manager.internal.Dispatcher.dispatchEvent", "java.util.Map.get", "java.lang.String.equals", "java.lang.String.endsWith", "java.util.Map.put", "java.lang.String.length", "java.lang.String.indexOf", "java.lang.String.substring", "java.lang.String.toLowerCase", "java.lang.String.trim", "java.lang.String.substring", "org.asteriskjava.manager.internal.ManagerReaderImpl.addToBuffer", "java.util.Map.containsKey", "org.asteriskjava.manager.internal.ManagerReaderImpl.buildEvent", "org.asteriskjava.manager.internal.backwardsCompatibility.BackwardsCompatibilityForManagerEvents.handleEvent", "org.asteriskjava.util.Log.debug", "org.asteriskjava.manager.internal.ManagerReaderImpl.buildResponse", "org.asteriskjava.manager.internal.Dispatcher.dispatchResponse", "java.util.Map.isEmpty", "java.util.Map.clear", "org.asteriskjava.manager.event.DisconnectEvent.<init>", "org.asteriskjava.manager.event.DisconnectEvent.setDateReceived", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.io.IOException.getMessage", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.info"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.util.Date"], ["org.asteriskjava.manager.event.ManagerEvent"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], ["int", "int"], ["java.util.Locale"], [""], ["int"], ["java.util.Map", "java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.Object", "java.util.Map"], ["org.asteriskjava.manager.event.ManagerEvent"], ["java.lang.Object"], ["java.util.Map"], ["org.asteriskjava.manager.response.ManagerResponse"], [""], [""], ["java.lang.Object"], ["java.util.Date"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"]], "passed_comments": [{"org.asteriskjava.util.SocketConnectionFacade.readLine": "Reads a line of text from the socket connection. The current thread is blocked until either the next line is received or an IOException encounters.<p> Depending on the implementation different newline delimiters are used (\"\\r\\n\" for the Manager API and \"\\n\" for AGI)."}, {"org.asteriskjava.manager.event.ProtocolIdentifierReceivedEvent.setProtocolIdentifier": "Sets the version of the protocol."}, {"org.asteriskjava.util.DateUtil.getDate": "Returns the real current date or the date set with overrideCurrentDate()."}, {"org.asteriskjava.manager.internal.Dispatcher.dispatchEvent": "This method is called by the reader whenever a ManagerEvent is received. The event is dispatched to all registered ManagerEventHandlers."}, {"org.asteriskjava.manager.internal.Dispatcher.dispatchResponse": "This method is called by the reader whenever a  {@link ManagerResponse} isreceived. The response is dispatched to the associated {@link org.asteriskjava.manager.SendActionCallback}."}]}, {"index": "3036", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/internal/ResponseBuilder.java", "methodName": "org.asteriskjava.manager.internal.ResponseBuilder.buildResponse", "methodParameterType": "Class<? extends ManagerResponse>#Map<String,Object>#", "methodParameterName": "responseClass#attributes#", "methodBody": "ManagerResponse buildResponse(Class<? extends ManagerResponse> responseClass, Map<String, Object> attributes);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Constructs an instance of ManagerResponse based on a map of attributes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3037", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ResponseEvents.java", "methodName": "org.asteriskjava.manager.ResponseEvents.getResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ManagerResponse getResponse();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the response received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3038", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/ResponseEvents.java", "methodName": "org.asteriskjava.manager.ResponseEvents.getEvents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<ResponseEvent> getEvents();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a Collection of ManagerEvents that have been received including the last one that indicates completion.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3039", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/SendActionCallback.java", "methodName": "org.asteriskjava.manager.SendActionCallback.onResponse", "methodParameterType": "ManagerResponse#", "methodParameterName": "response#", "methodBody": "void onResponse(ManagerResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method is called when a response is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3040", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/AbstractManagerEventListener.java", "methodName": "org.asteriskjava.manager.AbstractManagerEventListener.onManagerEvent", "methodParameterType": "ManagerEvent#", "methodParameterName": "event#", "methodBody": "@Override\n    public void onManagerEvent(ManagerEvent event)\n    {\n\n        // if this turns out to be slow, we could consider caching the reflection lookup\n\n        try\n        {\n\n            Method method = this.getClass().getDeclaredMethod(\"handleEvent\", new Class[]{event.getClass()});\n            if (method != null)\n            {\n                method.invoke(this, event);\n                return;\n            }\n        }\n        catch (Exception e)\n        {\n            logger.error(e, e);\n        }\n\n        logger.error(\"The event \" + event.getClass()\n                + \" couldn't be mapped to a method in AbstractManagerEventListener.java, someone should add it!\");\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Dispatches to the appropriate handleEvent(...) method.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getDeclaredMethod", "java.lang.reflect.Method.invoke", "org.asteriskjava.util.Log.error", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.asteriskjava.util.Log.error"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"], ["java.lang.Object", "java.lang.Throwable"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "3041", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/AuthenticationFailedException.java", "methodName": "org.asteriskjava.manager.AuthenticationFailedException.AuthenticationFailedException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public AuthenticationFailedException(final String message)\n    {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AuthenticationFailedException with the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3042", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/AuthenticationFailedException.java", "methodName": "org.asteriskjava.manager.AuthenticationFailedException.AuthenticationFailedException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public AuthenticationFailedException(final String message, final Throwable cause)\n    {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new AuthenticationFailedException with the given message and cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3043", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/EventTimeoutException.java", "methodName": "org.asteriskjava.manager.EventTimeoutException.EventTimeoutException", "methodParameterType": "String#ResponseEvents#", "methodParameterName": "message#partialResult#", "methodBody": "public EventTimeoutException(String message, ResponseEvents partialResult)\n    {\n        super(message);\n        this.partialResult = partialResult;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new EventTimeoutException with the given message and partial result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3044", "file": "/root/repos/repos25/asterisk-java/src/main/java/org/asteriskjava/manager/EventTimeoutException.java", "methodName": "org.asteriskjava.manager.EventTimeoutException.getPartialResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResponseEvents getPartialResult()\n    {\n        return partialResult;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the partial result that has been received before the timeout occured.<p> Note: Using the partial result in your application should be avoided wherever possible. This is only a hack to handle those versions of Asterisk that don't follow the Manager API conventions, for example by not sending the correct ActionCompleteEvent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]