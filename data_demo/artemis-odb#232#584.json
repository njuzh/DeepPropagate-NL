[{"index": "0", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Method.java", "methodName": "com.artemis.gwtref.client.Method.getEnclosingType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getEnclosingType () {\n\t\treturn enclosingType;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the {@link Class} of the enclosing type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Method.java", "methodName": "com.artemis.gwtref.client.Method.getReturnType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getReturnType () {\n\t\treturn returnType;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the {@link Class} of the return type or null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Method.java", "methodName": "com.artemis.gwtref.client.Method.getParameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Parameter[] getParameters () {\n\t\treturn parameters;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the list of parameters, can be a zero size array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Method.java", "methodName": "com.artemis.gwtref.client.Method.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName () {\n\t\treturn name;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name of the method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Method.java", "methodName": "com.artemis.gwtref.client.Method.invoke", "methodParameterType": "Object#Object#", "methodParameterName": "obj#params#", "methodBody": "public Object invoke (Object obj, Object... params) {\n\t\tif (parameters.length != (params != null ? params.length : 0)) throw new IllegalArgumentException(\"Parameter mismatch\");\n\n\t\treturn ReflectionCache.instance.invoke(this, obj, params);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invokes the method on the given object. Ignores the object if this is a static method. Throws an IllegalArgumentException if the parameters do not match.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Constructor.java", "methodName": "com.artemis.gwtref.client.Constructor.newInstance", "methodParameterType": "Object#", "methodParameterName": "params#", "methodBody": "public Object newInstance (Object... params) {\n\t\treturn super.invoke(null, params);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a new instance of the enclosing type of this constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.newInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object newInstance () throws NoSuchMethodException {\n\t\treturn getConstructor().newInstance();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a new instance of this type created via the default constructor which must be public.", "call_func_name": ["com.artemis.gwtref.client.Type.getConstructor", "com.artemis.gwtref.client.Constructor.newInstance"], "call_func_parameter": [["java.lang.Class[]"], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName () {\n\t\treturn name;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the fully qualified name of this type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getClassOfType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getClassOfType () {\n\t\treturn clazz;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the {@link Class} of this type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getSuperclass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Type getSuperclass () {\n\t\ttry {\n\t\t\treturn superClass == null ? null : ReflectionCache.forName(superClass.getName());\n\t\t} catch (ClassNotFoundException e) {\n\t\t\treturn null;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@return the super class of this type or null", "call_func_name": ["java.lang.Class.getName", "com.artemis.gwtref.client.ReflectionCache.forName"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.isAssignableFrom", "methodParameterType": "Type#", "methodParameterName": "otherType#", "methodBody": "public boolean isAssignableFrom (Type otherType) {\n\t\treturn otherType.assignables.contains(getClassOfType());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param otherType the other type", "call_func_name": ["com.artemis.gwtref.client.Type.getClassOfType", "java.util.Set.contains"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getClassOfType": "@return the {@link Class} of this type."}]}, {"index": "11", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getField", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public Field getField (String name) {\n\t\tType t = this;\n\t\twhile (t != null) {\n\t\t\tField[] declFields = t.getDeclaredFields();\n\t\t\tif (declFields != null) {\n\t\t\t\tfor (Field f : declFields) {\n\t\t\t\t\tif (f.isPublic && f.name.equals(name)) return f;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = t.getSuperclass();\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ThisExpression)ThisExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param name the name of the field", "call_func_name": ["com.artemis.gwtref.client.Type.getDeclaredFields", "java.lang.String.equals", "com.artemis.gwtref.client.Type.getSuperclass"], "call_func_parameter": [[""], ["java.lang.Object"], [""]], "passed_comments": [{"com.artemis.gwtref.client.Type.getDeclaredFields": "@return an array containing all the fields of this class, including private and protected fields. See{@link Class#getDeclaredFields()}."}, {"com.artemis.gwtref.client.Type.getSuperclass": "@return the super class of this type or null"}]}, {"index": "12", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getFields", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Field[] getFields () {\n\t\tArrayList<Field> allFields = new ArrayList<Field>();\n\t\tType t = this;\n\t\twhile (t != null) {\n\t\t\tField[] declFields = t.getDeclaredFields();\n\t\t\tif (declFields != null) {\n\t\t\t\tfor (Field f : declFields) {\n\t\t\t\t\tif (f.isPublic) allFields.add(f);\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = t.getSuperclass();\n\t\t}\n\t\treturn allFields.toArray(new Field[allFields.size()]);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ThisExpression)ThisExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return an array containing all the public fields of this class and its super classes. See {@link Class#getFields()}.", "call_func_name": ["java.util.ArrayList.<init>", "com.artemis.gwtref.client.Type.getDeclaredFields", "java.util.ArrayList.add", "com.artemis.gwtref.client.Type.getSuperclass", "java.util.ArrayList.size", "java.util.ArrayList.toArray"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object[]"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getDeclaredFields": "@return an array containing all the fields of this class, including private and protected fields. See{@link Class#getDeclaredFields()}."}, {"com.artemis.gwtref.client.Type.getSuperclass": "@return the super class of this type or null"}]}, {"index": "13", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getDeclaredFields", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Field[] getDeclaredFields () {\n\t\treturn fields;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return an array containing all the fields of this class, including private and protected fields. See{@link Class#getDeclaredFields()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getMethod", "methodParameterType": "String#Class#", "methodParameterName": "name#parameterTypes#", "methodBody": "public Method getMethod (String name, Class... parameterTypes) throws NoSuchMethodException {\n\t\tType t = this;\n\t\twhile (t != null) {\n\t\t\tMethod[] declMethods = t.getDeclaredMethods();\n\t\t\tif (declMethods != null) {\n\t\t\t\tfor (Method m : declMethods) {\n\t\t\t\t\tif (m.isPublic() && m.match(name, parameterTypes)) return m;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = t.getSuperclass();\n\t\t}\n\t\tthrow new NoSuchMethodException();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ThisExpression)ThisExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "@param name the name of the method", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getMethods", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Method[] getMethods () {\n\t\tArrayList<Method> allMethods = new ArrayList<Method>();\n\t\tType t = this;\n\t\twhile (t != null) {\n\t\t\tMethod[] declMethods = t.getDeclaredMethods();\n\t\t\tif (declMethods != null) {\n\t\t\t\tfor (Method m : declMethods) {\n\t\t\t\t\tif (m.isPublic()) allMethods.add(m);\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = t.getSuperclass();\n\t\t}\n\t\treturn allMethods.toArray(new Method[allMethods.size()]);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ThisExpression)ThisExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "s", "call_func_name": ["java.util.ArrayList.<init>", "com.artemis.gwtref.client.Type.getDeclaredMethods", "com.artemis.gwtref.client.Method.isPublic", "java.util.ArrayList.add", "com.artemis.gwtref.client.Type.getSuperclass", "java.util.ArrayList.size", "java.util.ArrayList.toArray"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object[]"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getDeclaredMethods": "@return an array containing all methods of this class, including abstract, private and protected methods. See{@link Class#getDeclaredMethods()}."}, {"com.artemis.gwtref.client.Type.getSuperclass": "@return the super class of this type or null"}]}, {"index": "16", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getDeclaredMethods", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Method[] getDeclaredMethods () {\n\t\treturn methods;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return an array containing all methods of this class, including abstract, private and protected methods. See{@link Class#getDeclaredMethods()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getComponentType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getComponentType () {\n\t\treturn componentType;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the class of the components if this is an array type or null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getArrayLength", "methodParameterType": "Object#", "methodParameterName": "obj#", "methodBody": "public int getArrayLength (Object obj) {\n\t\treturn ReflectionCache.instance.getArrayLength(this, obj);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param obj an array object of this type.", "call_func_name": ["com.artemis.gwtref.client.IReflectionCache.getArrayLength"], "call_func_parameter": [["com.artemis.gwtref.client.Type", "java.lang.Object"]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getArrayElement", "methodParameterType": "Object#int#", "methodParameterName": "obj#i#", "methodBody": "public Object getArrayElement (Object obj, int i) {\n\t\treturn ReflectionCache.instance.getArrayElement(this, obj, i);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param obj an array object of this type.", "call_func_name": ["com.artemis.gwtref.client.IReflectionCache.getArrayElement"], "call_func_parameter": [["com.artemis.gwtref.client.Type", "java.lang.Object", "int"]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.setArrayElement", "methodParameterType": "Object#int#Object#", "methodParameterName": "obj#i#value#", "methodBody": "public void setArrayElement (Object obj, int i, Object value) {\n\t\tReflectionCache.instance.setArrayElement(this, obj, i, value);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the element i in the array object to value.", "call_func_name": ["com.artemis.gwtref.client.IReflectionCache.setArrayElement"], "call_func_parameter": [["com.artemis.gwtref.client.Type", "java.lang.Object", "int", "java.lang.Object"]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/gwtref/client/Type.java", "methodName": "com.artemis.gwtref.client.Type.getEnumConstants", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object[] getEnumConstants () {\n\t\treturn enumConstants;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the enumeration constants if this type is an enumeration or null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentType.java", "methodName": "com.artemis.ComponentType.getIndex", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getIndex() {\n\t\treturn index;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentType.java", "methodName": "com.artemis.ComponentType.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<? extends Component> getType() {\n\t\treturn type;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@code Class} that this type represents.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Archetype.java", "methodName": "com.artemis.Archetype.Archetype", "methodParameterType": "EntityTransmuter.TransmuteOperation#int#String#", "methodParameterName": "transmuter#compositionId#name#", "methodBody": "public Archetype(EntityTransmuter.TransmuteOperation transmuter, int compositionId, String name) {\n\t\tthis.transmuter = transmuter;\n\t\tthis.compositionId = compositionId;\n\t\tthis.name = name;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param transmuter Desired composition of derived components.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/InvocationStrategy.java", "methodName": "com.artemis.InvocationStrategy.process", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tprotected void process() {\n\t\tObject[] systemsData = systems.getData();\n\t\tfor (int i = 0, s = systems.size(); s > i; i++) {\n\t\t\tif (disabled.get(i))\n\t\t\t\tcontinue;\n\n\t\t\tupdateEntityStates();\n\t\t\t((BaseSystem)systemsData[i]).process();\n\t\t}\n\n\t\tupdateEntityStates();\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ContinueStatement#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ContinueStatement)ContinueStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Processes all systems in order. Should guarantee artemis is in a sane state using calls to #updateEntityStates before each call to a system, and after the last system has been called, or if no systems have been called at all.", "call_func_name": ["com.artemis.utils.Bag.getData", "com.artemis.utils.Bag.size", "com.artemis.utils.BitVector.get", "com.artemis.InvocationStrategy.updateEntityStates", "com.artemis.BaseSystem.process"], "call_func_parameter": [[""], [""], ["int"], [""], [""]], "passed_comments": [{"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> <b>Use of this method requires typed instantiation, e.g. Bag<E>(Class<E>)</b> </p>"}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.BitVector.get": "@param index the index of the bit"}, {"com.artemis.BaseSystem.process": "Process system. Does nothing if  {@link #checkProcessing()} is false or the systemis disabled."}]}, {"index": "26", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.ComponentManager", "methodParameterType": "int#", "methodParameterName": "entityContainerSize#", "methodBody": "protected ComponentManager(int entityContainerSize) {\n\t\tentityToIdentity = new ShortBag(entityContainerSize);\n\t\ttypeFactory = new ComponentTypeFactory(this, entityContainerSize);\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of  {@link ComponentManager}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.create", "methodParameterType": "int#Class<T>#", "methodParameterName": "owner#componentClass#", "methodBody": "protected <T extends Component> T create(int owner, Class<T> componentClass) {\n\t\treturn getMapper(componentClass).create(owner);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a component of given type by class.", "call_func_name": ["com.artemis.ComponentManager.getMapper", "com.artemis.ComponentMapper.create"], "call_func_parameter": [["java.lang.Class"], ["int"]], "passed_comments": [{"com.artemis.ComponentMapper.create": "Create component for this entity. Avoids creation if component exists."}]}, {"index": "28", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.clean", "methodParameterType": "IntBag#", "methodParameterName": "pendingPurge#", "methodBody": "void clean(IntBag pendingPurge) {\n\t\tint[] ids = pendingPurge.getData();\n\t\tfor (int i = 0, s = pendingPurge.size(); s > i; i++) {\n\t\t\tremoveComponents(ids[i]);\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Removes all components from deleted entities.", "call_func_name": ["com.artemis.utils.IntBag.getData", "com.artemis.utils.IntBag.size", "com.artemis.ComponentManager.removeComponents"], "call_func_parameter": [[""], [""], ["int"]], "passed_comments": [{"com.artemis.utils.IntBag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}]}, {"index": "29", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponentsByType", "methodParameterType": "ComponentType#", "methodParameterName": "type#", "methodBody": "protected Bag<Component> getComponentsByType(ComponentType type) {\n\t\treturn mappers.get(type.getIndex()).components;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all components from all entities for a given type.", "call_func_name": ["com.artemis.ComponentType.getIndex", "com.artemis.utils.Bag.get"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}, {"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}]}, {"index": "30", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponentTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ImmutableBag<ComponentType> getComponentTypes() {\n\t\treturn typeFactory.types;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Bag of all generated component types, which identify components without having to use classes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponent", "methodParameterType": "int#ComponentType#", "methodParameterName": "entityId#type#", "methodBody": "protected Component getComponent(int entityId, ComponentType type) {\n\t\tComponentMapper mapper = mappers.get(type.getIndex());\n\t\treturn mapper.get(entityId);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a component of an entity.", "call_func_name": ["com.artemis.ComponentType.getIndex", "com.artemis.utils.Bag.get", "com.artemis.ComponentMapper.get"], "call_func_parameter": [[""], ["int"], ["int"]], "passed_comments": [{"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}, {"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.ComponentMapper.get": "Fast but unsafe retrieval of a component for this entity. <p> This method trades performance for safety! <p> Might return null, throw  {@link ArrayIndexOutOfBoundsException} or a partially recycledcomponent if called on in-system removed components. <p> Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener."}]}, {"index": "32", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponentsFor", "methodParameterType": "int#Bag<Component>#", "methodParameterName": "entityId#fillBag#", "methodBody": "public Bag<Component> getComponentsFor(int entityId, Bag<Component> fillBag) {\n\t\tBag<ComponentMapper> mappers = componentMappers(entityId);\n\n\t\tfor (int i = 0, s = mappers.size(); s > i; i++) {\n\t\t\tfillBag.add(mappers.get(i).get(entityId));\n\t\t}\n\n\t\treturn fillBag;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all component associated with an entity.", "call_func_name": ["com.artemis.ComponentManager.componentMappers", "com.artemis.utils.Bag.size", "com.artemis.utils.Bag.get", "com.artemis.ComponentMapper.get", "com.artemis.utils.Bag.add"], "call_func_parameter": [["int"], [""], ["int"], ["int"], ["java.lang.Object"]], "passed_comments": [{"com.artemis.ComponentManager.componentMappers": "Get component composition of entity."}, {"com.artemis.ComponentManager.componentMappers": "Get component composition of entity."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.ComponentMapper.get": "Fast but unsafe retrieval of a component for this entity. <p> This method trades performance for safety! <p> Might return null, throw  {@link ArrayIndexOutOfBoundsException} or a partially recycledcomponent if called on in-system removed components. <p> Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener."}]}, {"index": "33", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.componentBits", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "BitVector componentBits(int entityId) {\n\t\tint identityIndex = entityToIdentity.get(entityId);\n\t\treturn identityResolver.compositionBits.get(identityIndex);\n\t}", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get component composition of entity.", "call_func_name": ["com.artemis.utils.ShortBag.get", "com.artemis.utils.Bag.get"], "call_func_parameter": [["int"], ["int"]], "passed_comments": [{"com.artemis.utils.ShortBag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}]}, {"index": "34", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.componentMappers", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "private Bag<ComponentMapper> componentMappers(int entityId) {\n\t\tint identityIndex = entityToIdentity.get(entityId);\n\t\treturn identityResolver.compositionMappers.get(identityIndex);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get component composition of entity.", "call_func_name": ["com.artemis.utils.ShortBag.get", "com.artemis.utils.Bag.get"], "call_func_parameter": [["int"], ["int"]], "passed_comments": [{"com.artemis.utils.ShortBag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}]}, {"index": "35", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.compositionIdentity", "methodParameterType": "BitVector#", "methodParameterName": "componentBits#", "methodBody": "public int compositionIdentity(BitVector componentBits) {\n\t\tint identity = identityResolver.getIdentity(componentBits);\n\t\tif (identity == -1) {\n\t\t\tidentity = identityResolver.allocateIdentity(componentBits, this);\n\t\t\tworld.getAspectSubscriptionManager()\n\t\t\t\t.processComponentIdentity(identity, componentBits);\n\t\t}\n\n\t\treturn identity;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetches unique identifier for composition.", "call_func_name": ["com.artemis.World.getAspectSubscriptionManager", "com.artemis.AspectSubscriptionManager.processComponentIdentity"], "call_func_parameter": [[""], ["int", "com.artemis.utils.BitVector"]], "passed_comments": [{"com.artemis.World.getAspectSubscriptionManager": "Returns the manager responsible for creating and maintaining {@link EntitySubscription subscriptions} in the world."}]}, {"index": "36", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getIdentity", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public int getIdentity(int entityId) {\n\t\treturn entityToIdentity.get(entityId);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId.", "call_func_name": ["com.artemis.utils.ShortBag.get"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.ShortBag.get": "Returns the element at the specified position in Bag."}]}, {"index": "37", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.synchronize", "methodParameterType": "EntitySubscription#", "methodParameterName": "es#", "methodBody": "void synchronize(EntitySubscription es) {\n\t\tBag<BitVector> compositionBits = identityResolver.compositionBits;\n\t\tfor (int i = 1, s = compositionBits.size(); s > i; i++) {\n\t\t\tBitVector componentBits = compositionBits.get(i);\n\t\t\tes.processComponentIdentity(i, componentBits);\n\t\t}\n\n\t\tfor (Entity e : world.getEntityManager().entities) {\n\t\t\tif (e != null) es.check(e.id, getIdentity(e.id));\n\t\t}\n\n\t\tes.informEntityChanges();\n\t\tes.rebuildCompressedActives();\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Synchronizes new subscriptions with  {@link World} state.", "call_func_name": ["com.artemis.utils.Bag.size", "com.artemis.utils.Bag.get", "com.artemis.EntitySubscription.processComponentIdentity", "com.artemis.World.getEntityManager", "com.artemis.utils.Bag.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.artemis.ComponentManager.getIdentity", "com.artemis.EntitySubscription.check", "com.artemis.EntitySubscription.informEntityChanges", "com.artemis.EntitySubscription.rebuildCompressedActives"], "call_func_parameter": [[""], ["int"], ["int", "com.artemis.utils.BitVector"], [""], [""], [""], [""], ["int"], ["int", "int"], [""], [""]], "passed_comments": [{"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.EntitySubscription.processComponentIdentity": "A new unique component composition detected, check if this subscription's aspect is interested in it."}, {"com.artemis.World.getEntityManager": "Returns a manager that takes care of all the entities in the world."}, {"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}, {"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}]}, {"index": "38", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.setIdentity", "methodParameterType": "int#int#", "methodParameterName": "entityId#compositionId#", "methodBody": "void setIdentity(int entityId, int compositionId) {\n\t\tentityToIdentity.unsafeSet(entityId, (short) compositionId);\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#PrimitiveType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set composition id of entity.", "call_func_name": ["com.artemis.utils.ShortBag.unsafeSet"], "call_func_parameter": [["int", "short"]], "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getTypeFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ComponentTypeFactory getTypeFactory() {\n\t\treturn typeFactory;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Factory responsible for tracking all component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.hashCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic int hashCode() {\n\t\t// FNV constants\n\t\tfinal int fnvOffset = 0x811c9dc5;\n\t\tfinal int fnvPrime = 0x1000193;\n\n\t\t// initialize\n\t\tfinal int last = trimToSize(array);\n\t\tint hash = fnvOffset ^ last;\n\n\t\t// loop over the data\n\t\tfor (int i = 0; i <= last; i++) {\n\t\t\tint value = getWord(array, i);\n\t\t\t// hash one byte at a time using FNV1\n\t\t\thash = (hash * fnvPrime) ^ (value & 0xff);\n\t\t\thash = (hash * fnvPrime) ^ ((value >>> 8) & 0xff);\n\t\t\thash = (hash * fnvPrime) ^ ((value >>> 16) & 0xff);\n\t\t\thash = (hash * fnvPrime) ^ (value >>> 24);\n\t\t}\n\n\t\treturn hash;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This hash is different than the one described in Sun's documentation. The described hash uses 64 bit integers and that's not practical in JavaScript.", "call_func_name": ["com.artemis.utils.BitVector.trimToSize", "com.artemis.utils.BitVector.getWord"], "call_func_parameter": [["com.google.gwt.core.client.JsArrayInteger"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": [{"com.artemis.utils.BitVector.length": "Returns the \"logical size\" of this bitset: the index of the highest set bit in the bitset plus one. Returns zero if the bitset contains no set bits."}]}, {"index": "41", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.toIntBag", "methodParameterType": "IntBag#", "methodParameterName": "out#", "methodBody": "public IntBag toIntBag(IntBag out) {\n\t\tout.setSize(0);\n\t\tif (isEmpty())\n\t\t\treturn out;\n\n\t\tfor (int id = nextSetBit(0); id >= 0; id = nextSetBit(id + 1)) {\n\t\t\tout.add(id);\n\t\t}\n\n\t\treturn out;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#ReturnStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes the set bits as integers. The destination {@link IntBag} is reset before the bits are transposed.", "call_func_name": ["com.artemis.utils.IntBag.setSize", "com.artemis.utils.BitVector.isEmpty", "com.artemis.utils.BitVector.nextSetBit", "com.artemis.utils.IntBag.add"], "call_func_parameter": [["int"], [""], ["int"], ["int"]], "passed_comments": [{"com.artemis.utils.IntBag.setSize": "Set the size. <p> This will not resize the bag, nor will it clean up contents beyond the given size. Use with caution. </p>"}, {"com.artemis.utils.BitVector.isEmpty": "@return true if this bitset contains no bits that are set to true"}, {"com.artemis.utils.BitVector.nextSetBit": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit exists then -1 is returned."}, {"com.artemis.utils.IntBag.add": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>"}]}, {"index": "42", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.toIntBagIdCid", "methodParameterType": "ComponentManager#IntBag#", "methodParameterName": "cm#out#", "methodBody": "public IntBag toIntBagIdCid(ComponentManager cm, IntBag out) {\n\t\tout.setSize(0);\n\t\tif (isEmpty())\n\t\t\treturn out;\n\n\t\tfor (int id = nextSetBit(0); id >= 0; id = nextSetBit(id + 1)) {\n\t\t\tout.add(id);\n\t\t\tout.add(cm.getIdentity(id));\n\t\t}\n\n\t\treturn out;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#ReturnStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes the set bits as pairs of <code>entity id</code> and {@link World#compositionId(int) compositionId}. The destination {@link IntBag} is reset before the bits aretransposed.", "call_func_name": ["com.artemis.utils.IntBag.setSize", "com.artemis.utils.BitVector.isEmpty", "com.artemis.utils.BitVector.nextSetBit", "com.artemis.utils.IntBag.add", "com.artemis.ComponentManager.getIdentity"], "call_func_parameter": [["int"], [""], ["int"], ["int"], ["int"]], "passed_comments": [{"com.artemis.utils.IntBag.setSize": "Set the size. <p> This will not resize the bag, nor will it clean up contents beyond the given size. Use with caution. </p>"}, {"com.artemis.utils.BitVector.isEmpty": "@return true if this bitset contains no bits that are set to true"}, {"com.artemis.utils.BitVector.nextSetBit": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit exists then -1 is returned."}, {"com.artemis.utils.IntBag.add": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>"}, {"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}, {"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}]}, {"index": "43", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeClear", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void unsafeClear(int index) {\n\t\tclear(index);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to clear", "call_func_name": ["com.artemis.utils.BitVector.clear"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.BitVector.clear": "@param index the index of the bit to clear"}]}, {"index": "44", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeGet", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public boolean unsafeGet(int index) {\n\t\treturn get(index);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit", "call_func_name": ["com.artemis.utils.BitVector.get"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.BitVector.get": "@param index the index of the bit"}]}, {"index": "45", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeSet", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void unsafeSet(int index) {\n\t\tset(index);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to set", "call_func_name": ["com.artemis.utils.BitVector.set"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}]}, {"index": "46", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeSet", "methodParameterType": "int#boolean#", "methodParameterName": "index#value#", "methodBody": "public void unsafeSet(int index, boolean value) {\n\t\tset(index, value);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to set", "call_func_name": ["com.artemis.utils.BitVector.set"], "call_func_parameter": [["int", "boolean"]], "passed_comments": [{"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}]}, {"index": "47", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.forName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "static public Class forName (String name) throws ReflectionException {\n\t\ttry {\n\t\t\treturn ReflectionCache.forName(name).getClassOfType();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new ReflectionException(\"Class not found: \" + name);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object associated with the class or interface with the supplied string name.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.forName", "com.artemis.gwtref.client.Type.getClassOfType", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.artemis.utils.reflect.ReflectionException.<init>"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getClassOfType": "@return the {@link Class} of this type."}]}, {"index": "48", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getSimpleName", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public String getSimpleName (Class c) {\n\t\treturn c.getSimpleName();\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the simple name of the underlying class as supplied in the source code.", "call_func_name": ["java.lang.Class.getSimpleName"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isInstance", "methodParameterType": "Class#Object#", "methodParameterName": "c#obj#", "methodBody": "static public boolean isInstance (Class c, Object obj) {\n\t\treturn isAssignableFrom(c, obj.getClass());\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the supplied Object is assignment-compatible with the object represented by supplied Class.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.utils.reflect.ClassReflection.isAssignableFrom"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.Class"]], "passed_comments": [{"com.artemis.utils.reflect.ClassReflection.isAssignableFrom": "Determines if the class or interface represented by first Class parameter is either the same as, or is a superclass or superinterface of, the class or interface represented by the second Class parameter."}, {"com.artemis.utils.reflect.ClassReflection.isAssignableFrom": "Determines if the class or interface represented by first Class parameter is either the same as, or is a superclass or superinterface of, the class or interface represented by the second Class parameter."}]}, {"index": "50", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isAssignableFrom", "methodParameterType": "Class#Class#", "methodParameterName": "c1#c2#", "methodBody": "static public boolean isAssignableFrom (Class c1, Class c2) {\n\t\tType c1Type = ReflectionCache.getType(c1);\n\t\tType c2Type = ReflectionCache.getType(c2);\n\t\treturn c1Type.isAssignableFrom(c2Type);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the class or interface represented by first Class parameter is either the same as, or is a superclass or superinterface of, the class or interface represented by the second Class parameter.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.isAssignableFrom"], "call_func_parameter": [["java.lang.Class"], ["com.artemis.gwtref.client.Type"]], "passed_comments": [{"com.artemis.gwtref.client.Type.isAssignableFrom": "@param otherType the other type"}]}, {"index": "51", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isMemberClass", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public boolean isMemberClass (Class c) {\n\t\treturn ReflectionCache.getType(c).isMemberClass();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the class or interface represented by the supplied Class is a member class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.isMemberClass"], "call_func_parameter": [["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isStaticClass", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public boolean isStaticClass (Class c) {\n\t\treturn ReflectionCache.getType(c).isStatic();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the class or interface represented by the supplied Class is a static class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.isStatic"], "call_func_parameter": [["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isAbstractClass", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public boolean isAbstractClass (Class c) {\n\t\treturn ReflectionCache.getType(c).isAbstract();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the class or interface represented by the supplied Class is an abstract class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.isAbstract"], "call_func_parameter": [["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.newInstance", "methodParameterType": "Class<T>#", "methodParameterName": "c#", "methodBody": "static public <T> T newInstance (Class<T> c) throws ReflectionException {\n\t\ttry {\n\t\t\treturn (T)ReflectionCache.getType(c).newInstance();\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Could not use default constructor of \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of the class represented by the supplied Class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.newInstance", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "com.artemis.utils.reflect.ReflectionException.<init>"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.artemis.gwtref.client.Type.newInstance": "@return a new instance of this type created via the default constructor which must be public."}]}, {"index": "55", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getConstructors", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Constructor[] getConstructors (Class c) {\n\t\tcom.artemis.gwtref.client.Constructor[] constructors = ReflectionCache.getType(c).getConstructors();\n\t\tConstructor[] result = new Constructor[constructors.length];\n\t\tfor (int i = 0, j = constructors.length; i < j; i++) {\n\t\t\tresult[i] = new Constructor(constructors[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Constructor} containing the public constructors of the class represented by the supplied Class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getConstructors", "com.artemis.utils.reflect.Constructor.<init>"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.gwtref.client.Constructor"]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getConstructor", "methodParameterType": "Class#Class#", "methodParameterName": "c#parameterTypes#", "methodBody": "static public Constructor getConstructor (Class c, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Constructor(ReflectionCache.getType(c).getConstructor(parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting constructor for class: \" + c.getName(), e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Constructor not found for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Constructor} that represents the public constructor for the supplied class which takes the suppliedparameter types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredConstructor", "methodParameterType": "Class#Class#", "methodParameterName": "c#parameterTypes#", "methodBody": "static public Constructor getDeclaredConstructor (Class c, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Constructor(ReflectionCache.getType(c).getDeclaredConstructor(parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting constructor for class: \" + c.getName(), e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Constructor not found for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Constructor} that represents the constructor for the supplied class which takes the supplied parametertypes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getMethods", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Method[] getMethods (Class c) {\n\t\tcom.artemis.gwtref.client.Method[] methods = ReflectionCache.getType(c).getMethods();\n\t\tMethod[] result = new Method[methods.length];\n\t\tfor (int i = 0, j = methods.length; i < j; i++) {\n\t\t\tresult[i] = new Method(methods[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Method} containing the public member methods of the class represented by the supplied Class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getMethods", "com.artemis.utils.reflect.Method.<init>"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.gwtref.client.Method"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getMethods": "s"}]}, {"index": "59", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getMethod", "methodParameterType": "Class#String#Class#", "methodParameterName": "c#name#parameterTypes#", "methodBody": "static public Method getMethod (Class c, String name, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Method(ReflectionCache.getType(c).getMethod(name, parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting method: \" + name + \", for class: \" + c.getName(), e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Method not found: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Method} that represents the public member method for the supplied class which takes the supplied parametertypes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredMethods", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Method[] getDeclaredMethods (Class c) {\n\t\tcom.artemis.gwtref.client.Method[] methods = ReflectionCache.getType(c).getDeclaredMethods();\n\t\tMethod[] result = new Method[methods.length];\n\t\tfor (int i = 0, j = methods.length; i < j; i++) {\n\t\t\tresult[i] = new Method(methods[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Method} containing the methods declared by the class represented by the supplied Class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getDeclaredMethods", "com.artemis.utils.reflect.Method.<init>"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.gwtref.client.Method"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getDeclaredMethods": "@return an array containing all methods of this class, including abstract, private and protected methods. See{@link Class#getDeclaredMethods()}."}]}, {"index": "61", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredMethod", "methodParameterType": "Class#String#Class#", "methodParameterName": "c#name#parameterTypes#", "methodBody": "static public Method getDeclaredMethod (Class c, String name, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Method(ReflectionCache.getType(c).getMethod(name, parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting method: \" + name + \", for class: \" + c.getName(), e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Method not found: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Method} that represents the method declared by the supplied class which takes the supplied parameter types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getFields", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Field[] getFields (Class c) {\n\t\tcom.artemis.gwtref.client.Field[] fields = ReflectionCache.getType(c).getFields();\n\t\tField[] result = new Field[fields.length];\n\t\tfor (int i = 0, j = fields.length; i < j; i++) {\n\t\t\tresult[i] = new Field(fields[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Field} containing the public fields of the class represented by the supplied Class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getFields", "com.artemis.utils.reflect.Field.<init>"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.gwtref.client.Field"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getFields": "@return an array containing all the public fields of this class and its super classes. See {@link Class#getFields()}."}]}, {"index": "63", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getField", "methodParameterType": "Class#String#", "methodParameterName": "c#name#", "methodBody": "static public Field getField (Class c, String name) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Field(ReflectionCache.getType(c).getField(name));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting field: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Field} that represents the specified public member field for the supplied class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getField", "com.artemis.utils.reflect.Field.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "com.artemis.utils.reflect.ReflectionException.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String"], ["com.artemis.gwtref.client.Field"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getField": "@param name the name of the field"}]}, {"index": "64", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredFields", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Field[] getDeclaredFields (Class c) {\n\t\tcom.artemis.gwtref.client.Field[] fields = ReflectionCache.getType(c).getDeclaredFields();\n\t\tField[] result = new Field[fields.length];\n\t\tfor (int i = 0, j = fields.length; i < j; i++) {\n\t\t\tresult[i] = new Field(fields[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Field} objects reflecting all the fields declared by the supplied class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getDeclaredFields", "com.artemis.utils.reflect.Field.<init>"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.gwtref.client.Field"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getDeclaredFields": "@return an array containing all the fields of this class, including private and protected fields. See{@link Class#getDeclaredFields()}."}]}, {"index": "65", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getAnnotation", "methodParameterType": "Class#Class<T>#", "methodParameterName": "c#annotationClass#", "methodBody": "static public <T extends java.lang.annotation.Annotation> T getAnnotation(Class c, Class<T> annotationClass) {\n\t\tfinal Annotation declaredAnnotation = getDeclaredAnnotation(c,annotationClass);\n\t\treturn declaredAnnotation != null ? declaredAnnotation.getAnnotation(annotationClass) : null;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "call_func_name": ["com.artemis.utils.reflect.ClassReflection.getDeclaredAnnotation", "com.artemis.utils.reflect.Annotation.getAnnotation"], "call_func_parameter": [["java.lang.Class", "java.lang.Class"], ["java.lang.Class"]], "passed_comments": [{"com.artemis.utils.reflect.ClassReflection.getDeclaredAnnotation": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for."}, {"com.artemis.utils.reflect.ClassReflection.getDeclaredAnnotation": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for."}]}, {"index": "66", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredField", "methodParameterType": "Class#String#", "methodParameterName": "c#name#", "methodBody": "static public Field getDeclaredField (Class c, String name) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Field(ReflectionCache.getType(c).getField(name));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting field: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Field} that represents the specified declared field for the supplied class.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getField", "com.artemis.utils.reflect.Field.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "com.artemis.utils.reflect.ReflectionException.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String"], ["com.artemis.gwtref.client.Field"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.artemis.gwtref.client.Type.getField": "@param name the name of the field"}]}, {"index": "67", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isAnnotationPresent", "methodParameterType": "Class#Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "c#annotationType#", "methodBody": "static public boolean isAnnotationPresent (Class c, Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = ReflectionCache.getType(c).getDeclaredAnnotations();\n\t\tif (annotations == null)\n\t\t\treturn false;\n\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the supplied class includes an annotation of the given class type.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getDeclaredAnnotations", "java.lang.annotation.Annotation.annotationType", "java.lang.Object.equals"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredAnnotations", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Annotation[] getDeclaredAnnotations (Class c) {\n\t\tjava.lang.annotation.Annotation[] annotations = ReflectionCache.getType(c).getDeclaredAnnotations();\n\t\tAnnotation[] result = new Annotation[annotations.length];\n\t\tfor (int i = 0; i < annotations.length; i++) {\n\t\t\tresult[i] = new Annotation(annotations[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Annotation} objects reflecting all annotations declared by the supplied class,or an empty array if there are none. Does not include inherited annotations.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getDeclaredAnnotations", "com.artemis.utils.reflect.Annotation.<init>"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.annotation.Annotation"]], "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredAnnotation", "methodParameterType": "Class#Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "c#annotationType#", "methodBody": "static public Annotation getDeclaredAnnotation (Class c, Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = ReflectionCache.getType(c).getDeclaredAnnotations();\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn new Annotation(annotation);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for.", "call_func_name": ["com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.Type.getDeclaredAnnotations", "java.lang.annotation.Annotation.annotationType", "java.lang.Object.equals", "com.artemis.utils.reflect.Annotation.<init>"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.Object"], ["java.lang.annotation.Annotation"]], "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName () {\n\t\treturn method.getName();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the method.", "call_func_name": ["com.artemis.gwtref.client.Method.getName"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.gwtref.client.Method.getName": "@return the name of the method."}]}, {"index": "71", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getReturnType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getReturnType () {\n\t\treturn method.getReturnType();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Class object that represents the formal return type of the method.", "call_func_name": ["com.artemis.gwtref.client.Method.getReturnType"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.gwtref.client.Method.getReturnType": "@return the {@link Class} of the return type or null."}]}, {"index": "72", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getParameterTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class[] getParameterTypes () {\n\t\tParameter[] parameters = method.getParameters();\n\t\tClass[] parameterTypes = new Class[parameters.length];\n\t\tfor (int i = 0, j = parameters.length; i < j; i++) {\n\t\t\tparameterTypes[i] = parameters[i].getType();\n\t\t}\n\t\treturn parameterTypes;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the method.", "call_func_name": ["com.artemis.gwtref.client.Method.getParameters", "com.artemis.gwtref.client.Parameter.getType"], "call_func_parameter": [[""], [""]], "passed_comments": [{"com.artemis.gwtref.client.Method.getParameters": "@return the list of parameters, can be a zero size array."}]}, {"index": "73", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getDeclaringClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getDeclaringClass () {\n\t\treturn method.getEnclosingType();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object representing the class or interface that declares the method.", "call_func_name": ["com.artemis.gwtref.client.Method.getEnclosingType"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.gwtref.client.Method.getEnclosingType": "@return the {@link Class} of the enclosing type."}]}, {"index": "74", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isAbstract", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAbstract () {\n\t\treturn method.isAbstract();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code abstract} modifier.", "call_func_name": ["com.artemis.gwtref.client.Method.isAbstract"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isDefaultAccess", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDefaultAccess () {\n\t\treturn !isPrivate() && !isProtected() && !isPublic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method does not include any of the  {@code private},  {@code protected}, or  {@code public} modifiers.", "call_func_name": ["com.artemis.utils.reflect.Method.isPrivate", "com.artemis.utils.reflect.Method.isProtected", "com.artemis.utils.reflect.Method.isPublic"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"com.artemis.utils.reflect.Method.isPrivate": "Return true if the method includes the  {@code private} modifier."}, {"com.artemis.utils.reflect.Method.isPrivate": "Return true if the method includes the  {@code private} modifier."}, {"com.artemis.utils.reflect.Method.isProtected": "Return true if the method includes the  {@code protected} modifier."}, {"com.artemis.utils.reflect.Method.isProtected": "Return true if the method includes the  {@code protected} modifier."}, {"com.artemis.utils.reflect.Method.isPublic": "Return true if the method includes the  {@code public} modifier."}, {"com.artemis.utils.reflect.Method.isPublic": "Return true if the method includes the  {@code public} modifier."}]}, {"index": "76", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isFinal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFinal () {\n\t\treturn method.isFinal();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code final} modifier.", "call_func_name": ["com.artemis.gwtref.client.Method.isFinal"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isPrivate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPrivate () {\n\t\treturn method.isPrivate();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code private} modifier.", "call_func_name": ["com.artemis.gwtref.client.Method.isPrivate"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isProtected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isProtected () {\n\t\treturn method.isProtected();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code protected} modifier.", "call_func_name": ["com.artemis.gwtref.client.Method.isProtected"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isPublic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPublic () {\n\t\treturn method.isPublic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code public} modifier.", "call_func_name": ["com.artemis.gwtref.client.Method.isPublic"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isNative", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isNative () {\n\t\treturn method.isNative();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code native} modifier.", "call_func_name": ["com.artemis.gwtref.client.Method.isNative"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isStatic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStatic () {\n\t\treturn method.isStatic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code static} modifier.", "call_func_name": ["com.artemis.gwtref.client.Method.isStatic"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isVarArgs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isVarArgs () {\n\t\treturn method.isVarArgs();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method takes a variable number of arguments.", "call_func_name": ["com.artemis.gwtref.client.Method.isVarArgs"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.invoke", "methodParameterType": "Object#Object#", "methodParameterName": "obj#args#", "methodBody": "public Object invoke (Object obj, Object... args) throws ReflectionException {\n\t\ttry {\n\t\t\treturn method.invoke(obj, args);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Illegal argument(s) supplied to method: \" + getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Invokes the underlying method on the supplied object with the supplied parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getAnnotation", "methodParameterType": "Class<T>#", "methodParameterName": "annotationClass#", "methodBody": "public <T extends java.lang.annotation.Annotation>T getAnnotation(Class<T> annotationClass) {\n\t\tfinal Annotation declaredAnnotation = getDeclaredAnnotation(annotationClass);\n\t\treturn declaredAnnotation != null ? declaredAnnotation.getAnnotation(annotationClass) : null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "call_func_name": ["com.artemis.utils.reflect.Method.getDeclaredAnnotation", "com.artemis.utils.reflect.Annotation.getAnnotation"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Class"]], "passed_comments": [{"com.artemis.utils.reflect.Method.getDeclaredAnnotation": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for."}, {"com.artemis.utils.reflect.Method.getDeclaredAnnotation": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for."}]}, {"index": "85", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isAnnotationPresent", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public boolean isAnnotationPresent (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = method.getDeclaredAnnotations();\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the field includes an annotation of the provided class type.", "call_func_name": ["com.artemis.gwtref.client.Method.getDeclaredAnnotations", "java.lang.annotation.Annotation.annotationType", "java.lang.Object.equals"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getDeclaredAnnotations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Annotation[] getDeclaredAnnotations () {\n\t\tjava.lang.annotation.Annotation[] annotations = method.getDeclaredAnnotations();\n\t\tAnnotation[] result = new Annotation[annotations.length];\n\t\tfor (int i = 0; i < annotations.length; i++) {\n\t\t\tresult[i] = new Annotation(annotations[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Annotation} objects reflecting all annotations declared by this field,or an empty array if there are none. Does not include inherited annotations.", "call_func_name": ["com.artemis.gwtref.client.Method.getDeclaredAnnotations", "com.artemis.utils.reflect.Annotation.<init>"], "call_func_parameter": [[""], ["java.lang.annotation.Annotation"]], "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getDeclaredAnnotation", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public Annotation getDeclaredAnnotation (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = method.getDeclaredAnnotations();\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn new Annotation(annotation);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for.", "call_func_name": ["com.artemis.gwtref.client.Method.getDeclaredAnnotations", "java.lang.annotation.Annotation.annotationType", "java.lang.Object.equals", "com.artemis.utils.reflect.Annotation.<init>"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.annotation.Annotation"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Constructor.java", "methodName": "com.artemis.utils.reflect.Constructor.getParameterTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class[] getParameterTypes () {\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the constructor.", "call_func_name": ["java.lang.reflect.Constructor.getParameterTypes"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Constructor.java", "methodName": "com.artemis.utils.reflect.Constructor.getDeclaringClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getDeclaringClass () {\n\t\treturn constructor.getEnclosingType();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object representing the class or interface that declares the constructor.", "call_func_name": ["com.artemis.gwtref.client.Constructor.getEnclosingType"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Constructor.java", "methodName": "com.artemis.utils.reflect.Constructor.newInstance", "methodParameterType": "Object#", "methodParameterName": "args#", "methodBody": "public Object newInstance (Object... args) throws ReflectionException {\n\t\ttry {\n\t\t\treturn constructor.newInstance(args);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Illegal argument(s) supplied to constructor for class: \" + getDeclaringClass().getName(),\n\t\t\t\te);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Uses the constructor to create and initialize a new instance of the constructor's declaring class, with the supplied initialization parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName () {\n\t\treturn field.getName();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the field.", "call_func_name": ["com.artemis.gwtref.client.Field.getName"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getType () {\n\t\treturn field.getType().getClassOfType();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Class object that identifies the declared type for the field.", "call_func_name": ["com.artemis.gwtref.client.Field.getType", "com.artemis.gwtref.client.Type.getClassOfType"], "call_func_parameter": [[""], [""]], "passed_comments": [{"com.artemis.gwtref.client.Type.getClassOfType": "@return the {@link Class} of this type."}]}, {"index": "93", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getDeclaringClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getDeclaringClass () {\n\t\treturn field.getEnclosingType().getClassOfType();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object representing the class or interface that declares the field.", "call_func_name": ["com.artemis.gwtref.client.Field.getEnclosingType", "com.artemis.gwtref.client.Type.getClassOfType"], "call_func_parameter": [[""], [""]], "passed_comments": [{"com.artemis.gwtref.client.Type.getClassOfType": "@return the {@link Class} of this type."}]}, {"index": "94", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isDefaultAccess", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDefaultAccess () {\n\t\treturn !isPrivate() && !isProtected() && !isPublic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field does not include any of the  {@code private},  {@code protected}, or  {@code public} modifiers.", "call_func_name": ["com.artemis.utils.reflect.Field.isPrivate", "com.artemis.utils.reflect.Field.isProtected", "com.artemis.utils.reflect.Field.isPublic"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"com.artemis.utils.reflect.Field.isPrivate": "Return true if the field includes the  {@code private} modifier."}, {"com.artemis.utils.reflect.Field.isPrivate": "Return true if the field includes the  {@code private} modifier."}, {"com.artemis.utils.reflect.Field.isProtected": "Return true if the field includes the  {@code protected} modifier."}, {"com.artemis.utils.reflect.Field.isProtected": "Return true if the field includes the  {@code protected} modifier."}, {"com.artemis.utils.reflect.Field.isPublic": "Return true if the field includes the  {@code public} modifier."}, {"com.artemis.utils.reflect.Field.isPublic": "Return true if the field includes the  {@code public} modifier."}]}, {"index": "95", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isFinal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFinal () {\n\t\treturn field.isFinal();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code final} modifier.", "call_func_name": ["com.artemis.gwtref.client.Field.isFinal"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isPrivate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPrivate () {\n\t\treturn field.isPrivate();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code private} modifier.", "call_func_name": ["com.artemis.gwtref.client.Field.isPrivate"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isProtected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isProtected () {\n\t\treturn field.isProtected();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code protected} modifier.", "call_func_name": ["com.artemis.gwtref.client.Field.isProtected"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isPublic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPublic () {\n\t\treturn field.isPublic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code public} modifier.", "call_func_name": ["com.artemis.gwtref.client.Field.isPublic"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isStatic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStatic () {\n\t\treturn field.isStatic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code static} modifier.", "call_func_name": ["com.artemis.gwtref.client.Field.isStatic"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isTransient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isTransient () {\n\t\treturn field.isTransient();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code transient} modifier.", "call_func_name": ["com.artemis.gwtref.client.Field.isTransient"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isVolatile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isVolatile () {\n\t\treturn field.isVolatile();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code volatile} modifier.", "call_func_name": ["com.artemis.gwtref.client.Field.isVolatile"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isSynthetic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSynthetic () {\n\t\treturn field.isSynthetic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field is a synthetic field.", "call_func_name": ["com.artemis.gwtref.client.Field.isSynthetic"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getElementType", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public Class getElementType (int index) {\n\t\tType elementType = field.getElementType(index);\n\t\treturn elementType != null ? elementType.getClassOfType() : null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the type of the field is parameterized, returns the Class object representing the parameter type at the specified index, null otherwise.", "call_func_name": ["com.artemis.gwtref.client.Field.getElementType", "com.artemis.gwtref.client.Type.getClassOfType"], "call_func_parameter": [["int"], [""]], "passed_comments": [{"com.artemis.gwtref.client.Type.getClassOfType": "@return the {@link Class} of this type."}]}, {"index": "104", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.get", "methodParameterType": "Object#", "methodParameterName": "obj#", "methodBody": "public Object get (Object obj) throws ReflectionException {\n\t\ttry {\n\t\t\treturn field.get(obj);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Could not get \" + getDeclaringClass() + \"#\" + getName() + \": \" + e.getMessage(), e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new ReflectionException(\"Illegal access to field \" + getName() + \": \" + e.getMessage(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the field on the supplied object.", "call_func_name": ["com.artemis.gwtref.client.Field.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.artemis.utils.reflect.Field.getDeclaringClass", "java.lang.StringBuilder.append", "com.artemis.utils.reflect.Field.getName", "java.lang.IllegalArgumentException.getMessage", "java.lang.StringBuilder.toString", "com.artemis.utils.reflect.ReflectionException.<init>", "java.lang.IllegalAccessException.getMessage"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": [{"com.artemis.utils.reflect.Field.getDeclaringClass": "Returns the Class object representing the class or interface that declares the field."}, {"com.artemis.utils.reflect.Field.getDeclaringClass": "Returns the Class object representing the class or interface that declares the field."}, {"com.artemis.utils.reflect.Field.getName": "Returns the name of the field."}, {"com.artemis.utils.reflect.Field.getName": "Returns the name of the field."}]}, {"index": "105", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.set", "methodParameterType": "Object#Object#", "methodParameterName": "obj#value#", "methodBody": "public void set (Object obj, Object value) throws ReflectionException {\n\t\ttry {\n\t\t\tfield.set(obj, value);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Could not set \" + getDeclaringClass() + \"#\" + getName() + \": \" + e.getMessage(), e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new ReflectionException(\"Illegal access to field \" + getName() + \": \" + e.getMessage(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the field on the supplied object.", "call_func_name": ["com.artemis.gwtref.client.Field.set", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.artemis.utils.reflect.Field.getDeclaringClass", "java.lang.StringBuilder.append", "com.artemis.utils.reflect.Field.getName", "java.lang.IllegalArgumentException.getMessage", "java.lang.StringBuilder.toString", "com.artemis.utils.reflect.ReflectionException.<init>", "java.lang.IllegalAccessException.getMessage"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": [{"com.artemis.utils.reflect.Field.getDeclaringClass": "Returns the Class object representing the class or interface that declares the field."}, {"com.artemis.utils.reflect.Field.getDeclaringClass": "Returns the Class object representing the class or interface that declares the field."}, {"com.artemis.utils.reflect.Field.getName": "Returns the name of the field."}, {"com.artemis.utils.reflect.Field.getName": "Returns the name of the field."}]}, {"index": "106", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getAnnotation", "methodParameterType": "Class<T>#", "methodParameterName": "annotationClass#", "methodBody": "public <T extends java.lang.annotation.Annotation>T getAnnotation(Class<T> annotationClass) {\n\t\tfinal Annotation declaredAnnotation = getDeclaredAnnotation(annotationClass);\n\t\treturn declaredAnnotation != null ? declaredAnnotation.getAnnotation(annotationClass) : null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "call_func_name": ["com.artemis.utils.reflect.Field.getDeclaredAnnotation", "com.artemis.utils.reflect.Annotation.getAnnotation"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Class"]], "passed_comments": [{"com.artemis.utils.reflect.Field.getDeclaredAnnotation": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for."}, {"com.artemis.utils.reflect.Field.getDeclaredAnnotation": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for."}]}, {"index": "107", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isAnnotationPresent", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public boolean isAnnotationPresent (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = field.getDeclaredAnnotations();\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the field includes an annotation of the provided class type.", "call_func_name": ["com.artemis.gwtref.client.Field.getDeclaredAnnotations", "java.lang.annotation.Annotation.annotationType", "java.lang.Object.equals"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getDeclaredAnnotations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Annotation[] getDeclaredAnnotations () {\n\t\tjava.lang.annotation.Annotation[] annotations = field.getDeclaredAnnotations();\n\t\tAnnotation[] result = new Annotation[annotations.length];\n\t\tfor (int i = 0; i < annotations.length; i++) {\n\t\t\tresult[i] = new Annotation(annotations[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Annotation} objects reflecting all annotations declared by this field,or an empty array if there are none. Does not include inherited annotations.", "call_func_name": ["com.artemis.gwtref.client.Field.getDeclaredAnnotations", "com.artemis.utils.reflect.Annotation.<init>"], "call_func_parameter": [[""], ["java.lang.annotation.Annotation"]], "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getDeclaredAnnotation", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public Annotation getDeclaredAnnotation (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = field.getDeclaredAnnotations();\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn new Annotation(annotation);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for.", "call_func_name": ["com.artemis.gwtref.client.Field.getDeclaredAnnotations", "java.lang.annotation.Annotation.annotationType", "java.lang.Object.equals", "com.artemis.utils.reflect.Annotation.<init>"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.annotation.Annotation"]], "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.newInstance", "methodParameterType": "Class#int#", "methodParameterName": "c#size#", "methodBody": "static public Object newInstance (Class c, int size) {\n\t\treturn ReflectionCache.instance.newArray(c, size);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new array with the specified component type and length.", "call_func_name": ["com.artemis.gwtref.client.IReflectionCache.newArray"], "call_func_parameter": [["java.lang.Class", "int"]], "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.getLength", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "static public int getLength (Object array) {\n\t\treturn ReflectionCache.instance.getArrayLength(ReflectionCache.getType(array.getClass()), array);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the length of the supplied array.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.IReflectionCache.getArrayLength"], "call_func_parameter": [[""], ["java.lang.Class"], ["com.artemis.gwtref.client.Type", "java.lang.Object"]], "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.get", "methodParameterType": "Object#int#", "methodParameterName": "array#index#", "methodBody": "static public Object get (Object array, int index) {\n\t\treturn ReflectionCache.instance.getArrayElement(ReflectionCache.getType(array.getClass()), array, index);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the indexed component in the supplied array.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.IReflectionCache.getArrayElement"], "call_func_parameter": [[""], ["java.lang.Class"], ["com.artemis.gwtref.client.Type", "java.lang.Object", "int"]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.set", "methodParameterType": "Object#int#Object#", "methodParameterName": "array#index#value#", "methodBody": "static public void set (Object array, int index, Object value) {\n\t\tReflectionCache.instance.setArrayElement(ReflectionCache.getType(array.getClass()), array, index, value);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the indexed component in the supplied array to the supplied value.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.gwtref.client.ReflectionCache.getType", "com.artemis.gwtref.client.IReflectionCache.setArrayElement"], "call_func_parameter": [[""], ["java.lang.Class"], ["com.artemis.gwtref.client.Type", "java.lang.Object", "int", "java.lang.Object"]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.Bag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Bag() {\n\t\tthis(64);\n\t}", "AST": "Javadoc#Modifier#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with an initial capacity of 64.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.Bag", "methodParameterType": "Class<E>#", "methodParameterName": "type#", "methodBody": "public Bag(Class<E> type) {\n\t\tthis(64);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with an initial capacity of 64.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.Bag", "methodParameterType": "int#", "methodParameterName": "capacity#", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tpublic Bag(int capacity) {\n\t\tdata = (E[])ArrayReflection.newInstance(Object.class, capacity);\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with the specified initial capacity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.remove", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public E remove(int index) {\n\t\tE e = data[index]; // make copy of element to remove so it can be returned\n\t\tdata[index] = data[--size]; // overwrite item to remove with last element\n\t\tdata[size] = null; // null last element, so gc can do its work\n\t\treturn e;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#PrefixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NullLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.sort", "methodParameterType": "Comparator<E>#", "methodParameterName": "comparator#", "methodBody": "public void sort(Comparator<E> comparator) {\n\t\tSort.instance().sort(this, comparator);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sorts the bag using the  {@code comparator}.", "call_func_name": ["com.artemis.utils.Sort.instance", "com.artemis.utils.Sort.sort"], "call_func_parameter": [[""], ["com.artemis.utils.Bag", "java.util.Comparator"]], "passed_comments": [{"com.artemis.utils.Sort.instance": "Returns a Sort instance for convenience. Multiple threads must not use this instance at the same time."}]}, {"index": "119", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.removeLast", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public E removeLast() {\n\t\tif(size > 0) {\n\t\t\tE e = data[--size];\n\t\t\tdata[size] = null;\n\t\t\treturn e;\n\t\t}\n\t\t\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#PrefixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#NullLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove and return the last object in the bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.remove", "methodParameterType": "E#", "methodParameterName": "e#", "methodBody": "public boolean remove(E e) {\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tE e2 = data[i];\n\n\t\t\tif (e.equals(e2)) {\n\t\t\t\tdata[i] = data[--size]; // overwrite item to remove with last element\n\t\t\t\tdata[size] = null; // null last element, so gc can do its work\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#PrefixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NullLiteral#Assignment#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the first occurrence of the specified element from this Bag, if it is present. <p> If the Bag does not contain the element, it is unchanged. It does this by overwriting it was last element then removing last element </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.contains", "methodParameterType": "E#", "methodParameterName": "e#", "methodBody": "@Override\n\tpublic boolean contains(E e) {\n\t\tfor(int i = 0; size > i; i++) {\n\t\t\tif(e.equals(data[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if bag contains this element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.removeAll", "methodParameterType": "ImmutableBag<E>#", "methodParameterName": "bag#", "methodBody": "public boolean removeAll(ImmutableBag<E> bag) {\n\t\tboolean modified = false;\n\n\t\tfor (int i = 0, s = bag.size(); s > i; i++) {\n\t\t\tE e1 = bag.get(i);\n\n\t\t\tfor (int j = 0; j < size; j++) {\n\t\t\t\tE e2 = data[j];\n\n\t\t\t\tif (e1.equals(e2)) {\n\t\t\t\t\tremove(j);\n\t\t\t\t\tj--;\n\t\t\t\t\tmodified = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn modified;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes from this Bag all of its elements that are contained in the specified Bag.", "call_func_name": ["com.artemis.utils.ImmutableBag.size", "com.artemis.utils.ImmutableBag.get", "java.lang.Object.equals", "com.artemis.utils.Bag.remove"], "call_func_parameter": [[""], ["int"], ["java.lang.Object"], ["int"]], "passed_comments": [{"com.artemis.utils.ImmutableBag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.ImmutableBag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.remove": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>"}, {"com.artemis.utils.Bag.remove": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>"}]}, {"index": "123", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "@Override\n\tpublic E get(int index) {\n\t\treturn data[index];\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.safeGet", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public E safeGet(int index) {\n\t\tif(index >= data.length)\n\t\t\tgrow(Math.max((2 * data.length), (3 * index) / 2));\n\n\t\treturn data[index];\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag. This method ensures that the bag grows if the requested index is outside the bounds of the current backing array.", "call_func_name": ["java.lang.Math.max", "com.artemis.utils.Bag.grow"], "call_func_parameter": [["int", "int"], ["int"]], "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic int size() {\n\t\treturn size;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements in this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.getCapacity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCapacity() {\n\t\treturn data.length;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements the bag can hold without growing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.isIndexWithinBounds", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public boolean isIndexWithinBounds(int index) {\n\t\treturn index < getCapacity();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the internal storage supports this index.", "call_func_name": ["com.artemis.utils.Bag.getCapacity"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.utils.Bag.getCapacity": "Returns the number of elements the bag can hold without growing."}, {"com.artemis.utils.Bag.getCapacity": "Returns the number of elements the bag can hold without growing."}]}, {"index": "128", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic boolean isEmpty() {\n\t\treturn size == 0;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this bag contains no elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.add", "methodParameterType": "E#", "methodParameterName": "e#", "methodBody": "public void add(E e) {\n\t\t// is size greater than capacity increase capacity\n\t\tif (size == data.length)\n\t\t\tgrow(data.length * 2);\n\n\t\tdata[size++] = e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.set", "methodParameterType": "int#E#", "methodParameterName": "index#e#", "methodBody": "public void set(int index, E e) {\n\t\tif(index >= data.length)\n\t\t\tgrow(max((2 * data.length), index + 1));\n\n\t\tsize = Math.max(size, index + 1);\n\t\tdata[index] = e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set element at specified index in the bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.unsafeSet", "methodParameterType": "int#E#", "methodParameterName": "index#e#", "methodBody": "public void unsafeSet(int index, E e) {\n\t\tdata[index] = e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<em>Unsafe method.</em> Sets element at specified index in the bag, without updating size. Internally used by artemis when operation is known to be safe.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.grow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tprivate void grow() {\n\t\tgrow(data.length * 2);\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increase the capacity of the bag.", "call_func_name": ["com.artemis.utils.Bag.grow"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void ensureCapacity(int index) {\n\t\tif(index >= data.length) {\n\t\t\tgrow(index + 1);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Check if an item, if added at the given item will fit into the bag. <p> If not, the bag capacity will be increased to hold an item at the index. </p> <p>yeah, sorry, it's weird, but we don't want to change existing change behavior</p>", "call_func_name": ["com.artemis.utils.Bag.grow"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.clear", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void clear() {\n\t\tArrays.fill(data, 0, size, null);\n\t\tsize = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>", "call_func_name": ["java.util.Arrays.fill"], "call_func_parameter": [["java.lang.Object[]", "int", "int", "java.lang.Object"]], "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.addAll", "methodParameterType": "ImmutableBag<E>#", "methodParameterName": "items#", "methodBody": "public void addAll(ImmutableBag<E> items) {\n\t\tfor(int i = 0, s = items.size(); s > i; i++) {\n\t\t\tadd(items.get(i));\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Add all items into this bag.", "call_func_name": ["com.artemis.utils.ImmutableBag.size", "com.artemis.utils.ImmutableBag.get", "com.artemis.utils.Bag.add"], "call_func_parameter": [[""], ["int"], ["java.lang.Object"]], "passed_comments": [{"com.artemis.utils.ImmutableBag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.ImmutableBag.get": "Returns the element at the specified position in Bag."}]}, {"index": "136", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object[] getData() {\n\t\treturn data;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this bag's underlying array. <p> Use with care. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.getAllSet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitVector getAllSet() {\n\t\treturn allSet;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a BitVector containing bits of components the entity must all possess.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.getExclusionSet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitVector getExclusionSet() {\n\t\treturn exclusionSet;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a BitVector containing bits of components the entity must not possess.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.getOneSet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitVector getOneSet() {\n\t\treturn oneSet;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a BitVector containing bits of components of which the entity must possess atleast one.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.isInterested", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public boolean isInterested(Entity e){\n\t\treturn isInterested(e.getComponentBits());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this Aspect would accept the given Entity.", "call_func_name": ["com.artemis.Entity.getComponentBits", "com.artemis.Aspect.isInterested"], "call_func_parameter": [[""], ["com.artemis.utils.BitVector"]], "passed_comments": [{"com.artemis.Entity.getComponentBits": "Returns a BitVector instance containing bits of the components the entity possesses."}, {"com.artemis.Aspect.isInterested": "Returns whether this Aspect would accept the given set."}, {"com.artemis.Aspect.isInterested": "Returns whether this Aspect would accept the given set."}]}, {"index": "141", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.isInterested", "methodParameterType": "BitVector#", "methodParameterName": "componentBits#", "methodBody": "public boolean isInterested(BitVector componentBits){\n\t\t// Check if the entity possesses ALL of the components defined in the aspect.\n\t\tif(!allSet.isEmpty()) {\n\t\t\tfor (int i = allSet.nextSetBit(0); i >= 0; i = allSet.nextSetBit(i+1)) {\n\t\t\t\tif(!componentBits.get(i)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we are STILL interested,\n\t\t// Check if the entity possesses ANY of the exclusion components,\n\t\t// if it does then the system is not interested.\n\t\tif (!exclusionSet.isEmpty() && exclusionSet.intersects(componentBits))\n\t\t\treturn false;\n\n\t\t// If we are STILL interested,\n\t\t// Check if the entity possesses ANY of the components in the oneSet.\n\t\t// If so, the system is interested.\n\t\tif (!oneSet.isEmpty() && !oneSet.intersects(componentBits))\n\t\t\treturn false;\n\n\t\treturn true;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this Aspect would accept the given set.", "call_func_name": ["com.artemis.utils.BitVector.isEmpty", "com.artemis.utils.BitVector.nextSetBit", "com.artemis.utils.BitVector.get", "com.artemis.utils.BitVector.intersects"], "call_func_parameter": [[""], ["int"], ["int"], ["com.artemis.utils.BitVector"]], "passed_comments": [{"com.artemis.utils.BitVector.isEmpty": "@return true if this bitset contains no bits that are set to true"}, {"com.artemis.utils.BitVector.nextSetBit": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit exists then -1 is returned."}, {"com.artemis.utils.BitVector.get": "@param index the index of the bit"}, {"com.artemis.utils.BitVector.intersects": "Returns true if the specified BitVector has any bits set to true that are also set to true in this BitVector."}]}, {"index": "142", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.all", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tpublic static Aspect.Builder all() {\n\t\treturn new Builder().all();\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect that matches all entities.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.all", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "@SafeVarargs\n\tpublic static Aspect.Builder all(Class<? extends Component>... types) {\n\t\treturn new Builder().all(types);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess all of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.all", "methodParameterType": "Collection<Class<? extends Component>>#", "methodParameterName": "types#", "methodBody": "public static Aspect.Builder all(Collection<Class<? extends Component>> types) {\n\t\treturn new Builder().all(types);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess all of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.exclude", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "@SafeVarargs\n\tpublic static Aspect.Builder exclude(Class<? extends Component>... types) {\n\t\treturn new Builder().exclude(types);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Excludes all of the specified component types from the aspect. <p> A system will not be interested in an entity that possesses one of the specified exclusion component types. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.exclude", "methodParameterType": "Collection<Class<? extends Component>>#", "methodParameterName": "types#", "methodBody": "public static Aspect.Builder exclude(Collection<Class<? extends Component>> types) {\n\t\treturn new Builder().exclude(types);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Excludes all of the specified component types from the aspect. <p> A system will not be interested in an entity that possesses one of the specified exclusion component types. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.one", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "@SafeVarargs\n\tpublic static Aspect.Builder one(Class<? extends Component>... types) {\n\t\treturn new Builder().one(types);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess one of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.one", "methodParameterType": "Collection<Class<? extends Component>>#", "methodParameterName": "types#", "methodBody": "public static Aspect.Builder one(Collection<Class<? extends Component>> types) {\n\t\treturn new Builder().one(types);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess one of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/io/InputStreamHelper.java", "methodName": "com.artemis.io.InputStreamHelper.reset", "methodParameterType": "InputStream#", "methodParameterName": "is#", "methodBody": "public static void reset(InputStream is) throws IOException {\n\t\tensureIsByteArrayInputStream(is);\n\t\t((ByteArrayInputStream) is).reset();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Resets the buffer to the marked position.  The marked position is 0 unless another position was marked or an offset was specified in the constructor.", "call_func_name": ["com.artemis.io.InputStreamHelper.ensureIsByteArrayInputStream", "java.io.ByteArrayInputStream.reset"], "call_func_parameter": [["java.io.InputStream"], [""]], "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/com/artemis/io/InputStreamHelper.java", "methodName": "com.artemis.io.InputStreamHelper.isMarkSupported", "methodParameterType": "InputStream#", "methodParameterName": "is#", "methodBody": "public static boolean isMarkSupported(InputStream is) {\n\t\tensureIsByteArrayInputStream(is);\n\t\treturn ((ByteArrayInputStream) is).markSupported();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods. Whether or not <code>mark</code> and <code>reset</code> are supported is an invariant property of a particular input stream instance. The <code>markSupported</code> method of <code>InputStream</code> returns <code>false</code>.", "call_func_name": ["com.artemis.io.InputStreamHelper.ensureIsByteArrayInputStream", "java.io.ByteArrayInputStream.markSupported"], "call_func_parameter": [["java.io.InputStream"], [""]], "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/util/UUID.java", "methodName": "java.util.UUID.UUID", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private UUID() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "/", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/util/UUID.java", "methodName": "java.util.UUID.fromString", "methodParameterType": "String#", "methodParameterName": "uuidString#", "methodBody": "public static UUID fromString(String uuidString) {\n\t\t//TODO: Validation\n\t\t\n\t\tfinal UUID uuid = new UUID();\n\t\tuuid.value = uuidString;\n\t\t\n\t\treturn uuid;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param uuidString", "call_func_name": ["java.util.UUID.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/util/UUID.java", "methodName": "java.util.UUID.randomUUID", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static UUID randomUUID() {\n\t\treturn fromString(generateUUIDString());\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return", "call_func_name": ["java.util.UUID.generateUUIDString", "java.util.UUID.fromString"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"java.util.UUID.generateUUIDString": "Generate a RFC4122, version 4 ID. Example: \"92329D39-6F5C-4520-ABFC-AAB64544E172\""}, {"java.util.UUID.fromString": "@param uuidString"}]}, {"index": "154", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/util/UUID.java", "methodName": "java.util.UUID.generateUUIDString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static String generateUUIDString() {\n\t\tchar[] uuid = new char[36];\n\t\tint r;\n\n\t\t// rfc4122 requires these characters\n\t\tuuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n\t\tuuid[14] = '4';\n\n\t\t// Fill in random data.  At i==19 set the high bits of clock sequence as\n\t\t// per rfc4122, sec. 4.1.5\n\t\tfor (int i = 0; i < 36; i++) {\n\t\t\tif (uuid[i] == 0) {\n\t\t\t\tr = (int) (Math.random()*16);\n\t\t\t\tuuid[i] = CHARS[(i == 19) ? (r & 0x3) | 0x8 : r & 0xf];\n\t\t\t}\n\t\t}\n\t\treturn new String(uuid);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#CharacterLiteral#Assignment#Assignment#Assignment#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#ConditionalExpression#ArrayAccess#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)Assignment)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ConditionalExpression)ArrayAccess)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a RFC4122, version 4 ID. Example: \"92329D39-6F5C-4520-ABFC-AAB64544E172\"", "call_func_name": ["java.lang.Math.random", "java.lang.String.<init>"], "call_func_parameter": [[""], ["char[]"]], "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/util/BitSet.java", "methodName": "java.util.BitSet.hashCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic int hashCode() {\n\t\t// FNV constants\n\t\tfinal int fnvOffset = 0x811c9dc5;\n\t\tfinal int fnvPrime = 0x1000193;\n\n\t\t// initialize\n\t\tfinal int last = trimToSize(array);\n\t\tint hash = fnvOffset ^ last;\n\n\t\t// loop over the data\n\t\tfor (int i = 0; i <= last; i++) {\n\t\t\tint value = getWord(array, i);\n\t\t\t// hash one byte at a time using FNV1\n\t\t\thash = (hash * fnvPrime) ^ (value & 0xff);\n\t\t\thash = (hash * fnvPrime) ^ ((value >>> 8) & 0xff);\n\t\t\thash = (hash * fnvPrime) ^ ((value >>> 16) & 0xff);\n\t\t\thash = (hash * fnvPrime) ^ (value >>> 24);\n\t\t}\n\n\t\treturn hash;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This hash is different than the one described in Sun's documentation. The described hash uses 64 bit integers and that's not practical in JavaScript.", "call_func_name": ["java.util.BitSet.trimToSize", "java.util.BitSet.getWord"], "call_func_parameter": [["com.google.gwt.core.client.JsArrayInteger"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.ByteArrayOutputStream", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ByteArrayOutputStream() {\n\t\tbuf = new byte[32];\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ByteArrayOutputStream with a default size of 32 bytes. If more than 32 bytes are written to this instance, the underlying byte array will expand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.ByteArrayOutputStream", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public ByteArrayOutputStream(int size) {\n\t\tif (size >= 0) {\n\t\t\tbuf = new byte[size];\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"size < 0\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new  {@code ByteArrayOutputStream} with a default size of{@code size} bytes. If more than {@code size} bytes are written to thisinstance, the underlying byte array will expand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic void close() throws IOException {\n\t\t/**\n\t\t * Although the spec claims \"A closed stream cannot perform output\n\t\t * operations and cannot be reopened.\", this implementation must do\n\t\t * nothing.\n\t\t */\n\t\tsuper.close();\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SuperMethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Closes this stream. This releases system resources used for this stream.", "call_func_name": ["java.io.OutputStream.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.reset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void reset() {\n\t\tcount = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Resets this stream to the beginning of the underlying byte array. All subsequent writes will overwrite any bytes previously stored in this stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int size() {\n\t\treturn count;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the total number of bytes written to this stream so far.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.toByteArray", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] toByteArray() {\n\t\tbyte[] newArray = new byte[count];\n\t\tSystem.arraycopy(buf, 0, newArray, 0, count);\n\t\treturn newArray;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the contents of this ByteArrayOutputStream as a byte array. Any changes made to the receiver after returning will not be reflected in the byte array returned to the caller.", "call_func_name": ["java.lang.System.arraycopy"], "call_func_parameter": [["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String toString() {\n\t\treturn new String(buf, 0, count);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the contents of this ByteArrayOutputStream as a string. Any changes made to the receiver after returning will not be reflected in the string returned to the caller.", "call_func_name": ["java.lang.String.<init>"], "call_func_parameter": [["byte[]", "int", "int"]], "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.toString", "methodParameterType": "int#", "methodParameterName": "hibyte#", "methodBody": "@Deprecated\n\tpublic String toString(int hibyte) {\n\t\tchar[] newBuf = new char[size()];\n\t\tfor (int i = 0; i < newBuf.length; i++) {\n\t\t\tnewBuf[i] = (char) (((hibyte & 0xff) << 8) | (buf[i] & 0xff));\n\t\t}\n\t\treturn new String(newBuf);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the contents of this ByteArrayOutputStream as a string. Each byte {@code b} in this stream is converted to a character {@code c} using thefollowing function: {@code c == (char)(((hibyte & 0xff) << 8) | (b & 0xff))}. This method is deprecated and either  {@link #toString()} or {@link #toString(String)}should be used.", "call_func_name": ["java.io.ByteArrayOutputStream.size", "java.lang.String.<init>"], "call_func_parameter": [[""], ["char[]"]], "passed_comments": [{"java.io.ByteArrayOutputStream.size": "Returns the total number of bytes written to this stream so far."}]}, {"index": "164", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.toString", "methodParameterType": "String#", "methodParameterName": "charsetName#", "methodBody": "public String toString(String charsetName) throws UnsupportedEncodingException {\n\t\treturn new String(buf, 0, count, charsetName);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the contents of this ByteArrayOutputStream as a string converted according to the encoding declared in  {@code charsetName}.", "call_func_name": ["java.lang.String.<init>"], "call_func_parameter": [["byte[]", "int", "int", "java.lang.String"]], "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.write", "methodParameterType": "byte[]#int#int#", "methodParameterName": "buffer#offset#len#", "methodBody": "@Override\n\tpublic void write(byte[] buffer, int offset, int len) {\n\t\tcheckOffsetAndCount(buffer.length, offset, len);\n\t\tif (len == 0) {\n\t\t\treturn;\n\t\t}\n\t\texpand(len);\n\t\tSystem.arraycopy(buffer, offset, buf, this.count, len);\n\t\tthis.count += len;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes  {@code count} bytes from the byte array {@code buffer} starting atoffset  {@code index} to this stream.", "call_func_name": ["java.io.ByteArrayOutputStream.checkOffsetAndCount", "java.io.ByteArrayOutputStream.expand", "java.lang.System.arraycopy"], "call_func_parameter": [["int", "int", "int"], ["int"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.write", "methodParameterType": "int#", "methodParameterName": "oneByte#", "methodBody": "@Override\n\tpublic void write(int oneByte) {\n\t\tif (count == buf.length) {\n\t\t\texpand(1);\n\t\t}\n\t\tbuf[count++] = (byte) oneByte;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes the specified byte  {@code oneByte} to the OutputStream. Only thelow order byte of  {@code oneByte} is written.", "call_func_name": ["java.io.ByteArrayOutputStream.expand"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos18/artemis-odb/artemis-backend-gwt/artemis-gwt/src/main/java/com/artemis/backends/gwt/emu/java/io/ByteArrayOutputStream.java", "methodName": "java.io.ByteArrayOutputStream.writeTo", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "public void writeTo(OutputStream out) throws IOException {\n\t\tout.write(buf, 0, count);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Takes the contents of this stream and writes it to the output stream {@code out}.", "call_func_name": ["java.io.OutputStream.write"], "call_func_parameter": [["byte[]", "int", "int"]], "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos18/artemis-odb/artemis-build-tools/artemis-maven/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.execute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void execute()\n        throws MojoExecutionException\n    {\n        if ( lineLength <= 0 )\n        {\n            getLog().warn( \"The parameter 'lineLength' should be positive, using '80' as default.\" );\n            lineLength = DEFAULT_LINE_LENGTH;\n        }\n        if ( indentSize <= 0 )\n        {\n            getLog().warn( \"The parameter 'indentSize' should be positive, using '2' as default.\" );\n            indentSize = 2;\n        }\n\n        Document doc = build();\n\n        StringBuilder sb = new StringBuilder();\n        Node plugin = getSingleChild( doc, \"plugin\" );\n\n\n        String name = getValue( plugin, \"name\" );\n        String version = getValue( plugin, \"version\" );\n        String id = getValue( plugin, \"groupId\" ) + \":\" + getValue( plugin, \"artifactId\" ) + \":\" + version;\n        if ( isNotEmpty( name ) && !name.contains( id ) )\n        {\n            append( sb, name + \" \" + version, 0 );\n        }\n        else\n        {\n            if ( isNotEmpty( name ) )\n            {\n                append( sb, name, 0 );\n            }\n            else\n            {\n                append( sb, id, 0 );\n            }\n        }\n        append( sb, getValue( plugin, \"description\" ), 1 );\n        append( sb, \"\", 0 );\n\n        //<goalPrefix>plugin</goalPrefix>\n        String goalPrefix = getValue( plugin, \"goalPrefix\" );\n\n        Node mojos1 = getSingleChild( plugin, \"mojos\" );\n\n        List<Node> mojos = findNamedChild( mojos1, \"mojo\" );\n\n        if ( goal == null || goal.length() <= 0 )\n        {\n            append( sb, \"This plugin has \" + mojos.size() + ( mojos.size() > 1 ? \" goals:\" : \" goal:\" ), 0 );\n            append( sb, \"\", 0 );\n        }\n\n        for ( Node mojo : mojos )\n        {\n            writeGoal( sb, goalPrefix, (Element) mojo );\n        }\n\n        if ( getLog().isInfoEnabled() )\n        {\n            getLog().info( sb.toString() );\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.artemis.HelpMojo.getLog", "org.apache.maven.plugin.logging.Log.warn", "com.artemis.HelpMojo.build", "java.lang.StringBuilder.<init>", "com.artemis.HelpMojo.getSingleChild", "com.artemis.HelpMojo.getValue", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.artemis.HelpMojo.isNotEmpty", "java.lang.String.contains", "com.artemis.HelpMojo.append", "com.artemis.HelpMojo.findNamedChild", "java.lang.String.length", "java.util.List.size", "java.lang.StringBuilder.append", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.artemis.HelpMojo.writeGoal", "org.apache.maven.plugin.logging.Log.isInfoEnabled", "org.apache.maven.plugin.logging.Log.info"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""], [""], ["org.w3c.dom.Node", "java.lang.String"], ["org.w3c.dom.Node", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.CharSequence"], ["java.lang.StringBuilder", "java.lang.String", "int"], ["org.w3c.dom.Node", "java.lang.String"], [""], [""], ["int"], [""], [""], [""], ["java.lang.StringBuilder", "java.lang.String", "org.w3c.dom.Element"], [""], ["java.lang.CharSequence"]], "passed_comments": [{"com.artemis.HelpMojo.append": "Append a description to the buffer by respecting the indentSize and lineLength parameters. <b>Note</b>: The last character is always a new line."}, {"com.artemis.HelpMojo.append": "Append a description to the buffer by respecting the indentSize and lineLength parameters. <b>Note</b>: The last character is always a new line."}]}, {"index": "169", "file": "/root/repos/repos18/artemis-odb/artemis-build-tools/artemis-maven/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.repeat", "methodParameterType": "String#int#", "methodParameterName": "str#repeat#", "methodBody": "private static String repeat( String str, int repeat )\n    {\n        StringBuilder buffer = new StringBuilder( repeat * str.length() );\n\n        for ( int i = 0; i < repeat; i++ )\n        {\n            buffer.append( str );\n        }\n\n        return buffer.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Repeat a String <code>n</code> times to form a new string.</p>", "call_func_name": ["java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["int"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos18/artemis-odb/artemis-build-tools/artemis-maven/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.append", "methodParameterType": "StringBuilder#String#int#", "methodParameterName": "sb#description#indent#", "methodBody": "private void append( StringBuilder sb, String description, int indent )\n    {\n        for ( String line : toLines( description, indent, indentSize, lineLength ) )\n        {\n            sb.append( line ).append( '\\n' );\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Append a description to the buffer by respecting the indentSize and lineLength parameters. <b>Note</b>: The last character is always a new line.", "call_func_name": ["com.artemis.HelpMojo.toLines", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append"], "call_func_parameter": [["java.lang.String", "int", "int", "int"], [""], [""], [""], ["java.lang.String"], ["char"]], "passed_comments": [{"com.artemis.HelpMojo.toLines": "Splits the specified text into lines of convenient display length."}, {"com.artemis.HelpMojo.toLines": "Splits the specified text into lines of convenient display length."}]}, {"index": "171", "file": "/root/repos/repos18/artemis-odb/artemis-build-tools/artemis-maven/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.toLines", "methodParameterType": "String#int#int#int#", "methodParameterName": "text#indent#indentSize#lineLength#", "methodBody": "private static List<String> toLines( String text, int indent, int indentSize, int lineLength )\n    {\n        List<String> lines = new ArrayList<String>();\n\n        String ind = repeat( \"\\t\", indent );\n\n        String[] plainLines = text.split( \"(\\r\\n)|(\\r)|(\\n)\" );\n\n        for ( String plainLine : plainLines )\n        {\n            toLines( lines, ind + plainLine, indentSize, lineLength );\n        }\n\n        return lines;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Splits the specified text into lines of convenient display length.", "call_func_name": ["java.util.ArrayList.<init>", "com.artemis.HelpMojo.repeat", "java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.artemis.HelpMojo.toLines"], "call_func_parameter": [[""], ["java.lang.String", "int"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.util.List", "java.lang.String", "int", "int"]], "passed_comments": [{"com.artemis.HelpMojo.repeat": "<p>Repeat a String <code>n</code> times to form a new string.</p>"}, {"com.artemis.HelpMojo.repeat": "<p>Repeat a String <code>n</code> times to form a new string.</p>"}, {"com.artemis.HelpMojo.toLines": "Adds the specified line to the output sequence, performing line wrapping if necessary."}, {"com.artemis.HelpMojo.toLines": "Adds the specified line to the output sequence, performing line wrapping if necessary."}]}, {"index": "172", "file": "/root/repos/repos18/artemis-odb/artemis-build-tools/artemis-maven/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.toLines", "methodParameterType": "List<String>#String#int#int#", "methodParameterName": "lines#line#indentSize#lineLength#", "methodBody": "private static void toLines( List<String> lines, String line, int indentSize, int lineLength )\n    {\n        int lineIndent = getIndentLevel( line );\n        StringBuilder buf = new StringBuilder( 256 );\n\n        String[] tokens = line.split( \" +\" );\n\n        for ( String token : tokens )\n        {\n            if ( buf.length() > 0 )\n            {\n                if ( buf.length() + token.length() >= lineLength )\n                {\n                    lines.add( buf.toString() );\n                    buf.setLength( 0 );\n                    buf.append( repeat( \" \", lineIndent * indentSize ) );\n                }\n                else\n                {\n                    buf.append( ' ' );\n                }\n            }\n\n            for ( int j = 0; j < token.length(); j++ )\n            {\n                char c = token.charAt( j );\n                if ( c == '\\t' )\n                {\n                    buf.append( repeat( \" \", indentSize - buf.length() % indentSize ) );\n                }\n                else if ( c == '\\u00A0' )\n                {\n                    buf.append( ' ' );\n                }\n                else\n                {\n                    buf.append( c );\n                }\n            }\n        }\n        lines.add( buf.toString() );\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified line to the output sequence, performing line wrapping if necessary.", "call_func_name": ["com.artemis.HelpMojo.getIndentLevel", "java.lang.StringBuilder.<init>", "java.lang.String.split", "java.lang.StringBuilder.length", "java.lang.String.length", "java.lang.StringBuilder.toString", "java.util.List.add", "java.lang.StringBuilder.setLength", "com.artemis.HelpMojo.repeat", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.String.charAt"], "call_func_parameter": [["java.lang.String"], ["int"], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"], ["int"], ["java.lang.String", "int"], ["java.lang.String"], ["char"], ["int"]], "passed_comments": [{"com.artemis.HelpMojo.getIndentLevel": "Gets the indentation level of the specified line."}, {"com.artemis.HelpMojo.getIndentLevel": "Gets the indentation level of the specified line."}, {"com.artemis.HelpMojo.repeat": "<p>Repeat a String <code>n</code> times to form a new string.</p>"}, {"com.artemis.HelpMojo.repeat": "<p>Repeat a String <code>n</code> times to form a new string.</p>"}]}, {"index": "173", "file": "/root/repos/repos18/artemis-odb/artemis-build-tools/artemis-maven/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.getIndentLevel", "methodParameterType": "String#", "methodParameterName": "line#", "methodBody": "private static int getIndentLevel( String line )\n    {\n        int level = 0;\n        for ( int i = 0; i < line.length() && line.charAt( i ) == '\\t'; i++ )\n        {\n            level++;\n        }\n        for ( int i = level + 1; i <= level + 4 && i < line.length(); i++ )\n        {\n            if ( line.charAt( i ) == '\\t' )\n            {\n                level++;\n                break;\n            }\n        }\n        return level;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#PostfixExpression#ExpressionStatement#Block#ForStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the indentation level of the specified line.", "call_func_name": ["java.lang.String.length", "java.lang.String.charAt"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos18/artemis-odb/artemis-serialization/artemis-serializer/src/main/java/com/artemis/managers/WorldSerializationManager.java", "methodName": "com.artemis.managers.WorldSerializationManager.setSerializer", "methodParameterType": "ArtemisSerializer<?>#", "methodParameterName": "backend#", "methodBody": "public void setSerializer(ArtemisSerializer<?> backend) {\n\t\tthis.backend = backend;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Provide a serializer that can read or write data in your choice of format (likely some form of data file, e.g. JSON).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos18/artemis-odb/artemis-serialization/artemis-serializer/src/main/java/com/artemis/managers/WorldSerializationManager.java", "methodName": "com.artemis.managers.WorldSerializationManager.load", "methodParameterType": "InputStream#Class<T>#", "methodParameterName": "is#format#", "methodBody": "public <T extends SaveFileFormat> T load(InputStream is, Class<T> format) {\n\t\tif (alwaysLoadStreamMemory || !InputStreamHelper.isMarkSupported(is)) {\n\t\t\ttry {\n\t\t\t\tbyte[] buf = byteBuffer();\n\t\t\t\tByteArrayOutputStream baos = byteArrayOutputStream();\n\t\t\t\tint read;\n\t\t\t\twhile ((read = is.read(buf)) != -1) {\n\t\t\t\t\tbaos.write(buf, 0, read);\n\t\t\t\t}\n\t\t\t\tis = new ByteArrayInputStream(baos.toByteArray());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(\"Error copying inputstream\", e);\n\t\t\t}\n\t\t}\n\t\treturn backend.load(is, format);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Loads data from an InputStream (usually a file) and provides a SaveFileFormat (or subclass) object that contains the deserialized data.", "call_func_name": ["com.artemis.io.InputStreamHelper.isMarkSupported", "com.artemis.managers.WorldSerializationManager.byteBuffer", "com.artemis.managers.WorldSerializationManager.byteArrayOutputStream", "java.io.InputStream.read", "java.io.ByteArrayOutputStream.write", "java.io.ByteArrayOutputStream.toByteArray", "java.io.ByteArrayInputStream.<init>", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.io.InputStream"], [""], [""], ["byte[]"], ["byte[]", "int", "int"], [""], ["byte[]"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.artemis.io.InputStreamHelper.isMarkSupported": "Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods. Whether or not <code>mark</code> and <code>reset</code> are supported is an invariant property of a particular input stream instance. The <code>markSupported</code> method of <code>InputStream</code> returns <code>false</code>."}, {"com.artemis.io.InputStreamHelper.isMarkSupported": "Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods. Whether or not <code>mark</code> and <code>reset</code> are supported is an invariant property of a particular input stream instance. The <code>markSupported</code> method of <code>InputStream</code> returns <code>false</code>."}, {"java.io.ByteArrayOutputStream.write": "Writes  {@code count} bytes from the byte array {@code buffer} starting atoffset  {@code index} to this stream."}, {"java.io.ByteArrayOutputStream.toByteArray": "Returns the contents of this ByteArrayOutputStream as a byte array. Any changes made to the receiver after returning will not be reflected in the byte array returned to the caller."}]}, {"index": "176", "file": "/root/repos/repos18/artemis-odb/artemis-serialization/artemis-serializer/src/main/java/com/artemis/managers/WorldSerializationManager.java", "methodName": "com.artemis.managers.WorldSerializationManager.save", "methodParameterType": "OutputStream#SaveFileFormat#", "methodParameterName": "out#format#", "methodBody": "public void save(OutputStream out, SaveFileFormat format) {\n\t\tif (backend == null) {\n\t\t\tthrow new SerializationException(\"Missing ArtemisSerializer, see #setSerializer.\");\n\t\t}\n\n\t\tworld.inject(format);\n\t\tbackend.save(out, format);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@throws SerializationException if {@link ArtemisSerializer} was not set", "call_func_name": ["com.artemis.io.SerializationException.<init>", "com.artemis.World.inject"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.artemis.World.inject": "Inject dependencies on object. <p/> Immediately perform dependency injection on the target, even if the target isn't of an Artemis class. <p/> If you want to specify nonstandard dependencies to inject, use {@link com.artemis.WorldConfiguration#register(String,Object)} instead, orconfigure an  {@link com.artemis.injection.Injector}<p/> If you want a non-throwing alternative, use  {@link #inject(Object,boolean)}"}]}, {"index": "177", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Manager.java", "methodName": "com.artemis.Manager.added", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void added(Entity e) {\n\t\tthrow new RuntimeException(\"I shouldn't be here...\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Called when entity gets added to world.", "call_func_name": ["java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Manager.java", "methodName": "com.artemis.Manager.deleted", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void deleted(Entity e) {\n\t\tthrow new RuntimeException(\"... if it weren't for the tests.\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Called when entity gets deleted from world.", "call_func_name": ["java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Manager.java", "methodName": "com.artemis.Manager.setWorld", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "@Override\n\tprotected void setWorld(World world) {\n\t\tsuper.setWorld(world);\n\t\tif(implementsObserver(this, \"added\"))\n\t\t\tmethodFlags |= FLAG_INSERTED;\n\t\tif(implementsObserver(this, \"deleted\"))\n\t\t\tmethodFlags |= FLAG_REMOVED;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#ThisExpression#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#ThisExpression#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(StringLiteral)StringLiteral)MethodInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(StringLiteral)StringLiteral)MethodInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the world this system works on.", "call_func_name": ["com.artemis.BaseSystem.setWorld", "com.artemis.utils.reflect.ReflectionUtil.implementsObserver"], "call_func_parameter": [["com.artemis.World"], ["com.artemis.BaseSystem", "java.lang.String"]], "passed_comments": [{"com.artemis.BaseSystem.setWorld": "Set the world this system works on."}]}, {"index": "180", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Manager.java", "methodName": "com.artemis.Manager.registerManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void registerManager() {\n\t\tworld.getAspectSubscriptionManager()\n\t\t\t\t.get(all())\n\t\t\t\t.addSubscriptionListener(new EntitySubscription.SubscriptionListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void inserted(IntBag entities) {\n\t\t\t\t\t\tadded(entities);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void removed(IntBag entities) {\n\t\t\t\t\t\tdeleted(entities);\n\t\t\t\t\t}\n\t\t\t\t});\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Hack to register manager to right subscription", "call_func_name": ["com.artemis.World.getAspectSubscriptionManager", "com.artemis.Aspect.all"], "call_func_parameter": [[""], [""]], "passed_comments": [{"com.artemis.World.getAspectSubscriptionManager": "Returns the manager responsible for creating and maintaining {@link EntitySubscription subscriptions} in the world."}, {"com.artemis.Aspect.all": "Returns an aspect that matches all entities."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect that matches all entities."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}]}, {"index": "181", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Manager.java", "methodName": "com.artemis.Manager.processSystem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tprotected final void processSystem() {}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Managers are not interested in processing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/AspectSubscriptionManager.java", "methodName": "com.artemis.AspectSubscriptionManager.get", "methodParameterType": "Aspect.Builder#", "methodParameterName": "builder#", "methodBody": "public EntitySubscription get(Aspect.Builder builder) {\n\t\tEntitySubscription subscription = subscriptionMap.get(builder);\n\t\treturn (subscription != null) ? subscription : createSubscription(builder);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Gets the entity subscription for the  {@link Aspect}. Subscriptions are only created once per aspect.</p> Be careful when calling this within  {@link BaseSystem#processSystem()}. If the subscription does not exist yet, the newly created subscription will reflect all the chances made by the currently processing system, NOT the state before the system started processing. This might cause the system to behave differently when run the first time (as subsequent calls won't have this issue). See https://github.com/junkdog/artemis-odb/issues/551", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/AspectSubscriptionManager.java", "methodName": "com.artemis.AspectSubscriptionManager.process", "methodParameterType": "BitVector#BitVector#", "methodParameterName": "changedBits#deletedBits#", "methodBody": "void process(BitVector changedBits, BitVector deletedBits) {\n\t\ttoEntityIntBags(changedBits, deletedBits);\n\n\t\t// note: processAll != process\n\t\tsubscriptions.get(0).processAll(changed, deleted);\n\n\t\tfor (int i = 1, s = subscriptions.size(); s > i; i++) {\n\t\t\tsubscriptions.get(i).process(changed, deleted);\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Informs all listeners of added, changedBits and deletedBits changes. Order of  {@link EntitySubscription.SubscriptionListener} can vary(typically ordinal, except for subscriptions created in process, initialize instead of setWorld). {@link com.artemis.EntitySubscription.SubscriptionListener#inserted(IntBag)}{@link com.artemis.EntitySubscription.SubscriptionListener#removed(IntBag)}", "call_func_name": ["com.artemis.AspectSubscriptionManager.toEntityIntBags", "com.artemis.utils.Bag.get", "com.artemis.EntitySubscription.processAll", "com.artemis.utils.Bag.size", "com.artemis.EntitySubscription.process"], "call_func_parameter": [["com.artemis.utils.BitVector", "com.artemis.utils.BitVector"], ["int"], ["com.artemis.utils.IntBag", "com.artemis.utils.IntBag"], [""], ["com.artemis.utils.IntBag", "com.artemis.utils.IntBag"]], "passed_comments": [{"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}]}, {"index": "184", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/AspectSubscriptionManager.java", "methodName": "com.artemis.AspectSubscriptionManager.getSubscriptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ImmutableBag<EntitySubscription> getSubscriptions() {\n\t\treturn subscriptions;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the active list of all current entity subscriptions. Meant to assist in tooling/debugging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentType.java", "methodName": "com.artemis.ComponentType.getIndex", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getIndex() {\n\t\treturn index;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentType.java", "methodName": "com.artemis.ComponentType.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<? extends Component> getType() {\n\t\treturn type;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@code Class} that this type represents.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.begin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void begin() {}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Called before system processing begins. <p> <b>Nota Bene:</b> Any entities created in this method won't become active until the next system starts processing or when a new processing rounds begins, whichever comes first. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.process", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final void process() {\n\t\tif(checkProcessing()) {\n\t\t\tbegin();\n\t\t\tprocessSystem();\n\t\t\tend();\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Process system. Does nothing if  {@link #checkProcessing()} is false or the systemis disabled.", "call_func_name": ["com.artemis.BaseSystem.checkProcessing", "com.artemis.BaseSystem.begin", "com.artemis.BaseSystem.processSystem", "com.artemis.BaseSystem.end"], "call_func_parameter": [[""], [""], [""], [""]], "passed_comments": [{"com.artemis.BaseSystem.checkProcessing": "Does the system desire processing. Useful when the system is enabled, but only occasionally needs to process. This only affects processing, and does not affect events or subscription lists."}, {"com.artemis.BaseSystem.begin": "Called before system processing begins. <p> <b>Nota Bene:</b> Any entities created in this method won't become active until the next system starts processing or when a new processing rounds begins, whichever comes first. </p>"}, {"com.artemis.BaseSystem.processSystem": "Process the system."}, {"com.artemis.BaseSystem.end": "Called after the systems has finished processing."}]}, {"index": "189", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.processSystem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract void processSystem();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Process the system.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.end", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void end() {}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Called after the systems has finished processing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.checkProcessing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"static-method\")\n\tprotected boolean checkProcessing() {\n\t\treturn true;\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Does the system desire processing. Useful when the system is enabled, but only occasionally needs to process. This only affects processing, and does not affect events or subscription lists.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void initialize() {}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Override to implement code that gets executed when systems are initialized. Note that artemis native types like systems, factories and component mappers are automatically injected by artemis.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.isEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEnabled() {\n\t\treturn world.invocationStrategy.isEnabled(this);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the system is enabled.", "call_func_name": ["com.artemis.SystemInvocationStrategy.isEnabled"], "call_func_parameter": [["com.artemis.BaseSystem"]], "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.setEnabled", "methodParameterType": "boolean#", "methodParameterName": "enabled#", "methodBody": "public void setEnabled(boolean enabled) {\n\t\tworld.invocationStrategy.setEnabled(this, enabled);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enabled systems run during  {@link #process()}. This only affects processing, and does not affect events or subscription lists. Systems are enabled by default.", "call_func_name": ["com.artemis.SystemInvocationStrategy.setEnabled"], "call_func_parameter": [["com.artemis.BaseSystem", "boolean"]], "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.setWorld", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "protected void setWorld(World world) {\n\t\tthis.world = world;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the world this system works on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.getWorld", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected World getWorld() {\n\t\treturn world;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the world associated with the manager.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseSystem.java", "methodName": "com.artemis.BaseSystem.dispose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void dispose() {}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "see  {@link World#dispose()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.ArchetypeBuilder", "methodParameterType": "Archetype#", "methodParameterName": "parent#", "methodBody": "public ArchetypeBuilder(Archetype parent) {\n\t\tclasses = new Bag<Class<? extends Component>>();\n\t\tif (parent == null)\n\t\t\treturn;\n\n\t\tparent.transmuter.getAdditions(classes);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs an archetype builder containing the composition of the specified parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.ArchetypeBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ArchetypeBuilder() {\n\t\tthis(null);\n\t}", "AST": "Javadoc#Modifier#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty archetype builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.add", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "type#", "methodBody": "public ArchetypeBuilder add(Class<? extends Component> type) {\n\t\tif (!classes.contains(type))\n\t\t\tclasses.add(type);\n\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensure this builder includes the specified component type.", "call_func_name": ["com.artemis.utils.Bag.contains", "com.artemis.utils.Bag.add"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.add", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "public ArchetypeBuilder add(Class<? extends Component>... types) {\n\t\tfor (int i = 0; types.length > i; i++) {\n\t\t\tClass<? extends Component> type = types[i];\n\t\t\t\n\t\t\tif (!classes.contains(type))\n\t\t\t\tclasses.add(type);\n\t\t}\n\t\t\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#ForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)ForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensure this builder includes the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.remove", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "type#", "methodBody": "public ArchetypeBuilder remove(Class<? extends Component> type) {\n\t\tclasses.remove(type);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove the specified component from this builder, if it is present (optional operation).", "call_func_name": ["com.artemis.utils.Bag.remove"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.remove", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "public ArchetypeBuilder remove(Class<? extends Component>... types) {\n\t\tfor (int i = 0; types.length > i; i++) {\n\t\t\tclasses.remove(types[i]);\n\t\t}\n\t\t\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove the specified component from this builder, if it is present (optional operation).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.build", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "public Archetype build(World world) {\n\t\treturn build(world, null);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new world specific instance of Archetype based on the current state.", "call_func_name": ["com.artemis.ArchetypeBuilder.build"], "call_func_parameter": [["com.artemis.World", "java.lang.String"]], "passed_comments": [{"com.artemis.ArchetypeBuilder.build": "Create a new world specific instance of Archetype based on the current state."}]}, {"index": "205", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.build", "methodParameterType": "World#String#", "methodParameterName": "world#name#", "methodBody": "public Archetype build(World world, String name) {\n\t\tComponentType[] types = resolveTypes(world);\n\n\t\tComponentManager cm = world.getComponentManager();\n\t\tComponentMapper[] mappers = new ComponentMapper[types.length];\n\t\tfor (int i = 0, s = mappers.length; s > i; i++) {\n\t\t\tmappers[i] = cm.getMapper(types[i].getType());\n\t\t}\n\n\t\tint compositionId = cm.compositionIdentity(bitset(types));\n\t\tif(name == null || name.isEmpty()){\n\t\t\tname = String.valueOf(compositionId);\n\t\t}\n\t\tTransmuteOperation operation =\n\t\t\tnew TransmuteOperation(compositionId, mappers, new ComponentMapper[0]);\n\n\t\treturn new Archetype(operation, compositionId, name);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new world specific instance of Archetype based on the current state.", "call_func_name": ["com.artemis.ArchetypeBuilder.resolveTypes", "com.artemis.World.getComponentManager", "com.artemis.ComponentType.getType", "com.artemis.ComponentManager.getMapper", "com.artemis.ArchetypeBuilder.bitset", "com.artemis.ComponentManager.compositionIdentity", "java.lang.String.isEmpty", "java.lang.String.valueOf"], "call_func_parameter": [["com.artemis.World"], [""], [""], ["java.lang.Class"], ["com.artemis.ComponentType[]"], ["com.artemis.utils.BitVector"], [""], ["int"]], "passed_comments": [{"com.artemis.ArchetypeBuilder.resolveTypes": "Converts java classes to component types."}, {"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.ComponentType.getType": "@return {@code Class} that this type represents."}, {"com.artemis.ComponentType.getType": "@return {@code Class} that this type represents."}, {"com.artemis.ArchetypeBuilder.bitset": "generate bitset mask of types."}, {"com.artemis.ComponentManager.compositionIdentity": "Fetches unique identifier for composition."}, {"com.artemis.ComponentManager.compositionIdentity": "Fetches unique identifier for composition."}]}, {"index": "206", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.bitset", "methodParameterType": "ComponentType[]#", "methodParameterName": "types#", "methodBody": "private static BitVector bitset(ComponentType[] types) {\n\t\tBitVector bs = new BitVector();\n\t\tfor (int i = 0; types.length > i; i++)\n\t\t\tbs.set(types[i].getIndex());\n\t\t\t\n\t\treturn bs;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "generate bitset mask of types.", "call_func_name": ["com.artemis.utils.BitVector.<init>", "com.artemis.ComponentType.getIndex", "com.artemis.utils.BitVector.set"], "call_func_parameter": [[""], [""], ["int"]], "passed_comments": [{"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}, {"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}, {"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}]}, {"index": "207", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArchetypeBuilder.java", "methodName": "com.artemis.ArchetypeBuilder.resolveTypes", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "private ComponentType[] resolveTypes(World world) {\n\t\tComponentTypeFactory tf = world.getComponentManager().typeFactory;\n\t\tComponentType[] types = new ComponentType[classes.size()];\n\t\tfor (int i = 0, s = classes.size(); s > i; i++)\n\t\t\ttypes[i] = tf.getTypeFor(classes.get(i));\n\t\t\n\t\treturn types;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts java classes to component types.", "call_func_name": ["com.artemis.World.getComponentManager", "com.artemis.utils.Bag.size", "com.artemis.utils.Bag.get", "com.artemis.ComponentTypeFactory.getTypeFor"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.Class"]], "passed_comments": [{"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.ComponentTypeFactory.getTypeFor": "Gets the component type for the given component class. <p> If no component type exists yet, a new one will be created and stored for later retrieval. </p>"}]}, {"index": "208", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.expectedEntityCount", "methodParameterType": "int#", "methodParameterName": "expectedEntityCount#", "methodBody": "public WorldConfiguration expectedEntityCount(int expectedEntityCount) {\n\t\tthis.expectedEntityCount = expectedEntityCount;\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Initializes array type containers with the value supplied.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.setInjector", "methodParameterType": "Injector#", "methodParameterName": "injector#", "methodBody": "public WorldConfiguration setInjector(Injector injector) {\n\t\tif (injector == null)\n\t\t\tthrow new NullPointerException(\"Injector must not be null\");\n\n\t\tthis.injector = injector;\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set Injector to handle all dependency injections.", "call_func_name": ["java.lang.NullPointerException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.setInvocationStrategy", "methodParameterType": "SystemInvocationStrategy#", "methodParameterName": "invocationStrategy#", "methodBody": "public WorldConfiguration setInvocationStrategy(SystemInvocationStrategy invocationStrategy) {\n\t\tif ( invocationStrategy == null ) throw new NullPointerException();\n\t\tthis.invocationStrategy = invocationStrategy;\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set strategy for invoking systems on  {@link World#process()}.", "call_func_name": ["java.lang.NullPointerException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.register", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "public WorldConfiguration register(Object o) {\n\t\treturn register(o.getClass().getName(), o);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Manually register object for injection by type. Explicitly annotate to be injected fields with <code>@Wire</code>. A class level <code>@Wire</code> annotation is not enough. Since objects are injected by type, this method is limited to one object per type. Use  {@link #register(String,Object)} to register multiple objects of the same type.Not required for systems.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getName", "com.artemis.WorldConfiguration.register"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.artemis.WorldConfiguration.register": "Manually register object for injection by name. Explicitly annotate to be injected fields with <code>@Wire(name=\"myName\")</code>. A class level <code>@Wire</code> annotation is not enough. Not required for systems."}]}, {"index": "212", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.register", "methodParameterType": "String#Object#", "methodParameterName": "name#o#", "methodBody": "public WorldConfiguration register(String name, Object o) {\n\t\tinjectables.put(name, o);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Manually register object for injection by name. Explicitly annotate to be injected fields with <code>@Wire(name=\"myName\")</code>. A class level <code>@Wire</code> annotation is not enough. Not required for systems.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.setSystem", "methodParameterType": "Class<? extends BaseSystem>#", "methodParameterName": "system#", "methodBody": "public WorldConfiguration setSystem(Class<? extends BaseSystem> system) {\n\t\ttry {\n\t\t\treturn setSystem(ClassReflection.newInstance(system));\n\t\t} catch (ReflectionException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Adds a system to this world that will be processed by {@link World#process()}.", "call_func_name": ["com.artemis.utils.Bag.add", "java.lang.Object.getClass", "java.util.Set.add", "java.lang.Class.getSimpleName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.reflect.ClassReflection.newInstance": "Creates a new instance of the class represented by the supplied Class."}, {"com.artemis.utils.reflect.ClassReflection.newInstance": "Creates a new instance of the class represented by the supplied Class."}, {"com.artemis.WorldConfiguration.setSystem": "Adds a system to this world that will be processed by {@link World#process()}."}]}, {"index": "214", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.setSystem", "methodParameterType": "T#", "methodParameterName": "system#", "methodBody": "public <T extends BaseSystem> WorldConfiguration setSystem(T system) {\n\t\tsystems.add(system);\n\n\t\tif (!registered.add(system.getClass())) {\n\t\t\tString name = system.getClass().getSimpleName();\n\t\t\tthrow new RuntimeException(name + \" already added to \" + getClass().getSimpleName());\n\t\t}\n\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Will add a system to this world.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.isAlwaysDelayComponentRemoval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAlwaysDelayComponentRemoval() {\n\t\treturn alwaysDelayComponentRemoval;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delay component removal until all subscriptions have been notified. Extends the lifecycle of ALL component types, ensuring removed instances are retrievable until all  {@link EntitySubscription.SubscriptionListener#removed(IntBag) listeners} have been notified - regardlessof removal method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfiguration.java", "methodName": "com.artemis.WorldConfiguration.setAlwaysDelayComponentRemoval", "methodParameterType": "boolean#", "methodParameterName": "value#", "methodBody": "public void setAlwaysDelayComponentRemoval(boolean value) {\n\t\tthis.alwaysDelayComponentRemoval = value;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delay component removal until all subscriptions have been notified. Extends the lifecycle of ALL component types, ensuring removed instances are retrievable until all  {@link EntitySubscription.SubscriptionListener#removed(IntBag) listeners} have been notified - regardlessof removal method. Has a slight performance cost.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySubscription.java", "methodName": "com.artemis.EntitySubscription.getEntities", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public IntBag getEntities() {\n        if (entities.isEmpty() && !activeEntityIds.isEmpty())\n            rebuildCompressedActives();\n\n        return entities;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a reference to the bag holding all matched entities. <p><b>Warning: </b> Never remove elements from the bag, as this will lead to undefined behavior.</p>", "call_func_name": ["com.artemis.utils.IntBag.isEmpty", "com.artemis.utils.BitVector.isEmpty", "com.artemis.EntitySubscription.rebuildCompressedActives"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"com.artemis.utils.IntBag.isEmpty": "Returns true if this bag contains no elements."}, {"com.artemis.utils.BitVector.isEmpty": "@return true if this bitset contains no bits that are set to true"}]}, {"index": "218", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySubscription.java", "methodName": "com.artemis.EntitySubscription.getActiveEntityIds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitVector getActiveEntityIds() {\n        return activeEntityIds;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the bitset tracking all matched entities. <p><b>Warning: </b> Never toggle bits in the bitset, as this <i>may</i> lead to erroneously added or removed entities.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySubscription.java", "methodName": "com.artemis.EntitySubscription.getAspect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Aspect getAspect() {\n        return extra.aspect;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return aspect used for matching entities to subscription.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySubscription.java", "methodName": "com.artemis.EntitySubscription.getAspectBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Aspect.Builder getAspectBuilder() {\n        return extra.aspectReflection;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return aspect builder used for matching entities to subscription.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySubscription.java", "methodName": "com.artemis.EntitySubscription.processComponentIdentity", "methodParameterType": "int#BitVector#", "methodParameterName": "id#componentBits#", "methodBody": "void processComponentIdentity(int id, BitVector componentBits) {\n        aspectCache.ensureCapacity(id);\n        aspectCache.set(id, extra.aspect.isInterested(componentBits));\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "A new unique component composition detected, check if this subscription's aspect is interested in it.", "call_func_name": ["com.artemis.utils.BitVector.ensureCapacity", "com.artemis.Aspect.isInterested", "com.artemis.utils.BitVector.set"], "call_func_parameter": [["int"], ["com.artemis.utils.BitVector"], ["int", "boolean"]], "passed_comments": [{"com.artemis.utils.BitVector.ensureCapacity": "Grows the backing array (<code>long[]</code>) so that it can hold the requested bits. Mostly applicable when relying on the <code>unsafe</code> methods, including  {@link #unsafeGet(int)} and {@link #unsafeClear(int)}."}, {"com.artemis.Aspect.isInterested": "Returns whether this Aspect would accept the given set."}, {"com.artemis.Aspect.isInterested": "Returns whether this Aspect would accept the given set."}, {"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}]}, {"index": "222", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySubscription.java", "methodName": "com.artemis.EntitySubscription.addSubscriptionListener", "methodParameterType": "SubscriptionListener#", "methodParameterName": "listener#", "methodBody": "public void addSubscriptionListener(SubscriptionListener listener) {\n        extra.listeners.add(listener);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add listener interested in changes to the subscription.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySubscription.java", "methodName": "com.artemis.EntitySubscription.removeSubscriptionListener", "methodParameterType": "SubscriptionListener#", "methodParameterName": "listener#", "methodBody": "public void removeSubscriptionListener(SubscriptionListener listener) {\n        extra.listeners.remove(listener);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Remove previously registered listener.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "224", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Archetype.java", "methodName": "com.artemis.Archetype.Archetype", "methodParameterType": "EntityTransmuter.TransmuteOperation#int#String#", "methodParameterName": "transmuter#compositionId#name#", "methodBody": "Archetype(EntityTransmuter.TransmuteOperation transmuter, int compositionId, String name) {\n        this.transmuter = transmuter;\n        this.compositionId = compositionId;\n        this.name = name;\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param transmuter    Desired composition of derived components.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityTransmuterFactory.java", "methodName": "com.artemis.EntityTransmuterFactory.EntityTransmuterFactory", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "public EntityTransmuterFactory(World world) {\n\t\tthis.world = world;\n\t\ttypes = world.getComponentManager().typeFactory;\n\t\tadditions = new BitVector();\n\t\tremovals = new BitVector();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prepare new builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityTransmuterFactory.java", "methodName": "com.artemis.EntityTransmuterFactory.add", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "component#", "methodBody": "public EntityTransmuterFactory add(Class<? extends Component> component) {\n\t\tint index = types.getIndexFor(component);\n\t\tadditions.set(index, true);\n\t\tremovals.set(index, false);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Component to add upon transmutation. Overwrites and retires if component exists!", "call_func_name": ["com.artemis.ComponentTypeFactory.getIndexFor", "com.artemis.utils.BitVector.set"], "call_func_parameter": [["java.lang.Class"], ["int", "boolean"]], "passed_comments": [{"com.artemis.ComponentTypeFactory.getIndexFor": "Get the index of the component type of given component class."}, {"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}]}, {"index": "227", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityTransmuterFactory.java", "methodName": "com.artemis.EntityTransmuterFactory.remove", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "component#", "methodBody": "public EntityTransmuterFactory remove(Class<? extends Component> component) {\n\t\tint index = types.getIndexFor(component);\n\t\tadditions.set(index, false);\n\t\tremovals.set(index, true);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Component to remove upon transmutation. Does nothing if missing.", "call_func_name": ["com.artemis.ComponentTypeFactory.getIndexFor", "com.artemis.utils.BitVector.set"], "call_func_parameter": [["java.lang.Class"], ["int", "boolean"]], "passed_comments": [{"com.artemis.ComponentTypeFactory.getIndexFor": "Get the index of the component type of given component class."}, {"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}]}, {"index": "228", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityTransmuterFactory.java", "methodName": "com.artemis.EntityTransmuterFactory.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EntityTransmuter build() {\n\t\treturn new EntityTransmuter(world, additions, removals);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build instance", "call_func_name": ["com.artemis.EntityTransmuter.<init>"], "call_func_parameter": [["com.artemis.World", "com.artemis.utils.BitVector", "com.artemis.utils.BitVector"]], "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/InvocationStrategy.java", "methodName": "com.artemis.InvocationStrategy.process", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected void process() {\n        BaseSystem[] systemsData = systems.getData();\n        for (int i = 0, s = systems.size(); s > i; i++) {\n            if (disabled.get(i))\n                continue;\n\n            updateEntityStates();\n            systemsData[i].process();\n        }\n\n        updateEntityStates();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ContinueStatement#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ContinueStatement)ContinueStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Processes all systems in order. <p> Should guarantee artemis is in a sane state using calls to #updateEntityStates before each call to a system, and after the last system has been called, or if no systems have been called at all.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "230", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BatchChangeProcessor.java", "methodName": "com.artemis.BatchChangeProcessor.obtainEditor", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "EntityEdit obtainEditor(int entityId) {\n\t\tint size = edited.size();\n\t\tif (size != 0 && edited.get(size - 1).getEntityId() == entityId)\n\t\t\treturn edited.get(size - 1);\n\n\t\tEntityEdit edit = entityEdit();\n\t\tedited.add(edit);\n\n\t\tedit.entityId = entityId;\n\n\t\treturn edit;\n\t}", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get entity editor.", "call_func_name": ["com.artemis.WildBag.size", "com.artemis.WildBag.get", "com.artemis.EntityEdit.getEntityId", "com.artemis.BatchChangeProcessor.entityEdit", "com.artemis.WildBag.add"], "call_func_parameter": [[""], ["int"], [""], [""], ["java.lang.Object"]], "passed_comments": [{"com.artemis.EntityEdit.getEntityId": "Get target entity id of entity edits."}]}, {"index": "231", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.getFor", "methodParameterType": "Class<T>#World#", "methodParameterName": "type#world#", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Component> BaseComponentMapper<T> getFor(Class<T> type, World world) {\n\t\treturn world.getMapper(type);\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a component mapper for this type of components.", "call_func_name": ["com.artemis.World.getMapper"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": [{"com.artemis.World.getMapper": "Retrieves a ComponentMapper instance for fast retrieval of components from entities. Odb automatically injects component mappers into systems, calling this method is usually not required.,"}]}, {"index": "232", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.get", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public A get(Entity e) {\n\t\treturn get(e.getId());\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fast but unsafe retrieval of a component for this entity. This method trades performance for safety. User is expected to avoid calling this method on recently (in same system) removed components or invalid entity ids. Might return null, throw  {@link ArrayIndexOutOfBoundsException}or a partially recycled component if called on in-system removed components. Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener.", "call_func_name": ["com.artemis.Entity.getId", "com.artemis.BaseComponentMapper.get"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.BaseComponentMapper.get": "Fast but unsafe retrieval of a component for this entity. This method trades performance for safety. User is expected to avoid calling this method on recently (in same system) removed components or invalid entity ids. Might return null, throw  {@link ArrayIndexOutOfBoundsException}or a partially recycled component if called on in-system removed components. Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener."}]}, {"index": "233", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.get", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public abstract A get(int entityId);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Fast but unsafe retrieval of a component for this entity. This method trades performance for safety. User is expected to avoid calling this method on recently (in same system) removed components or invalid entity ids. Might return null, throw  {@link ArrayIndexOutOfBoundsException}or a partially recycled component if called on in-system removed components. Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.has", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public boolean has(Entity e) {\n\t\treturn has(e.getId());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the entity has this type of component.", "call_func_name": ["com.artemis.Entity.getId", "com.artemis.BaseComponentMapper.has"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}]}, {"index": "235", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.create", "methodParameterType": "Entity#", "methodParameterName": "entity#", "methodBody": "public A create(Entity entity) {\n\t\treturn create(entity.getId());\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create component for this entity. Will avoid creation if component preexists.", "call_func_name": ["com.artemis.Entity.getId", "com.artemis.BaseComponentMapper.create"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}]}, {"index": "236", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.remove", "methodParameterType": "Entity#", "methodParameterName": "entity#", "methodBody": "public void remove(Entity entity) {\n\t\tremove(entity.getId());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Remove component from entity. Does nothing if already removed.", "call_func_name": ["com.artemis.Entity.getId", "com.artemis.BaseComponentMapper.remove"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}]}, {"index": "237", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.getSafe", "methodParameterType": "int#A#", "methodParameterName": "entityId#fallback#", "methodBody": "public A getSafe(int entityId, A fallback) {\n\t\tfinal A c = get(entityId);\n\t\treturn (c != null) ? c : fallback;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fast and safe retrieval of a component for this entity. If the entity does not have this component then fallback is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "238", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.set", "methodParameterType": "int#boolean#", "methodParameterName": "entityId#value#", "methodBody": "public A set(int entityId, boolean value) {\n\t\tif ( value ) {\n\t\t\treturn create(entityId);\n\t\t} else {\n\t\t\tremove(entityId);\n\t\t\treturn null;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create or remove a component from an entity. Does nothing if already removed or created respectively.", "call_func_name": ["com.artemis.BaseComponentMapper.create", "com.artemis.BaseComponentMapper.remove"], "call_func_parameter": [["int"], ["int"]], "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.set", "methodParameterType": "Entity#boolean#", "methodParameterName": "entity#value#", "methodBody": "public A set(Entity entity, boolean value) {\n\t\treturn set(entity.getId(), value);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create or remove a component from an entity. Does nothing if already removed or created respectively.", "call_func_name": ["com.artemis.Entity.getId", "com.artemis.BaseComponentMapper.set"], "call_func_parameter": [[""], ["int", "boolean"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.BaseComponentMapper.set": "Create or remove a component from an entity. Does nothing if already removed or created respectively."}]}, {"index": "240", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.getSafe", "methodParameterType": "Entity#A#", "methodParameterName": "entity#fallback#", "methodBody": "public A getSafe(Entity entity, A fallback) {\n\t\treturn getSafe(entity.getId(), fallback);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fast and safe retrieval of a component for this entity. If the entity does not have this component then fallback is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseComponentMapper.java", "methodName": "com.artemis.BaseComponentMapper.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ComponentType getType() {\n\t\treturn type;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ComponentType of this ComponentMapper. see  {@link ComponentMapper#type}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public WorldConfiguration build() {\n        appendPlugins();\n        final WorldConfiguration config = new WorldConfiguration();\n        registerSystems(config);\n        registerFieldResolvers(config);\n        registerInvocationStrategies(config);\n        config.setAlwaysDelayComponentRemoval(alwaysDelayComponentRemoval);\n        reset();\n        return config;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Assemble world with systems. <p/> Deprecated: World Configuration", "call_func_name": ["com.artemis.WorldConfigurationBuilder.appendPlugins", "com.artemis.WorldConfiguration.<init>", "com.artemis.WorldConfigurationBuilder.registerSystems", "com.artemis.WorldConfigurationBuilder.registerFieldResolvers", "com.artemis.WorldConfigurationBuilder.registerInvocationStrategies", "com.artemis.WorldConfiguration.setAlwaysDelayComponentRemoval", "com.artemis.WorldConfigurationBuilder.reset"], "call_func_parameter": [[""], [""], ["com.artemis.WorldConfiguration"], ["com.artemis.WorldConfiguration"], ["com.artemis.WorldConfiguration"], ["boolean"], [""]], "passed_comments": [{"com.artemis.WorldConfigurationBuilder.appendPlugins": "Append plugin configurations. Supports plugins registering plugins."}, {"com.artemis.WorldConfigurationBuilder.registerSystems": "add systems to config."}, {"com.artemis.WorldConfigurationBuilder.registerFieldResolvers": "add custom field handler with resolvers."}, {"com.artemis.WorldConfiguration.setAlwaysDelayComponentRemoval": "Delay component removal until all subscriptions have been notified. Extends the lifecycle of ALL component types, ensuring removed instances are retrievable until all  {@link EntitySubscription.SubscriptionListener#removed(IntBag) listeners} have been notified - regardlessof removal method. Has a slight performance cost."}, {"com.artemis.WorldConfigurationBuilder.reset": "Reset builder"}]}, {"index": "243", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.appendPlugins", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void appendPlugins() {\n        int i = 0;\n\n        while (i < plugins.size()) {\n            activePlugin = plugins.get(i).item;\n            activePlugin.setup(this);\n            i++;\n        }\n        activePlugin = null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Append plugin configurations. Supports plugins registering plugins.", "call_func_name": ["com.artemis.utils.Bag.size", "com.artemis.utils.Bag.get", "com.artemis.ArtemisPlugin.setup"], "call_func_parameter": [[""], ["int"], ["com.artemis.WorldConfigurationBuilder"]], "passed_comments": [{"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.ArtemisPlugin.setup": "Register your plugin. Set up all your dependencies here. - systems - field resolvers - other plugins Always prefer to use  {@link WorldConfigurationBuilder#dependsOn} as it can handle repeated dependencies,as opposed to  {@link WorldConfigurationBuilder#with}, which will throw an exception upon attempting to add a pre-existing class. Artemis will consider abstract plugin dependencies fulfilled when a concrete subclass has been registered beforehand. To create a common API with different implementations (like logging-api and logging-libgdx) create a superclass plugin that is abstract, and one subclass for each implementation."}]}, {"index": "244", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.registerFieldResolvers", "methodParameterType": "WorldConfiguration#", "methodParameterName": "config#", "methodBody": "protected void registerFieldResolvers(WorldConfiguration config) {\n\n        if (fieldResolvers.size() > 0) {\n            Sort.instance().sort(fieldResolvers);\n            // instance default field handler\n            final FieldHandler fieldHandler = new FieldHandler(InjectionCache.sharedCache.get());\n\n            for (ConfigurationElement<? extends FieldResolver> configurationElement : fieldResolvers) {\n                fieldHandler.addFieldResolver(configurationElement.item);\n            }\n\n            config.setInjector(new CachedInjector().setFieldHandler(fieldHandler));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "add custom field handler with resolvers.", "call_func_name": ["com.artemis.utils.Bag.size", "com.artemis.utils.Sort.instance", "com.artemis.utils.Sort.sort", "com.artemis.injection.SharedInjectionCache.get", "com.artemis.injection.FieldHandler.<init>", "com.artemis.utils.Bag.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.artemis.injection.FieldHandler.addFieldResolver", "com.artemis.injection.CachedInjector.<init>", "com.artemis.injection.CachedInjector.setFieldHandler", "com.artemis.WorldConfiguration.setInjector"], "call_func_parameter": [[""], [""], ["com.artemis.utils.Bag"], [""], ["com.artemis.injection.InjectionCache"], [""], [""], [""], ["com.artemis.injection.FieldResolver"], [""], ["com.artemis.injection.FieldHandler"], ["com.artemis.injection.Injector"]], "passed_comments": [{"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Sort.instance": "Returns a Sort instance for convenience. Multiple threads must not use this instance at the same time."}, {"com.artemis.injection.FieldHandler.addFieldResolver": "Adds a  {@link FieldResolver} to this handler. Resolvers added first, will be used first for resolving fields,so the order of add operations is significant."}, {"com.artemis.WorldConfiguration.setInjector": "Set Injector to handle all dependency injections."}]}, {"index": "245", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.registerSystems", "methodParameterType": "WorldConfiguration#", "methodParameterName": "config#", "methodBody": "private void registerSystems(WorldConfiguration config) {\n        Sort.instance().sort(systems);\n        for (ConfigurationElement<? extends BaseSystem> configurationElement : systems) {\n            config.setSystem(configurationElement.item);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "add systems to config.", "call_func_name": ["com.artemis.utils.Sort.instance", "com.artemis.utils.Sort.sort", "com.artemis.utils.Bag.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.artemis.WorldConfiguration.setSystem"], "call_func_parameter": [[""], ["com.artemis.utils.Bag"], [""], [""], [""], ["com.artemis.BaseSystem"]], "passed_comments": [{"com.artemis.utils.Sort.instance": "Returns a Sort instance for convenience. Multiple threads must not use this instance at the same time."}, {"com.artemis.WorldConfiguration.setSystem": "Adds a system to this world that will be processed by {@link World#process()}."}]}, {"index": "246", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.reset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void reset() {\n        invocationStrategy = null;\n        systems = new Bag<>();\n        fieldResolvers = new Bag<>();\n        plugins = new Bag<>();\n        alwaysDelayComponentRemoval = false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reset builder", "call_func_name": ["com.artemis.utils.Bag.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.alwaysDelayComponentRemoval", "methodParameterType": "boolean#", "methodParameterName": "value#", "methodBody": "public WorldConfigurationBuilder alwaysDelayComponentRemoval(boolean value) {\n        this.alwaysDelayComponentRemoval = value;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delay component removal until all subscriptions have been notified. <p> Extends the lifecycle of ALL component types, ensuring removed instances are retrievable until all  {@link EntitySubscription.SubscriptionListener#removed(IntBag) listeners} have been notified - regardlessof removal method. <p> Has a slight performance cost.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.register", "methodParameterType": "FieldResolver#", "methodParameterName": "fieldResolvers#", "methodBody": "public WorldConfigurationBuilder register(FieldResolver... fieldResolvers) {\n        for (FieldResolver fieldResolver : fieldResolvers) {\n            this.fieldResolvers.add(ConfigurationElement.of(fieldResolver));\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add field resolver.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.register", "methodParameterType": "SystemInvocationStrategy#", "methodParameterName": "strategy#", "methodBody": "public WorldConfigurationBuilder register(SystemInvocationStrategy strategy) {\n        this.invocationStrategy = strategy;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add system invocation strategy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.dependsOn", "methodParameterType": "Class#", "methodParameterName": "types#", "methodBody": "public final WorldConfigurationBuilder dependsOn(Class... types) {\n        return dependsOn(Priority.NORMAL, types);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify dependency on systems/plugins. <p/> Managers track priority separate from system priority, and are always added before systems. <p> Artemis will consider abstract plugin dependencies fulfilled when a concrete subclass has been registered beforehand.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.dependsOn", "methodParameterType": "int#Class#", "methodParameterName": "priority#types#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public final WorldConfigurationBuilder dependsOn(int priority, Class... types) {\n        for (Class type : types) {\n            try {\n                switch (cache.getFieldClassType(type)) {\n                    case SYSTEM:\n                        dependsOnSystem(priority, type);\n                        break;\n                    default:\n                        if (ClassReflection.isAssignableFrom(ArtemisPlugin.class, type)) {\n                            if (priority != Priority.NORMAL) {\n                                throw new WorldConfigurationException(\"Priority not supported on plugins.\");\n                            }\n                            dependsOnPlugin(type);\n                        } else {\n                            throw new WorldConfigurationException(\"Unsupported type. Only supports systems.\");\n                        }\n                }\n            } catch (ReflectionException e) {\n                throw new WorldConfigurationException(\"Unable to instance \" + type + \" via reflection.\", e);\n            }\n        }\n        return this;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SwitchStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)SwitchStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify dependency on systems/plugins. <p/>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.with", "methodParameterType": "int#BaseSystem#", "methodParameterName": "priority#systems#", "methodBody": "public WorldConfigurationBuilder with(int priority, BaseSystem... systems) {\n        addSystems(priority, systems);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Register active system(s). Only one instance of each class is allowed. Use  {@link #dependsOn} from within plugins whenever possible.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "253", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.with", "methodParameterType": "BaseSystem#", "methodParameterName": "systems#", "methodBody": "public WorldConfigurationBuilder with(BaseSystem... systems) {\n        addSystems(Priority.NORMAL, systems);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Register active system(s). Only one instance of each class is allowed. Use  {@link #dependsOn} from within plugins whenever possible.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.with", "methodParameterType": "ArtemisPlugin#", "methodParameterName": "plugins#", "methodBody": "public WorldConfigurationBuilder with(ArtemisPlugin... plugins) {\n        addPlugins(plugins);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add plugins to world. <p/> Upon build plugins will be called to register dependencies. <p/> Only one instance of each class is allowed. Use  {@link #dependsOn} from within plugins whenever possible.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "255", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.addSystems", "methodParameterType": "int#BaseSystem[]#", "methodParameterName": "priority#systems#", "methodBody": "private void addSystems(int priority, BaseSystem[] systems) {\n        for (BaseSystem system : systems) {\n\n            if (containsType(this.systems, system.getClass())) {\n                throw new WorldConfigurationException(\"System of type \" + system.getClass() + \" registered twice. Only once allowed.\");\n            }\n\n            this.systems.add(new ConfigurationElement<BaseSystem>(system, priority));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "helper to queue systems for registration.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.WorldConfigurationBuilder.containsType", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.artemis.WorldConfigurationException.<init>", "com.artemis.ConfigurationElement.<init>", "com.artemis.utils.Bag.add"], "call_func_parameter": [[""], ["com.artemis.utils.Bag", "java.lang.Class"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object", "int"], ["java.lang.Object"]], "passed_comments": [{"com.artemis.WorldConfigurationBuilder.containsType": "Check if bag of registerables contains any of passed type."}]}, {"index": "256", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.containsType", "methodParameterType": "Bag#Class#", "methodParameterName": "items#type#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    private boolean containsType(Bag items, Class type) {\n        for (ConfigurationElement<?> registration : (Bag<ConfigurationElement<?>>) items) {\n            if (registration.itemType == type) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#CastExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)CastExpression(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if bag of registerables contains any of passed type.", "call_func_name": ["com.artemis.utils.Bag.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "257", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.anyAssignableTo", "methodParameterType": "Bag#Class#", "methodParameterName": "items#type#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    private boolean anyAssignableTo(Bag items, Class type) {\n        for (ConfigurationElement<?> registration : (Bag<ConfigurationElement<?>>) items) {\n            if (ClassReflection.isAssignableFrom(type, registration.itemType)) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#CastExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)CastExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if bag of registerables contains any of passed type.", "call_func_name": ["com.artemis.utils.Bag.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.artemis.utils.reflect.ClassReflection.isAssignableFrom"], "call_func_parameter": [[""], [""], [""], ["java.lang.Class", "java.lang.Class"]], "passed_comments": [{"com.artemis.utils.reflect.ClassReflection.isAssignableFrom": "Determines if the class or interface represented by first Class parameter is either the same as, or is a superclass or superinterface of, the class or interface represented by the second Class parameter."}, {"com.artemis.utils.reflect.ClassReflection.isAssignableFrom": "Determines if the class or interface represented by first Class parameter is either the same as, or is a superclass or superinterface of, the class or interface represented by the second Class parameter."}]}, {"index": "258", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WorldConfigurationBuilder.java", "methodName": "com.artemis.WorldConfigurationBuilder.addPlugins", "methodParameterType": "ArtemisPlugin[]#", "methodParameterName": "plugins#", "methodBody": "private void addPlugins(ArtemisPlugin[] plugins) {\n        for (ArtemisPlugin plugin : plugins) {\n\n            if (containsType(this.plugins, plugin.getClass())) {\n                throw new WorldConfigurationException(\"Plugin of type \" + plugin.getClass() + \" registered twice. Only once allowed.\");\n            }\n\n            this.plugins.add(ConfigurationElement.of(plugin));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Add new plugins.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.WorldConfigurationBuilder.containsType", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.artemis.WorldConfigurationException.<init>", "com.artemis.ConfigurationElement.of", "com.artemis.utils.Bag.add"], "call_func_parameter": [[""], ["com.artemis.utils.Bag", "java.lang.Class"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"com.artemis.WorldConfigurationBuilder.containsType": "Check if bag of registerables contains any of passed type."}]}, {"index": "259", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityTransmuter.java", "methodName": "com.artemis.EntityTransmuter.transmute", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public void transmute(int entityId) {\n\t\tif (!isValid(entityId)) return;\n\n\t\tTransmuteOperation operation = getOperation(entityId);\n\t\toperation.perform(entityId);\n\t\tentityToIdentity.unsafeSet(entityId, operation.compositionId);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Apply on target entity. Does nothing if entity has been scheduled for deletion.</p> <p>Transmuter will add components by replacing and retire pre-existing components.</p>", "call_func_name": ["com.artemis.EntityTransmuter.isValid", "com.artemis.EntityTransmuter.getOperation", "com.artemis.utils.ShortBag.unsafeSet"], "call_func_parameter": [["int"], ["int"], ["int", "short"]], "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityTransmuter.java", "methodName": "com.artemis.EntityTransmuter.transmute", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void transmute(Entity e) {\n\t\ttransmute(e.id);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Apply on target entity. Transmuter will add components by replacing and retire pre-existing components.", "call_func_name": ["com.artemis.EntityTransmuter.transmute"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.EntityTransmuter.transmute": "<p>Apply on target entity. Does nothing if entity has been scheduled for deletion.</p> <p>Transmuter will add components by replacing and retire pre-existing components.</p>"}]}, {"index": "261", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentTypeFactory.java", "methodName": "com.artemis.ComponentTypeFactory.getTypeFor", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "c#", "methodBody": "public ComponentType getTypeFor(Class<? extends Component> c) {\n\t\tComponentType type = componentTypes.get(c);\n\n\t\tif (type == null)\n\t\t\ttype = createComponentType(c);\n\n\t\treturn type;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the component type for the given component class. <p> If no component type exists yet, a new one will be created and stored for later retrieval. </p>", "call_func_name": ["java.util.IdentityHashMap.get", "com.artemis.ComponentTypeFactory.createComponentType"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentTypeFactory.java", "methodName": "com.artemis.ComponentTypeFactory.getTypeFor", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public ComponentType getTypeFor(int index) {\n\t\treturn types.get(index);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets component type by index. <p>", "call_func_name": ["com.artemis.utils.Bag.get"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}]}, {"index": "263", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentTypeFactory.java", "methodName": "com.artemis.ComponentTypeFactory.getIndexFor", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "c#", "methodBody": "public int getIndexFor(Class<? extends Component> c) {\n\t\treturn getTypeFor(c).getIndex();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the index of the component type of given component class.", "call_func_name": ["com.artemis.ComponentTypeFactory.getTypeFor", "com.artemis.ComponentType.getIndex"], "call_func_parameter": [["java.lang.Class"], [""]], "passed_comments": [{"com.artemis.ComponentTypeFactory.getTypeFor": "Gets the component type for the given component class. <p> If no component type exists yet, a new one will be created and stored for later retrieval. </p>"}, {"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}, {"com.artemis.ComponentType.getIndex": "Get the component type's index. Index is distinct for each  {@link World} instance,allowing for fast lookups."}]}, {"index": "264", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.GroupManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GroupManager() {\n        entitiesByGroup = new HashMap<>();\n        identitiesByGroup = new HashMap<>();\n        groupsByEntity = new HashMap<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new GroupManager instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.add", "methodParameterType": "Entity#String#", "methodParameterName": "e#group#", "methodBody": "public void add(Entity e, String group) {\n        Bag<Entity> entities = entitiesByGroup.get(group);\n        if (entities == null) {\n            entities = new Bag<>();\n            entitiesByGroup.put(group, entities);\n        }\n        IntBag identities = identitiesByGroup.get(group);\n        if (identities == null) {\n            identities = new IntBag();\n            identitiesByGroup.put(group, identities);\n        }\n        if (!entities.contains(e)) {\n            entities.add(e);\n            identities.add(e.getId());\n        }\n\n        Bag<String> groups = groupsByEntity.get(e);\n        if (groups == null) {\n            groups = new Bag<>();\n            groupsByEntity.put(e, groups);\n        }\n        if (!groups.contains(group)) {\n            groups.add(group);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the group of the entity.", "call_func_name": ["java.util.Map.get", "com.artemis.utils.Bag.<init>", "java.util.Map.put", "com.artemis.utils.IntBag.<init>", "com.artemis.utils.Bag.contains", "com.artemis.utils.Bag.add", "com.artemis.Entity.getId", "com.artemis.utils.IntBag.add"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object"], [""], ["int"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.utils.IntBag.add": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>"}]}, {"index": "266", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.add", "methodParameterType": "Entity#String#String#", "methodParameterName": "e#g1#g2#", "methodBody": "public void add(Entity e, String g1, String g2) {\n        add(e, g1);\n        add(e, g2);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the group of the entity.", "call_func_name": ["com.artemis.managers.GroupManager.add"], "call_func_parameter": [["com.artemis.Entity", "java.lang.String"]], "passed_comments": [{"com.artemis.managers.GroupManager.add": "Set the group of the entity."}, {"com.artemis.managers.GroupManager.add": "Set the group of the entity."}]}, {"index": "267", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.add", "methodParameterType": "Entity#String#String#String#", "methodParameterName": "e#g1#g2#g3#", "methodBody": "public void add(Entity e, String g1, String g2, String g3) {\n        add(e, g1);\n        add(e, g2);\n        add(e, g3);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the group of the entity.", "call_func_name": ["com.artemis.managers.GroupManager.add"], "call_func_parameter": [["com.artemis.Entity", "java.lang.String"]], "passed_comments": [{"com.artemis.managers.GroupManager.add": "Set the group of the entity."}, {"com.artemis.managers.GroupManager.add": "Set the group of the entity."}]}, {"index": "268", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.add", "methodParameterType": "Entity#String#", "methodParameterName": "e#groups#", "methodBody": "public void add(Entity e, String... groups) {\n        for (String group : groups) {\n            add(e, group);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Set the group of the entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "269", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.remove", "methodParameterType": "Entity#String#", "methodParameterName": "e#group#", "methodBody": "public void remove(Entity e, String group) {\n        final Bag<Entity> entities = entitiesByGroup.get(group);\n        if (entities != null) {\n            entities.remove(e);\n        }\n        final IntBag identities = identitiesByGroup.get(group);\n        if (identities != null) {\n            identities.removeValue(e.getId());\n        }\n\n        Bag<String> groups = groupsByEntity.get(e);\n        if (groups != null) {\n            groups.remove(group);\n            if (groups.size() == 0)\n                groupsByEntity.remove(e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Remove the entity from the specified group.", "call_func_name": ["java.util.Map.get", "com.artemis.utils.Bag.remove", "com.artemis.Entity.getId", "com.artemis.utils.IntBag.removeValue", "com.artemis.utils.Bag.size", "java.util.Map.remove"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], [""], ["int"], [""], ["java.lang.Object"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.utils.IntBag.removeValue": "Removes the first occurrence of the value from this IntBag, if it is present."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}]}, {"index": "270", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.remove", "methodParameterType": "Entity#String#String#", "methodParameterName": "e#g1#g2#", "methodBody": "public void remove(Entity e, String g1, String g2) {\n        remove(e, g1);\n        remove(e, g2);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the entity from the specified groups.", "call_func_name": ["com.artemis.managers.GroupManager.remove"], "call_func_parameter": [["com.artemis.Entity", "java.lang.String"]], "passed_comments": [{"com.artemis.managers.GroupManager.remove": "Remove the entity from the specified group."}, {"com.artemis.managers.GroupManager.remove": "Removes the entity from the specified groups"}]}, {"index": "271", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.remove", "methodParameterType": "Entity#String#String#String#", "methodParameterName": "e#g1#g2#g3#", "methodBody": "public void remove(Entity e, String g1, String g2, String g3) {\n        remove(e, g1);\n        remove(e, g2);\n        remove(e, g3);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the entity from the specified groups.", "call_func_name": ["com.artemis.managers.GroupManager.remove"], "call_func_parameter": [["com.artemis.Entity", "java.lang.String"]], "passed_comments": [{"com.artemis.managers.GroupManager.remove": "Remove the entity from the specified group."}, {"com.artemis.managers.GroupManager.remove": "Removes the entity from the specified groups"}]}, {"index": "272", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.remove", "methodParameterType": "Entity#String#", "methodParameterName": "e#groups#", "methodBody": "public void remove(Entity e, String... groups) {\n        for (String group : groups) {\n            remove(e, group);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Removes the entity from the specified groups", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "273", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.removeFromAllGroups", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void removeFromAllGroups(Entity e) {\n        Bag<String> groups = groupsByEntity.get(e);\n        if (groups == null)\n            return;\n        for (int i = 0, s = groups.size(); s > i; i++) {\n            Bag<Entity> entities = entitiesByGroup.get(groups.get(i));\n            if (entities != null) {\n                entities.remove(e);\n            }\n            IntBag identities = identitiesByGroup.get(groups.get(i));\n            if (identities != null) {\n                identities.removeValue(e.getId());\n            }\n        }\n        groupsByEntity.remove(e);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Remove the entity from all groups.", "call_func_name": ["java.util.Map.get", "com.artemis.utils.Bag.size", "com.artemis.utils.Bag.get", "com.artemis.utils.Bag.remove", "com.artemis.Entity.getId", "com.artemis.utils.IntBag.removeValue", "java.util.Map.remove"], "call_func_parameter": [["java.lang.Object"], [""], ["int"], ["java.lang.Object"], [""], ["int"], ["java.lang.Object"]], "passed_comments": [{"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.utils.IntBag.removeValue": "Removes the first occurrence of the value from this IntBag, if it is present."}]}, {"index": "274", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.getEntities", "methodParameterType": "String#", "methodParameterName": "group#", "methodBody": "public ImmutableBag<Entity> getEntities(String group) {\n        Bag<Entity> entities = entitiesByGroup.get(group);\n        if (entities == null) {\n            entities = new Bag<>();\n            entitiesByGroup.put(group, entities);\n        }\n        return entities;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all entities that belong to the provided group.", "call_func_name": ["java.util.Map.get", "com.artemis.utils.Bag.<init>", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.getGroups", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public ImmutableBag<String> getGroups(Entity e) {\n        Bag<String> groups = groupsByEntity.get(e);\n        return groups != null ? groups : EMPTY_BAG;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all groups the entity belongs to. An empty Bag is returned if the entity doesn't belong to any groups.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "276", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.isInAnyGroup", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public boolean isInAnyGroup(Entity e) {\n        return getGroups(e).size() > 0;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the entity belongs to any group.", "call_func_name": ["com.artemis.managers.GroupManager.getGroups", "com.artemis.utils.ImmutableBag.size"], "call_func_parameter": [["com.artemis.Entity"], [""]], "passed_comments": [{"com.artemis.managers.GroupManager.getGroups": "Get all groups the entity belongs to. An empty Bag is returned if the entity doesn't belong to any groups."}, {"com.artemis.utils.ImmutableBag.size": "Returns the number of elements in this bag."}]}, {"index": "277", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/GroupManager.java", "methodName": "com.artemis.managers.GroupManager.isInGroup", "methodParameterType": "Entity#String#", "methodParameterName": "e#group#", "methodBody": "public boolean isInGroup(Entity e, String group) {\n        if (group != null) {\n            Bag<String> bag = groupsByEntity.get(e);\n            if (bag != null) {\n                Object[] groups = bag.getData();\n                for (int i = 0, s = bag.size(); s > i; i++) {\n                    String g = (String) groups[i];\n                    if (group.equals(g)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the entity is in the supplied group.", "call_func_name": ["java.util.Map.get", "com.artemis.utils.Bag.getData", "com.artemis.utils.Bag.size", "java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.Object"]], "passed_comments": [{"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> <b>Use of this method requires typed instantiation, e.g. Bag<E>(Class<E>)</b> </p>"}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}]}, {"index": "278", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TeamManager.java", "methodName": "com.artemis.managers.TeamManager.TeamManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TeamManager() {\n\t\tplayersByTeam = new HashMap<String, Bag<String>>();\n\t\tteamByPlayer = new HashMap<String, String>();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TeamManager instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "279", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TeamManager.java", "methodName": "com.artemis.managers.TeamManager.getTeam", "methodParameterType": "String#", "methodParameterName": "player#", "methodBody": "public String getTeam(String player) {\n\t\treturn teamByPlayer.get(player);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The the name of the team the given player is in.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TeamManager.java", "methodName": "com.artemis.managers.TeamManager.setTeam", "methodParameterType": "String#String#", "methodParameterName": "player#team#", "methodBody": "public void setTeam(String player, String team) {\n\t\tremoveFromTeam(player);\n\t\t\n\t\tteamByPlayer.put(player, team);\n\t\t\n\t\tBag<String> players = playersByTeam.get(team);\n\t\tif(players == null) {\n\t\t\tplayers = new Bag<String>();\n\t\t\tplayersByTeam.put(team, players);\n\t\t}\n\t\tplayers.add(player);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the player's team. <p> Each player can only be in one team at a time. </p>", "call_func_name": ["com.artemis.managers.TeamManager.removeFromTeam", "java.util.Map.put", "java.util.Map.get", "com.artemis.utils.Bag.<init>", "com.artemis.utils.Bag.add"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": [{"com.artemis.managers.TeamManager.removeFromTeam": "Remove a player from his team."}]}, {"index": "281", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TeamManager.java", "methodName": "com.artemis.managers.TeamManager.getPlayers", "methodParameterType": "String#", "methodParameterName": "team#", "methodBody": "public ImmutableBag<String> getPlayers(String team) {\n\t\treturn playersByTeam.get(team);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all players on a team.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TeamManager.java", "methodName": "com.artemis.managers.TeamManager.removeFromTeam", "methodParameterType": "String#", "methodParameterName": "player#", "methodBody": "public void removeFromTeam(String player) {\n\t\tString team = teamByPlayer.remove(player);\n\t\tif(team != null) {\n\t\t\tBag<String> players = playersByTeam.get(team);\n\t\t\tif(players != null) {\n\t\t\t\tplayers.remove(player);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Remove a player from his team.", "call_func_name": ["java.util.Map.remove", "java.util.Map.get", "com.artemis.utils.Bag.remove"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "283", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TagManager.java", "methodName": "com.artemis.managers.TagManager.TagManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TagManager() {\n\t\tentitiesByTag = new HashMap<>();\n\t\ttagsByEntity = new HashMap<>();\n\t\tregistered = new BitVector();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TagManager.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "284", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TagManager.java", "methodName": "com.artemis.managers.TagManager.register", "methodParameterType": "String#Entity#", "methodParameterName": "tag#e#", "methodBody": "public void register(String tag, Entity e) {\n\t\tunregister(tag);\n\t\tif (getTag(e) != null) {\n\t\t\tunregister(getTag(e));\n\t\t}\n\n\t\tentitiesByTag.put(tag, e);\n\t\ttagsByEntity.put(e, tag);\n\t\tregistered.set(e.getId());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Tag an entity. <p> Each tag can only be given to one entity at a time. </p>", "call_func_name": ["com.artemis.managers.TagManager.unregister", "com.artemis.managers.TagManager.getTag", "java.util.Map.put", "com.artemis.Entity.getId", "com.artemis.utils.BitVector.set"], "call_func_parameter": [["java.lang.String"], ["com.artemis.Entity"], ["java.lang.Object", "java.lang.Object"], [""], ["int"]], "passed_comments": [{"com.artemis.managers.TagManager.unregister": "Remove a tag from the entity being tagged with it."}, {"com.artemis.managers.TagManager.getTag": "Get the tag the given entity is tagged with."}, {"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}]}, {"index": "285", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TagManager.java", "methodName": "com.artemis.managers.TagManager.unregister", "methodParameterType": "String#", "methodParameterName": "tag#", "methodBody": "public void unregister(String tag) {\n\t\tEntity removed = entitiesByTag.remove(tag);\n\t\tif (removed != null) {\n\t\t\ttagsByEntity.remove(removed);\n\t\t\tregistered.clear(removed.getId());\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Remove a tag from the entity being tagged with it.", "call_func_name": ["java.util.Map.remove", "com.artemis.Entity.getId", "com.artemis.utils.BitVector.clear"], "call_func_parameter": [["java.lang.Object"], [""], ["int"]], "passed_comments": [{"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.utils.BitVector.clear": "@param index the index of the bit to clear"}]}, {"index": "286", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TagManager.java", "methodName": "com.artemis.managers.TagManager.isRegistered", "methodParameterType": "String#", "methodParameterName": "tag#", "methodBody": "public boolean isRegistered(String tag) {\n\t\treturn entitiesByTag.containsKey(tag);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if a tag is in use.", "call_func_name": ["java.util.Map.containsKey"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TagManager.java", "methodName": "com.artemis.managers.TagManager.getEntity", "methodParameterType": "String#", "methodParameterName": "tag#", "methodBody": "public Entity getEntity(String tag) {\n\t\treturn entitiesByTag.get(tag);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the entity tagged with the given tag.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "288", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TagManager.java", "methodName": "com.artemis.managers.TagManager.getTag", "methodParameterType": "Entity#", "methodParameterName": "entity#", "methodBody": "public String getTag(Entity entity) {\n\t\treturn tagsByEntity.get(entity);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the tag the given entity is tagged with.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/TagManager.java", "methodName": "com.artemis.managers.TagManager.getRegisteredTags", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<String> getRegisteredTags() {\n\t\treturn tagsByEntity.values();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all used tags.", "call_func_name": ["java.util.Map.values"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/PlayerManager.java", "methodName": "com.artemis.managers.PlayerManager.PlayerManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PlayerManager() {\n\t\tplayerByEntity = new HashMap<Entity, String>();\n\t\tentitiesByPlayer = new HashMap<String, Bag<Entity>>();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PlayerManager instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "291", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/PlayerManager.java", "methodName": "com.artemis.managers.PlayerManager.setPlayer", "methodParameterType": "Entity#String#", "methodParameterName": "e#player#", "methodBody": "public void setPlayer(Entity e, String player) {\n\t\tplayerByEntity.put(e, player);\n\t\tBag<Entity> entities = entitiesByPlayer.get(player);\n\t\tif(entities == null) {\n\t\t\tentities = new Bag<Entity>();\n\t\t\tentitiesByPlayer.put(player, entities);\n\t\t}\n\t\tentities.add(e);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Associate the entity with the specified player. <p> Each entity may only be assoctiated with one player at a time. </p>", "call_func_name": ["java.util.Map.put", "java.util.Map.get", "com.artemis.utils.Bag.<init>", "com.artemis.utils.Bag.add"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/PlayerManager.java", "methodName": "com.artemis.managers.PlayerManager.getEntitiesOfPlayer", "methodParameterType": "String#", "methodParameterName": "player#", "methodBody": "public ImmutableBag<Entity> getEntitiesOfPlayer(String player) {\n\t\tBag<Entity> entities = entitiesByPlayer.get(player);\n\t\tif(entities == null) {\n\t\t\tentities = new Bag<Entity>();\n\t\t}\n\t\treturn entities;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all entities belonging to a player.", "call_func_name": ["java.util.Map.get", "com.artemis.utils.Bag.<init>"], "call_func_parameter": [["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/PlayerManager.java", "methodName": "com.artemis.managers.PlayerManager.removeFromPlayer", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void removeFromPlayer(Entity e) {\n\t\tString player = playerByEntity.get(e);\n\t\tif(player != null) {\n\t\t\tBag<Entity> entities = entitiesByPlayer.get(player);\n\t\t\tif(entities != null) {\n\t\t\t\tentities.remove(e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Remove the association of an entity with a player.", "call_func_name": ["java.util.Map.get", "com.artemis.utils.Bag.remove"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "294", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/PlayerManager.java", "methodName": "com.artemis.managers.PlayerManager.getPlayer", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public String getPlayer(Entity e) {\n\t\treturn playerByEntity.get(e);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the player an entity is associated with.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "295", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/managers/PlayerManager.java", "methodName": "com.artemis.managers.PlayerManager.deleted", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "@Override\n\tpublic void deleted(Entity e) {\n\t\tremoveFromPlayer(e);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Deleted entities are removed from their player.", "call_func_name": ["com.artemis.managers.PlayerManager.removeFromPlayer"], "call_func_parameter": [["com.artemis.Entity"]], "passed_comments": [{"com.artemis.managers.PlayerManager.removeFromPlayer": "Remove the association of an entity with a player."}]}, {"index": "296", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ConfigurationElement.java", "methodName": "com.artemis.ConfigurationElement.of", "methodParameterType": "T#", "methodParameterName": "item#", "methodBody": "public static <T> ConfigurationElement<T> of(T item) {\n\t\treturn of(item, WorldConfigurationBuilder.Priority.NORMAL);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "create instance of Registerable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "297", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ConfigurationElement.java", "methodName": "com.artemis.ConfigurationElement.of", "methodParameterType": "T#int#", "methodParameterName": "item#priority#", "methodBody": "public static <T> ConfigurationElement<T> of(T item, int priority) {\n\t\treturn new ConfigurationElement<T>(item, priority);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "create instance of Registerable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "298", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/WildBag.java", "methodName": "com.artemis.WildBag.setSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "void setSize(int size) {\n\t\tthis.size = size;\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the size. <p> This will not resize the bag, nor will it clean up contents beyond the given size. Use with caution. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "299", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArtemisPlugin.java", "methodName": "com.artemis.ArtemisPlugin.setup", "methodParameterType": "WorldConfigurationBuilder#", "methodParameterName": "b#", "methodBody": "void setup(WorldConfigurationBuilder b);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register your plugin. Set up all your dependencies here. - systems - field resolvers - other plugins Always prefer to use  {@link WorldConfigurationBuilder#dependsOn} as it can handle repeated dependencies,as opposed to  {@link WorldConfigurationBuilder#with}, which will throw an exception upon attempting to add a pre-existing class. Artemis will consider abstract plugin dependencies fulfilled when a concrete subclass has been registered beforehand. To create a common API with different implementations (like logging-api and logging-libgdx) create a superclass plugin that is abstract, and one subclass for each implementation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "300", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.ComponentManager", "methodParameterType": "int#", "methodParameterName": "entityContainerSize#", "methodBody": "protected ComponentManager(int entityContainerSize) {\n\t\tentityToIdentity = new ShortBag(entityContainerSize);\n\t\ttypeFactory = new ComponentTypeFactory(this, entityContainerSize);\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of  {@link ComponentManager}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.create", "methodParameterType": "int#Class<T>#", "methodParameterName": "owner#componentClass#", "methodBody": "protected <T extends Component> T create(int owner, Class<T> componentClass) {\n\t\treturn getMapper(componentClass).create(owner);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a component of given type by class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "302", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.clean", "methodParameterType": "IntBag#", "methodParameterName": "pendingPurge#", "methodBody": "void clean(IntBag pendingPurge) {\n\t\tint[] ids = pendingPurge.getData();\n\t\tfor (int i = 0, s = pendingPurge.size(); s > i; i++) {\n\t\t\tremoveComponents(ids[i]);\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Removes all components from deleted entities.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "303", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponentsByType", "methodParameterType": "ComponentType#", "methodParameterName": "type#", "methodBody": "protected Bag<Component> getComponentsByType(ComponentType type) {\n\t\treturn mappers.get(type.getIndex()).components;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all components from all entities for a given type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponentTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ImmutableBag<ComponentType> getComponentTypes() {\n\t\treturn typeFactory.types;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Bag of all generated component types, which identify components without having to use classes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponent", "methodParameterType": "int#ComponentType#", "methodParameterName": "entityId#type#", "methodBody": "protected Component getComponent(int entityId, ComponentType type) {\n\t\tComponentMapper mapper = mappers.get(type.getIndex());\n\t\treturn mapper.get(entityId);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a component of an entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getComponentsFor", "methodParameterType": "int#Bag<Component>#", "methodParameterName": "entityId#fillBag#", "methodBody": "public Bag<Component> getComponentsFor(int entityId, Bag<Component> fillBag) {\n\t\tBag<ComponentMapper> mappers = componentMappers(entityId);\n\n\t\tfor (int i = 0, s = mappers.size(); s > i; i++) {\n\t\t\tfillBag.add(mappers.get(i).get(entityId));\n\t\t}\n\n\t\treturn fillBag;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all component associated with an entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.componentBits", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "BitVector componentBits(int entityId) {\n\t\tint identityIndex = entityToIdentity.get(entityId);\n\t\treturn identityResolver.compositionBits.get(identityIndex);\n\t}", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get component composition of entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.componentMappers", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "private Bag<ComponentMapper> componentMappers(int entityId) {\n\t\tint identityIndex = entityToIdentity.get(entityId);\n\t\treturn identityResolver.compositionMappers.get(identityIndex);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get component composition of entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "309", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.compositionIdentity", "methodParameterType": "BitVector#", "methodParameterName": "componentBits#", "methodBody": "public int compositionIdentity(BitVector componentBits) {\n\t\tint identity = identityResolver.getIdentity(componentBits);\n\t\tif (identity == -1) {\n\t\t\tidentity = identityResolver.allocateIdentity(componentBits, this);\n\t\t\tworld.getAspectSubscriptionManager()\n\t\t\t\t.processComponentIdentity(identity, componentBits);\n\t\t}\n\n\t\treturn identity;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetches unique identifier for composition.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getIdentity", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public int getIdentity(int entityId) {\n\t\treturn entityToIdentity.get(entityId);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.synchronize", "methodParameterType": "EntitySubscription#", "methodParameterName": "es#", "methodBody": "void synchronize(EntitySubscription es) {\n\t\tBag<BitVector> compositionBits = identityResolver.compositionBits;\n\t\tfor (int i = 1, s = compositionBits.size(); s > i; i++) {\n\t\t\tBitVector componentBits = compositionBits.get(i);\n\t\t\tes.processComponentIdentity(i, componentBits);\n\t\t}\n\n\t\tfor (Entity e : world.getEntityManager().entities) {\n\t\t\tif (e != null) es.check(e.id, getIdentity(e.id));\n\t\t}\n\n\t\tes.informEntityChanges();\n\t\tes.rebuildCompressedActives();\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Synchronizes new subscriptions with  {@link World} state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.setIdentity", "methodParameterType": "int#int#", "methodParameterName": "entityId#compositionId#", "methodBody": "void setIdentity(int entityId, int compositionId) {\n\t\tentityToIdentity.unsafeSet(entityId, (short) compositionId);\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#PrimitiveType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set composition id of entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "313", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentManager.java", "methodName": "com.artemis.ComponentManager.getTypeFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ComponentTypeFactory getTypeFactory() {\n\t\treturn typeFactory;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Factory responsible for tracking all component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.EntityBuilder", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "public EntityBuilder(World world) {\n\t\tthis.world = world;\n\t\tedit = world.createEntity().edit();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Begin building new entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.EntityBuilder", "methodParameterType": "World#Archetype#", "methodParameterName": "world#archetype#", "methodBody": "public EntityBuilder(World world, Archetype archetype) {\n\t\tthis.world = world;\n\t\tedit = world.createEntity(archetype).edit();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Begin building new entity based on archetype.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Component#", "methodParameterName": "component#", "methodBody": "public EntityBuilder with(Component component) {\n\t\tedit.add(component);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add component to entity.", "call_func_name": ["com.artemis.EntityEdit.add"], "call_func_parameter": [["com.artemis.Component"]], "passed_comments": [{"com.artemis.EntityEdit.add": "Add a component to this entity."}]}, {"index": "317", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Component#Component#", "methodParameterName": "component1#component2#", "methodBody": "public EntityBuilder with(Component component1, Component component2) {\n\t\tedit.add(component1);\n\t\tedit.add(component2);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add components to entity.", "call_func_name": ["com.artemis.EntityEdit.add"], "call_func_parameter": [["com.artemis.Component"]], "passed_comments": [{"com.artemis.EntityEdit.add": "Add a component to this entity."}]}, {"index": "318", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Component#Component#Component#", "methodParameterName": "component1#component2#component3#", "methodBody": "public EntityBuilder with(Component component1, Component component2, Component component3) {\n\t\tedit.add(component1);\n\t\tedit.add(component2);\n\t\tedit.add(component3);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add components to entity.", "call_func_name": ["com.artemis.EntityEdit.add"], "call_func_parameter": [["com.artemis.Component"]], "passed_comments": [{"com.artemis.EntityEdit.add": "Add a component to this entity."}]}, {"index": "319", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Component#Component#Component#Component#", "methodParameterName": "component1#component2#component3#component4#", "methodBody": "public EntityBuilder with(Component component1, Component component2, Component component3, Component component4) {\n\t\tedit.add(component1);\n\t\tedit.add(component2);\n\t\tedit.add(component3);\n\t\tedit.add(component4);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add components to entity.", "call_func_name": ["com.artemis.EntityEdit.add"], "call_func_parameter": [["com.artemis.Component"]], "passed_comments": [{"com.artemis.EntityEdit.add": "Add a component to this entity."}]}, {"index": "320", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Component#Component#Component#Component#Component#", "methodParameterName": "component1#component2#component3#component4#component5#", "methodBody": "public EntityBuilder with(Component component1, Component component2, Component component3, Component component4, Component component5) {\n\t\tedit.add(component1);\n\t\tedit.add(component2);\n\t\tedit.add(component3);\n\t\tedit.add(component4);\n\t\tedit.add(component5);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add components to entity.", "call_func_name": ["com.artemis.EntityEdit.add"], "call_func_parameter": [["com.artemis.Component"]], "passed_comments": [{"com.artemis.EntityEdit.add": "Add a component to this entity."}]}, {"index": "321", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Component#", "methodParameterName": "components#", "methodBody": "public EntityBuilder with(Component... components) {\n\t\tfor (int i = 0, n = components.length; i < n; i++) {\n\t\t\tedit.add(components[i]);\n\t\t}\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add components to entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "component#", "methodBody": "public EntityBuilder with(Class<? extends Component> component) {\n\t\tedit.create(component);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add artemis managed components to entity.", "call_func_name": ["com.artemis.EntityEdit.create"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": [{"com.artemis.EntityEdit.create": "Create new instance of component. <p/> if exists, replaces and retires old component!"}]}, {"index": "323", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Class<? extends Component>#Class<? extends Component>#", "methodParameterName": "component1#component2#", "methodBody": "public EntityBuilder with(Class<? extends Component> component1, Class<? extends Component> component2) {\n\t\tedit.create(component1);\n\t\tedit.create(component2);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add artemis managed components to entity.", "call_func_name": ["com.artemis.EntityEdit.create"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": [{"com.artemis.EntityEdit.create": "Create new instance of component. <p/> if exists, replaces and retires old component!"}]}, {"index": "324", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Class<? extends Component>#Class<? extends Component>#Class<? extends Component>#", "methodParameterName": "component1#component2#component3#", "methodBody": "public EntityBuilder with(Class<? extends Component> component1, Class<? extends Component> component2, Class<? extends Component> component3) {\n\t\tedit.create(component1);\n\t\tedit.create(component2);\n\t\tedit.create(component3);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add artemis managed components to entity.", "call_func_name": ["com.artemis.EntityEdit.create"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": [{"com.artemis.EntityEdit.create": "Create new instance of component. <p/> if exists, replaces and retires old component!"}]}, {"index": "325", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Class<? extends Component>#Class<? extends Component>#Class<? extends Component>#Class<? extends Component>#", "methodParameterName": "component1#component2#component3#component4#", "methodBody": "public EntityBuilder with(Class<? extends Component> component1, Class<? extends Component> component2, Class<? extends Component> component3, Class<? extends Component> component4) {\n\t\tedit.create(component1);\n\t\tedit.create(component2);\n\t\tedit.create(component3);\n\t\tedit.create(component4);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add artemis managed components to entity.", "call_func_name": ["com.artemis.EntityEdit.create"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": [{"com.artemis.EntityEdit.create": "Create new instance of component. <p/> if exists, replaces and retires old component!"}]}, {"index": "326", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Class<? extends Component>#Class<? extends Component>#Class<? extends Component>#Class<? extends Component>#Class<? extends Component>#", "methodParameterName": "component1#component2#component3#component4#component5#", "methodBody": "public EntityBuilder with(Class<? extends Component> component1, Class<? extends Component> component2, Class<? extends Component> component3, Class<? extends Component> component4, Class<? extends Component> component5) {\n\t\tedit.create(component1);\n\t\tedit.create(component2);\n\t\tedit.create(component3);\n\t\tedit.create(component4);\n\t\tedit.create(component5);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add artemis managed components to entity.", "call_func_name": ["com.artemis.EntityEdit.create"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": [{"com.artemis.EntityEdit.create": "Create new instance of component. <p/> if exists, replaces and retires old component!"}]}, {"index": "327", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.with", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "components#", "methodBody": "public EntityBuilder with(Class<? extends Component>... components) {\n\t\tfor (int i = 0, n = components.length; i < n; i++) {\n\t\t\tedit.create(components[i]);\n\t\t}\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add artemis managed components to entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "328", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.UUID", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "public EntityBuilder UUID(UUID uuid)\n\t{\n\t\tresolveManager(UuidEntityManager.class).setUuid(edit.getEntity(), uuid);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set UUID of entity", "call_func_name": ["com.artemis.utils.EntityBuilder.resolveManager", "com.artemis.EntityEdit.getEntity", "com.artemis.managers.UuidEntityManager.setUuid"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.Entity", "java.util.UUID"]], "passed_comments": [{"com.artemis.utils.EntityBuilder.resolveManager": "Fetch manager or throw RuntimeException if not registered."}, {"com.artemis.EntityEdit.getEntity": "Get target entity of entity edits."}]}, {"index": "329", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.player", "methodParameterType": "String#", "methodParameterName": "player#", "methodBody": "public EntityBuilder player(String player) {\n\t\tresolveManager(PlayerManager.class).setPlayer(edit.getEntity(), player);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Register entity with owning player. An entity can only belong to a single player at a time. Requires registered PlayerManager.", "call_func_name": ["com.artemis.utils.EntityBuilder.resolveManager", "com.artemis.EntityEdit.getEntity", "com.artemis.managers.PlayerManager.setPlayer"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.Entity", "java.lang.String"]], "passed_comments": [{"com.artemis.utils.EntityBuilder.resolveManager": "Fetch manager or throw RuntimeException if not registered."}, {"com.artemis.EntityEdit.getEntity": "Get target entity of entity edits."}, {"com.artemis.managers.PlayerManager.setPlayer": "Associate the entity with the specified player. <p> Each entity may only be assoctiated with one player at a time. </p>"}]}, {"index": "330", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.tag", "methodParameterType": "String#", "methodParameterName": "tag#", "methodBody": "public EntityBuilder tag(String tag) {\n\t\tresolveManager(TagManager.class).register(tag, edit.getEntity());\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Register entity with tag. Requires registered TagManager", "call_func_name": ["com.artemis.utils.EntityBuilder.resolveManager", "com.artemis.EntityEdit.getEntity", "com.artemis.managers.TagManager.register"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.String", "com.artemis.Entity"]], "passed_comments": [{"com.artemis.utils.EntityBuilder.resolveManager": "Fetch manager or throw RuntimeException if not registered."}, {"com.artemis.EntityEdit.getEntity": "Get target entity of entity edits."}, {"com.artemis.managers.TagManager.register": "Tag an entity. <p> Each tag can only be given to one entity at a time. </p>"}]}, {"index": "331", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.group", "methodParameterType": "String#", "methodParameterName": "group#", "methodBody": "public EntityBuilder group(String group) {\n\t\tresolveManager(GroupManager.class).add(edit.getEntity(), group);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Register entity with group. Requires registered TagManager", "call_func_name": ["com.artemis.utils.EntityBuilder.resolveManager", "com.artemis.EntityEdit.getEntity", "com.artemis.managers.GroupManager.add"], "call_func_parameter": [["java.lang.Class"], [""], ["com.artemis.Entity", "java.lang.String"]], "passed_comments": [{"com.artemis.utils.EntityBuilder.resolveManager": "Fetch manager or throw RuntimeException if not registered."}, {"com.artemis.EntityEdit.getEntity": "Get target entity of entity edits."}, {"com.artemis.managers.GroupManager.add": "Set the group of the entity."}, {"com.artemis.managers.GroupManager.add": "Set the group of the entity."}]}, {"index": "332", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.groups", "methodParameterType": "String#", "methodParameterName": "groups#", "methodBody": "public EntityBuilder groups(String... groups) {\n\t\tfor (int i = 0; groups.length > i; i++) {\n\t\t\tgroup(groups[i]);\n\t\t}\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Register entity with multiple groups. Requires registered TagManager", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Entity build() {\n\t\treturn edit.getEntity();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Assemble, add to world", "call_func_name": ["com.artemis.EntityEdit.getEntity"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.EntityEdit.getEntity": "Get target entity of entity edits."}]}, {"index": "334", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/EntityBuilder.java", "methodName": "com.artemis.utils.EntityBuilder.resolveManager", "methodParameterType": "Class<T>#", "methodParameterName": "type#", "methodBody": "protected <T extends BaseSystem> T resolveManager(Class<T> type) {\n\t\tfinal T teamManager = world.getSystem(type);\n\t\tif ( teamManager == null ) {\n\t\t\tthrow new RuntimeException(\"Register \" + ClassReflection.getSimpleName(type) + \" with your artemis world.\");\n\t\t}\n\t\treturn teamManager;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetch manager or throw RuntimeException if not registered.", "call_func_name": ["com.artemis.World.getSystem", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.artemis.utils.reflect.ClassReflection.getSimpleName", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.String"], ["java.lang.Class"], [""], ["java.lang.String"]], "passed_comments": [{"com.artemis.World.getSystem": "Retrieve a system for specified system type."}, {"com.artemis.utils.reflect.ClassReflection.getSimpleName": "Returns the simple name of the underlying class as supplied in the source code."}, {"com.artemis.utils.reflect.ClassReflection.getSimpleName": "Returns the simple name of the underlying class as supplied in the source code."}]}, {"index": "335", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.BitVector", "methodParameterType": "int#", "methodParameterName": "nbits#", "methodBody": "public BitVector(int nbits) {\n\t\tcheckCapacity(nbits >>> 6);\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "336", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.BitVector", "methodParameterType": "BitVector#", "methodParameterName": "copyFrom#", "methodBody": "public BitVector(BitVector copyFrom) {\n\t\twords = Arrays.copyOf(copyFrom.words, copyFrom.words.length);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a bit set based off another bit vector.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "337", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public boolean get(int index) {\n\t\tfinal int word = index >>> 6;\n\t\treturn word < words.length &&\n\t\t\t(words[word] & (1L << index)) != 0L;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit", "call_func_name": ["com.artemis.utils.BitVector.checkIndex", "com.artemis.utils.BitVector.get"], "call_func_parameter": [["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": "/"}, {"index": "338", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.set", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void set(int index) {\n\t\tfinal int word = index >>> 6;\n\t\tcheckCapacity(word);\n\t\twords[word] |= 1L << index;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to set", "call_func_name": ["com.artemis.utils.BitVector.checkIndex", "com.artemis.utils.BitVector.set"], "call_func_parameter": [["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": "/"}, {"index": "339", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.set", "methodParameterType": "int#boolean#", "methodParameterName": "index#value#", "methodBody": "public void set(int index, boolean value) {\n\t\tif (value) {\n\t\t\tset(index);\n\t\t} else {\n\t\t\tclear(index);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to set", "call_func_name": ["com.artemis.utils.BitVector.set", "com.artemis.utils.BitVector.clear"], "call_func_parameter": [["int"], ["int"]], "passed_comments": [{"com.artemis.utils.BitVector.set": "@param index the index of the bit to set"}, {"com.artemis.utils.BitVector.clear": "@param index the index of the bit to clear"}]}, {"index": "340", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeGet", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public boolean unsafeGet(int index) {\n\t\treturn (words[index >>> 6] & (1L << index)) != 0L;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "341", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeSet", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void unsafeSet(int index) {\n\t\twords[index >>> 6] |= 1L << index;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "342", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeSet", "methodParameterType": "int#boolean#", "methodParameterName": "index#value#", "methodBody": "public void unsafeSet(int index, boolean value) {\n\t\tif (value) {\n\t\t\tunsafeSet(index);\n\t\t} else {\n\t\t\tunsafeClear(index);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "343", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.flip", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void flip(int index) {\n\t\tfinal int word = index >>> 6;\n\t\tcheckCapacity(word);\n\t\twords[word] ^= 1L << index;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to flip", "call_func_name": ["com.artemis.utils.BitVector.checkIndex", "com.artemis.utils.BitVector.flip"], "call_func_parameter": [["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": "/"}, {"index": "344", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "bits#", "methodBody": "public void ensureCapacity(int bits) {\n\t\tcheckCapacity(bits >>> 6);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Grows the backing array (<code>long[]</code>) so that it can hold the requested bits. Mostly applicable when relying on the <code>unsafe</code> methods, including  {@link #unsafeGet(int)} and {@link #unsafeClear(int)}.", "call_func_name": ["com.artemis.utils.BitVector.checkCapacity"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "345", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.clear", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void clear(int index) {\n\t\tfinal int word = index >>> 6;\n\t\tif (word >= words.length) return;\n\t\twords[word] &= ~(1L << index);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to clear", "call_func_name": ["com.artemis.utils.BitVector.checkIndex", "com.artemis.utils.BitVector.clear"], "call_func_parameter": [["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": "/"}, {"index": "346", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.unsafeClear", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void unsafeClear(int index) {\n\t\twords[index >>> 6] &= ~(1L << index);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#PrefixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(PrefixExpression(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)PrefixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param index the index of the bit to clear", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "347", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.clear", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void clear() {\n\t\tArrays.fill(words, 0L);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Clears the entire bitset", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "348", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.length", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int length() {\n\t\tlong[] bits = this.words;\n\t\tfor (int word = bits.length - 1; word >= 0; --word) {\n\t\t\tlong bitsAtWord = bits[word];\n\t\t\tif (bitsAtWord != 0)\n\t\t\t\treturn (word << 6) + 64 - Long.numberOfLeadingZeros(bitsAtWord);\n\t\t}\n\n\t\treturn 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PrefixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#IfStatement#Block#ForStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)IfStatement)Block)ForStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the \"logical size\" of this bitset: the index of the highest set bit in the bitset plus one. Returns zero if the bitset contains no set bits.", "call_func_name": ["com.artemis.utils.BitVector.trimToSize", "com.artemis.utils.BitVector.bitIndex", "com.artemis.utils.BitVector.getWord"], "call_func_parameter": [["com.google.gwt.core.client.JsArrayInteger"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": "/"}, {"index": "349", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEmpty() {\n\t\tlong[] bits = this.words;\n\t\tint length = bits.length;\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tif (bits[i] != 0L) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if this bitset contains no bits that are set to true", "call_func_name": ["com.artemis.utils.BitVector.length"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.utils.BitVector.length": "Returns the \"logical size\" of this bitset: the index of the highest set bit in the bitset plus one. Returns zero if the bitset contains no set bits."}]}, {"index": "350", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.nextSetBit", "methodParameterType": "int#", "methodParameterName": "fromIndex#", "methodBody": "public int nextSetBit(int fromIndex) {\n\t\tint word = fromIndex >>> 6;\n\t\tif (word >= words.length)\n\t\t\treturn -1;\n\n\t\tlong bitmap = words[word] >>> fromIndex;\n\t\tif (bitmap != 0)\n\t\t\treturn fromIndex + Long.numberOfTrailingZeros(bitmap);\n\n\t\tfor (int i = 1 + word; i < words.length; i++) {\n\t\t\tbitmap = words[i];\n\t\t\tif (bitmap != 0) {\n\t\t\t\treturn i * 64 + Long.numberOfTrailingZeros(bitmap);\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#NumberLiteral#PrefixExpression#ReturnStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#Block#ForStatement#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit exists then -1 is returned.", "call_func_name": ["com.artemis.utils.BitVector.checkIndex", "com.artemis.utils.BitVector.wordIndex", "com.artemis.utils.BitVector.getWord", "com.artemis.utils.BitVector.bitOffset", "com.artemis.utils.BitVector.bitIndex", "com.artemis.utils.BitVector.trimToSize", "com.artemis.utils.BitVector.nextSetWord", "com.google.gwt.core.client.JsArrayInteger.get", "java.lang.Integer.numberOfTrailingZeros"], "call_func_parameter": [["int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"], ["int"]], "passed_comments": "/"}, {"index": "351", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.nextClearBit", "methodParameterType": "int#", "methodParameterName": "fromIndex#", "methodBody": "public int nextClearBit(int fromIndex) {\n\t\tint word = fromIndex >>> 6;\n\t\tif (word >= words.length)\n\t\t\treturn Math.min(fromIndex, words.length << 6);\n\n\t\tlong bitmap = ~(words[word] >>> fromIndex);\n\t\tif (bitmap != 0)\n\t\t\treturn fromIndex + Long.numberOfTrailingZeros(bitmap);\n\n\t\tfor (int i = 1 + word; i < words.length; i++) {\n\t\t\tbitmap = ~words[i];\n\t\t\tif (bitmap != 0) {\n\t\t\t\treturn i * 64 + Long.numberOfTrailingZeros(bitmap);\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(fromIndex, words.length << 6);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#InfixExpression#ParenthesizedExpression#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#PrefixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)PrefixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the index of the first bit that is set to false that occurs on or after the specified starting index.", "call_func_name": ["com.artemis.utils.BitVector.checkIndex", "com.artemis.utils.BitVector.wordIndex", "com.artemis.utils.BitVector.bitIndex", "com.artemis.utils.BitVector.getWord", "java.lang.Integer.numberOfTrailingZeros"], "call_func_parameter": [["int"], ["int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"]], "passed_comments": "/"}, {"index": "352", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.and", "methodParameterType": "BitVector#", "methodParameterName": "other#", "methodBody": "public void and(BitVector other) {\n\t\tint commonWords = Math.min(words.length, other.words.length);\n\t\tfor (int i = 0; commonWords > i; i++) {\n\t\t\twords[i] &= other.words[i];\n\t\t}\n\n\t\tif (words.length > commonWords) {\n\t\t\tfor (int i = commonWords, s = words.length; s > i; i++) {\n\t\t\t\twords[i] = 0L;\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#Assignment#ExpressionStatement#Block#ForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)ForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Performs a logical <b>AND</b> of this target bit set with the argument bit set. This bit set is modified so that each bit in it has the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument also had the value true.", "call_func_name": ["com.artemis.utils.BitVector.trimToSize", "com.google.gwt.core.client.JsArrayInteger.length", "com.artemis.utils.BitVector.setLengthWords", "com.artemis.utils.BitVector.nextSetWord", "com.google.gwt.core.client.JsArrayInteger.get", "com.artemis.utils.BitVector.getWord", "com.artemis.utils.BitVector.setWord"], "call_func_parameter": [["com.google.gwt.core.client.JsArrayInteger"], [""], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["com.google.gwt.core.client.JsArrayInteger", "int", "int"]], "passed_comments": "/"}, {"index": "353", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.andNot", "methodParameterType": "BitVector#", "methodParameterName": "other#", "methodBody": "public void andNot(BitVector other) {\n\t\tint commonWords = Math.min(words.length, other.words.length);\n\t\tfor (int i = 0; commonWords > i; i++) {\n\t\t\twords[i] &= ~other.words[i];\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#PrefixExpression#Assignment#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)PrefixExpression)Assignment)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Clears all of the bits in this bit set whose corresponding bit is set in the specified bit set.", "call_func_name": ["com.artemis.utils.BitVector.clear", "com.artemis.utils.BitVector.trimToSize", "com.google.gwt.core.client.JsArrayInteger.length", "com.artemis.utils.BitVector.nextSetWord", "com.artemis.utils.BitVector.getWord", "com.google.gwt.core.client.JsArrayInteger.get", "com.artemis.utils.BitVector.setWord"], "call_func_parameter": [[""], ["com.google.gwt.core.client.JsArrayInteger"], [""], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int", "int"]], "passed_comments": [{"com.artemis.utils.BitVector.clear": "@param index the index of the bit to clear"}, {"com.artemis.utils.BitVector.clear": "Clears the entire bitset"}]}, {"index": "354", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.or", "methodParameterType": "BitVector#", "methodParameterName": "other#", "methodBody": "public void or(BitVector other) {\n\t\tint commonWords = Math.min(words.length, other.words.length);\n\t\tfor (int i = 0; commonWords > i; i++) {\n\t\t\twords[i] |= other.words[i];\n\t\t}\n\n\t\tif (commonWords < other.words.length) {\n\t\t\tcheckCapacity(other.words.length);\n\t\t\tfor (int i = commonWords, s = other.words.length; s > i; i++) {\n\t\t\t\twords[i] = other.words[i];\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Performs a logical <b>OR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value true if and only if it either already had the value true or the corresponding bit in the bit set argument has the value true.", "call_func_name": ["com.artemis.utils.BitVector.nextSetWord", "com.artemis.utils.BitVector.getWord", "com.google.gwt.core.client.JsArrayInteger.get", "com.artemis.utils.BitVector.setWord"], "call_func_parameter": [["com.google.gwt.core.client.JsArrayInteger", "int"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int", "int"]], "passed_comments": "/"}, {"index": "355", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.xor", "methodParameterType": "BitVector#", "methodParameterName": "other#", "methodBody": "public void xor(BitVector other) {\n\t\tint commonWords = Math.min(words.length, other.words.length);\n\n\t\tfor (int i = 0; commonWords > i; i++) {\n\t\t\twords[i] ^= other.words[i];\n\t\t}\n\n\t\tif (commonWords < other.words.length) {\n\t\t\tcheckCapacity(other.words.length);\n\t\t\tfor (int i = commonWords, s = other.words.length; s > i; i++) {\n\t\t\t\twords[i] = other.words[i];\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Performs a logical <b>XOR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value true if and only if one of the following statements holds: <ul> <li>The bit initially has the value true, and the corresponding bit in the argument has the value false.</li> <li>The bit initially has the value false, and the corresponding bit in the argument has the value true.</li> </ul>", "call_func_name": ["com.artemis.utils.BitVector.clear", "com.artemis.utils.BitVector.nextSetWord", "com.artemis.utils.BitVector.getWord", "com.google.gwt.core.client.JsArrayInteger.get", "com.artemis.utils.BitVector.setWord"], "call_func_parameter": [[""], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int", "int"]], "passed_comments": [{"com.artemis.utils.BitVector.clear": "@param index the index of the bit to clear"}, {"com.artemis.utils.BitVector.clear": "Clears the entire bitset"}]}, {"index": "356", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.intersects", "methodParameterType": "BitVector#", "methodParameterName": "other#", "methodBody": "public boolean intersects(BitVector other) {\n\t\tlong[] bits = this.words;\n\t\tlong[] otherBits = other.words;\n\t\tfor (int i = 0, s = Math.min(bits.length, otherBits.length); s > i; i++) {\n\t\t\tif ((bits[i] & otherBits[i]) != 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the specified BitVector has any bits set to true that are also set to true in this BitVector.", "call_func_name": ["com.artemis.utils.BitVector.trimToSize", "com.google.gwt.core.client.JsArrayInteger.length", "com.artemis.utils.BitVector.nextSetWord", "com.google.gwt.core.client.JsArrayInteger.get", "com.artemis.utils.BitVector.getWord"], "call_func_parameter": [["com.google.gwt.core.client.JsArrayInteger"], [""], ["com.google.gwt.core.client.JsArrayInteger", "int"], ["int"], ["com.google.gwt.core.client.JsArrayInteger", "int"]], "passed_comments": "/"}, {"index": "357", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.containsAll", "methodParameterType": "BitVector#", "methodParameterName": "other#", "methodBody": "public boolean containsAll(BitVector other) {\n\t\tlong[] bits = this.words;\n\t\tlong[] otherBits = other.words;\n\t\tint otherBitsLength = otherBits.length;\n\t\tint bitsLength = bits.length;\n\n\t\tfor (int i = bitsLength; i < otherBitsLength; i++) {\n\t\t\tif (otherBits[i] != 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0, s = Math.min(bitsLength, otherBitsLength); s > i; i++) {\n\t\t\tif ((bits[i] & otherBits[i]) != otherBits[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ArrayAccess#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ParenthesizedExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this bit set is a super set of the specified set, i.e. it has all bits set to true that are also set to true in the specified BitVector.", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["int", "int"]], "passed_comments": "/"}, {"index": "358", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.toIntBag", "methodParameterType": "IntBag#", "methodParameterName": "out#", "methodBody": "public IntBag toIntBag(IntBag out) {\n\t\tif (isEmpty()) {\n\t\t\tout.setSize(0);\n\t\t\treturn out;\n\t\t}\n\n\t\tint count = prepareBag(out, 1);\n\n\t\tint[] data = out.getData();\n\t\tfor (int i = 0, index = 0; count > index; i++) {\n\t\t\tlong bitset = words[i];\n\t\t\tint wordBits = i << 6;\n\t\t\twhile (bitset != 0) {\n\t\t\t\tlong t = bitset & -bitset;\n\t\t\t\tdata[index] = wordBits + Long.bitCount(t - 1);\n\t\t\t\tbitset ^= t;\n\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#PrefixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes the set bits as integers. The destination {@link IntBag} is reset before the bits are transposed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "359", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/BitVector.java", "methodName": "com.artemis.utils.BitVector.toIntBagIdCid", "methodParameterType": "ComponentManager#IntBag#", "methodParameterName": "cm#out#", "methodBody": "public IntBag toIntBagIdCid(ComponentManager cm, IntBag out) {\n\t\tif (isEmpty()) {\n\t\t\tout.setSize(0);\n\t\t\treturn out;\n\t\t}\n\n\t\tint count = prepareBag(out, 2);\n\n\t\tint[] data = out.getData();\n\t\tfor (int i = 0, index = 0; count > index; i++) {\n\t\t\tlong bitset = words[i];\n\t\t\tint wordBits = i << 6;\n\t\t\twhile (bitset != 0) {\n\t\t\t\tlong t = bitset & -bitset;\n\t\t\t\tint id = wordBits + Long.bitCount(t - 1);\n\t\t\t\tdata[index] = id;\n\t\t\t\tdata[index + 1] = cm.getIdentity(id);\n\t\t\t\tindex += 2;\n\t\t\t\tbitset ^= t;\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#PrefixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#WhileStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)WhileStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes the set bits as pairs of <code>entity id</code> and {@link World#compositionId(int) compositionId}. The destination {@link IntBag} is reset before the bits aretransposed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "360", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.IntDeque", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public IntDeque() {\n\t\tthis(64);\n\t}", "AST": "Javadoc#Modifier#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with an initial capacity of 64.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "361", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.IntDeque", "methodParameterType": "int#", "methodParameterName": "capacity#", "methodBody": "public IntDeque(int capacity) {\n\t\telements = new int[capacity];\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with the specified initial capacity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "362", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.contains", "methodParameterType": "int#", "methodParameterName": "e#", "methodBody": "public boolean contains(int e) {\n\t\tfor(int i = 0; size > i; i++) {\n\t\t\tif(e == elements[index(i)]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ArrayAccess#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if bag contains this element.", "call_func_name": ["com.artemis.utils.IntDeque.index"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "363", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public int get(int index) {\n\t\treturn elements[index(index)];\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag.", "call_func_name": ["com.artemis.utils.IntDeque.index"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "364", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int size() {\n\t\treturn size;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements in this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.getCapacity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCapacity() {\n\t\treturn elements.length;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements the bag can hold without growing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEmpty() {\n\t\treturn size == 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this bag contains no elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "367", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.add", "methodParameterType": "int#", "methodParameterName": "e#", "methodBody": "public void add(int e) {\n\t\tif (size == elements.length)\n\t\t\tgrow((elements.length * 7) / 4 + 1);\n\n\t\telements[index(size++)] = e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#PostfixExpression#MethodInvocation#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)MethodInvocation)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>", "call_func_name": ["com.artemis.utils.IntDeque.grow", "com.artemis.utils.IntDeque.index"], "call_func_parameter": [["int"], ["int"]], "passed_comments": [{"com.artemis.utils.IntDeque.grow": "Increase the capacity of the bag."}]}, {"index": "368", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.set", "methodParameterType": "int#int#", "methodParameterName": "index#e#", "methodBody": "public void set(int index, int e) {\n\t\tif(index >= elements.length) {\n\t\t\tgrow((index * 7) / 4 + 1);\n\t\t}\n\t\tsize = Math.max(size, index + 1);\n\t\telements[index(index)] = e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set element at specified index in the bag.", "call_func_name": ["com.artemis.utils.IntDeque.grow", "java.lang.Math.max", "com.artemis.utils.IntDeque.index"], "call_func_parameter": [["int"], ["int", "int"], ["int"]], "passed_comments": [{"com.artemis.utils.IntDeque.grow": "Increase the capacity of the bag."}]}, {"index": "369", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.grow", "methodParameterType": "int#", "methodParameterName": "newCapacity#", "methodBody": "private void grow(int newCapacity) {\n\t\tint[] newElements = new int[newCapacity];\n\t\tfor (int i = 0; i < size; i++)\n\t\t\tnewElements[i] = get(i);\n\n\t\telements = newElements;\n\t\tbeginIndex = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ForStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increase the capacity of the bag.", "call_func_name": ["com.artemis.utils.IntDeque.get"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.IntDeque.get": "Returns the element at the specified position in Bag."}]}, {"index": "370", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void ensureCapacity(int index) {\n\t\tif(index >= elements.length) {\n\t\t\tgrow(index);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Check if an item, if added at the given item will fit into the bag. <p> If not, the bag capacity will be increased to hold an item at the index. </p>", "call_func_name": ["com.artemis.utils.IntDeque.grow"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.IntDeque.grow": "Increase the capacity of the bag."}]}, {"index": "371", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.clear", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void clear() {\n\t\tArrays.fill(elements, 0, size, 0);\n\t\tsize = 0;\n\t\tbeginIndex = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>", "call_func_name": ["java.util.Arrays.fill"], "call_func_parameter": [["int[]", "int", "int", "int"]], "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntDeque.java", "methodName": "com.artemis.utils.IntDeque.setSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public void setSize(int size) {\n\t\tthis.size = size;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the size. <p> This will not resize the bag, nor will it clean up contents beyond the given size. Use with caution. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "373", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.ComparableTimSort", "methodParameterType": "Object[]#", "methodParameterName": "a#", "methodBody": "private ComparableTimSort (Object[] a) {\n\t\tthis.a = a;\n\n\t\t// Allocate temp storage (which may be increased later if necessary)\n\t\tint len = a.length;\n\t\tObject[] newArray = new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];\n\t\ttmp = newArray;\n\n\t\t/*\n\t\t * Allocate runs-to-be-merged stack (which cannot be expanded). The stack length requirements are described in listsort.txt.\n\t\t * The C version always uses the same stack length (85), but this was measured to be too expensive when sorting \"mid-sized\"\n\t\t * arrays (e.g., 100 elements) in Java. Therefore, we use smaller (but sufficiently large) stack lengths for smaller arrays.\n\t\t * The \"magic numbers\" in the computation below must be changed if MIN_MERGE is decreased. See the MIN_MERGE declaration\n\t\t * above for more information.\n\t\t */\n\t\tint stackLen = (len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);\n\t\trunBase = new int[stackLen];\n\t\trunLen = new int[stackLen];\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#NumberLiteral#SimpleName#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#ConditionalExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#NumberLiteral#ConditionalExpression#ConditionalExpression#ConditionalExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ConditionalExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)ConditionalExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)ConditionalExpression)ConditionalExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a TimSort instance to maintain the state of an ongoing sort.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.binarySort", "methodParameterType": "Object[]#int#int#int#", "methodParameterName": "a#lo#hi#start#", "methodBody": "@SuppressWarnings({\"fallthrough\", \"rawtypes\"})\n\tprivate static void binarySort (Object[] a, int lo, int hi, int start) {\n\t\tif (DEBUG) assert lo <= start && start <= hi;\n\t\tif (start == lo) start++;\n\t\tfor (; start < hi; start++) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tComparable<Object> pivot = (Comparable)a[start];\n\n\t\t\t// Set left (and right) to the index where a[start] (pivot) belongs\n\t\t\tint left = lo;\n\t\t\tint right = start;\n\t\t\tif (DEBUG) assert left <= right;\n\t\t\t/*\n\t\t\t * Invariants: pivot >= all in [lo, left). pivot < all in [right, start).\n\t\t\t */\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right) >>> 1;\n\t\t\t\tif (pivot.compareTo(a[mid]) < 0)\n\t\t\t\t\tright = mid;\n\t\t\t\telse\n\t\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t\tif (DEBUG) assert left == right;\n\n\t\t\t/*\n\t\t\t * The invariants still hold: pivot >= all in [lo, left) and pivot < all in [left, start), so pivot belongs at left. Note\n\t\t\t * that if there are elements equal to pivot, left points to the first slot after them -- that's why this sort is stable.\n\t\t\t * Slide elements over to make room to make room for pivot.\n\t\t\t */\n\t\t\tint n = start - left; // The number of elements to move\n\t\t\t// Switch is just an optimization for arraycopy in default case\n\t\t\tswitch (n) {\n\t\t\tcase 2:\n\t\t\t\ta[left + 2] = a[left + 1];\n\t\t\tcase 1:\n\t\t\t\ta[left + 1] = a[left];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.arraycopy(a, left, a, left + 1, n);\n\t\t\t}\n\t\t\ta[left] = pivot;\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SwitchStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement(ForStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)SwitchStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Sorts the specified portion of the specified array using a binary insertion sort. This is the best method for sorting small numbers of elements. It requires O(n log n) compares, but O(n^2) data movement (worst case). If the initial part of the specified range is already sorted, this method can take advantage of it: the method assumes that the elements from index  {@code lo}, inclusive, to  {@code start}, exclusive are already sorted.", "call_func_name": ["java.lang.Comparable.compareTo", "java.lang.System.arraycopy"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.countRunAndMakeAscending", "methodParameterType": "Object[]#int#int#", "methodParameterName": "a#lo#hi#", "methodBody": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tprivate static int countRunAndMakeAscending (Object[] a, int lo, int hi) {\n\t\tif (DEBUG) assert lo < hi;\n\t\tint runHi = lo + 1;\n\t\tif (runHi == hi) return 1;\n\n\t\t// Find end of run, and reverse range if descending\n\t\tif (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) { // Descending\n\t\t\twhile (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)\n\t\t\t\trunHi++;\n\t\t\treverseRange(a, lo, runHi);\n\t\t} else { // Ascending\n\t\t\twhile (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)\n\t\t\t\trunHi++;\n\t\t}\n\n\t\treturn runHi - lo;\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#NumberLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#WhileStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)WhileStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the length of the run beginning at the specified position in the specified array and reverses the run if it is descending (ensuring that the run will always be ascending when the method returns). A run is the longest ascending sequence with: a[lo] <= a[lo + 1] <= a[lo + 2] <= ... or the longest descending sequence with: a[lo] > a[lo + 1] > a[lo + 2] > ... For its intended use in a stable mergesort, the strictness of the definition of \"descending\" is needed so that the call can safely reverse a descending sequence without violating stability.", "call_func_name": ["java.lang.Comparable.compareTo", "com.artemis.utils.ComparableTimSort.reverseRange"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object[]", "int", "int"]], "passed_comments": [{"com.artemis.utils.ComparableTimSort.reverseRange": "Reverse the specified range of the specified array."}]}, {"index": "376", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.reverseRange", "methodParameterType": "Object[]#int#int#", "methodParameterName": "a#lo#hi#", "methodBody": "private static void reverseRange (Object[] a, int lo, int hi) {\n\t\thi--;\n\t\twhile (lo < hi) {\n\t\t\tObject t = a[lo];\n\t\t\ta[lo++] = a[hi];\n\t\t\ta[hi--] = t;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Reverse the specified range of the specified array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "377", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.minRunLength", "methodParameterType": "int#", "methodParameterName": "n#", "methodBody": "private static int minRunLength (int n) {\n\t\tif (DEBUG) assert n >= 0;\n\t\tint r = 0; // Becomes 1 if any 1 bits are shifted off\n\t\twhile (n >= MIN_MERGE) {\n\t\t\tr |= (n & 1);\n\t\t\tn >>= 1;\n\t\t}\n\t\treturn n + r;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the minimum acceptable run length for an array of the specified length. Natural runs shorter than this will be extended with  {@link #binarySort}. Roughly speaking, the computation is: If n < MIN_MERGE, return n (it's too small to bother with fancy stuff). Else if n is an exact power of 2, return MIN_MERGE/2. Else return an int k, MIN_MERGE/2 <= k <= MIN_MERGE, such that n/k is close to, but strictly less than, an exact power of 2. For the rationale, see listsort.txt.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "378", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.pushRun", "methodParameterType": "int#int#", "methodParameterName": "runBase#runLen#", "methodBody": "private void pushRun (int runBase, int runLen) {\n\t\tthis.runBase[stackSize] = runBase;\n\t\tthis.runLen[stackSize] = runLen;\n\t\tstackSize++;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(ArrayAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Pushes the specified run onto the pending-run stack.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "379", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.mergeCollapse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void mergeCollapse () {\n\t\twhile (stackSize > 1) {\n\t\t\tint n = stackSize - 2;\n\t\t\tif (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {\n\t\t\t\tif (runLen[n - 1] < runLen[n + 1]) n--;\n\t\t\t\tmergeAt(n);\n\t\t\t} else if (runLen[n] <= runLen[n + 1]) {\n\t\t\t\tmergeAt(n);\n\t\t\t} else {\n\t\t\t\tbreak; // Invariant is established\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#BreakStatement#Block#IfStatement#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(BreakStatement)BreakStatement)Block)IfStatement)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Examines the stack of runs waiting to be merged and merges adjacent runs until the stack invariants are reestablished: 1. runLen[i - 3] > runLen[i - 2] + runLen[i - 1] 2. runLen[i - 2] > runLen[i - 1] This method is called each time a new run is pushed onto the stack, so the invariants are guaranteed to hold for i < stackSize upon entry to the method.", "call_func_name": ["com.artemis.utils.ComparableTimSort.mergeAt"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.ComparableTimSort.mergeAt": "Merges the two runs at stack indices i and i+1. Run i must be the penultimate or antepenultimate run on the stack. In other words, i must be equal to stackSize-2 or stackSize-3."}]}, {"index": "380", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.mergeForceCollapse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void mergeForceCollapse () {\n\t\twhile (stackSize > 1) {\n\t\t\tint n = stackSize - 2;\n\t\t\tif (n > 0 && runLen[n - 1] < runLen[n + 1]) n--;\n\t\t\tmergeAt(n);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Merges all runs on the stack until only one remains. This method is called once, to complete the sort.", "call_func_name": ["com.artemis.utils.ComparableTimSort.mergeAt"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.ComparableTimSort.mergeAt": "Merges the two runs at stack indices i and i+1. Run i must be the penultimate or antepenultimate run on the stack. In other words, i must be equal to stackSize-2 or stackSize-3."}]}, {"index": "381", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.mergeAt", "methodParameterType": "int#", "methodParameterName": "i#", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tprivate void mergeAt (int i) {\n\t\tif (DEBUG) assert stackSize >= 2;\n\t\tif (DEBUG) assert i >= 0;\n\t\tif (DEBUG) assert i == stackSize - 2 || i == stackSize - 3;\n\n\t\tint base1 = runBase[i];\n\t\tint len1 = runLen[i];\n\t\tint base2 = runBase[i + 1];\n\t\tint len2 = runLen[i + 1];\n\t\tif (DEBUG) assert len1 > 0 && len2 > 0;\n\t\tif (DEBUG) assert base1 + len1 == base2;\n\n\t\t/*\n\t\t * Record the length of the combined runs; if i is the 3rd-last run now, also slide over the last run (which isn't involved\n\t\t * in this merge). The current run (i+1) goes away in any case.\n\t\t */\n\t\trunLen[i] = len1 + len2;\n\t\tif (i == stackSize - 3) {\n\t\t\trunBase[i + 1] = runBase[i + 2];\n\t\t\trunLen[i + 1] = runLen[i + 2];\n\t\t}\n\t\tstackSize--;\n\n\t\t/*\n\t\t * Find where the first element of run2 goes in run1. Prior elements in run1 can be ignored (because they're already in\n\t\t * place).\n\t\t */\n\t\tint k = gallopRight((Comparable<Object>)a[base2], a, base1, len1, 0);\n\t\tif (DEBUG) assert k >= 0;\n\t\tbase1 += k;\n\t\tlen1 -= k;\n\t\tif (len1 == 0) return;\n\n\t\t/*\n\t\t * Find where the last element of run1 goes in run2. Subsequent elements in run2 can be ignored (because they're already in\n\t\t * place).\n\t\t */\n\t\tlen2 = gallopLeft((Comparable<Object>)a[base1 + len1 - 1], a, base2, len2, len2 - 1);\n\t\tif (DEBUG) assert len2 >= 0;\n\t\tif (len2 == 0) return;\n\n\t\t// Merge remaining runs, using tmp array with min(len1, len2) elements\n\t\tif (len1 <= len2)\n\t\t\tmergeLo(base1, len1, base2, len2);\n\t\telse\n\t\t\tmergeHi(base1, len1, base2, len2);\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ArrayAccess#CastExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#ArrayAccess#CastExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ArrayAccess(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Merges the two runs at stack indices i and i+1. Run i must be the penultimate or antepenultimate run on the stack. In other words, i must be equal to stackSize-2 or stackSize-3.", "call_func_name": ["com.artemis.utils.ComparableTimSort.gallopRight", "com.artemis.utils.ComparableTimSort.gallopLeft", "com.artemis.utils.ComparableTimSort.mergeLo", "com.artemis.utils.ComparableTimSort.mergeHi"], "call_func_parameter": [["java.lang.Comparable", "java.lang.Object[]", "int", "int", "int"], ["java.lang.Comparable", "java.lang.Object[]", "int", "int", "int"], ["int", "int", "int", "int"], ["int", "int", "int", "int"]], "passed_comments": [{"com.artemis.utils.ComparableTimSort.gallopRight": "Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element."}, {"com.artemis.utils.ComparableTimSort.gallopLeft": "Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element."}, {"com.artemis.utils.ComparableTimSort.mergeLo": "Merges two adjacent runs in place, in a stable fashion. The first element of the first run must be greater than the first element of the second run (a[base1] > a[base2]), and the last element of the first run (a[base1 + len1-1]) must be greater than all elements of the second run. For performance, this method should be called only when len1 <= len2; its twin, mergeHi should be called if len1 >= len2. (Either method may be called if len1 == len2.)"}, {"com.artemis.utils.ComparableTimSort.mergeHi": "Like mergeLo, except that this method should be called only if len1 >= len2; mergeLo should be called if len1 <= len2. (Either method may be called if len1 == len2.)"}]}, {"index": "382", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.gallopLeft", "methodParameterType": "Comparable<Object>#Object[]#int#int#int#", "methodParameterName": "key#a#base#len#hint#", "methodBody": "private static int gallopLeft (Comparable<Object> key, Object[] a, int base, int len, int hint) {\n\t\tif (DEBUG) assert len > 0 && hint >= 0 && hint < len;\n\n\t\tint lastOfs = 0;\n\t\tint ofs = 1;\n\t\tif (key.compareTo(a[base + hint]) > 0) {\n\t\t\t// Gallop right until a[base+hint+lastOfs] < key <= a[base+hint+ofs]\n\t\t\tint maxOfs = len - hint;\n\t\t\twhile (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to base\n\t\t\tlastOfs += hint;\n\t\t\tofs += hint;\n\t\t} else { // key <= a[base + hint]\n\t\t\t// Gallop left until a[base+hint-ofs] < key <= a[base+hint-lastOfs]\n\t\t\tfinal int maxOfs = hint + 1;\n\t\t\twhile (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to base\n\t\t\tint tmp = lastOfs;\n\t\t\tlastOfs = hint - ofs;\n\t\t\tofs = hint - tmp;\n\t\t}\n\t\tif (DEBUG) assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;\n\n\t\t/*\n\t\t * Now a[base+lastOfs] < key <= a[base+ofs], so key belongs somewhere to the right of lastOfs but no farther right than ofs.\n\t\t * Do a binary search, with invariant a[base + lastOfs - 1] < key <= a[base + ofs].\n\t\t */\n\t\tlastOfs++;\n\t\twhile (lastOfs < ofs) {\n\t\t\tint m = lastOfs + ((ofs - lastOfs) >>> 1);\n\n\t\t\tif (key.compareTo(a[base + m]) > 0)\n\t\t\t\tlastOfs = m + 1; // a[base + m] < key\n\t\t\telse\n\t\t\t\tofs = m; // key <= a[base + m]\n\t\t}\n\t\tif (DEBUG) assert lastOfs == ofs; // so a[base + ofs - 1] < key <= a[base + ofs]\n\t\treturn ofs;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element.", "call_func_name": ["java.lang.Comparable.compareTo"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "383", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.gallopRight", "methodParameterType": "Comparable<Object>#Object[]#int#int#int#", "methodParameterName": "key#a#base#len#hint#", "methodBody": "private static int gallopRight (Comparable<Object> key, Object[] a, int base, int len, int hint) {\n\t\tif (DEBUG) assert len > 0 && hint >= 0 && hint < len;\n\n\t\tint ofs = 1;\n\t\tint lastOfs = 0;\n\t\tif (key.compareTo(a[base + hint]) < 0) {\n\t\t\t// Gallop left until a[b+hint - ofs] <= key < a[b+hint - lastOfs]\n\t\t\tint maxOfs = hint + 1;\n\t\t\twhile (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to b\n\t\t\tint tmp = lastOfs;\n\t\t\tlastOfs = hint - ofs;\n\t\t\tofs = hint - tmp;\n\t\t} else { // a[b + hint] <= key\n\t\t\t// Gallop right until a[b+hint + lastOfs] <= key < a[b+hint + ofs]\n\t\t\tint maxOfs = len - hint;\n\t\t\twhile (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to b\n\t\t\tlastOfs += hint;\n\t\t\tofs += hint;\n\t\t}\n\t\tif (DEBUG) assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;\n\n\t\t/*\n\t\t * Now a[b + lastOfs] <= key < a[b + ofs], so key belongs somewhere to the right of lastOfs but no farther right than ofs.\n\t\t * Do a binary search, with invariant a[b + lastOfs - 1] <= key < a[b + ofs].\n\t\t */\n\t\tlastOfs++;\n\t\twhile (lastOfs < ofs) {\n\t\t\tint m = lastOfs + ((ofs - lastOfs) >>> 1);\n\n\t\t\tif (key.compareTo(a[base + m]) < 0)\n\t\t\t\tofs = m; // key < a[b + m]\n\t\t\telse\n\t\t\t\tlastOfs = m + 1; // a[b + m] <= key\n\t\t}\n\t\tif (DEBUG) assert lastOfs == ofs; // so a[b + ofs - 1] <= key < a[b + ofs]\n\t\treturn ofs;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element.", "call_func_name": ["java.lang.Comparable.compareTo"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "384", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.mergeLo", "methodParameterType": "int#int#int#int#", "methodParameterName": "base1#len1#base2#len2#", "methodBody": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tprivate void mergeLo (int base1, int len1, int base2, int len2) {\n\t\tif (DEBUG) assert len1 > 0 && len2 > 0 && base1 + len1 == base2;\n\n\t\t// Copy first run into temp array\n\t\tObject[] a = this.a; // For performance\n\t\tObject[] tmp = ensureCapacity(len1);\n\t\tSystem.arraycopy(a, base1, tmp, 0, len1);\n\n\t\tint cursor1 = 0; // Indexes into tmp array\n\t\tint cursor2 = base2; // Indexes int a\n\t\tint dest = base1; // Indexes int a\n\n\t\t// Move first element of second run and deal with degenerate cases\n\t\ta[dest++] = a[cursor2++];\n\t\tif (--len2 == 0) {\n\t\t\tSystem.arraycopy(tmp, cursor1, a, dest, len1);\n\t\t\treturn;\n\t\t}\n\t\tif (len1 == 1) {\n\t\t\tSystem.arraycopy(a, cursor2, a, dest, len2);\n\t\t\ta[dest + len2] = tmp[cursor1]; // Last elt of run 1 to end of merge\n\t\t\treturn;\n\t\t}\n\n\t\tint minGallop = this.minGallop; // Use local variable for performance\n\t\touter:\n\t\twhile (true) {\n\t\t\tint count1 = 0; // Number of times in a row that first run won\n\t\t\tint count2 = 0; // Number of times in a row that second run won\n\n\t\t\t/*\n\t\t\t * Do the straightforward thing until (if ever) one run starts winning consistently.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 1 && len2 > 0;\n\t\t\t\tif (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {\n\t\t\t\t\ta[dest++] = a[cursor2++];\n\t\t\t\t\tcount2++;\n\t\t\t\t\tcount1 = 0;\n\t\t\t\t\tif (--len2 == 0) break outer;\n\t\t\t\t} else {\n\t\t\t\t\ta[dest++] = tmp[cursor1++];\n\t\t\t\t\tcount1++;\n\t\t\t\t\tcount2 = 0;\n\t\t\t\t\tif (--len1 == 1) break outer;\n\t\t\t\t}\n\t\t\t} while ((count1 | count2) < minGallop);\n\n\t\t\t/*\n\t\t\t * One run is winning so consistently that galloping may be a huge win. So try that, and continue galloping until (if\n\t\t\t * ever) neither run appears to be winning consistently anymore.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 1 && len2 > 0;\n\t\t\t\tcount1 = gallopRight((Comparable)a[cursor2], tmp, cursor1, len1, 0);\n\t\t\t\tif (count1 != 0) {\n\t\t\t\t\tSystem.arraycopy(tmp, cursor1, a, dest, count1);\n\t\t\t\t\tdest += count1;\n\t\t\t\t\tcursor1 += count1;\n\t\t\t\t\tlen1 -= count1;\n\t\t\t\t\tif (len1 <= 1) // len1 == 1 || len1 == 0\n\t\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\ta[dest++] = a[cursor2++];\n\t\t\t\tif (--len2 == 0) break outer;\n\n\t\t\t\tcount2 = gallopLeft((Comparable)tmp[cursor1], a, cursor2, len2, 0);\n\t\t\t\tif (count2 != 0) {\n\t\t\t\t\tSystem.arraycopy(a, cursor2, a, dest, count2);\n\t\t\t\t\tdest += count2;\n\t\t\t\t\tcursor2 += count2;\n\t\t\t\t\tlen2 -= count2;\n\t\t\t\t\tif (len2 == 0) break outer;\n\t\t\t\t}\n\t\t\t\ta[dest++] = tmp[cursor1++];\n\t\t\t\tif (--len1 == 1) break outer;\n\t\t\t\tminGallop--;\n\t\t\t} while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);\n\t\t\tif (minGallop < 0) minGallop = 0;\n\t\t\tminGallop += 2; // Penalize for leaving gallop mode\n\t\t} // End of \"outer\" loop\n\t\tthis.minGallop = minGallop < 1 ? 1 : minGallop; // Write back to field\n\n\t\tif (len1 == 1) {\n\t\t\tif (DEBUG) assert len2 > 0;\n\t\t\tSystem.arraycopy(a, cursor2, a, dest, len2);\n\t\t\ta[dest + len2] = tmp[cursor1]; // Last elt of run 1 to end of merge\n\t\t} else if (len1 == 0) {\n\t\t\tthrow new IllegalArgumentException(\"Comparison method violates its general contract!\");\n\t\t} else {\n\t\t\tif (DEBUG) assert len2 == 0;\n\t\t\tif (DEBUG) assert len1 > 1;\n\t\t\tSystem.arraycopy(tmp, cursor1, a, dest, len1);\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#BooleanLiteral#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#DoStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#DoStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#WhileStatement#LabeledStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(LabeledStatement(SimpleName)SimpleName(WhileStatement(BooleanLiteral)BooleanLiteral(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement)Block(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)DoStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)DoStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)WhileStatement)LabeledStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Merges two adjacent runs in place, in a stable fashion. The first element of the first run must be greater than the first element of the second run (a[base1] > a[base2]), and the last element of the first run (a[base1 + len1-1]) must be greater than all elements of the second run. For performance, this method should be called only when len1 <= len2; its twin, mergeHi should be called if len1 >= len2. (Either method may be called if len1 == len2.)", "call_func_name": ["com.artemis.utils.ComparableTimSort.ensureCapacity", "java.lang.System.arraycopy", "java.lang.Comparable.compareTo", "com.artemis.utils.ComparableTimSort.gallopRight", "com.artemis.utils.ComparableTimSort.gallopLeft", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["int"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"], ["java.lang.Object"], ["java.lang.Comparable", "java.lang.Object[]", "int", "int", "int"], ["java.lang.Comparable", "java.lang.Object[]", "int", "int", "int"], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.ComparableTimSort.ensureCapacity": "Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary. The size increases exponentially to ensure amortized linear time complexity."}, {"com.artemis.utils.ComparableTimSort.gallopRight": "Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element."}, {"com.artemis.utils.ComparableTimSort.gallopLeft": "Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element."}]}, {"index": "385", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.mergeHi", "methodParameterType": "int#int#int#int#", "methodParameterName": "base1#len1#base2#len2#", "methodBody": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tprivate void mergeHi (int base1, int len1, int base2, int len2) {\n\t\tif (DEBUG) assert len1 > 0 && len2 > 0 && base1 + len1 == base2;\n\n\t\t// Copy second run into temp array\n\t\tObject[] a = this.a; // For performance\n\t\tObject[] tmp = ensureCapacity(len2);\n\t\tSystem.arraycopy(a, base2, tmp, 0, len2);\n\n\t\tint cursor1 = base1 + len1 - 1; // Indexes into a\n\t\tint cursor2 = len2 - 1; // Indexes into tmp array\n\t\tint dest = base2 + len2 - 1; // Indexes into a\n\n\t\t// Move last element of first run and deal with degenerate cases\n\t\ta[dest--] = a[cursor1--];\n\t\tif (--len1 == 0) {\n\t\t\tSystem.arraycopy(tmp, 0, a, dest - (len2 - 1), len2);\n\t\t\treturn;\n\t\t}\n\t\tif (len2 == 1) {\n\t\t\tdest -= len1;\n\t\t\tcursor1 -= len1;\n\t\t\tSystem.arraycopy(a, cursor1 + 1, a, dest + 1, len1);\n\t\t\ta[dest] = tmp[cursor2];\n\t\t\treturn;\n\t\t}\n\n\t\tint minGallop = this.minGallop; // Use local variable for performance\n\t\touter:\n\t\twhile (true) {\n\t\t\tint count1 = 0; // Number of times in a row that first run won\n\t\t\tint count2 = 0; // Number of times in a row that second run won\n\n\t\t\t/*\n\t\t\t * Do the straightforward thing until (if ever) one run appears to win consistently.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 0 && len2 > 1;\n\t\t\t\tif (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {\n\t\t\t\t\ta[dest--] = a[cursor1--];\n\t\t\t\t\tcount1++;\n\t\t\t\t\tcount2 = 0;\n\t\t\t\t\tif (--len1 == 0) break outer;\n\t\t\t\t} else {\n\t\t\t\t\ta[dest--] = tmp[cursor2--];\n\t\t\t\t\tcount2++;\n\t\t\t\t\tcount1 = 0;\n\t\t\t\t\tif (--len2 == 1) break outer;\n\t\t\t\t}\n\t\t\t} while ((count1 | count2) < minGallop);\n\n\t\t\t/*\n\t\t\t * One run is winning so consistently that galloping may be a huge win. So try that, and continue galloping until (if\n\t\t\t * ever) neither run appears to be winning consistently anymore.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 0 && len2 > 1;\n\t\t\t\tcount1 = len1 - gallopRight((Comparable)tmp[cursor2], a, base1, len1, len1 - 1);\n\t\t\t\tif (count1 != 0) {\n\t\t\t\t\tdest -= count1;\n\t\t\t\t\tcursor1 -= count1;\n\t\t\t\t\tlen1 -= count1;\n\t\t\t\t\tSystem.arraycopy(a, cursor1 + 1, a, dest + 1, count1);\n\t\t\t\t\tif (len1 == 0) break outer;\n\t\t\t\t}\n\t\t\t\ta[dest--] = tmp[cursor2--];\n\t\t\t\tif (--len2 == 1) break outer;\n\n\t\t\t\tcount2 = len2 - gallopLeft((Comparable)a[cursor1], tmp, 0, len2, len2 - 1);\n\t\t\t\tif (count2 != 0) {\n\t\t\t\t\tdest -= count2;\n\t\t\t\t\tcursor2 -= count2;\n\t\t\t\t\tlen2 -= count2;\n\t\t\t\t\tSystem.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2);\n\t\t\t\t\tif (len2 <= 1) break outer; // len2 == 1 || len2 == 0\n\t\t\t\t}\n\t\t\t\ta[dest--] = a[cursor1--];\n\t\t\t\tif (--len1 == 0) break outer;\n\t\t\t\tminGallop--;\n\t\t\t} while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);\n\t\t\tif (minGallop < 0) minGallop = 0;\n\t\t\tminGallop += 2; // Penalize for leaving gallop mode\n\t\t} // End of \"outer\" loop\n\t\tthis.minGallop = minGallop < 1 ? 1 : minGallop; // Write back to field\n\n\t\tif (len2 == 1) {\n\t\t\tif (DEBUG) assert len1 > 0;\n\t\t\tdest -= len1;\n\t\t\tcursor1 -= len1;\n\t\t\tSystem.arraycopy(a, cursor1 + 1, a, dest + 1, len1);\n\t\t\ta[dest] = tmp[cursor2]; // Move first elt of run2 to front of merge\n\t\t} else if (len2 == 0) {\n\t\t\tthrow new IllegalArgumentException(\"Comparison method violates its general contract!\");\n\t\t} else {\n\t\t\tif (DEBUG) assert len1 == 0;\n\t\t\tif (DEBUG) assert len2 > 0;\n\t\t\tSystem.arraycopy(tmp, 0, a, dest - (len2 - 1), len2);\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#BooleanLiteral#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#DoStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#SimpleName#NumberLiteral#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#DoStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#WhileStatement#LabeledStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(LabeledStatement(SimpleName)SimpleName(WhileStatement(BooleanLiteral)BooleanLiteral(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement)Block(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)DoStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)DoStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)WhileStatement)LabeledStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Like mergeLo, except that this method should be called only if len1 >= len2; mergeLo should be called if len1 <= len2. (Either method may be called if len1 == len2.)", "call_func_name": ["com.artemis.utils.ComparableTimSort.ensureCapacity", "java.lang.System.arraycopy", "java.lang.Comparable.compareTo", "com.artemis.utils.ComparableTimSort.gallopRight", "com.artemis.utils.ComparableTimSort.gallopLeft", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["int"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"], ["java.lang.Object"], ["java.lang.Comparable", "java.lang.Object[]", "int", "int", "int"], ["java.lang.Comparable", "java.lang.Object[]", "int", "int", "int"], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.ComparableTimSort.ensureCapacity": "Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary. The size increases exponentially to ensure amortized linear time complexity."}, {"com.artemis.utils.ComparableTimSort.gallopRight": "Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element."}, {"com.artemis.utils.ComparableTimSort.gallopLeft": "Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element."}]}, {"index": "386", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "minCapacity#", "methodBody": "private Object[] ensureCapacity (int minCapacity) {\n\t\tif (tmp.length < minCapacity) {\n\t\t\t// Compute smallest power of 2 > minCapacity\n\t\t\tint newSize = minCapacity;\n\t\t\tnewSize |= newSize >> 1;\n\t\t\tnewSize |= newSize >> 2;\n\t\t\tnewSize |= newSize >> 4;\n\t\t\tnewSize |= newSize >> 8;\n\t\t\tnewSize |= newSize >> 16;\n\t\t\tnewSize++;\n\n\t\t\tif (newSize < 0) // Not bloody likely!\n\t\t\t\tnewSize = minCapacity;\n\t\t\telse\n\t\t\t\tnewSize = Math.min(newSize, a.length >>> 1);\n\n\t\t\tObject[] newArray = new Object[newSize];\n\t\t\ttmp = newArray;\n\t\t}\n\t\treturn tmp;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary. The size increases exponentially to ensure amortized linear time complexity.", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["int", "int"]], "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ComparableTimSort.java", "methodName": "com.artemis.utils.ComparableTimSort.rangeCheck", "methodParameterType": "int#int#int#", "methodParameterName": "arrayLen#fromIndex#toIndex#", "methodBody": "private static void rangeCheck (int arrayLen, int fromIndex, int toIndex) {\n\t\tif (fromIndex > toIndex) throw new IllegalArgumentException(\"fromIndex(\" + fromIndex + \") > toIndex(\" + toIndex + \")\");\n\t\tif (fromIndex < 0) throw new ArrayIndexOutOfBoundsException(fromIndex);\n\t\tif (toIndex > arrayLen) throw new ArrayIndexOutOfBoundsException(toIndex);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks that fromIndex and toIndex are in range, and throws an appropriate exception if they aren't.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.lang.ArrayIndexOutOfBoundsException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.IntBag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public IntBag() {\n\t\tthis(64);\n\t}", "AST": "Javadoc#Modifier#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with an initial capacity of 64.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "389", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.IntBag", "methodParameterType": "int#", "methodParameterName": "capacity#", "methodBody": "public IntBag(int capacity) {\n\t\tdata = new int[capacity];\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with the specified initial capacity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "390", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.removeValue", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public boolean removeValue(int value) {\n\t\tint index = indexOf(value);\n\t\tif (index > -1)\n\t\t\tremoveIndex(index);\n\n\t\treturn index > -1;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the first occurrence of the value from this IntBag, if it is present.", "call_func_name": ["com.artemis.utils.IntBag.indexOf", "com.artemis.utils.IntBag.removeIndex"], "call_func_parameter": [["int"], ["int"]], "passed_comments": [{"com.artemis.utils.IntBag.indexOf": "Find index of element."}, {"com.artemis.utils.IntBag.removeIndex": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>"}]}, {"index": "391", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.remove", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "@Deprecated\n\tpublic int remove(int index) {\n\t\tint e = data[index]; // make copy of element to remove so it can be returned\n\t\tdata[index] = data[--size]; // overwrite item to remove with last element\n\t\tdata[size] = 0; // null last element, so gc can do its work\n\t\treturn e;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#PrefixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.removeIndex", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public int removeIndex(int index) {\n\t\tint e = data[index]; // make copy of element to remove so it can be returned\n\t\tdata[index] = data[--size]; // overwrite item to remove with last element\n\t\tdata[size] = 0; // null last element, so gc can do its work\n\t\treturn e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#PrefixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.indexOf", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public int indexOf(int value) {\n\t\tfor(int i = 0; size > i; i++) {\n\t\t\tif(value == data[i]) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#ForStatement#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find index of element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.contains", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public boolean contains(int value) {\n\t\tfor(int i = 0; size > i; i++) {\n\t\t\tif(value == data[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if bag contains this element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public int get(int index) {\n\t\tif (index >= size) {\n\t\t\tString message = \"tried accessing element \" + index + \"/\" + size;\n\t\t\tthrow new ArrayIndexOutOfBoundsException(message);\n\t\t}\n\n\t\treturn data[index];\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.ArrayIndexOutOfBoundsException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int size() {\n\t\treturn size;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements in this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.getCapacity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCapacity() {\n\t\treturn data.length;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements the bag can hold without growing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.isIndexWithinBounds", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public boolean isIndexWithinBounds(int index) {\n\t\treturn index < getCapacity();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the internal storage supports this index.", "call_func_name": ["com.artemis.utils.IntBag.getCapacity"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.utils.IntBag.getCapacity": "Returns the number of elements the bag can hold without growing."}]}, {"index": "399", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEmpty() {\n\t\treturn size == 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this bag contains no elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "400", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.add", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void add(int value) {\n\t\t// is size greater than capacity increase capacity\n\t\tif (size == data.length)\n\t\t\tgrow(2 * data.length);\n\n\t\tdata[size++] = value;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>", "call_func_name": ["com.artemis.utils.IntBag.grow"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.addAll", "methodParameterType": "IntBag#", "methodParameterName": "other#", "methodBody": "public void addAll(IntBag other) {\n\t\tfor (int i = 0; i < other.size(); i++) {\n\t\t\tadd(other.data[i]);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified elements to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>", "call_func_name": ["com.artemis.utils.IntBag.size", "com.artemis.utils.IntBag.add"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.IntBag.add": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>"}]}, {"index": "402", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.set", "methodParameterType": "int#int#", "methodParameterName": "index#value#", "methodBody": "public void set(int index, int value) {\n\t\tif(index >= data.length) {\n\t\t\tgrow(max((2 * data.length), index + 1));\n\t\t}\n\n\t\tsize = max(size, index + 1);\n\t\tdata[index] = value;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set element at specified index in the bag.", "call_func_name": ["java.lang.Math.max", "com.artemis.utils.IntBag.grow"], "call_func_parameter": [["int", "int"], ["int"]], "passed_comments": "/"}, {"index": "403", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void ensureCapacity(int index) {\n\t\tif(index >= data.length) {\n\t\t\tgrow(index + 1);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Check if an item, if added at the given item will fit into the bag. <p> If not, the bag capacity will be increased to hold an item at the index. </p>", "call_func_name": ["com.artemis.utils.IntBag.grow"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.clear", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void clear() {\n\t\tArrays.fill(data, 0, size, 0);\n\t\tsize = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>", "call_func_name": ["java.util.Arrays.fill"], "call_func_parameter": [["int[]", "int", "int", "int"]], "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int[] getData() {\n\t\treturn data;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this bag's underlying array. <p> Use with care. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBag.java", "methodName": "com.artemis.utils.IntBag.setSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public void setSize(int size) {\n\t\tthis.size = size;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the size. <p> This will not resize the bag, nor will it clean up contents beyond the given size. Use with caution. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.forName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "static public Class forName (String name) throws ReflectionException {\n\t\ttry {\n\t\t\treturn Class.forName(name);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new ReflectionException(\"Class not found: \" + name, e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object associated with the class or interface with the supplied string name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getSimpleName", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public String getSimpleName (Class c) {\n\t\treturn c.getSimpleName();\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the simple name of the underlying class as supplied in the source code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isInstance", "methodParameterType": "Class#Object#", "methodParameterName": "c#obj#", "methodBody": "static public boolean isInstance (Class c, Object obj) {\n\t\treturn c.isInstance(obj);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the supplied Object is assignment-compatible with the object represented by supplied Class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "410", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isAssignableFrom", "methodParameterType": "Class#Class#", "methodParameterName": "c1#c2#", "methodBody": "static public boolean isAssignableFrom (Class c1, Class c2) {\n\t\treturn c1.isAssignableFrom(c2);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the class or interface represented by first Class parameter is either the same as, or is a superclass or superinterface of, the class or interface represented by the second Class parameter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "411", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isMemberClass", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public boolean isMemberClass (Class c) {\n\t\treturn c.isMemberClass();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the class or interface represented by the supplied Class is a member class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isStaticClass", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public boolean isStaticClass (Class c) {\n\t\treturn Modifier.isStatic(c.getModifiers());\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the class or interface represented by the supplied Class is a static class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "413", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isAbstractClass", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public boolean isAbstractClass (Class c) {\n\t\treturn Modifier.isAbstract(c.getModifiers());\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the class or interface represented by the supplied Class is an abstract class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "414", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.newInstance", "methodParameterType": "Class<T>#", "methodParameterName": "c#", "methodBody": "static public <T> T newInstance (Class<T> c) throws ReflectionException {\n\t\ttry {\n\t\t\treturn c.newInstance();\n\t\t} catch (InstantiationException e) {\n\t\t\tString help = \". Make sure class has a public no-arg constructor.\";\n\t\t\tthrow new ReflectionException(\"Could not instantiate instance of class: \" + c.getName() + help, e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tString help = \". Make sure class has a public no-arg constructor.\";\n\t\t\tthrow new ReflectionException(\"Could not instantiate instance of class: \" + c.getName() + help, e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of the class represented by the supplied Class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "415", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getConstructors", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Constructor[] getConstructors (Class c) {\n\t\tjava.lang.reflect.Constructor[] constructors = c.getConstructors();\n\t\tConstructor[] result = new Constructor[constructors.length];\n\t\tfor (int i = 0, j = constructors.length; i < j; i++) {\n\t\t\tresult[i] = new Constructor(constructors[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Constructor} containing the public constructors of the class represented by the supplied Class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getConstructor", "methodParameterType": "Class#Class#", "methodParameterName": "c#parameterTypes#", "methodBody": "static public Constructor getConstructor (Class c, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Constructor(c.getConstructor(parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation occurred while getting constructor for class: '\" + c.getName() + \"'.\", e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Constructor not found for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Constructor} that represents the public constructor for the supplied class which takes the supplied parameter types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "417", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredConstructor", "methodParameterType": "Class#Class#", "methodParameterName": "c#parameterTypes#", "methodBody": "static public Constructor getDeclaredConstructor (Class c, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Constructor(c.getDeclaredConstructor(parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting constructor for class: \" + c.getName(), e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Constructor not found for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Constructor} that represents the constructor for the supplied class which takes the supplied parameter types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "418", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getMethods", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Method[] getMethods (Class c) {\n\t\tjava.lang.reflect.Method[] methods = c.getMethods();\n\t\tMethod[] result = new Method[methods.length];\n\t\tfor (int i = 0, j = methods.length; i < j; i++) {\n\t\t\tresult[i] = new Method(methods[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Method} containing the public member methods of the class represented by the supplied Class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getMethod", "methodParameterType": "Class#String#Class#", "methodParameterName": "c#name#parameterTypes#", "methodBody": "static public Method getMethod (Class c, String name, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Method(c.getMethod(name, parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting method: \" + name + \", for class: \" + c.getName(), e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Method not found: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Method} that represents the public member method for the supplied class which takes the supplied parameter types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "420", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredMethods", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Method[] getDeclaredMethods (Class c) {\n\t\tjava.lang.reflect.Method[] methods = c.getDeclaredMethods();\n\t\tMethod[] result = new Method[methods.length];\n\t\tfor (int i = 0, j = methods.length; i < j; i++) {\n\t\t\tresult[i] = new Method(methods[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Method} containing the methods declared by the class represented by the supplied Class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "421", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredMethod", "methodParameterType": "Class#String#Class#", "methodParameterName": "c#name#parameterTypes#", "methodBody": "static public Method getDeclaredMethod (Class c, String name, Class... parameterTypes) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Method(c.getDeclaredMethod(name, parameterTypes));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting method: \" + name + \", for class: \" + c.getName(), e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new ReflectionException(\"Method not found: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Method} that represents the method declared by the supplied class which takes the supplied parameter types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "422", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getFields", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Field[] getFields (Class c) {\n\t\tjava.lang.reflect.Field[] fields = c.getFields();\n\t\tField[] result = new Field[fields.length];\n\t\tfor (int i = 0, j = fields.length; i < j; i++) {\n\t\t\tresult[i] = new Field(fields[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Field} containing the public fields of the class represented by the supplied Class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "423", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getField", "methodParameterType": "Class#String#", "methodParameterName": "c#name#", "methodBody": "static public Field getField (Class c, String name) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Field(c.getField(name));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting field: \" + name + \", for class: \" + c.getName(), e);\n\t\t} catch (NoSuchFieldException e) {\n\t\t\tthrow new ReflectionException(\"Field not found: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Field} that represents the specified public member field for the supplied class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredFields", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Field[] getDeclaredFields (Class c) {\n\t\tjava.lang.reflect.Field[] fields = c.getDeclaredFields();\n\t\tField[] result = new Field[fields.length];\n\t\tfor (int i = 0, j = fields.length; i < j; i++) {\n\t\t\tresult[i] = new Field(fields[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Field} objects reflecting all the fields declared by the supplied class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "425", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getAnnotation", "methodParameterType": "Class#Class<T>#", "methodParameterName": "c#annotationClass#", "methodBody": "static public <T extends java.lang.annotation.Annotation> T getAnnotation(Class c, Class<T> annotationClass) {\n\t\tfinal Annotation declaredAnnotation = getDeclaredAnnotation(c,annotationClass);\n\t\treturn declaredAnnotation != null ? declaredAnnotation.getAnnotation(annotationClass) : null;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of the annotation represented by the supplied annotationClass.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredField", "methodParameterType": "Class#String#", "methodParameterName": "c#name#", "methodBody": "static public Field getDeclaredField (Class c, String name) throws ReflectionException {\n\t\ttry {\n\t\t\treturn new Field(c.getDeclaredField(name));\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new ReflectionException(\"Security violation while getting field: \" + name + \", for class: \" + c.getName(), e);\n\t\t} catch (NoSuchFieldException e) {\n\t\t\tthrow new ReflectionException(\"Field not found: \" + name + \", for class: \" + c.getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Field} that represents the specified declared field for the supplied class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "427", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.isAnnotationPresent", "methodParameterType": "Class#Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "c#annotationType#", "methodBody": "static public boolean isAnnotationPresent (Class c, Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\treturn c.isAnnotationPresent(annotationType);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the supplied class includes an annotation of the given class type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "428", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredAnnotations", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "static public Annotation[] getDeclaredAnnotations (Class c) {\n\t\tjava.lang.annotation.Annotation[] annotations = c.getDeclaredAnnotations();\n\t\tAnnotation[] result = new Annotation[annotations.length];\n\t\tfor (int i = 0; i < annotations.length; i++) {\n\t\t\tresult[i] = new Annotation(annotations[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Annotation} objects reflecting all annotations declared by the supplied class,or an empty array if there are none. Does not include inherited annotations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ClassReflection.java", "methodName": "com.artemis.utils.reflect.ClassReflection.getDeclaredAnnotation", "methodParameterType": "Class#Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "c#annotationType#", "methodBody": "static public Annotation getDeclaredAnnotation (Class c, Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = c.getDeclaredAnnotations();\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn new Annotation(annotation);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName () {\n\t\treturn method.getName();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getReturnType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getReturnType () {\n\t\treturn method.getReturnType();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Class object that represents the formal return type of the method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getParameterTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class[] getParameterTypes () {\n\t\treturn method.getParameterTypes();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "433", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getDeclaringClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getDeclaringClass () {\n\t\treturn method.getDeclaringClass();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object representing the class or interface that declares the method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isAbstract", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAbstract () {\n\t\treturn Modifier.isAbstract(method.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code abstract} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isDefaultAccess", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDefaultAccess () {\n\t\treturn !isPrivate() && !isProtected() && !isPublic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method does not include any of the  {@code private},  {@code protected}, or  {@code public} modifiers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isFinal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFinal () {\n\t\treturn Modifier.isFinal(method.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code final} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "437", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isPrivate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPrivate () {\n\t\treturn Modifier.isPrivate(method.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code private} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isProtected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isProtected () {\n\t\treturn Modifier.isProtected(method.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code protected} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "439", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isPublic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPublic () {\n\t\treturn Modifier.isPublic(method.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code public} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "440", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isNative", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isNative () {\n\t\treturn Modifier.isNative(method.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code native} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "441", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isStatic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStatic () {\n\t\treturn Modifier.isStatic(method.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method includes the  {@code static} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "442", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isVarArgs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isVarArgs () {\n\t\treturn method.isVarArgs();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the method takes a variable number of arguments.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "443", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.invoke", "methodParameterType": "Object#Object#", "methodParameterName": "obj#args#", "methodBody": "public Object invoke (Object obj, Object... args) throws ReflectionException {\n\t\ttry {\n\t\t\treturn method.invoke(obj, args);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Illegal argument(s) supplied to method: \" + getName(), e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new ReflectionException(\"Illegal access to method: \" + getName(), e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new ReflectionException(\"Exception occurred in method: \" + getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Invokes the underlying method on the supplied object with the supplied parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "444", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.isAnnotationPresent", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public boolean isAnnotationPresent (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\treturn method.isAnnotationPresent(annotationType);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the field includes an annotation of the provided class type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "445", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getDeclaredAnnotations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Annotation[] getDeclaredAnnotations () {\n\t\tjava.lang.annotation.Annotation[] annotations = method.getDeclaredAnnotations();\n\t\tAnnotation[] result = new Annotation[annotations.length];\n\t\tfor (int i = 0; i < annotations.length; i++) {\n\t\t\tresult[i] = new Annotation(annotations[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Annotation} objects reflecting all annotations declared by this field,or an empty array if there are none. Does not include inherited annotations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "446", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Method.java", "methodName": "com.artemis.utils.reflect.Method.getDeclaredAnnotation", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public Annotation getDeclaredAnnotation (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = method.getDeclaredAnnotations();\n\t\tif (annotations == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn new Annotation(annotation);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "447", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Constructor.java", "methodName": "com.artemis.utils.reflect.Constructor.getParameterTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class[] getParameterTypes () {\n\t\treturn constructor.getParameterTypes();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Constructor.java", "methodName": "com.artemis.utils.reflect.Constructor.getDeclaringClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getDeclaringClass () {\n\t\treturn constructor.getDeclaringClass();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object representing the class or interface that declares the constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "449", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Constructor.java", "methodName": "com.artemis.utils.reflect.Constructor.newInstance", "methodParameterType": "Object#", "methodParameterName": "args#", "methodBody": "public Object newInstance (Object... args) throws ReflectionException {\n\t\ttry {\n\t\t\treturn constructor.newInstance(args);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Illegal argument(s) supplied to constructor for class: \" + getDeclaringClass().getName(), e);\n\t\t} catch (InstantiationException e) {\n\t\t\tthrow new ReflectionException(\"Could not instantiate instance of class: \" + getDeclaringClass().getName(), e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new ReflectionException(\"Could not instantiate instance of class: \" + getDeclaringClass().getName(), e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new ReflectionException(\"Exception occurred in constructor for class: \" + getDeclaringClass().getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Uses the constructor to create and initialize a new instance of the constructor's declaring class, with the supplied initialization parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "450", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName () {\n\t\treturn field.getName();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of the field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "451", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getType () {\n\t\treturn field.getType();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Class object that identifies the declared type for the field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "452", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getDeclaringClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class getDeclaringClass () {\n\t\treturn field.getDeclaringClass();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Class object representing the class or interface that declares the field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "453", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isDefaultAccess", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDefaultAccess () {\n\t\treturn !isPrivate() && !isProtected() && !isPublic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field does not include any of the  {@code private},  {@code protected}, or  {@code public} modifiers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "454", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isFinal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFinal () {\n\t\treturn Modifier.isFinal(field.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code final} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isPrivate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPrivate () {\n\t\treturn Modifier.isPrivate(field.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code private} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isProtected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isProtected () {\n\t\treturn Modifier.isProtected(field.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code protected} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "457", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isPublic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPublic () {\n\t\treturn Modifier.isPublic(field.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code public} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "458", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isStatic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStatic () {\n\t\treturn Modifier.isStatic(field.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code static} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isTransient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isTransient () {\n\t\treturn Modifier.isTransient(field.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code transient} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isVolatile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isVolatile () {\n\t\treturn Modifier.isVolatile(field.getModifiers());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field includes the  {@code volatile} modifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "461", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isSynthetic", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSynthetic () {\n\t\treturn field.isSynthetic();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the field is a synthetic field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getElementType", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public Class getElementType (int index) {\n\t\tType genericType = field.getGenericType();\n\t\tif (genericType instanceof ParameterizedType) {\n\t\t\tType[] actualTypes = ((ParameterizedType)genericType).getActualTypeArguments();\n\t\t\tif (actualTypes.length - 1 >= index) {\n\t\t\t\tType actualType = actualTypes[index];\n\t\t\t\tif (actualType instanceof Class)\n\t\t\t\t\treturn (Class)actualType;\n\t\t\t\telse if (actualType instanceof ParameterizedType)\n\t\t\t\t\treturn (Class)((ParameterizedType)actualType).getRawType();\n\t\t\t\telse if (actualType instanceof GenericArrayType) {\n\t\t\t\t\tType componentType = ((GenericArrayType)actualType).getGenericComponentType();\n\t\t\t\t\tif (componentType instanceof Class) return ArrayReflection.newInstance((Class)componentType, 0).getClass();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#CastExpression#ReturnStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#IfStatement#Block#IfStatement#IfStatement#IfStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement)Block)IfStatement)IfStatement)IfStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the type of the field is parameterized, returns the Class object representing the parameter type at the specified index, null otherwise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "463", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.get", "methodParameterType": "Object#", "methodParameterName": "obj#", "methodBody": "public Object get (Object obj) throws ReflectionException {\n\t\ttry {\n\t\t\treturn field.get(obj);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Object is not an instance of \" + getDeclaringClass(), e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new ReflectionException(\"Illegal access to field: \" + getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the field on the supplied object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "464", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.set", "methodParameterType": "Object#Object#", "methodParameterName": "obj#value#", "methodBody": "public void set (Object obj, Object value) throws ReflectionException {\n\t\ttry {\n\t\t\tfield.set(obj, value);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new ReflectionException(\"Argument not valid for field: \" + getName(), e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new ReflectionException(\"Illegal access to field: \" + getName(), e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the field on the supplied object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "465", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.isAnnotationPresent", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public boolean isAnnotationPresent (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\treturn field.isAnnotationPresent(annotationType);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the field includes an annotation of the provided class type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "466", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getDeclaredAnnotations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Annotation[] getDeclaredAnnotations () {\n\t\tjava.lang.annotation.Annotation[] annotations = field.getDeclaredAnnotations();\n\t\tAnnotation[] result = new Annotation[annotations.length];\n\t\tfor (int i = 0; i < annotations.length; i++) {\n\t\t\tresult[i] = new Annotation(annotations[i]);\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of  {@link Annotation} objects reflecting all annotations declared by this field,or an empty array if there are none. Does not include inherited annotations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "467", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/Field.java", "methodName": "com.artemis.utils.reflect.Field.getDeclaredAnnotation", "methodParameterType": "Class<? extends java.lang.annotation.Annotation>#", "methodParameterName": "annotationType#", "methodBody": "public Annotation getDeclaredAnnotation (Class<? extends java.lang.annotation.Annotation> annotationType) {\n\t\tjava.lang.annotation.Annotation[] annotations = field.getDeclaredAnnotations();\n\t\tif (annotations == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (java.lang.annotation.Annotation annotation : annotations) {\n\t\t\tif (annotation.annotationType().equals(annotationType)) {\n\t\t\t\treturn new Annotation(annotation);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link Annotation} object reflecting the annotation provided, or null of this field doesn'thave such an annotation. This is a convenience function if the caller knows already which annotation type he's looking for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "468", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/SystemMetadata.java", "methodName": "com.artemis.utils.reflect.SystemMetadata.getAspect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Aspect.Builder getAspect() {\n        final Aspect.Builder aspect = Aspect.all();\n        final All all = ClassReflection.getAnnotation(c, All.class);\n        if (all != null) {\n            aspect.all(all.value());\n        }\n        final One one = ClassReflection.getAnnotation(c, One.class);\n        if (one != null) {\n            aspect.one(one.value());\n        }\n        final Exclude exclude = ClassReflection.getAnnotation(c, Exclude.class);\n        if (exclude != null) {\n            aspect.exclude(exclude.value());\n        }\n        return (all != null || exclude != null || one != null) ? aspect : null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return aspect as defined in annotation.", "call_func_name": ["com.artemis.Aspect.all", "com.artemis.utils.reflect.ClassReflection.getAnnotation", "com.artemis.annotations.All.value", "com.artemis.annotations.One.value", "com.artemis.annotations.Exclude.value"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.Class"], [""], [""], [""]], "passed_comments": [{"com.artemis.Aspect.all": "Returns an aspect that matches all entities."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect that matches all entities."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.utils.reflect.ClassReflection.getAnnotation": "Returns this element's annotation for the specified type if such an annotation is present, else null."}, {"com.artemis.utils.reflect.ClassReflection.getAnnotation": "Creates a new instance of the annotation represented by the supplied annotationClass."}]}, {"index": "469", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.newInstance", "methodParameterType": "Class#int#", "methodParameterName": "c#size#", "methodBody": "static public Object newInstance (Class c, int size) {\n\t\treturn java.lang.reflect.Array.newInstance(c, size);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new array with the specified component type and length.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "470", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.getLength", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "static public int getLength (Object array) {\n\t\treturn java.lang.reflect.Array.getLength(array);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the length of the supplied array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.get", "methodParameterType": "Object#int#", "methodParameterName": "array#index#", "methodBody": "static public Object get (Object array, int index) {\n\t\treturn java.lang.reflect.Array.get(array, index);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the indexed component in the supplied array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "472", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/reflect/ArrayReflection.java", "methodName": "com.artemis.utils.reflect.ArrayReflection.set", "methodParameterType": "Object#int#Object#", "methodParameterName": "array#index#value#", "methodBody": "static public void set (Object array, int index, Object value) {\n\t\tjava.lang.reflect.Array.set(array, index, value);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the indexed component in the supplied array to the supplied value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "473", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.ShortBag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ShortBag() {\n\t\tthis(64);\n\t}", "AST": "Javadoc#Modifier#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with an initial capacity of 64.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "474", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.ShortBag", "methodParameterType": "int#", "methodParameterName": "capacity#", "methodBody": "public ShortBag(int capacity) {\n\t\tdata = new short[capacity];\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with the specified initial capacity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.removeValue", "methodParameterType": "short#", "methodParameterName": "value#", "methodBody": "public boolean removeValue(short value) {\n\t\tint index = indexOf(value);\n\t\tif (index > -1)\n\t\t\tremove(index);\n\n\t\treturn index > -1;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the first occurrence of the value from this IntBag, if it is present.", "call_func_name": ["com.artemis.utils.ShortBag.indexOf", "com.artemis.utils.ShortBag.remove"], "call_func_parameter": [["short"], ["int"]], "passed_comments": [{"com.artemis.utils.ShortBag.indexOf": "Find index of element."}, {"com.artemis.utils.ShortBag.remove": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>"}]}, {"index": "476", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.remove", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public int remove(int index) {\n\t\tint e = data[index]; // make copy of element to remove so it can be returned\n\t\tdata[index] = data[--size]; // overwrite item to remove with last element\n\t\tdata[size] = 0; // null last element, so gc can do its work\n\t\treturn e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#PrefixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "477", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.indexOf", "methodParameterType": "short#", "methodParameterName": "value#", "methodBody": "public int indexOf(short value) {\n\t\tfor(int i = 0; size > i; i++) {\n\t\t\tif(value == data[i]) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#ForStatement#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find index of element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.contains", "methodParameterType": "short#", "methodParameterName": "value#", "methodBody": "public boolean contains(short value) {\n\t\tfor(int i = 0; size > i; i++) {\n\t\t\tif(value == data[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if bag contains this element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "479", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public short get(int index) {\n\t\treturn data[index];\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int size() {\n\t\treturn size;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements in this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.getCapacity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCapacity() {\n\t\treturn data.length;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements the bag can hold without growing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEmpty() {\n\t\treturn size == 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this bag contains no elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.add", "methodParameterType": "short#", "methodParameterName": "value#", "methodBody": "public void add(short value) {\n\t\t// is size greater than capacity increase capacity\n\t\tif (size == data.length) {\n\t\t\tgrow();\n\t\t}\n\n\t\tdata[size++] = value;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>", "call_func_name": ["com.artemis.utils.ShortBag.grow"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.utils.ShortBag.grow": "Increase the capacity of the bag. <p> Capacity will increase by (3/2)"}, {"com.artemis.utils.ShortBag.grow": "Increase the capacity of the bag."}]}, {"index": "484", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.addAll", "methodParameterType": "ShortBag#", "methodParameterName": "other#", "methodBody": "public void addAll(ShortBag other) {\n\t\tfor (int i = 0; i < other.size(); i++) {\n\t\t\tadd(other.get(i));\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified elements to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>", "call_func_name": ["com.artemis.utils.ShortBag.size", "com.artemis.utils.ShortBag.get", "com.artemis.utils.ShortBag.add"], "call_func_parameter": [[""], ["int"], ["short"]], "passed_comments": [{"com.artemis.utils.ShortBag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.ShortBag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.ShortBag.add": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>"}]}, {"index": "485", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.set", "methodParameterType": "int#short#", "methodParameterName": "index#value#", "methodBody": "public void set(int index, short value) {\n\t\tif(index >= data.length) {\n\t\t\tgrow((index * 7) / 4 + 1);\n\t\t}\n\t\tsize = Math.max(size, index + 1);\n\t\tdata[index] = value;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set element at specified index in the bag.", "call_func_name": ["com.artemis.utils.ShortBag.grow", "java.lang.Math.max"], "call_func_parameter": [["int"], ["int", "int"]], "passed_comments": [{"com.artemis.utils.ShortBag.grow": "Increase the capacity of the bag."}]}, {"index": "486", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.grow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void grow() {\n\t\tint newCapacity = (data.length * 7) / 4 + 1;\n\t\tgrow(newCapacity);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increase the capacity of the bag. <p> Capacity will increase by (3/2)", "call_func_name": ["com.artemis.utils.ShortBag.grow"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.ShortBag.grow": "Increase the capacity of the bag."}]}, {"index": "487", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.grow", "methodParameterType": "int#", "methodParameterName": "newCapacity#", "methodBody": "private void grow(int newCapacity) {\n\t\tshort[] oldData = data;\n\t\tdata = new short[newCapacity];\n\t\tSystem.arraycopy(oldData, 0, data, 0, oldData.length);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increase the capacity of the bag.", "call_func_name": ["java.lang.System.arraycopy"], "call_func_parameter": [["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void ensureCapacity(int index) {\n\t\tif(index >= data.length) {\n\t\t\tgrow(index + 1);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Check if an item, if added at the given item will fit into the bag. <p> If not, the bag capacity will be increased to hold an item at the index. </p>", "call_func_name": ["com.artemis.utils.ShortBag.grow"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.ShortBag.grow": "Increase the capacity of the bag."}]}, {"index": "489", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.clear", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void clear() {\n\t\tfor (int i = 0, s = size; s > i; i++)\n\t\t\tdata[i] = 0;\n\n\t\tsize = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#Assignment#ExpressionStatement#ForStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "490", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public short[] getData() {\n\t\treturn data;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this bag's underlying array. <p> Use with care. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "491", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ShortBag.java", "methodName": "com.artemis.utils.ShortBag.setSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public void setSize(int size) {\n\t\tthis.size = size;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the size. <p> This will not resize the bag, nor will it clean up contents beyond the given size. Use with caution. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableBag.java", "methodName": "com.artemis.utils.ImmutableBag.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "E get(int index);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "493", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableBag.java", "methodName": "com.artemis.utils.ImmutableBag.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int size();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of elements in this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "494", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableBag.java", "methodName": "com.artemis.utils.ImmutableBag.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isEmpty();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if this bag contains no elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableBag.java", "methodName": "com.artemis.utils.ImmutableBag.contains", "methodParameterType": "E#", "methodParameterName": "e#", "methodBody": "boolean contains(E e);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Check if bag contains this element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "496", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.IntBagIterator", "methodParameterType": "IntBag#", "methodParameterName": "intBag#", "methodBody": "public IntBagIterator(final IntBag intBag) {\n        this.intBag = intBag;\n        index = -1;\n        indexEnd = intBag != null ? intBag.size() : 0;\n        assert indexEnd >= 0;\n        state = State.INIT;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#AssertStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ConditionalExpression)Assignment)ExpressionStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create iterator for IntBag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.IntBagIterator", "methodParameterType": "IntBag#int#", "methodParameterName": "intBag#indexBegin#", "methodBody": "public IntBagIterator(final IntBag intBag, final int indexBegin) {\n        this.intBag = intBag;\n        assert indexBegin >= 0;\n        this.index = indexBegin - 1;\n        indexEnd = intBag != null ? intBag.size() : 0;\n        assert indexEnd >= 0;\n        state = State.INIT;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#AssertStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#AssertStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ConditionalExpression)Assignment)ExpressionStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create iterator for IntBag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.IntBagIterator", "methodParameterType": "IntBag#int#int#", "methodParameterName": "intBag#indexBegin#size#", "methodBody": "public IntBagIterator(final IntBag intBag, final int indexBegin, final int size) {\n        this.intBag = intBag;\n        assert indexBegin >= 0;\n        this.index = indexBegin - 1;\n        indexEnd = indexBegin + size;\n        final int allSize = intBag.size();\n        indexEnd = intBag != null ? (indexEnd < allSize ? indexEnd : allSize) : 0;\n        assert indexEnd >= 0;\n        state = State.INIT;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#AssertStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#ConditionalExpression#ParenthesizedExpression#NumberLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#AssertStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)ConditionalExpression)Assignment)ExpressionStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create iterator for IntBag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "499", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.getCurrentIndex", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCurrentIndex() {\n        if (state == State.NEXT_CALLED && index < indexEnd && indexEnd <= intBag.size()) {\n            return index;\n        }\n        throw new IllegalStateException(getErrorMessage(index));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "return current index This method can be called only per call to next(). This method can not be called after call remove().", "call_func_name": ["com.artemis.utils.IntBag.size", "com.artemis.utils.IntBagIterator.getErrorMessage", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], ["int"], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.IntBagIterator.getErrorMessage": "generate error message"}]}, {"index": "500", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.hasNext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasNext() {\n        return index + 1 < indexEnd && indexEnd <= intBag.size();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the iteration has more elements. (In other words, returns true if next() would return an element rather than throwing an exception.)", "call_func_name": ["com.artemis.utils.IntBag.size"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}]}, {"index": "501", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.next", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int next() {\n        final int newIndex = index + 1;\n\n        if (newIndex < indexEnd && indexEnd <= intBag.size()) {\n            index = newIndex;\n            state = State.NEXT_CALLED;\n            return intBag.getData()[index];\n        }\n\n        throw new NoSuchElementException(getErrorMessage(newIndex));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ArrayAccess#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ReturnStatement(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Returns the next element in the iteration.", "call_func_name": ["com.artemis.utils.IntBag.size", "com.artemis.utils.IntBag.getData", "com.artemis.utils.IntBagIterator.getErrorMessage", "java.util.NoSuchElementException.<init>"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.IntBag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.IntBagIterator.getErrorMessage": "generate error message"}]}, {"index": "502", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.remove", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void remove() {\n        if (state == State.NEXT_CALLED && index < indexEnd && indexEnd <= intBag.size()) {\n            state = State.REMOVE_CALLED;\n            intBag.removeIndex(index);\n            index--;\n            indexEnd--;\n            assert index < indexEnd;\n        } else {\n            throw new IllegalStateException(getErrorMessage(index));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#AssertStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Removes from the underlying collection the last element returned by this iterator (optional operation). This method can be called only once per call to next(). The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling this method.", "call_func_name": ["com.artemis.utils.IntBag.size", "com.artemis.utils.IntBag.removeIndex", "java.lang.AssertionError.<init>", "com.artemis.utils.IntBagIterator.getErrorMessage", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], ["int"], [""], ["int"], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.IntBag.removeIndex": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>"}, {"com.artemis.utils.IntBagIterator.getErrorMessage": "generate error message"}]}, {"index": "503", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/IntBagIterator.java", "methodName": "com.artemis.utils.IntBagIterator.getErrorMessage", "methodParameterType": "int#", "methodParameterName": "indexVal#", "methodBody": "private String getErrorMessage(final int indexVal) {\n        final String message = \"Tried accessing element: \" + indexVal + \"/\" + indexEnd + \"/\" + intBag.size() + \"/\" + state.name();\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "generate error message", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.artemis.utils.IntBag.size", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], [""]], "passed_comments": [{"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}]}, {"index": "504", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.Bag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Bag() {\n\t\tthis(64);\n\t}", "AST": "Javadoc#Modifier#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with an initial capacity of 64.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "505", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.Bag", "methodParameterType": "Class<E>#", "methodParameterName": "type#", "methodBody": "public Bag(Class<E> type) {\n\t\tthis(type, 64);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with an initial capacity of 64.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.Bag", "methodParameterType": "int#", "methodParameterName": "capacity#", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tpublic Bag(int capacity) {\n\t\tdata = (E[])ArrayReflection.newInstance(Object.class, capacity);\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs an empty Bag with the specified initial capacity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.remove", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public E remove(int index) {\n\t\tE e = data[index]; // make copy of element to remove so it can be returned\n\t\tdata[index] = data[--size]; // overwrite item to remove with last element\n\t\tdata[size] = null; // null last element, so gc can do its work\n\t\treturn e;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#PrefixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NullLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the element at the specified position in this Bag. <p> It does this by overwriting it was last element then removing last element </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "508", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.sort", "methodParameterType": "Comparator<E>#", "methodParameterName": "comparator#", "methodBody": "public void sort(Comparator<E> comparator) {\n\t\tSort.instance().sort(this, comparator);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sorts the bag using the  {@code comparator}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "509", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.removeLast", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public E removeLast() {\n\t\tif(size > 0) {\n\t\t\tE e = data[--size];\n\t\t\tdata[size] = null;\n\t\t\treturn e;\n\t\t}\n\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#PrefixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#NullLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove and return the last object in the bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "510", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.remove", "methodParameterType": "E#", "methodParameterName": "e#", "methodBody": "public boolean remove(E e) {\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tE e2 = data[i];\n\n\t\t\tif (e.equals(e2)) {\n\t\t\t\tdata[i] = data[--size]; // overwrite item to remove with last element\n\t\t\t\tdata[size] = null; // null last element, so gc can do its work\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#PrefixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NullLiteral#Assignment#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the first occurrence of the specified element from this Bag, if it is present. <p> If the Bag does not contain the element, it is unchanged. It does this by overwriting it was last element then removing last element </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.contains", "methodParameterType": "E#", "methodParameterName": "e#", "methodBody": "@Override\n\tpublic boolean contains(E e) {\n\t\tfor(int i = 0; size > i; i++) {\n\t\t\tif(e.equals(data[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if bag contains this element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "512", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.removeAll", "methodParameterType": "ImmutableBag<E>#", "methodParameterName": "bag#", "methodBody": "public boolean removeAll(ImmutableBag<E> bag) {\n\t\tboolean modified = false;\n\n\t\tfor (int i = 0, s = bag.size(); s > i; i++) {\n\t\t\tE e1 = bag.get(i);\n\n\t\t\tfor (int j = 0; j < size; j++) {\n\t\t\t\tE e2 = data[j];\n\n\t\t\t\tif (e1.equals(e2)) {\n\t\t\t\t\tremove(j);\n\t\t\t\t\tj--;\n\t\t\t\t\tmodified = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn modified;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes from this Bag all of its elements that are contained in the specified Bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "513", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "@Override\n\tpublic E get(int index) {\n\t\treturn data[index];\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "514", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.safeGet", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public E safeGet(int index) {\n\t\tif(index >= data.length)\n\t\t\tgrow(Math.max((2 * data.length), (3 * index) / 2));\n\n\t\treturn data[index];\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag. This method ensures that the bag grows if the requested index is outside the bounds of the current backing array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "515", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic int size() {\n\t\treturn size;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements in this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "516", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.getCapacity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCapacity() {\n\t\treturn data.length;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of elements the bag can hold without growing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.isIndexWithinBounds", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public boolean isIndexWithinBounds(int index) {\n\t\treturn index < getCapacity();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the internal storage supports this index.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "518", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic boolean isEmpty() {\n\t\treturn size == 0;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this bag contains no elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "519", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.add", "methodParameterType": "E#", "methodParameterName": "e#", "methodBody": "public void add(E e) {\n\t\t// is size greater than capacity increase capacity\n\t\tif (size == data.length)\n\t\t\tgrow(data.length * 2);\n\n\t\tdata[size++] = e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified element to the end of this bag. <p> If required, it also increases the capacity of the bag. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "520", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.unsafeSet", "methodParameterType": "int#E#", "methodParameterName": "index#e#", "methodBody": "public void unsafeSet(int index, E e) {\n\t\tdata[index] = e;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<em>Unsafe method.</em> Sets element at specified index in the bag, without updating size. Internally used by artemis when operation is known to be safe.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "521", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.set", "methodParameterType": "int#E#", "methodParameterName": "index#e#", "methodBody": "public void set(int index, E e) {\n\t\tif(index >= data.length)\n\t\t\tgrow(max((2 * data.length), index + 1));\n\n\t\tsize = Math.max(size, index + 1);\n\t\tunsafeSet(index, e);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set element at specified index in the bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "522", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "public void ensureCapacity(int index) {\n\t\tif(index >= data.length) {\n\t\t\tgrow(index + 1);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Check if an item, if added at the given item will fit into the bag. <p> If not, the bag capacity will be increased to hold an item at the index. </p> <p>yeah, sorry, it's weird, but we don't want to change existing change behavior</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.clear", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void clear() {\n\t\tArrays.fill(data, 0, size, null);\n\t\tsize = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.addAll", "methodParameterType": "ImmutableBag<E>#", "methodParameterName": "items#", "methodBody": "public void addAll(ImmutableBag<E> items) {\n\t\tfor(int i = 0, s = items.size(); s > i; i++) {\n\t\t\tadd(items.get(i));\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Add all items into this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Bag.java", "methodName": "com.artemis.utils.Bag.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public E[] getData() {\n\t\treturn data;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this bag's underlying array. <p> <b>Use of this method requires typed instantiation, e.g. Bag<E>(Class<E>)</b> </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableIntBag.java", "methodName": "com.artemis.utils.ImmutableIntBag.get", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "int get(int index);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the element at the specified position in Bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableIntBag.java", "methodName": "com.artemis.utils.ImmutableIntBag.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int size();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of elements in this bag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableIntBag.java", "methodName": "com.artemis.utils.ImmutableIntBag.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isEmpty();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if this bag contains no elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "529", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/ImmutableIntBag.java", "methodName": "com.artemis.utils.ImmutableIntBag.contains", "methodParameterType": "int#", "methodParameterName": "id#", "methodBody": "boolean contains(int id);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Check if bag contains this element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "530", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.TimSort", "methodParameterType": "T[]#Comparator<? super T>#", "methodParameterName": "a#c#", "methodBody": "private TimSort (T[] a, Comparator<? super T> c) {\n\t\tthis.a = a;\n\t\tthis.c = c;\n\n\t\t// Allocate temp storage (which may be increased later if necessary)\n\t\tint len = a.length;\n\t\tT[] newArray = (T[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];\n\t\ttmp = newArray;\n\n\t\t/*\n\t\t * Allocate runs-to-be-merged stack (which cannot be expanded). The stack length requirements are described in listsort.txt.\n\t\t * The C version always uses the same stack length (85), but this was measured to be too expensive when sorting \"mid-sized\"\n\t\t * arrays (e.g., 100 elements) in Java. Therefore, we use smaller (but sufficiently large) stack lengths for smaller arrays.\n\t\t * The \"magic numbers\" in the computation below must be changed if MIN_MERGE is decreased. See the MIN_MERGE declaration\n\t\t * above for more information.\n\t\t */\n\t\tint stackLen = (len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);\n\t\trunBase = new int[stackLen];\n\t\trunLen = new int[stackLen];\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#NumberLiteral#SimpleName#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#ConditionalExpression#ArrayCreation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#NumberLiteral#ConditionalExpression#ConditionalExpression#ConditionalExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ConditionalExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)ConditionalExpression)ArrayCreation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)ConditionalExpression)ConditionalExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a TimSort instance to maintain the state of an ongoing sort.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "531", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.binarySort", "methodParameterType": "T[]#int#int#int#Comparator<? super T>#", "methodParameterName": "a#lo#hi#start#c#", "methodBody": "@SuppressWarnings(\"fallthrough\")\n\tprivate static <T> void binarySort (T[] a, int lo, int hi, int start, Comparator<? super T> c) {\n\t\tif (DEBUG) assert lo <= start && start <= hi;\n\t\tif (start == lo) start++;\n\t\tfor (; start < hi; start++) {\n\t\t\tT pivot = a[start];\n\n\t\t\t// Set left (and right) to the index where a[start] (pivot) belongs\n\t\t\tint left = lo;\n\t\t\tint right = start;\n\t\t\tif (DEBUG) assert left <= right;\n\t\t\t/*\n\t\t\t * Invariants: pivot >= all in [lo, left). pivot < all in [right, start).\n\t\t\t */\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right) >>> 1;\n\t\t\t\tif (c.compare(pivot, a[mid]) < 0)\n\t\t\t\t\tright = mid;\n\t\t\t\telse\n\t\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t\tif (DEBUG) assert left == right;\n\n\t\t\t/*\n\t\t\t * The invariants still hold: pivot >= all in [lo, left) and pivot < all in [left, start), so pivot belongs at left. Note\n\t\t\t * that if there are elements equal to pivot, left points to the first slot after them -- that's why this sort is stable.\n\t\t\t * Slide elements over to make room to make room for pivot.\n\t\t\t */\n\t\t\tint n = start - left; // The number of elements to move\n\t\t\t// Switch is just an optimization for arraycopy in default case\n\t\t\tswitch (n) {\n\t\t\tcase 2:\n\t\t\t\ta[left + 2] = a[left + 1];\n\t\t\tcase 1:\n\t\t\t\ta[left + 1] = a[left];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.arraycopy(a, left, a, left + 1, n);\n\t\t\t}\n\t\t\ta[left] = pivot;\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SwitchStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement(ForStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)SwitchStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Sorts the specified portion of the specified array using a binary insertion sort. This is the best method for sorting small numbers of elements. It requires O(n log n) compares, but O(n^2) data movement (worst case). If the initial part of the specified range is already sorted, this method can take advantage of it: the method assumes that the elements from index  {@code lo}, inclusive, to  {@code start}, exclusive are already sorted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.countRunAndMakeAscending", "methodParameterType": "T[]#int#int#Comparator<? super T>#", "methodParameterName": "a#lo#hi#c#", "methodBody": "private static <T> int countRunAndMakeAscending (T[] a, int lo, int hi, Comparator<? super T> c) {\n\t\tif (DEBUG) assert lo < hi;\n\t\tint runHi = lo + 1;\n\t\tif (runHi == hi) return 1;\n\n\t\t// Find end of run, and reverse range if descending\n\t\tif (c.compare(a[runHi++], a[lo]) < 0) { // Descending\n\t\t\twhile (runHi < hi && c.compare(a[runHi], a[runHi - 1]) < 0)\n\t\t\t\trunHi++;\n\t\t\treverseRange(a, lo, runHi);\n\t\t} else { // Ascending\n\t\t\twhile (runHi < hi && c.compare(a[runHi], a[runHi - 1]) >= 0)\n\t\t\t\trunHi++;\n\t\t}\n\n\t\treturn runHi - lo;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#NumberLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#WhileStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)WhileStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the length of the run beginning at the specified position in the specified array and reverses the run if it is descending (ensuring that the run will always be ascending when the method returns). A run is the longest ascending sequence with: a[lo] <= a[lo + 1] <= a[lo + 2] <= ... or the longest descending sequence with: a[lo] > a[lo + 1] > a[lo + 2] > ... For its intended use in a stable mergesort, the strictness of the definition of \"descending\" is needed so that the call can safely reverse a descending sequence without violating stability.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "533", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.reverseRange", "methodParameterType": "Object[]#int#int#", "methodParameterName": "a#lo#hi#", "methodBody": "private static void reverseRange (Object[] a, int lo, int hi) {\n\t\thi--;\n\t\twhile (lo < hi) {\n\t\t\tObject t = a[lo];\n\t\t\ta[lo++] = a[hi];\n\t\t\ta[hi--] = t;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Reverse the specified range of the specified array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.minRunLength", "methodParameterType": "int#", "methodParameterName": "n#", "methodBody": "private static int minRunLength (int n) {\n\t\tif (DEBUG) assert n >= 0;\n\t\tint r = 0; // Becomes 1 if any 1 bits are shifted off\n\t\twhile (n >= MIN_MERGE) {\n\t\t\tr |= (n & 1);\n\t\t\tn >>= 1;\n\t\t}\n\t\treturn n + r;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the minimum acceptable run length for an array of the specified length. Natural runs shorter than this will be extended with  {@link #binarySort}. Roughly speaking, the computation is: If n < MIN_MERGE, return n (it's too small to bother with fancy stuff). Else if n is an exact power of 2, return MIN_MERGE/2. Else return an int k, MIN_MERGE/2 <= k <= MIN_MERGE, such that n/k is close to, but strictly less than, an exact power of 2. For the rationale, see listsort.txt.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "535", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.pushRun", "methodParameterType": "int#int#", "methodParameterName": "runBase#runLen#", "methodBody": "private void pushRun (int runBase, int runLen) {\n\t\tthis.runBase[stackSize] = runBase;\n\t\tthis.runLen[stackSize] = runLen;\n\t\tstackSize++;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(ArrayAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Pushes the specified run onto the pending-run stack.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "536", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.mergeCollapse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void mergeCollapse () {\n\t\twhile (stackSize > 1) {\n\t\t\tint n = stackSize - 2;\n\t\t\tif (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {\n\t\t\t\tif (runLen[n - 1] < runLen[n + 1]) n--;\n\t\t\t\tmergeAt(n);\n\t\t\t} else if (runLen[n] <= runLen[n + 1]) {\n\t\t\t\tmergeAt(n);\n\t\t\t} else {\n\t\t\t\tbreak; // Invariant is established\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#BreakStatement#Block#IfStatement#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(BreakStatement)BreakStatement)Block)IfStatement)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Examines the stack of runs waiting to be merged and merges adjacent runs until the stack invariants are reestablished: 1. runLen[i - 3] > runLen[i - 2] + runLen[i - 1] 2. runLen[i - 2] > runLen[i - 1] This method is called each time a new run is pushed onto the stack, so the invariants are guaranteed to hold for i < stackSize upon entry to the method.", "call_func_name": ["com.artemis.utils.TimSort.mergeAt"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.TimSort.mergeAt": "Merges the two runs at stack indices i and i+1. Run i must be the penultimate or antepenultimate run on the stack. In other words, i must be equal to stackSize-2 or stackSize-3."}]}, {"index": "537", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.mergeForceCollapse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void mergeForceCollapse () {\n\t\twhile (stackSize > 1) {\n\t\t\tint n = stackSize - 2;\n\t\t\tif (n > 0 && runLen[n - 1] < runLen[n + 1]) n--;\n\t\t\tmergeAt(n);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)InfixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Merges all runs on the stack until only one remains. This method is called once, to complete the sort.", "call_func_name": ["com.artemis.utils.TimSort.mergeAt"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.TimSort.mergeAt": "Merges the two runs at stack indices i and i+1. Run i must be the penultimate or antepenultimate run on the stack. In other words, i must be equal to stackSize-2 or stackSize-3."}]}, {"index": "538", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.mergeAt", "methodParameterType": "int#", "methodParameterName": "i#", "methodBody": "private void mergeAt (int i) {\n\t\tif (DEBUG) assert stackSize >= 2;\n\t\tif (DEBUG) assert i >= 0;\n\t\tif (DEBUG) assert i == stackSize - 2 || i == stackSize - 3;\n\n\t\tint base1 = runBase[i];\n\t\tint len1 = runLen[i];\n\t\tint base2 = runBase[i + 1];\n\t\tint len2 = runLen[i + 1];\n\t\tif (DEBUG) assert len1 > 0 && len2 > 0;\n\t\tif (DEBUG) assert base1 + len1 == base2;\n\n\t\t/*\n\t\t * Record the length of the combined runs; if i is the 3rd-last run now, also slide over the last run (which isn't involved\n\t\t * in this merge). The current run (i+1) goes away in any case.\n\t\t */\n\t\trunLen[i] = len1 + len2;\n\t\tif (i == stackSize - 3) {\n\t\t\trunBase[i + 1] = runBase[i + 2];\n\t\t\trunLen[i + 1] = runLen[i + 2];\n\t\t}\n\t\tstackSize--;\n\n\t\t/*\n\t\t * Find where the first element of run2 goes in run1. Prior elements in run1 can be ignored (because they're already in\n\t\t * place).\n\t\t */\n\t\tint k = gallopRight(a[base2], a, base1, len1, 0, c);\n\t\tif (DEBUG) assert k >= 0;\n\t\tbase1 += k;\n\t\tlen1 -= k;\n\t\tif (len1 == 0) return;\n\n\t\t/*\n\t\t * Find where the last element of run1 goes in run2. Subsequent elements in run2 can be ignored (because they're already in\n\t\t * place).\n\t\t */\n\t\tlen2 = gallopLeft(a[base1 + len1 - 1], a, base2, len2, len2 - 1, c);\n\t\tif (DEBUG) assert len2 >= 0;\n\t\tif (len2 == 0) return;\n\n\t\t// Merge remaining runs, using tmp array with min(len1, len2) elements\n\t\tif (len1 <= len2)\n\t\t\tmergeLo(base1, len1, base2, len2);\n\t\telse\n\t\t\tmergeHi(base1, len1, base2, len2);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Merges the two runs at stack indices i and i+1. Run i must be the penultimate or antepenultimate run on the stack. In other words, i must be equal to stackSize-2 or stackSize-3.", "call_func_name": ["com.artemis.utils.TimSort.gallopRight", "com.artemis.utils.TimSort.gallopLeft", "com.artemis.utils.TimSort.mergeLo", "com.artemis.utils.TimSort.mergeHi"], "call_func_parameter": [["java.lang.Object", "java.lang.Object[]", "int", "int", "int", "java.util.Comparator"], ["java.lang.Object", "java.lang.Object[]", "int", "int", "int", "java.util.Comparator"], ["int", "int", "int", "int"], ["int", "int", "int", "int"]], "passed_comments": [{"com.artemis.utils.TimSort.mergeLo": "Merges two adjacent runs in place, in a stable fashion. The first element of the first run must be greater than the first element of the second run (a[base1] > a[base2]), and the last element of the first run (a[base1 + len1-1]) must be greater than all elements of the second run. For performance, this method should be called only when len1 <= len2; its twin, mergeHi should be called if len1 >= len2. (Either method may be called if len1 == len2.)"}, {"com.artemis.utils.TimSort.mergeHi": "Like mergeLo, except that this method should be called only if len1 >= len2; mergeLo should be called if len1 <= len2. (Either method may be called if len1 == len2.)"}]}, {"index": "539", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.gallopLeft", "methodParameterType": "T#T[]#int#int#int#Comparator<? super T>#", "methodParameterName": "key#a#base#len#hint#c#", "methodBody": "private static <T> int gallopLeft (T key, T[] a, int base, int len, int hint, Comparator<? super T> c) {\n\t\tif (DEBUG) assert len > 0 && hint >= 0 && hint < len;\n\t\tint lastOfs = 0;\n\t\tint ofs = 1;\n\t\tif (c.compare(key, a[base + hint]) > 0) {\n\t\t\t// Gallop right until a[base+hint+lastOfs] < key <= a[base+hint+ofs]\n\t\t\tint maxOfs = len - hint;\n\t\t\twhile (ofs < maxOfs && c.compare(key, a[base + hint + ofs]) > 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to base\n\t\t\tlastOfs += hint;\n\t\t\tofs += hint;\n\t\t} else { // key <= a[base + hint]\n\t\t\t// Gallop left until a[base+hint-ofs] < key <= a[base+hint-lastOfs]\n\t\t\tfinal int maxOfs = hint + 1;\n\t\t\twhile (ofs < maxOfs && c.compare(key, a[base + hint - ofs]) <= 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to base\n\t\t\tint tmp = lastOfs;\n\t\t\tlastOfs = hint - ofs;\n\t\t\tofs = hint - tmp;\n\t\t}\n\t\tif (DEBUG) assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;\n\n\t\t/*\n\t\t * Now a[base+lastOfs] < key <= a[base+ofs], so key belongs somewhere to the right of lastOfs but no farther right than ofs.\n\t\t * Do a binary search, with invariant a[base + lastOfs - 1] < key <= a[base + ofs].\n\t\t */\n\t\tlastOfs++;\n\t\twhile (lastOfs < ofs) {\n\t\t\tint m = lastOfs + ((ofs - lastOfs) >>> 1);\n\n\t\t\tif (c.compare(key, a[base + m]) > 0)\n\t\t\t\tlastOfs = m + 1; // a[base + m] < key\n\t\t\telse\n\t\t\t\tofs = m; // key <= a[base + m]\n\t\t}\n\t\tif (DEBUG) assert lastOfs == ofs; // so a[base + ofs - 1] < key <= a[base + ofs]\n\t\treturn ofs;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "540", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.gallopRight", "methodParameterType": "T#T[]#int#int#int#Comparator<? super T>#", "methodParameterName": "key#a#base#len#hint#c#", "methodBody": "private static <T> int gallopRight (T key, T[] a, int base, int len, int hint, Comparator<? super T> c) {\n\t\tif (DEBUG) assert len > 0 && hint >= 0 && hint < len;\n\n\t\tint ofs = 1;\n\t\tint lastOfs = 0;\n\t\tif (c.compare(key, a[base + hint]) < 0) {\n\t\t\t// Gallop left until a[b+hint - ofs] <= key < a[b+hint - lastOfs]\n\t\t\tint maxOfs = hint + 1;\n\t\t\twhile (ofs < maxOfs && c.compare(key, a[base + hint - ofs]) < 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to b\n\t\t\tint tmp = lastOfs;\n\t\t\tlastOfs = hint - ofs;\n\t\t\tofs = hint - tmp;\n\t\t} else { // a[b + hint] <= key\n\t\t\t// Gallop right until a[b+hint + lastOfs] <= key < a[b+hint + ofs]\n\t\t\tint maxOfs = len - hint;\n\t\t\twhile (ofs < maxOfs && c.compare(key, a[base + hint + ofs]) >= 0) {\n\t\t\t\tlastOfs = ofs;\n\t\t\t\tofs = (ofs << 1) + 1;\n\t\t\t\tif (ofs <= 0) // int overflow\n\t\t\t\t\tofs = maxOfs;\n\t\t\t}\n\t\t\tif (ofs > maxOfs) ofs = maxOfs;\n\n\t\t\t// Make offsets relative to b\n\t\t\tlastOfs += hint;\n\t\t\tofs += hint;\n\t\t}\n\t\tif (DEBUG) assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;\n\n\t\t/*\n\t\t * Now a[b + lastOfs] <= key < a[b + ofs], so key belongs somewhere to the right of lastOfs but no farther right than ofs.\n\t\t * Do a binary search, with invariant a[b + lastOfs - 1] <= key < a[b + ofs].\n\t\t */\n\t\tlastOfs++;\n\t\twhile (lastOfs < ofs) {\n\t\t\tint m = lastOfs + ((ofs - lastOfs) >>> 1);\n\n\t\t\tif (c.compare(key, a[base + m]) < 0)\n\t\t\t\tofs = m; // key < a[b + m]\n\t\t\telse\n\t\t\t\tlastOfs = m + 1; // a[b + m] <= key\n\t\t}\n\t\tif (DEBUG) assert lastOfs == ofs; // so a[b + ofs - 1] <= key < a[b + ofs]\n\t\treturn ofs;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#InfixExpression#AssertStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)AssertStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "541", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.mergeLo", "methodParameterType": "int#int#int#int#", "methodParameterName": "base1#len1#base2#len2#", "methodBody": "private void mergeLo (int base1, int len1, int base2, int len2) {\n\t\tif (DEBUG) assert len1 > 0 && len2 > 0 && base1 + len1 == base2;\n\n\t\t// Copy first run into temp array\n\t\tT[] a = this.a; // For performance\n\t\tT[] tmp = ensureCapacity(len1);\n\t\tSystem.arraycopy(a, base1, tmp, 0, len1);\n\n\t\tint cursor1 = 0; // Indexes into tmp array\n\t\tint cursor2 = base2; // Indexes int a\n\t\tint dest = base1; // Indexes int a\n\n\t\t// Move first element of second run and deal with degenerate cases\n\t\ta[dest++] = a[cursor2++];\n\t\tif (--len2 == 0) {\n\t\t\tSystem.arraycopy(tmp, cursor1, a, dest, len1);\n\t\t\treturn;\n\t\t}\n\t\tif (len1 == 1) {\n\t\t\tSystem.arraycopy(a, cursor2, a, dest, len2);\n\t\t\ta[dest + len2] = tmp[cursor1]; // Last elt of run 1 to end of merge\n\t\t\treturn;\n\t\t}\n\n\t\tComparator<? super T> c = this.c; // Use local variable for performance\n\t\tint minGallop = this.minGallop; // \"\t\" \"\t \" \"\n\t\touter:\n\t\twhile (true) {\n\t\t\tint count1 = 0; // Number of times in a row that first run won\n\t\t\tint count2 = 0; // Number of times in a row that second run won\n\n\t\t\t/*\n\t\t\t * Do the straightforward thing until (if ever) one run starts winning consistently.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 1 && len2 > 0;\n\t\t\t\tif (c.compare(a[cursor2], tmp[cursor1]) < 0) {\n\t\t\t\t\ta[dest++] = a[cursor2++];\n\t\t\t\t\tcount2++;\n\t\t\t\t\tcount1 = 0;\n\t\t\t\t\tif (--len2 == 0) break outer;\n\t\t\t\t} else {\n\t\t\t\t\ta[dest++] = tmp[cursor1++];\n\t\t\t\t\tcount1++;\n\t\t\t\t\tcount2 = 0;\n\t\t\t\t\tif (--len1 == 1) break outer;\n\t\t\t\t}\n\t\t\t} while ((count1 | count2) < minGallop);\n\n\t\t\t/*\n\t\t\t * One run is winning so consistently that galloping may be a huge win. So try that, and continue galloping until (if\n\t\t\t * ever) neither run appears to be winning consistently anymore.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 1 && len2 > 0;\n\t\t\t\tcount1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c);\n\t\t\t\tif (count1 != 0) {\n\t\t\t\t\tSystem.arraycopy(tmp, cursor1, a, dest, count1);\n\t\t\t\t\tdest += count1;\n\t\t\t\t\tcursor1 += count1;\n\t\t\t\t\tlen1 -= count1;\n\t\t\t\t\tif (len1 <= 1) // len1 == 1 || len1 == 0\n\t\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\ta[dest++] = a[cursor2++];\n\t\t\t\tif (--len2 == 0) break outer;\n\n\t\t\t\tcount2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c);\n\t\t\t\tif (count2 != 0) {\n\t\t\t\t\tSystem.arraycopy(a, cursor2, a, dest, count2);\n\t\t\t\t\tdest += count2;\n\t\t\t\t\tcursor2 += count2;\n\t\t\t\t\tlen2 -= count2;\n\t\t\t\t\tif (len2 == 0) break outer;\n\t\t\t\t}\n\t\t\t\ta[dest++] = tmp[cursor1++];\n\t\t\t\tif (--len1 == 1) break outer;\n\t\t\t\tminGallop--;\n\t\t\t} while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);\n\t\t\tif (minGallop < 0) minGallop = 0;\n\t\t\tminGallop += 2; // Penalize for leaving gallop mode\n\t\t} // End of \"outer\" loop\n\t\tthis.minGallop = minGallop < 1 ? 1 : minGallop; // Write back to field\n\n\t\tif (len1 == 1) {\n\t\t\tif (DEBUG) assert len2 > 0;\n\t\t\tSystem.arraycopy(a, cursor2, a, dest, len2);\n\t\t\ta[dest + len2] = tmp[cursor1]; // Last elt of run 1 to end of merge\n\t\t} else if (len1 == 0) {\n\t\t\tthrow new IllegalArgumentException(\"Comparison method violates its general contract!\");\n\t\t} else {\n\t\t\tif (DEBUG) assert len2 == 0;\n\t\t\tif (DEBUG) assert len1 > 1;\n\t\t\tSystem.arraycopy(tmp, cursor1, a, dest, len1);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#BooleanLiteral#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#DoStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#DoStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#WhileStatement#LabeledStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(LabeledStatement(SimpleName)SimpleName(WhileStatement(BooleanLiteral)BooleanLiteral(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement)Block(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)DoStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)DoStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)WhileStatement)LabeledStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Merges two adjacent runs in place, in a stable fashion. The first element of the first run must be greater than the first element of the second run (a[base1] > a[base2]), and the last element of the first run (a[base1 + len1-1]) must be greater than all elements of the second run. For performance, this method should be called only when len1 <= len2; its twin, mergeHi should be called if len1 >= len2. (Either method may be called if len1 == len2.)", "call_func_name": ["com.artemis.utils.TimSort.ensureCapacity", "java.lang.System.arraycopy", "java.util.Comparator.compare", "com.artemis.utils.TimSort.gallopRight", "com.artemis.utils.TimSort.gallopLeft", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["int"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object", "java.lang.Object[]", "int", "int", "int", "java.util.Comparator"], ["java.lang.Object", "java.lang.Object[]", "int", "int", "int", "java.util.Comparator"], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.TimSort.ensureCapacity": "Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary. The size increases exponentially to ensure amortized linear time complexity."}]}, {"index": "542", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.mergeHi", "methodParameterType": "int#int#int#int#", "methodParameterName": "base1#len1#base2#len2#", "methodBody": "private void mergeHi (int base1, int len1, int base2, int len2) {\n\t\tif (DEBUG) assert len1 > 0 && len2 > 0 && base1 + len1 == base2;\n\n\t\t// Copy second run into temp array\n\t\tT[] a = this.a; // For performance\n\t\tT[] tmp = ensureCapacity(len2);\n\t\tSystem.arraycopy(a, base2, tmp, 0, len2);\n\n\t\tint cursor1 = base1 + len1 - 1; // Indexes into a\n\t\tint cursor2 = len2 - 1; // Indexes into tmp array\n\t\tint dest = base2 + len2 - 1; // Indexes into a\n\n\t\t// Move last element of first run and deal with degenerate cases\n\t\ta[dest--] = a[cursor1--];\n\t\tif (--len1 == 0) {\n\t\t\tSystem.arraycopy(tmp, 0, a, dest - (len2 - 1), len2);\n\t\t\treturn;\n\t\t}\n\t\tif (len2 == 1) {\n\t\t\tdest -= len1;\n\t\t\tcursor1 -= len1;\n\t\t\tSystem.arraycopy(a, cursor1 + 1, a, dest + 1, len1);\n\t\t\ta[dest] = tmp[cursor2];\n\t\t\treturn;\n\t\t}\n\n\t\tComparator<? super T> c = this.c; // Use local variable for performance\n\t\tint minGallop = this.minGallop; // \"\t\" \"\t \" \"\n\t\touter:\n\t\twhile (true) {\n\t\t\tint count1 = 0; // Number of times in a row that first run won\n\t\t\tint count2 = 0; // Number of times in a row that second run won\n\n\t\t\t/*\n\t\t\t * Do the straightforward thing until (if ever) one run appears to win consistently.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 0 && len2 > 1;\n\t\t\t\tif (c.compare(tmp[cursor2], a[cursor1]) < 0) {\n\t\t\t\t\ta[dest--] = a[cursor1--];\n\t\t\t\t\tcount1++;\n\t\t\t\t\tcount2 = 0;\n\t\t\t\t\tif (--len1 == 0) break outer;\n\t\t\t\t} else {\n\t\t\t\t\ta[dest--] = tmp[cursor2--];\n\t\t\t\t\tcount2++;\n\t\t\t\t\tcount1 = 0;\n\t\t\t\t\tif (--len2 == 1) break outer;\n\t\t\t\t}\n\t\t\t} while ((count1 | count2) < minGallop);\n\n\t\t\t/*\n\t\t\t * One run is winning so consistently that galloping may be a huge win. So try that, and continue galloping until (if\n\t\t\t * ever) neither run appears to be winning consistently anymore.\n\t\t\t */\n\t\t\tdo {\n\t\t\t\tif (DEBUG) assert len1 > 0 && len2 > 1;\n\t\t\t\tcount1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c);\n\t\t\t\tif (count1 != 0) {\n\t\t\t\t\tdest -= count1;\n\t\t\t\t\tcursor1 -= count1;\n\t\t\t\t\tlen1 -= count1;\n\t\t\t\t\tSystem.arraycopy(a, cursor1 + 1, a, dest + 1, count1);\n\t\t\t\t\tif (len1 == 0) break outer;\n\t\t\t\t}\n\t\t\t\ta[dest--] = tmp[cursor2--];\n\t\t\t\tif (--len2 == 1) break outer;\n\n\t\t\t\tcount2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c);\n\t\t\t\tif (count2 != 0) {\n\t\t\t\t\tdest -= count2;\n\t\t\t\t\tcursor2 -= count2;\n\t\t\t\t\tlen2 -= count2;\n\t\t\t\t\tSystem.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2);\n\t\t\t\t\tif (len2 <= 1) // len2 == 1 || len2 == 0\n\t\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\ta[dest--] = a[cursor1--];\n\t\t\t\tif (--len1 == 0) break outer;\n\t\t\t\tminGallop--;\n\t\t\t} while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);\n\t\t\tif (minGallop < 0) minGallop = 0;\n\t\t\tminGallop += 2; // Penalize for leaving gallop mode\n\t\t} // End of \"outer\" loop\n\t\tthis.minGallop = minGallop < 1 ? 1 : minGallop; // Write back to field\n\n\t\tif (len2 == 1) {\n\t\t\tif (DEBUG) assert len1 > 0;\n\t\t\tdest -= len1;\n\t\t\tcursor1 -= len1;\n\t\t\tSystem.arraycopy(a, cursor1 + 1, a, dest + 1, len1);\n\t\t\ta[dest] = tmp[cursor2]; // Move first elt of run2 to front of merge\n\t\t} else if (len2 == 0) {\n\t\t\tthrow new IllegalArgumentException(\"Comparison method violates its general contract!\");\n\t\t} else {\n\t\t\tif (DEBUG) assert len1 == 0;\n\t\t\tif (DEBUG) assert len2 > 0;\n\t\t\tSystem.arraycopy(tmp, 0, a, dest - (len2 - 1), len2);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#BooleanLiteral#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#DoStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#NumberLiteral#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#BreakStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#DoStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#WhileStatement#LabeledStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#AssertStatement#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)InfixExpression)AssertStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(LabeledStatement(SimpleName)SimpleName(WhileStatement(BooleanLiteral)BooleanLiteral(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement)Block(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)DoStatement(DoStatement(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(BreakStatement(SimpleName)SimpleName)BreakStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)DoStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)WhileStatement)LabeledStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(Block(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(IfStatement(SimpleName)SimpleName(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Like mergeLo, except that this method should be called only if len1 >= len2; mergeLo should be called if len1 <= len2. (Either method may be called if len1 == len2.)", "call_func_name": ["com.artemis.utils.TimSort.ensureCapacity", "java.lang.System.arraycopy", "java.util.Comparator.compare", "com.artemis.utils.TimSort.gallopRight", "com.artemis.utils.TimSort.gallopLeft", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["int"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object", "java.lang.Object[]", "int", "int", "int", "java.util.Comparator"], ["java.lang.Object", "java.lang.Object[]", "int", "int", "int", "java.util.Comparator"], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.TimSort.ensureCapacity": "Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary. The size increases exponentially to ensure amortized linear time complexity."}]}, {"index": "543", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.ensureCapacity", "methodParameterType": "int#", "methodParameterName": "minCapacity#", "methodBody": "private T[] ensureCapacity (int minCapacity) {\n\t\ttmpCount = Math.max(tmpCount, minCapacity);\n\t\tif (tmp.length < minCapacity) {\n\t\t\t// Compute smallest power of 2 > minCapacity\n\t\t\tint newSize = minCapacity;\n\t\t\tnewSize |= newSize >> 1;\n\t\t\tnewSize |= newSize >> 2;\n\t\t\tnewSize |= newSize >> 4;\n\t\t\tnewSize |= newSize >> 8;\n\t\t\tnewSize |= newSize >> 16;\n\t\t\tnewSize++;\n\n\t\t\tif (newSize < 0) // Not bloody likely!\n\t\t\t\tnewSize = minCapacity;\n\t\t\telse\n\t\t\t\tnewSize = Math.min(newSize, a.length >>> 1);\n\n\t\t\tT[] newArray = (T[])new Object[newSize];\n\t\t\ttmp = newArray;\n\t\t}\n\t\treturn tmp;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary. The size increases exponentially to ensure amortized linear time complexity.", "call_func_name": ["java.lang.Math.max", "java.lang.Math.min"], "call_func_parameter": [["int", "int"], ["int", "int"]], "passed_comments": "/"}, {"index": "544", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/TimSort.java", "methodName": "com.artemis.utils.TimSort.rangeCheck", "methodParameterType": "int#int#int#", "methodParameterName": "arrayLen#fromIndex#toIndex#", "methodBody": "private static void rangeCheck (int arrayLen, int fromIndex, int toIndex) {\n\t\tif (fromIndex > toIndex) throw new IllegalArgumentException(\"fromIndex(\" + fromIndex + \") > toIndex(\" + toIndex + \")\");\n\t\tif (fromIndex < 0) throw new ArrayIndexOutOfBoundsException(fromIndex);\n\t\tif (toIndex > arrayLen) throw new ArrayIndexOutOfBoundsException(toIndex);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks that fromIndex and toIndex are in range, and throws an appropriate exception if they aren't.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.lang.ArrayIndexOutOfBoundsException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "545", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/utils/Sort.java", "methodName": "com.artemis.utils.Sort.instance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "static public Sort instance () {\n\t\tif (instance == null) instance = new Sort();\n\t\treturn instance;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Sort instance for convenience. Multiple threads must not use this instance at the same time.", "call_func_name": ["com.artemis.utils.Sort.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "546", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/LinkListener.java", "methodName": "com.artemis.link.LinkListener.onLinkEstablished", "methodParameterType": "int#int#", "methodParameterName": "sourceId#targetId#", "methodBody": "void onLinkEstablished(int sourceId, int targetId);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Established connection between <code>sourceId:ComponentType:Field</code> and <code>targetId</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "547", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/LinkListener.java", "methodName": "com.artemis.link.LinkListener.onLinkKilled", "methodParameterType": "int#int#", "methodParameterName": "sourceId#targetId#", "methodBody": "void onLinkKilled(int sourceId, int targetId);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Deletion of source entity or its component.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "548", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/LinkListener.java", "methodName": "com.artemis.link.LinkListener.onTargetDead", "methodParameterType": "int#int#", "methodParameterName": "sourceId#deadTargetId#", "methodBody": "void onTargetDead(int sourceId, int deadTargetId);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Target entity dead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "549", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/LinkListener.java", "methodName": "com.artemis.link.LinkListener.onTargetChanged", "methodParameterType": "int#int#int#", "methodParameterName": "sourceId#targetId#oldTargetId#", "methodBody": "void onTargetChanged(int sourceId, int targetId, int oldTargetId);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Target entity has changed. Never called if source links via IntBag or Bag-of-Entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/EntityLinkManager.java", "methodName": "com.artemis.link.EntityLinkManager.EntityLinkManager", "methodParameterType": "boolean#boolean#", "methodParameterName": "processSitesEvenIfNoListener#fireEventsOnRegistration#", "methodBody": "public EntityLinkManager(boolean processSitesEvenIfNoListener, boolean fireEventsOnRegistration) {\n\t\tsuper(all());\n\t\tthis.requireListener = !processSitesEvenIfNoListener;\n\t\tthis.fireEventsOnRegistration = fireEventsOnRegistration;\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#PrefixExpression#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(PrefixExpression(SimpleName)SimpleName)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param processSitesEvenIfNoListener If true, only act on fields with an attached  {@link LinkListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "551", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/EntityLinkManager.java", "methodName": "com.artemis.link.EntityLinkManager.EntityLinkManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EntityLinkManager() {\n\t\tthis(true, true);\n\t}", "AST": "Javadoc#Modifier#SimpleName#BooleanLiteral#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Processes all fields, even if they don't have a  {@link LinkListener}. LinkListener events will be fired when the listener is registered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "552", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/EntityLinkManager.java", "methodName": "com.artemis.link.EntityLinkManager.register", "methodParameterType": "Class<? extends Component>#LinkListener#", "methodParameterName": "component#listener#", "methodBody": "public void register(Class<? extends Component> component, LinkListener listener) {\n\t\tregister(component, null, listener);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Injects and associates the listener with the component. This method is only recommended if only a single field references entities, or if all entity fields are of the same type.</p> <p>Each <code>ComponentType::Field</code> pair can only have one  {@link LinkListener}</p>", "call_func_name": ["com.artemis.link.EntityLinkManager.register"], "call_func_parameter": [["java.lang.Class", "java.lang.String", "com.artemis.link.LinkListener"]], "passed_comments": [{"com.artemis.link.EntityLinkManager.register": "<p>Injects and associates the listener with a specific field for a given component type.</p> <p>Each <code>ComponentType::Field</code> pair can only have one  {@link LinkListener}</p>"}]}, {"index": "553", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/link/EntityLinkManager.java", "methodName": "com.artemis.link.EntityLinkManager.register", "methodParameterType": "Class<? extends Component>#String#LinkListener#", "methodParameterName": "component#field#listener#", "methodBody": "public void register(Class<? extends Component> component, String field, LinkListener listener) {\n\t\tworld.inject(listener);\n\t\ttry {\n\t\t\tField f = (field != null)\n\t\t\t\t? ClassReflection.getDeclaredField(component, field)\n\t\t\t\t: null;\n\n\t\t\tComponentType ct = world.getComponentManager().getTypeFactory().getTypeFor(component);\n\t\t\tfor (LinkSite site : linkSites) {\n\t\t\t\tif (ct.equals(site.type) && (f == null || site.field.equals(f))) {\n\t\t\t\t\tsite.listener = listener;\n\t\t\t\t\tif (!decoratedLinkSites.contains(site))\n\t\t\t\t\t\tdecoratedLinkSites.add(site);\n\n\t\t\t\t\tif (fireEventsOnRegistration)\n\t\t\t\t\t\tsite.inserted(site.subscription.getEntities());\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (ReflectionException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "<p>Injects and associates the listener with a specific field for a given component type.</p> <p>Each <code>ComponentType::Field</code> pair can only have one  {@link LinkListener}</p>", "call_func_name": ["com.artemis.World.inject", "com.artemis.utils.reflect.ClassReflection.getDeclaredField", "com.artemis.World.getComponentManager", "com.artemis.ComponentManager.getTypeFactory", "com.artemis.ComponentTypeFactory.getTypeFor", "com.artemis.utils.Bag.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.artemis.ComponentType.equals", "com.artemis.utils.reflect.Field.equals", "com.artemis.utils.Bag.contains", "com.artemis.utils.Bag.add", "com.artemis.EntitySubscription.getEntities", "com.artemis.link.LinkSite.inserted", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Class", "java.lang.String"], [""], [""], ["java.lang.Class"], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], ["com.artemis.utils.IntBag"], ["java.lang.Throwable"]], "passed_comments": [{"com.artemis.World.inject": "Inject dependencies on object. <p/> Immediately perform dependency injection on the target, even if the target isn't of an Artemis class. <p/> If you want to specify nonstandard dependencies to inject, use {@link com.artemis.WorldConfiguration#register(String,Object)} instead, orconfigure an  {@link com.artemis.injection.Injector}<p/> If you want a non-throwing alternative, use  {@link #inject(Object,boolean)}"}, {"com.artemis.utils.reflect.ClassReflection.getDeclaredField": "Returns a  {@link Field} that represents the specified declared field for the supplied class."}, {"com.artemis.utils.reflect.ClassReflection.getDeclaredField": "Returns a  {@link Field} that represents the specified declared field for the supplied class."}, {"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.ComponentManager.getTypeFactory": "@return Factory responsible for tracking all component types."}, {"com.artemis.ComponentManager.getTypeFactory": "@return Factory responsible for tracking all component types."}, {"com.artemis.ComponentTypeFactory.getTypeFor": "Gets the component type for the given component class. <p> If no component type exists yet, a new one will be created and stored for later retrieval. </p>"}, {"com.artemis.EntitySubscription.getEntities": "Returns a reference to the bag holding all matched entities. <p><b>Warning: </b> Never remove elements from the bag, as this will lead to undefined behavior.</p>"}]}, {"index": "554", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseEntitySystem.java", "methodName": "com.artemis.BaseEntitySystem.BaseEntitySystem", "methodParameterType": "Aspect.Builder#", "methodParameterName": "aspect#", "methodBody": "public BaseEntitySystem(Aspect.Builder aspect) {\n        if (aspect == null) {\n            aspect = new SystemMetadata(getClass()).getAspect();\n            if (aspect == null) {\n                String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n                        \"do not subscribe to entities, extend BaseSystem directly.\";\n                throw new NullPointerException(error);\n            }\n        }\n\n        aspectConfiguration = aspect;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates an entity system that uses the specified aspect as a matcher against entities.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseEntitySystem.java", "methodName": "com.artemis.BaseEntitySystem.getSubscription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EntitySubscription getSubscription() {\n        final AspectSubscriptionManager sm = world.getAspectSubscriptionManager();\n        return sm.get(aspectConfiguration);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return entity subscription backing this system.", "call_func_name": ["com.artemis.World.getAspectSubscriptionManager"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.World.getAspectSubscriptionManager": "Returns the manager responsible for creating and maintaining {@link EntitySubscription subscriptions} in the world."}]}, {"index": "556", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseEntitySystem.java", "methodName": "com.artemis.BaseEntitySystem.getEntityIds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public IntBag getEntityIds() {\n        return subscription.getEntities();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the entities processed by this system. Do not delete entities from this bag - it is the live thing.", "call_func_name": ["com.artemis.EntitySubscription.getEntities"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.EntitySubscription.getEntities": "Returns a reference to the bag holding all matched entities. <p><b>Warning: </b> Never remove elements from the bag, as this will lead to undefined behavior.</p>"}]}, {"index": "557", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseEntitySystem.java", "methodName": "com.artemis.BaseEntitySystem.inserted", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "protected void inserted(int entityId) {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Called if entity has come into scope for this system, e.g created or a component was added to it. Triggers right after any system finishes processing. Adding and immediately removing a component does not count as a permanently change and will prevent this method from being called. Not triggered for entities that have been destroyed immediately after being created (within a system).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "558", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseEntitySystem.java", "methodName": "com.artemis.BaseEntitySystem.removed", "methodParameterType": "IntBag#", "methodParameterName": "entities#", "methodBody": "@Override\n    public void removed(IntBag entities) {\n        int[] ids = entities.getData();\n        for (int i = 0, s = entities.size(); s > i; i++) {\n            removed(ids[i]);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "<p>Called if entity has gone out of scope of this system, e.g deleted or had one of it's components removed.</p> <p> <p>Explicitly removed components are only retrievable at this point if annotated with  {@link DelayedComponentRemoval}.</p> <p> <p>Deleted entities retain all their components - until all listeners have been informed.</p>", "call_func_name": ["com.artemis.utils.IntBag.getData", "com.artemis.utils.IntBag.size", "com.artemis.BaseEntitySystem.removed"], "call_func_parameter": [[""], [""], ["int"]], "passed_comments": [{"com.artemis.utils.IntBag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}, {"com.artemis.BaseEntitySystem.removed": "<p>Called if entity has gone out of scope of this system, e.g deleted or had one of it's components removed.</p> <p> Important note on accessing components: Using  {@link ComponentMapper#get(int)} to retrieve a component is unsafe, unless:- You annotate the component with  {@link DelayedComponentRemoval}. -  {@link World#isAlwaysDelayComponentRemoval} is enabled to make accessing all components safe,for a small performance hit. <p> {@link ComponentMapper#has(int)} always returns {@code false}, even for DelayedComponentRemoval components. Can trigger for entities that have been destroyed immediately after being created (within a system)."}]}, {"index": "559", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/BaseEntitySystem.java", "methodName": "com.artemis.BaseEntitySystem.removed", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "protected void removed(int entityId) {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "<p>Called if entity has gone out of scope of this system, e.g deleted or had one of it's components removed.</p> <p> Important note on accessing components: Using  {@link ComponentMapper#get(int)} to retrieve a component is unsafe, unless:- You annotate the component with  {@link DelayedComponentRemoval}. -  {@link World#isAlwaysDelayComponentRemoval} is enabled to make accessing all components safe,for a small performance hit. <p> {@link ComponentMapper#has(int)} always returns {@code false}, even for DelayedComponentRemoval components. Can trigger for entities that have been destroyed immediately after being created (within a system).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "560", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentMapper.java", "methodName": "com.artemis.ComponentMapper.get", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "@Override\n    public A get(int entityId) {\n        return components.get(entityId);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fast but unsafe retrieval of a component for this entity. <p> This method trades performance for safety! <p> Might return null, throw  {@link ArrayIndexOutOfBoundsException} or a partially recycledcomponent if called on in-system removed components. <p> Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener.", "call_func_name": ["com.artemis.utils.Bag.get"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}]}, {"index": "561", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentMapper.java", "methodName": "com.artemis.ComponentMapper.has", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "@Override\n    public boolean has(int entityId) {\n        return get(entityId) != null && !purgatory.has(entityId);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the entity has this type of component. <p> Removed components flagged with  {@link DelayedComponentRemoval} will report {@code false}immediately after removal but will still be available using  {@link #get(int)}.", "call_func_name": ["com.artemis.ComponentMapper.get", "com.artemis.ComponentRemover.has"], "call_func_parameter": [["int"], ["int"]], "passed_comments": [{"com.artemis.ComponentMapper.get": "Fast but unsafe retrieval of a component for this entity. <p> This method trades performance for safety! <p> Might return null, throw  {@link ArrayIndexOutOfBoundsException} or a partially recycledcomponent if called on in-system removed components. <p> Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener."}]}, {"index": "562", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentMapper.java", "methodName": "com.artemis.ComponentMapper.remove", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "@Override\n    public void remove(int entityId) {\n        A component = get(entityId);\n        if (component != null) {\n            removeTransmuter.transmuteNoOperation(entityId);\n            purgatory.mark(entityId);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Schedule component for removal. <p> Components annotated with  {@link DelayedComponentRemoval} (or all components if {@link World#isAlwaysDelayComponentRemoval}mode is active) are removed after the system finishes processing and all subscribers have been called. However, {@link #has} will immediately return {@code false} as if it was removed!<p> Non-delayed components are removed immediately. The component reference becomes invalid and should be discarded. Immediate following calls to  {@link #has} will return false, {@link #get} will return null.AspectSubscriptions will reflect the changes only AFTER the system finishes processing. <p> Does nothing if already removed.", "call_func_name": ["com.artemis.ComponentMapper.get", "com.artemis.EntityTransmuter.transmuteNoOperation", "com.artemis.ComponentRemover.mark"], "call_func_parameter": [["int"], ["int"], ["int"]], "passed_comments": [{"com.artemis.ComponentMapper.get": "Fast but unsafe retrieval of a component for this entity. <p> This method trades performance for safety! <p> Might return null, throw  {@link ArrayIndexOutOfBoundsException} or a partially recycledcomponent if called on in-system removed components. <p> Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener."}]}, {"index": "563", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ComponentMapper.java", "methodName": "com.artemis.ComponentMapper.create", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "@Override\n    public A create(int entityId) {\n        A component = get(entityId);\n        if (component == null || purgatory.unmark(entityId)) {\n            // running transmuter first, as it performs som validation\n            createTransmuter.transmuteNoOperation(entityId);\n            component = createNew();\n            components.unsafeSet(entityId, component);\n        }\n\n        return component;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create component for this entity. Avoids creation if component exists.", "call_func_name": ["com.artemis.ComponentMapper.get", "com.artemis.ComponentRemover.unmark", "com.artemis.EntityTransmuter.transmuteNoOperation", "com.artemis.ComponentMapper.createNew", "com.artemis.utils.Bag.unsafeSet"], "call_func_parameter": [["int"], ["int"], ["int"], [""], ["int", "java.lang.Object"]], "passed_comments": [{"com.artemis.ComponentMapper.get": "Fast but unsafe retrieval of a component for this entity. <p> This method trades performance for safety! <p> Might return null, throw  {@link ArrayIndexOutOfBoundsException} or a partially recycledcomponent if called on in-system removed components. <p> Only exception are components marked with  {@link DelayedComponentRemoval}, when calling this method from within a subscription listener."}]}, {"index": "564", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.create", "methodParameterType": "Class<T>#", "methodParameterName": "componentKlazz#", "methodBody": "public <T extends Component> T create(Class<T> componentKlazz) {\n\t\treturn cm.getMapper(componentKlazz).create(entityId);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create new instance of component. <p/> if exists, replaces and retires old component!", "call_func_name": ["com.artemis.ComponentManager.getMapper", "com.artemis.ComponentMapper.create"], "call_func_parameter": [["java.lang.Class"], ["int"]], "passed_comments": [{"com.artemis.ComponentMapper.create": "Create component for this entity. Avoids creation if component exists."}]}, {"index": "565", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.add", "methodParameterType": "Component#", "methodParameterName": "component#", "methodBody": "public EntityEdit add(Component component) {\n\t\treturn add(component, cm.typeFactory.getTypeFor(component.getClass()));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a component to this entity.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.ComponentTypeFactory.getTypeFor", "com.artemis.EntityEdit.add"], "call_func_parameter": [[""], ["java.lang.Class"], ["com.artemis.Component", "com.artemis.ComponentType"]], "passed_comments": [{"com.artemis.ComponentTypeFactory.getTypeFor": "Gets the component type for the given component class. <p> If no component type exists yet, a new one will be created and stored for later retrieval. </p>"}, {"com.artemis.EntityEdit.add": "Faster adding of components into the entity. <p> Not necessary to use this, but in some cases you might need the extra performance. </p>"}]}, {"index": "566", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.add", "methodParameterType": "Component#ComponentType#", "methodParameterName": "component#type#", "methodBody": "public EntityEdit add(Component component, ComponentType type) {\n\t\tif (type.isPooled) {\n\t\t\tthrow new InvalidComponentException(component.getClass(),\n\t\t\t\t\"Use EntityEdit#create(Class<Component>) for adding non-basic component types\");\n\t\t}\n\n\t\tComponentMapper mapper = cm.getMapper(type.getType());\n\n\t\tmapper.create(entityId);\n\t\tmapper.components.getData()[entityId] =  component;\n\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Faster adding of components into the entity. <p> Not necessary to use this, but in some cases you might need the extra performance. </p>", "call_func_name": ["java.lang.Object.getClass", "com.artemis.InvalidComponentException.<init>", "com.artemis.ComponentType.getType", "com.artemis.ComponentManager.getMapper", "com.artemis.ComponentMapper.create", "com.artemis.utils.Bag.getData"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String"], [""], ["java.lang.Class"], ["int"], [""]], "passed_comments": [{"com.artemis.ComponentType.getType": "@return {@code Class} that this type represents."}, {"com.artemis.ComponentType.getType": "@return {@code Class} that this type represents."}, {"com.artemis.ComponentMapper.create": "Create component for this entity. Avoids creation if component exists."}, {"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> <b>Use of this method requires typed instantiation, e.g. Bag<E>(Class<E>)</b> </p>"}]}, {"index": "567", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.getEntity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Entity getEntity() {\n\t\treturn cm.world.getEntity(entityId);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get target entity of entity edits.", "call_func_name": ["com.artemis.World.getEntity"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.World.getEntity": "Get entity with the specified id. Resolves entity id to the unique entity instance. <em>This method may return an entity even if it isn't active in the world.</em> Make sure to not retain id's of deleted entities."}]}, {"index": "568", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.getEntityId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getEntityId() {\n\t\treturn entityId;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get target entity id of entity edits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "569", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.remove", "methodParameterType": "Component#", "methodParameterName": "component#", "methodBody": "public EntityEdit remove(Component component) {\n\t\treturn remove(component.getClass());\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes the component from this entity.", "call_func_name": ["java.lang.Object.getClass", "com.artemis.EntityEdit.remove"], "call_func_parameter": [[""], ["java.lang.Class"]], "passed_comments": [{"com.artemis.EntityEdit.remove": "Remove component by its type."}]}, {"index": "570", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.remove", "methodParameterType": "ComponentType#", "methodParameterName": "type#", "methodBody": "public EntityEdit remove(ComponentType type) {\n\t\tcm.getMapper(type.getType()).remove(entityId);\n\t\treturn this;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removal of components from a entity. <p/> Faster than  {@link #remove(Class)}.", "call_func_name": ["com.artemis.ComponentType.getType", "com.artemis.ComponentManager.getMapper", "com.artemis.ComponentMapper.remove"], "call_func_parameter": [[""], ["java.lang.Class"], ["int"]], "passed_comments": [{"com.artemis.ComponentType.getType": "@return {@code Class} that this type represents."}, {"com.artemis.ComponentType.getType": "@return {@code Class} that this type represents."}, {"com.artemis.ComponentMapper.remove": "Schedule component for removal. <p> Components annotated with  {@link DelayedComponentRemoval} (or all components if {@link World#isAlwaysDelayComponentRemoval}mode is active) are removed after the system finishes processing and all subscribers have been called. However, {@link #has} will immediately return {@code false} as if it was removed!<p> Non-delayed components are removed immediately. The component reference becomes invalid and should be discarded. Immediate following calls to  {@link #has} will return false, {@link #get} will return null.AspectSubscriptions will reflect the changes only AFTER the system finishes processing. <p> Does nothing if already removed."}]}, {"index": "571", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityEdit.java", "methodName": "com.artemis.EntityEdit.remove", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "type#", "methodBody": "public EntityEdit remove(Class<? extends Component> type) {\n\t\treturn remove(cm.typeFactory.getTypeFor(type));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove component by its type.", "call_func_name": ["com.artemis.ComponentTypeFactory.getTypeFor", "com.artemis.EntityEdit.remove"], "call_func_parameter": [["java.lang.Class"], ["com.artemis.ComponentType"]], "passed_comments": [{"com.artemis.ComponentTypeFactory.getTypeFor": "Gets the component type for the given component class. <p> If no component type exists yet, a new one will be created and stored for later retrieval. </p>"}, {"com.artemis.EntityEdit.remove": "Removal of components from a entity. <p/> Faster than  {@link #remove(Class)}."}]}, {"index": "572", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/ArtemisMultiException.java", "methodName": "com.artemis.ArtemisMultiException.ArtemisMultiException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ArtemisMultiException() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "required constructor for serialization", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityManager.java", "methodName": "com.artemis.EntityManager.EntityManager", "methodParameterType": "int#", "methodParameterName": "initialContainerSize#", "methodBody": "protected EntityManager(int initialContainerSize) {\n\t\tentities = new Bag<Entity>(initialContainerSize);\n\t\tregisterEntityStore(recycled);\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new EntityManager Instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "574", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityManager.java", "methodName": "com.artemis.EntityManager.createEntityInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Entity createEntityInstance() {\n\t\treturn obtain();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new entity.", "call_func_name": ["com.artemis.EntityManager.obtain"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "575", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityManager.java", "methodName": "com.artemis.EntityManager.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int create() {\n\t\treturn obtain().id;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new entity.", "call_func_name": ["com.artemis.EntityManager.obtain"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityManager.java", "methodName": "com.artemis.EntityManager.isActive", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public boolean isActive(int entityId) {\n\t\treturn !recycled.unsafeGet(entityId);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if this entity is active. <p> Active means the entity is being actively processed. </p>", "call_func_name": ["com.artemis.utils.BitVector.unsafeGet"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.BitVector.unsafeGet": "@param index the index of the bit"}, {"com.artemis.utils.BitVector.unsafeGet": "@param index the index of the bit"}]}, {"index": "577", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityManager.java", "methodName": "com.artemis.EntityManager.getEntity", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "protected Entity getEntity(int entityId) {\n\t\treturn entities.get(entityId);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves entity id to the unique entity instance. <em>This method may return an entity even if it isn't active in the world, </em> use {@link #isActive(int)} if you need to check whether the entity is active or not.", "call_func_name": ["com.artemis.utils.Bag.get"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}]}, {"index": "578", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityManager.java", "methodName": "com.artemis.EntityManager.reset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean reset() {\n\t\tint count = world.getAspectSubscriptionManager()\n\t\t\t.get(all())\n\t\t\t.getActiveEntityIds()\n\t\t\t.cardinality();\n\n\t\tif (count > 0)\n\t\t\treturn false;\n\n\t\tlimbo.clear();\n\t\trecycled.clear();\n\t\tentities.clear();\n\n\t\tnextId = 0;\n\n\t\treturn true;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>If all entties have been deleted, resets the entity cache - with next entity entity receiving id <code>0</code>. There mustn't be any active entities in the world for this method to work. This method does nothing if it fails.</p> <p>For the reset to take effect, a new  {@link World#process()} must initiate.</p>", "call_func_name": ["com.artemis.World.getAspectSubscriptionManager", "com.artemis.Aspect.all", "com.artemis.EntitySubscription.getActiveEntityIds", "com.artemis.utils.BitVector.cardinality", "com.artemis.utils.IntDeque.clear", "com.artemis.utils.BitVector.clear", "com.artemis.utils.Bag.clear"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"com.artemis.World.getAspectSubscriptionManager": "Returns the manager responsible for creating and maintaining {@link EntitySubscription subscriptions} in the world."}, {"com.artemis.Aspect.all": "Returns an aspect that matches all entities."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect that matches all entities."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.Aspect.all": "Returns an aspect where an entity must possess all of the specified component types."}, {"com.artemis.EntitySubscription.getActiveEntityIds": "Returns the bitset tracking all matched entities. <p><b>Warning: </b> Never toggle bits in the bitset, as this <i>may</i> lead to erroneously added or removed entities.</p>"}, {"com.artemis.utils.IntDeque.clear": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>"}, {"com.artemis.utils.BitVector.clear": "@param index the index of the bit to clear"}, {"com.artemis.utils.BitVector.clear": "Clears the entire bitset"}, {"com.artemis.utils.Bag.clear": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>"}, {"com.artemis.utils.Bag.clear": "Removes all of the elements from this bag. <p> The bag will be empty after this call returns. </p>"}]}, {"index": "579", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntityManager.java", "methodName": "com.artemis.EntityManager.createEntity", "methodParameterType": "int#", "methodParameterName": "id#", "methodBody": "private Entity createEntity(int id) {\n\t\tEntity e = new Entity(world, id);\n\t\tif (e.id >= entities.getCapacity()) {\n\t\t\tgrowEntityStores();\n\t\t}\n\n\t\t// can't use unsafe set, as we need to track highest id\n\t\t// for faster iteration when syncing up new subscriptions\n\t\t// in ComponentManager#synchronize\n\t\tentities.set(e.id, e);\n\n\t\treturn e;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instantiates an Entity without registering it into the world.", "call_func_name": ["com.artemis.Entity.<init>", "com.artemis.utils.Bag.getCapacity", "com.artemis.EntityManager.growEntityStores", "com.artemis.utils.Bag.set"], "call_func_parameter": [["com.artemis.World", "int"], [""], [""], ["int", "java.lang.Object"]], "passed_comments": [{"com.artemis.utils.Bag.getCapacity": "Returns the number of elements the bag can hold without growing."}, {"com.artemis.utils.Bag.getCapacity": "Returns the number of elements the bag can hold without growing."}]}, {"index": "580", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySystem.java", "methodName": "com.artemis.EntitySystem.EntitySystem", "methodParameterType": "Aspect.Builder#", "methodParameterName": "aspect#", "methodBody": "public EntitySystem(Aspect.Builder aspect) {\n\t\tsuper(aspect);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an entity system that uses the specified aspect as a matcher against entities.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySystem.java", "methodName": "com.artemis.EntitySystem.setWorld", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "@Override\n\tprotected void setWorld(World world) {\n\t\tsuper.setWorld(world);\n\t\tif(implementsObserver(this, \"inserted\"))\n\t\t\tmethodFlags |= FLAG_INSERTED;\n\t\tif(implementsObserver(this, \"removed\"))\n\t\t\tmethodFlags |= FLAG_REMOVED;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#ThisExpression#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#ThisExpression#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(StringLiteral)StringLiteral)MethodInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(StringLiteral)StringLiteral)MethodInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the world this system works on.", "call_func_name": ["com.artemis.BaseEntitySystem.setWorld", "com.artemis.utils.reflect.ReflectionUtil.implementsObserver"], "call_func_parameter": [["com.artemis.World"], ["com.artemis.BaseSystem", "java.lang.String"]], "passed_comments": "/"}, {"index": "582", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySystem.java", "methodName": "com.artemis.EntitySystem.inserted", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void inserted(Entity e) {\n\t\tthrow new RuntimeException(\"everything changes\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Called if entity has come into scope for this system, e.g created or a component was added to it.", "call_func_name": ["java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "583", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySystem.java", "methodName": "com.artemis.EntitySystem.removed", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void removed(Entity e) {\n\t\tthrow new RuntimeException(\"everything breaks\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "<p>Called if entity has gone out of scope of this system, e.g deleted or had one of it's components removed.</p> <p>Explicitly removed components are only retrievable at this point if annotated with  {@link DelayedComponentRemoval}.</p> <p>Deleted entities retain all their components - until all listeners have been informed.</p>", "call_func_name": ["java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "584", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/EntitySystem.java", "methodName": "com.artemis.EntitySystem.getEntities", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Bag<Entity> getEntities() {\n\t\tif (shouldSyncEntities) {\n\t\t\tint oldSize = entities.size();\n\t\t\tentities.setSize(0);\n\t\t\tIntBag entityIds = subscription.getEntities();\n\t\t\tint[] ids = entityIds.getData();\n\t\t\tfor (int i = 0; i < entityIds.size(); i++) {\n\t\t\t\tentities.add(world.getEntity(ids[i]));\n\t\t\t}\n\n\t\t\tif (oldSize > entities.size()) {\n\t\t\t\tArrays.fill(entities.getData(), entities.size(), oldSize, null);\n\t\t\t}\n\n\t\t\tshouldSyncEntities = false;\n\t\t}\n\n\t\treturn entities;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the entities processed by this system. Do not delete entities from this bag - it is the live thing.", "call_func_name": ["com.artemis.WildBag.size", "com.artemis.WildBag.setSize", "com.artemis.EntitySubscription.getEntities", "com.artemis.utils.IntBag.getData", "com.artemis.utils.IntBag.size", "com.artemis.World.getEntity", "com.artemis.WildBag.add", "com.artemis.WildBag.getData", "java.util.Arrays.fill"], "call_func_parameter": [[""], ["int"], [""], [""], [""], ["int"], ["java.lang.Object"], [""], ["java.lang.Object[]", "int", "int", "java.lang.Object"]], "passed_comments": [{"com.artemis.WildBag.setSize": "Set the size. <p> This will not resize the bag, nor will it clean up contents beyond the given size. Use with caution. </p>"}, {"com.artemis.EntitySubscription.getEntities": "Returns a reference to the bag holding all matched entities. <p><b>Warning: </b> Never remove elements from the bag, as this will lead to undefined behavior.</p>"}, {"com.artemis.utils.IntBag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}, {"com.artemis.World.getEntity": "Get entity with the specified id. Resolves entity id to the unique entity instance. <em>This method may return an entity even if it isn't active in the world.</em> Make sure to not retain id's of deleted entities."}]}, {"index": "585", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/SystemInvocationStrategy.java", "methodName": "com.artemis.SystemInvocationStrategy.setWorld", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "protected final void setWorld(World world) {\n\t\tthis.world = world;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "World to operate on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "586", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/SystemInvocationStrategy.java", "methodName": "com.artemis.SystemInvocationStrategy.setSystems", "methodParameterType": "Bag<BaseSystem>#", "methodParameterName": "systems#", "methodBody": "protected void setSystems(Bag<BaseSystem> systems) {\n\t\tthis.systems = systems;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called prior to  {@link #initialize()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "587", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/SystemInvocationStrategy.java", "methodName": "com.artemis.SystemInvocationStrategy.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void initialize() {}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Called during world initialization phase.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "588", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/SystemInvocationStrategy.java", "methodName": "com.artemis.SystemInvocationStrategy.updateEntityStates", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected final void updateEntityStates() {\n\t\tworld.batchProcessor.update();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Call to inform all systems and subscription of world state changes.", "call_func_name": ["com.artemis.BatchChangeProcessor.update"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "589", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/SystemInvocationStrategy.java", "methodName": "com.artemis.SystemInvocationStrategy.process", "methodParameterType": "Bag<BaseSystem>#", "methodParameterName": "systems#", "methodBody": "@Deprecated\n\tprotected final void process(Bag<BaseSystem> systems) {\n\t\tthrow new RuntimeException(\"wrong process method\");\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Process all systems.", "call_func_name": ["java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "590", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.Entity", "methodParameterType": "World#int#", "methodParameterName": "world#id#", "methodBody": "protected Entity(World world, int id) {\n\t\tthis.world = world;\n\t\tthis.id = id;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Entity} instance in the given world.<p> This will only be called by the world via it's entity manager, and not directly by the user, as the world handles creation of entities. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "591", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getId() {\n\t\treturn id;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "592", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.getComponentBits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected BitVector getComponentBits() {\n\t\treturn world.getComponentManager().componentBits(id);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a BitVector instance containing bits of the components the entity possesses.", "call_func_name": ["com.artemis.World.getComponentManager", "com.artemis.ComponentManager.componentBits"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.ComponentManager.componentBits": "Get component composition of entity."}, {"com.artemis.ComponentManager.componentBits": "Get component composition of entity."}]}, {"index": "593", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.edit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EntityEdit edit() {\n\t\treturn world.edit(id);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get entity editor.", "call_func_name": ["com.artemis.World.edit"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.World.edit": "Get entity editor for entity."}]}, {"index": "594", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.isActive", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isActive() {\n\t\treturn world.getEntityManager().isActive(id);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the entity has been added to the world and has not been deleted from it. <p> If the entity has been disabled this will still return true. </p>", "call_func_name": ["com.artemis.World.getEntityManager", "com.artemis.EntityManager.isActive"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.World.getEntityManager": "Returns a manager that takes care of all the entities in the world."}, {"com.artemis.EntityManager.isActive": "Check if this entity is active. <p> Active means the entity is being actively processed. </p>"}]}, {"index": "595", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.getComponent", "methodParameterType": "ComponentType#", "methodParameterName": "type#", "methodBody": "public Component getComponent(ComponentType type) {\n\t\treturn world.getComponentManager().getComponent(id, type);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves component from this entity. <p> Minimize usage of this. Use  {@link ComponentMapper} instead.</p>", "call_func_name": ["com.artemis.World.getComponentManager", "com.artemis.ComponentManager.getComponent"], "call_func_parameter": [[""], ["int", "com.artemis.ComponentType"]], "passed_comments": [{"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.ComponentManager.getComponent": "Get a component of an entity."}, {"com.artemis.ComponentManager.getComponent": "Get a component of an entity."}]}, {"index": "596", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.getComponent", "methodParameterType": "Class<T>#", "methodParameterName": "type#", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tpublic <T extends Component> T getComponent(Class<T> type) {\n\t\tComponentTypeFactory tf = world.getComponentManager().typeFactory;\n\t\treturn (T) getComponent(tf.getTypeFor(type));\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Slower retrieval of components from this entity. <p> Minimize usage of this. Use  {@link ComponentMapper} instead.</p>", "call_func_name": ["com.artemis.World.getComponentManager", "com.artemis.ComponentTypeFactory.getTypeFor", "com.artemis.Entity.getComponent"], "call_func_parameter": [[""], ["java.lang.Class"], ["com.artemis.ComponentType"]], "passed_comments": [{"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.ComponentTypeFactory.getTypeFor": "Gets the component type for the given component class. <p> If no component type exists yet, a new one will be created and stored for later retrieval. </p>"}, {"com.artemis.Entity.getComponent": "Retrieves component from this entity. <p> Minimize usage of this. Use  {@link ComponentMapper} instead.</p>"}]}, {"index": "597", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.getComponents", "methodParameterType": "Bag<Component>#", "methodParameterName": "fillBag#", "methodBody": "public Bag<Component> getComponents(Bag<Component> fillBag) {\n\t\treturn world.getComponentManager().getComponentsFor(id, fillBag);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a bag of all components this entity has. <p> You need to reset the bag yourself if you intend to fill it more than once. </p>", "call_func_name": ["com.artemis.World.getComponentManager", "com.artemis.ComponentManager.getComponentsFor"], "call_func_parameter": [[""], ["int", "com.artemis.utils.Bag"]], "passed_comments": [{"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.ComponentManager.getComponentsFor": "Get all component associated with an entity."}, {"com.artemis.ComponentManager.getComponentsFor": "Get all component associated with an entity."}]}, {"index": "598", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.deleteFromWorld", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void deleteFromWorld() {\n\t\tworld.delete(id);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delete the entity from the world. The entity is considered to be in a final state once invoked; adding or removing components from an entity scheduled for deletion will likely throw exceptions.", "call_func_name": ["com.artemis.World.delete"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.World.delete": "Delete the entity from the world. The entity is considered to be in a final state once invoked; adding or removing components from an entity scheduled for deletion will likely throw exceptions."}]}, {"index": "599", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.getWorld", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public World getWorld() {\n\t\treturn world;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the world this entity belongs to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "600", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.getCompositionId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCompositionId() {\n\t\treturn world.getComponentManager().getIdentity(id);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return unique identifier for entities with this specific component configuration.", "call_func_name": ["com.artemis.World.getComponentManager", "com.artemis.ComponentManager.getIdentity"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.World.getComponentManager": "Returns a manager that takes care of all the components in the world."}, {"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}, {"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}]}, {"index": "601", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.equals", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) return true;\n\t\tif (o == null || getClass() != o.getClass()) return false;\n\n\t\tEntity entity = (Entity) o;\n\n\t\treturn id == entity.id;\n\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(ThisExpression)ThisExpression(SimpleName)SimpleName)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "id equality", "call_func_name": ["java.lang.Object.getClass"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "602", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Entity.java", "methodName": "com.artemis.Entity.equals", "methodParameterType": "Entity#", "methodParameterName": "o#", "methodBody": "public boolean equals(Entity o) {\n\t\treturn o != null && o.id == id;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "id equality", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "603", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.getAllSet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitVector getAllSet() {\n\t\treturn allSet;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a BitVector containing bits of components the entity must all possess.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.getExclusionSet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitVector getExclusionSet() {\n\t\treturn exclusionSet;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a BitVector containing bits of components the entity must not possess.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.getOneSet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitVector getOneSet() {\n\t\treturn oneSet;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a BitVector containing bits of components of which the entity must possess atleast one.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.isInterested", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public boolean isInterested(Entity e){\n\t\treturn isInterested(e.getComponentBits());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this Aspect would accept the given Entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.isInterested", "methodParameterType": "BitVector#", "methodParameterName": "componentBits#", "methodBody": "public boolean isInterested(BitVector componentBits){\n\t\t// Check if the entity possesses ALL of the components defined in the aspect.\n\t\tif(!allSet.isEmpty() && !componentBits.containsAll(allSet))\n\t\t\treturn false;\n\n\t\t// If we are STILL interested,\n\t\t// Check if the entity possesses ANY of the exclusion components,\n\t\t// if it does then the system is not interested.\n\t\tif (!exclusionSet.isEmpty() && exclusionSet.intersects(componentBits))\n\t\t\treturn false;\n\n\t\t// If we are STILL interested,\n\t\t// Check if the entity possesses ANY of the components in the oneSet.\n\t\t// If so, the system is interested.\n\t\tif (!oneSet.isEmpty() && !oneSet.intersects(componentBits))\n\t\t\treturn false;\n\n\t\treturn true;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this Aspect would accept the given set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.all", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static Aspect.Builder all() {\n\t\treturn new Builder().all();\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect that matches all entities.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "609", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.all", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "@SafeVarargs\n\tpublic static Aspect.Builder all(Class<? extends Component>... types) {\n\t\treturn new Builder().all(types);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess all of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "610", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.all", "methodParameterType": "Collection<Class<? extends Component>>#", "methodParameterName": "types#", "methodBody": "public static Aspect.Builder all(Collection<Class<? extends Component>> types) {\n\t\treturn new Builder().all(types);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess all of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.exclude", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "@SafeVarargs\n\tpublic static Aspect.Builder exclude(Class<? extends Component>... types) {\n\t\treturn new Builder().exclude(types);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Excludes all of the specified component types from the aspect. <p> A system will not be interested in an entity that possesses one of the specified exclusion component types. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.exclude", "methodParameterType": "Collection<Class<? extends Component>>#", "methodParameterName": "types#", "methodBody": "public static Aspect.Builder exclude(Collection<Class<? extends Component>> types) {\n\t\treturn new Builder().exclude(types);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Excludes all of the specified component types from the aspect. <p> A system will not be interested in an entity that possesses one of the specified exclusion component types. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "613", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.one", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "types#", "methodBody": "@SafeVarargs\n\tpublic static Aspect.Builder one(Class<? extends Component>... types) {\n\t\treturn new Builder().one(types);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess one of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/Aspect.java", "methodName": "com.artemis.Aspect.one", "methodParameterType": "Collection<Class<? extends Component>>#", "methodParameterName": "types#", "methodBody": "public static Aspect.Builder one(Collection<Class<? extends Component>> types) {\n\t\treturn new Builder().one(types);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an aspect where an entity must possess one of the specified component types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "615", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.World", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public World() {\n\t\tthis(new WorldConfiguration());\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a world without custom systems. <p> {@link com.artemis.EntityManager},  {@link ComponentManager} and {@link AspectSubscriptionManager} areavailable by default. </p> Why are you using this? Use  {@link #World(WorldConfiguration)} to create a world with your own systems.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.World", "methodParameterType": "WorldConfiguration#", "methodParameterName": "configuration#", "methodBody": "public World(WorldConfiguration configuration) {\n\t\tpartition = new WorldSegment(configuration);\n\t\tsystemsBag = configuration.systems;\n\n\t\tfinal ComponentManager lcm =\n\t\t\t(ComponentManager) systemsBag.get(COMPONENT_MANAGER_IDX);\n\t\tfinal EntityManager lem =\n\t\t\t(EntityManager) systemsBag.get(ENTITY_MANAGER_IDX);\n\t\tfinal AspectSubscriptionManager lasm =\n\t\t\t(AspectSubscriptionManager) systemsBag.get(ASPECT_SUBSCRIPTION_MANAGER_IDX);\n\n\t\tcm = lcm == null ? new ComponentManager(configuration.expectedEntityCount()) : lcm;\n\t\tem = lem == null ? new EntityManager(configuration.expectedEntityCount()) : lem;\n\t\tasm = lasm == null ? new AspectSubscriptionManager() : lasm;\n\t\tbatchProcessor = new BatchChangeProcessor(this);\n\t\talwaysDelayComponentRemoval = configuration.isAlwaysDelayComponentRemoval();\n\n\t\tconfiguration.initialize(this, partition.injector, asm);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new world. <p> {@link com.artemis.EntityManager},  {@link ComponentManager} and {@link AspectSubscriptionManager} areavailable by default, on top of your own systems. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "617", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.inject", "methodParameterType": "Object#", "methodParameterName": "target#", "methodBody": "public void inject(Object target) {\n\t\tinject(target, true);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inject dependencies on object. <p/> Immediately perform dependency injection on the target, even if the target isn't of an Artemis class. <p/> If you want to specify nonstandard dependencies to inject, use {@link com.artemis.WorldConfiguration#register(String,Object)} instead, orconfigure an  {@link com.artemis.injection.Injector}<p/> If you want a non-throwing alternative, use  {@link #inject(Object,boolean)}", "call_func_name": ["com.artemis.World.inject"], "call_func_parameter": [["java.lang.Object", "boolean"]], "passed_comments": [{"com.artemis.World.inject": "Inject dependencies on object. <p/> Will not if it is annotated with  {@link com.artemis.annotations.Wire}. <p/> If you want to specify nonstandard dependencies to inject, use {@link com.artemis.WorldConfiguration#register(String,Object)} instead, orconfigure an  {@link com.artemis.injection.Injector}."}]}, {"index": "618", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.inject", "methodParameterType": "Object#boolean#", "methodParameterName": "target#failIfNotInjectable#", "methodBody": "public void inject(Object target, boolean failIfNotInjectable) {\n\t\tboolean injectable = partition.injector.isInjectable(target);\n\t\tif (!injectable && failIfNotInjectable)\n\t\t\tthrow new MundaneWireException(\"Attempted injection on \" + target.getClass()\n\t\t\t\t\t.getName() + \", which is annotated with @SkipWire\");\n\n\t\tif (injectable)\n\t\t\tpartition.injector.inject(target);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Inject dependencies on object. <p/> Will not if it is annotated with  {@link com.artemis.annotations.Wire}. <p/> If you want to specify nonstandard dependencies to inject, use {@link com.artemis.WorldConfiguration#register(String,Object)} instead, orconfigure an  {@link com.artemis.injection.Injector}.", "call_func_name": ["com.artemis.injection.Injector.isInjectable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "com.artemis.MundaneWireException.<init>", "com.artemis.injection.Injector.inject"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.artemis.injection.Injector.isInjectable": "Determins if a target object can be injected by this injector."}, {"com.artemis.injection.Injector.inject": "Inject dependencies on object. The injector delegates to  {@link com.artemis.injection.FieldHandler} to resolvefeiled values."}]}, {"index": "619", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.dispose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void dispose() {\n\t\tList<Throwable> exceptions = new ArrayList<Throwable>();\n\n\t\tfor (BaseSystem system : systemsBag) {\n\t\t\ttry {\n\t\t\t\tsystem.dispose();\n\t\t\t} catch (Exception e) {\n\t\t\t\texceptions.add(e);\n\t\t\t}\n\t\t}\n\n\t\tif (exceptions.size() > 0)\n\t\t\tthrow new ArtemisMultiException(exceptions);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Disposes all systems. Only necessary if either need to free managed resources upon bringing the world to an end.", "call_func_name": ["java.util.ArrayList.<init>", "com.artemis.utils.Bag.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.artemis.BaseSystem.dispose", "java.util.List.add", "java.util.List.size", "com.artemis.ArtemisMultiException.<init>"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object"], [""], ["java.util.List"]], "passed_comments": [{"com.artemis.BaseSystem.dispose": "see  {@link World#dispose()}"}]}, {"index": "620", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.edit", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public EntityEdit edit(int entityId) {\n\t\tif (!em.isActive(entityId))\n\t\t\tthrow new RuntimeException(\"Issued edit on deleted \" + entityId);\n\n\t\treturn batchProcessor.obtainEditor(entityId);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get entity editor for entity.", "call_func_name": ["com.artemis.EntityManager.isActive", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>", "com.artemis.BatchChangeProcessor.obtainEditor"], "call_func_parameter": [["int"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["int"]], "passed_comments": [{"com.artemis.EntityManager.isActive": "Check if this entity is active. <p> Active means the entity is being actively processed. </p>"}, {"com.artemis.BatchChangeProcessor.obtainEditor": "Get entity editor."}]}, {"index": "621", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.compositionId", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public int compositionId(int entityId) {\n\t\treturn cm.getIdentity(entityId);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the <code>composition id</code> uniquely identifying the component composition of an entity. Each composition identity maps to one unique <code>BitVector</code>.", "call_func_name": ["com.artemis.ComponentManager.getIdentity"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}, {"com.artemis.ComponentManager.getIdentity": "Fetch composition id for entity. A composition id is uniquely identified by a single Aspect. For performance reasons, each entity is identified by its composition id. Adding or removing components from an entity will change its compositionId."}]}, {"index": "622", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getEntityManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EntityManager getEntityManager() {\n\t\treturn em;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a manager that takes care of all the entities in the world.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getComponentManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ComponentManager getComponentManager() {\n\t\treturn cm;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a manager that takes care of all the components in the world.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "624", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getAspectSubscriptionManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AspectSubscriptionManager getAspectSubscriptionManager() {\n\t\treturn asm;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the manager responsible for creating and maintaining {@link EntitySubscription subscriptions} in the world.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getDelta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public float getDelta() {\n\t\treturn delta;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Time since last game loop.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.setDelta", "methodParameterType": "float#", "methodParameterName": "delta#", "methodBody": "public void setDelta(float delta) {\n\t\tthis.delta = delta;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "You must specify the delta for the game here.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "627", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.deleteEntity", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "public void deleteEntity(Entity e) {\n\t\tdelete(e.id);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delete the entity from the world.", "call_func_name": ["com.artemis.World.delete"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.World.delete": "Delete the entity from the world. The entity is considered to be in a final state once invoked; adding or removing components from an entity scheduled for deletion will likely throw exceptions."}]}, {"index": "628", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.delete", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public void delete(int entityId) {\n\t\tbatchProcessor.delete(entityId);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delete the entity from the world. The entity is considered to be in a final state once invoked; adding or removing components from an entity scheduled for deletion will likely throw exceptions.", "call_func_name": ["com.artemis.BatchChangeProcessor.delete"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "629", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.createEntity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Entity createEntity() {\n\t\tEntity e = em.createEntityInstance();\n\t\tbatchProcessor.changed.unsafeSet(e.getId());\n\t\treturn e;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create and return a new or reused entity instance. Entity is automatically added to the world.", "call_func_name": ["com.artemis.EntityManager.createEntityInstance", "com.artemis.Entity.getId", "com.artemis.utils.BitVector.unsafeSet"], "call_func_parameter": [[""], [""], ["int"]], "passed_comments": [{"com.artemis.EntityManager.createEntityInstance": "Create a new entity."}, {"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}]}, {"index": "630", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int create() {\n\t\tint entityId = em.create();\n\t\tbatchProcessor.changed.unsafeSet(entityId);\n\t\treturn entityId;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create and return a new or reused entity id. Entity is automatically added to the world.", "call_func_name": ["com.artemis.EntityManager.create", "com.artemis.utils.BitVector.unsafeSet"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.artemis.EntityManager.create": "Create a new entity."}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}]}, {"index": "631", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.createEntity", "methodParameterType": "Archetype#", "methodParameterName": "archetype#", "methodBody": "public Entity createEntity(Archetype archetype) {\n\t\tEntity e = em.createEntityInstance();\n\n\t\tint id = e.getId();\n\t\tarchetype.transmuter.perform(id);\n\t\tcm.setIdentity(e.id, archetype.compositionId);\n\n\t\tbatchProcessor.changed.unsafeSet(id);\n\n\t\treturn e;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create and return an  {@link Entity} wrapping a new or reused entity instance.Entity is automatically added to the world. Use  {@link Entity#edit()} to set up your newly created entity.You can also create entities using: <ul> <li> {@link com.artemis.utils.EntityBuilder} Convenient entity creation. Not useful when pooling.</li><li> {@link com.artemis.Archetype} Fastest, low level, no parameterized components.</li><li><a href=\"https://github.com/junkdog/artemis-odb/wiki/Serialization\">Serialization</a>, with a simple prefab-like class to parameterize the entities.</li> </ul>", "call_func_name": ["com.artemis.EntityManager.createEntityInstance", "com.artemis.Entity.getId", "com.artemis.ComponentManager.setIdentity", "com.artemis.utils.BitVector.unsafeSet"], "call_func_parameter": [[""], [""], ["int", "int"], ["int"]], "passed_comments": [{"com.artemis.EntityManager.createEntityInstance": "Create a new entity."}, {"com.artemis.Entity.getId": "The internal id for this entity within the framework. Id is zero or greater. <p> No other entity will have the same ID, but ID's are however reused so another entity may acquire this ID if the previous entity was deleted. </p>"}, {"com.artemis.ComponentManager.setIdentity": "Set composition id of entity."}, {"com.artemis.ComponentManager.setIdentity": "Set composition id of entity."}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}]}, {"index": "632", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.create", "methodParameterType": "Archetype#", "methodParameterName": "archetype#", "methodBody": "public int create(Archetype archetype) {\n\t\tint entityId = em.create();\n\n\t\tarchetype.transmuter.perform(entityId);\n\t\tcm.setIdentity(entityId, archetype.compositionId);\n\n\t\tbatchProcessor.changed.unsafeSet(entityId);\n\n\t\treturn entityId;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create and return an  {@link Entity} wrapping a new or reused entity instance.Entity is automatically added to the world. Use  {@link Entity#edit()} to set up your newly created entity.You can also create entities using: -  {@link com.artemis.utils.EntityBuilder} Convenient entity creation. Not useful when pooling.-  {@link com.artemis.Archetype} Fastest, low level, no parameterized components.", "call_func_name": ["com.artemis.EntityManager.create", "com.artemis.ComponentManager.setIdentity", "com.artemis.utils.BitVector.unsafeSet"], "call_func_parameter": [[""], ["int", "int"], ["int"]], "passed_comments": [{"com.artemis.EntityManager.create": "Create a new entity."}, {"com.artemis.ComponentManager.setIdentity": "Set composition id of entity."}, {"com.artemis.ComponentManager.setIdentity": "Set composition id of entity."}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}, {"com.artemis.utils.BitVector.unsafeSet": "@param index the index of the bit to set"}]}, {"index": "633", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getEntity", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "public Entity getEntity(int entityId) {\n\t\treturn em.getEntity(entityId);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get entity with the specified id. Resolves entity id to the unique entity instance. <em>This method may return an entity even if it isn't active in the world.</em> Make sure to not retain id's of deleted entities.", "call_func_name": ["com.artemis.EntityManager.getEntity"], "call_func_parameter": [["int"]], "passed_comments": [{"com.artemis.EntityManager.getEntity": "Resolves entity id to the unique entity instance. <em>This method may return an entity even if it isn't active in the world, </em> use {@link #isActive(int)} if you need to check whether the entity is active or not."}]}, {"index": "634", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getSystems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ImmutableBag<BaseSystem> getSystems() {\n\t\treturn systemsBag;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gives you all the systems in this world for possible iteration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "635", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getSystem", "methodParameterType": "Class<T>#", "methodParameterName": "type#", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tpublic <T extends BaseSystem> T getSystem(Class<T> type) {\n\t\treturn (T) partition.systems.get(type);\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve a system for specified system type.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "636", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.setInvocationStrategy", "methodParameterType": "SystemInvocationStrategy#", "methodParameterName": "invocationStrategy#", "methodBody": "protected void setInvocationStrategy(SystemInvocationStrategy invocationStrategy) {\n\t\tthis.invocationStrategy = invocationStrategy;\n\t\tinvocationStrategy.setWorld(this);\n\t\tinvocationStrategy.setSystems(systemsBag);\n\t\tinvocationStrategy.initialize();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set strategy for invoking systems on  {@link #process()}.", "call_func_name": ["com.artemis.SystemInvocationStrategy.setWorld", "com.artemis.SystemInvocationStrategy.setSystems", "com.artemis.SystemInvocationStrategy.initialize"], "call_func_parameter": [["com.artemis.World"], ["com.artemis.utils.Bag"], [""]], "passed_comments": [{"com.artemis.SystemInvocationStrategy.setWorld": "World to operate on."}, {"com.artemis.SystemInvocationStrategy.setSystems": "Called prior to  {@link #initialize()}"}, {"com.artemis.SystemInvocationStrategy.initialize": "Called during world initialization phase."}]}, {"index": "637", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.process", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void process() {\n\t\tinvocationStrategy.process();\n\n\t\tIntBag pendingPurge = batchProcessor.getPendingPurge();\n\t\tif (!pendingPurge.isEmpty()) {\n\t\t\tcm.clean(pendingPurge);\n\t\t\tem.clean(pendingPurge);\n\n\t\t\tbatchProcessor.purgeComponents();\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Process all non-passive systems.", "call_func_name": ["com.artemis.SystemInvocationStrategy.process", "com.artemis.BatchChangeProcessor.getPendingPurge", "com.artemis.utils.IntBag.isEmpty", "com.artemis.ComponentManager.clean", "com.artemis.EntityManager.clean", "com.artemis.BatchChangeProcessor.purgeComponents"], "call_func_parameter": [[""], [""], [""], ["com.artemis.utils.IntBag"], ["com.artemis.utils.IntBag"], [""]], "passed_comments": [{"com.artemis.SystemInvocationStrategy.process": "Process all systems."}, {"com.artemis.utils.IntBag.isEmpty": "Returns true if this bag contains no elements."}, {"com.artemis.ComponentManager.clean": "Removes all components from deleted entities."}, {"com.artemis.ComponentManager.clean": "Removes all components from deleted entities."}]}, {"index": "638", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getMapper", "methodParameterType": "Class<T>#", "methodParameterName": "type#", "methodBody": "public <T extends Component> ComponentMapper<T> getMapper(Class<T> type) {\n\t\treturn cm.getMapper(type);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a ComponentMapper instance for fast retrieval of components from entities. Odb automatically injects component mappers into systems, calling this method is usually not required.,", "call_func_name": ["com.artemis.ComponentManager.getMapper"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "639", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getInjector", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Injector getInjector() {\n\t\treturn partition.injector;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Injector responsible for dependency injection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "640", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.getInvocationStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public <T extends SystemInvocationStrategy> T getInvocationStrategy() {\n\t\treturn (T) invocationStrategy;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Strategy used for invoking systems during {@link World#process()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "641", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/World.java", "methodName": "com.artemis.World.isAlwaysDelayComponentRemoval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAlwaysDelayComponentRemoval() {\n        return alwaysDelayComponentRemoval;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "When true, component removal is delayed for all components until all subscriptions have been notified.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "642", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/InjectionCache.java", "methodName": "com.artemis.injection.InjectionCache.setWireAnnotation", "methodParameterType": "CachedClass#Wire#", "methodParameterName": "cachedClass#wireAnnotation#", "methodBody": "private void setWireAnnotation(CachedClass cachedClass, Wire wireAnnotation) {\n\t\tcachedClass.wireType = WireType.WIRE;\n\t\tcachedClass.wireAnnotation = wireAnnotation;\n\t\tcachedClass.failOnNull = wireAnnotation.failOnNull();\n\t\tcachedClass.injectInherited = wireAnnotation.injectInherited();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set  {@code @Wire} annotation value for cached class.", "call_func_name": ["com.artemis.annotations.Wire.failOnNull", "com.artemis.annotations.Wire.injectInherited"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "643", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/InjectionCache.java", "methodName": "com.artemis.injection.InjectionCache.getWireType", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "private WireType getWireType(Class<?> clazz) {\n\t\treturn\n\t\t\tisAnnotationPresent(clazz, Wire.class) ? WireType.WIRE :\n\t\t\tisAnnotationPresent(clazz, SkipWire.class) ? WireType.SKIPWIRE :\n\t\t\tWireType.IGNORED;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine desired wiring on class by annotation. Convention is  {@code Wire(injectInherited=true)}", "call_func_name": ["com.artemis.utils.reflect.ClassReflection.isAnnotationPresent"], "call_func_parameter": [["java.lang.Class", "java.lang.Class"]], "passed_comments": [{"com.artemis.utils.reflect.ClassReflection.isAnnotationPresent": "Returns true if the supplied class includes an annotation of the given class type."}, {"com.artemis.utils.reflect.ClassReflection.isAnnotationPresent": "Returns true if the supplied class includes an annotation of the given class type."}]}, {"index": "644", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/UseInjectionCache.java", "methodName": "com.artemis.injection.UseInjectionCache.setCache", "methodParameterType": "InjectionCache#", "methodParameterName": "cache#", "methodBody": "void setCache(InjectionCache cache);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param cache used by the {@link FieldHandler}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "645", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/FieldHandler.java", "methodName": "com.artemis.injection.FieldHandler.FieldHandler", "methodParameterType": "InjectionCache#Bag<FieldResolver>#", "methodParameterName": "cache#fieldResolvers#", "methodBody": "public FieldHandler(InjectionCache cache, Bag<FieldResolver> fieldResolvers) {\n\t\tthis.cache = cache;\n\t\tthis.fieldResolvers = fieldResolvers;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new FieldHandler with the provided fieldResolvers. This constructor should be used when full control over the  {@link FieldResolver} order is required.<p> For Artemis to function correctly,  {@link ArtemisFieldResolver} should be added somewhere in the bag, oradded via  {@link #addFieldResolver(FieldResolver)} prior to world construction.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "646", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/FieldHandler.java", "methodName": "com.artemis.injection.FieldHandler.FieldHandler", "methodParameterType": "InjectionCache#", "methodParameterName": "cache#", "methodBody": "public FieldHandler(InjectionCache cache) {\n\t\tthis.fieldResolvers = new Bag(FieldResolver.class);\n\t\tthis.cache = cache;\n\t\t// the order FieldResolvers are added is relevant, we want to prioritize @Wired fields\n\t\taddFieldResolver(new WiredFieldResolver());\n\t\taddFieldResolver(new ArtemisFieldResolver());\n\t\taddFieldResolver(new AspectFieldResolver());\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a ned FieldHandler with an  {@link ArtemisFieldResolver} and {@link WiredFieldResolver}already registered, which can resolve  {@link com.artemis.ComponentMapper},  {@link com.artemis.BaseSystem}and  {@link com.artemis.Manager} types registered in the {@link World}{@link com.artemis.annotations.Wire}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "647", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/FieldHandler.java", "methodName": "com.artemis.injection.FieldHandler.initialize", "methodParameterType": "World#Map<String,Object>#", "methodParameterName": "world#injectables#", "methodBody": "public void initialize(World world, Map<String, Object> injectables) {\n\n\t\tboolean fieldResolverFound = false;\n\n\t\tfor (int i = 0, s = fieldResolvers.size(); i < s; i++) {\n\t\t\tFieldResolver fieldResolver = fieldResolvers.get(i);\n\t\t\tif (ClassReflection.isInstance(UseInjectionCache.class, fieldResolver)) {\n\t\t\t\t((UseInjectionCache) fieldResolver).setCache(cache);\n\t\t\t}\n\n\t\t\tif (ClassReflection.isInstance(PojoFieldResolver.class, fieldResolver)) {\n\t\t\t\t((PojoFieldResolver) fieldResolver).setPojos(injectables);\n\t\t\t\tfieldResolverFound = true;\n\t\t\t}\n\n\t\t\tfieldResolver.initialize(world);\n\t\t}\n\n\t\tif ( injectables != null && !injectables.isEmpty() && !fieldResolverFound )\n\t\t{\n\t\t\tthrow new InjectionException(\"FieldHandler lacks resolver capable of dealing with your custom injectables. Register a WiredFieldResolver or PojoFieldResolver with your FieldHandler.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "During  {@link World} construction, after systems and managers have been created, {@link #initialize(World,Map)}will be called for each registered  {@link FieldResolver}</p> <p/> If  {@link FieldResolver} implements {@link UseInjectionCache},  {@link UseInjectionCache#setCache(InjectionCache)}will be called prior to   {@link FieldResolver#initialize(World)} being called, availing the {@link InjectionCache}used by this handler.", "call_func_name": ["com.artemis.utils.Bag.size", "com.artemis.utils.Bag.get", "com.artemis.utils.reflect.ClassReflection.isInstance", "com.artemis.injection.UseInjectionCache.setCache", "com.artemis.injection.PojoFieldResolver.setPojos", "com.artemis.injection.FieldResolver.initialize", "java.util.Map.isEmpty", "com.artemis.InjectionException.<init>"], "call_func_parameter": [[""], ["int"], ["java.lang.Class", "java.lang.Object"], ["com.artemis.injection.InjectionCache"], ["java.util.Map"], ["com.artemis.World"], [""], ["java.lang.String"]], "passed_comments": [{"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.reflect.ClassReflection.isInstance": "Determines if the supplied Object is assignment-compatible with the object represented by supplied Class."}, {"com.artemis.utils.reflect.ClassReflection.isInstance": "Determines if the supplied Object is assignment-compatible with the object represented by supplied Class."}, {"com.artemis.injection.UseInjectionCache.setCache": "@param cache used by the {@link FieldHandler}"}, {"com.artemis.injection.PojoFieldResolver.setPojos": "Set manaully registered objects."}, {"com.artemis.injection.FieldResolver.initialize": "Called after Wo"}]}, {"index": "648", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/FieldHandler.java", "methodName": "com.artemis.injection.FieldHandler.resolve", "methodParameterType": "Object#Class<?>#Field#", "methodParameterName": "target#fieldType#field#", "methodBody": "public Object resolve(Object target, Class<?> fieldType, Field field) {\n\t\tfor (int i = 0, s = fieldResolvers.size(); i < s; i++) {\n\t\t\tObject resolved = fieldResolvers.get(i).resolve(target, fieldType, field);\n\t\t\tif (resolved != null) {\n\t\t\t\treturn resolved;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#ForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the first non-null value provided by {@link FieldResolver#resolve(Object,Class,Field)}, or null if no resolver returned a valid value.", "call_func_name": ["com.artemis.utils.Bag.size", "com.artemis.utils.Bag.get", "com.artemis.injection.FieldResolver.resolve"], "call_func_parameter": [[""], ["int"], ["java.lang.Object", "java.lang.Class", "com.artemis.utils.reflect.Field"]], "passed_comments": [{"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.utils.Bag.get": "Returns the element at the specified position in Bag."}, {"com.artemis.injection.FieldResolver.resolve": "@param target object which should have dependencies injected."}]}, {"index": "649", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/FieldHandler.java", "methodName": "com.artemis.injection.FieldHandler.addFieldResolver", "methodParameterType": "FieldResolver#", "methodParameterName": "fieldResolver#", "methodBody": "public final void addFieldResolver(FieldResolver fieldResolver) {\n\t\tfieldResolvers.add(fieldResolver);\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a  {@link FieldResolver} to this handler. Resolvers added first, will be used first for resolving fields,so the order of add operations is significant.", "call_func_name": ["com.artemis.utils.Bag.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "650", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/PojoFieldResolver.java", "methodName": "com.artemis.injection.PojoFieldResolver.setPojos", "methodParameterType": "Map<String,Object>#", "methodParameterName": "pojos#", "methodBody": "void setPojos(Map<String, Object> pojos);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set manaully registered objects.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "651", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/FieldResolver.java", "methodName": "com.artemis.injection.FieldResolver.initialize", "methodParameterType": "World#", "methodParameterName": "world#", "methodBody": "void initialize(World world);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called after Wo", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "652", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/FieldResolver.java", "methodName": "com.artemis.injection.FieldResolver.resolve", "methodParameterType": "Object#Class<?>#Field#", "methodParameterName": "target#fieldType#field#", "methodBody": "Object resolve(Object target, Class<?> fieldType, Field field);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param target object which should have dependencies injected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "653", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/Injector.java", "methodName": "com.artemis.injection.Injector.getRegistered", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "<T> T getRegistered(String id);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Programmatic retrieval of registered objects. Useful when full injection isn't necessary.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "654", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/Injector.java", "methodName": "com.artemis.injection.Injector.getRegistered", "methodParameterType": "Class<T>#", "methodParameterName": "id#", "methodBody": "<T> T getRegistered(Class<T> id);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Programmatic retrieval of registered objects. Useful when full injection isn't necessary. This method internally calls  {@link #getRegistered(String)}, with the class name as parameter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "655", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/Injector.java", "methodName": "com.artemis.injection.Injector.initialize", "methodParameterType": "World#Map<String,Object>#", "methodParameterName": "world#injectables#", "methodBody": "void initialize(World world, Map<String, Object> injectables);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param world       this Injector will be used for", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "656", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/Injector.java", "methodName": "com.artemis.injection.Injector.inject", "methodParameterType": "Object#", "methodParameterName": "target#", "methodBody": "void inject(Object target) throws RuntimeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Inject dependencies on object. The injector delegates to  {@link com.artemis.injection.FieldHandler} to resolvefeiled values.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "657", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/Injector.java", "methodName": "com.artemis.injection.Injector.isInjectable", "methodParameterType": "Object#", "methodParameterName": "target#", "methodBody": "boolean isInjectable(Object target);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determins if a target object can be injected by this injector.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "658", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/injection/Injector.java", "methodName": "com.artemis.injection.Injector.setFieldHandler", "methodParameterType": "FieldHandler#", "methodParameterName": "fieldHandler#", "methodBody": "Injector setFieldHandler(FieldHandler fieldHandler);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Enables the injector to be configured with a custom  {@link com.artemis.injection.FieldHandler} which willbe used to resolve instance values for target-fields.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "659", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/PooledComponent.java", "methodName": "com.artemis.PooledComponent.reset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract void reset();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Called whenever the component is recycled. Implementation should reset component to pristine state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "660", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.DelayedIteratingSystem", "methodParameterType": "Aspect.Builder#", "methodParameterName": "aspect#", "methodBody": "public DelayedIteratingSystem(Aspect.Builder aspect) {\n\t\tsuper(aspect);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DelayedEntityProcessingSystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "661", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.getRemainingDelay", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "protected abstract float getRemainingDelay(int entityId);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return the delay until this entity should be processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "662", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.getTimeDelta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected float getTimeDelta() {\n\t\treturn world.getDelta();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Overridable method to provide custom time delta.", "call_func_name": ["com.artemis.World.getDelta"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.World.getDelta": "Time since last game loop."}]}, {"index": "663", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.processDelta", "methodParameterType": "int#float#", "methodParameterName": "entityId#accumulatedDelta#", "methodBody": "protected abstract void processDelta(int entityId, float accumulatedDelta);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Process an entity this system is interested in. <p> Substract the accumulatedDelta from the entities defined delay. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "664", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.offerDelay", "methodParameterType": "float#", "methodParameterName": "offeredDelay#", "methodBody": "public void offerDelay(float offeredDelay) {\n\t\tif (!running) {\n\t\t\trunning = true;\n\t\t\tdelay = offeredDelay;\n\t\t} else {\n\t\t\tdelay = Math.min(delay, offeredDelay);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Restarts the system only if the delay offered is shorter than the time that the system is currently scheduled to execute at. <p> If the system is already stopped (not running) then the offered delay will be used to restart the system with no matter its value. </p><p> If the system is already counting down, and the offered delay is  larger than the time remaining, the system will ignore it. If the offered delay is shorter than the time remaining, the system will restart itself to run at the offered delay. </p>", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["float", "float"]], "passed_comments": "/"}, {"index": "665", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.getInitialTimeDelay", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public float getInitialTimeDelay() {\n\t\treturn delay;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the initial delay that the system was ordered to process entities after.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "666", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.getRemainingTimeUntilProcessing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public float getRemainingTimeUntilProcessing() {\n\t\tif(running) {\n\t\t\treturn delay-acc;\n\t\t}\n\t\treturn 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the time until the system is scheduled to run at. <p> Returns zero (0) if the system is not running. Use  {@link #isRunning() isRunning()} before checking this value.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "667", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.isRunning", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isRunning() {\n\t\treturn running;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the system is counting down towards processing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "668", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedIteratingSystem.java", "methodName": "com.artemis.systems.DelayedIteratingSystem.stop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void stop() {\n\t\tthis.running = false;\n\t\tthis.acc = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Stops the system from running, aborts current countdown. <p> Call offerDelay or restart to run it again. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "669", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalSystem.java", "methodName": "com.artemis.systems.IntervalSystem.IntervalSystem", "methodParameterType": "Aspect.Builder#float#", "methodParameterName": "aspect#interval#", "methodBody": "public IntervalSystem(Aspect.Builder aspect, float interval) {\n\t\tsuper(aspect);\n\t\tthis.interval = interval;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new IntervalEntitySystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "670", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalSystem.java", "methodName": "com.artemis.systems.IntervalSystem.getIntervalDelta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected float getIntervalDelta() {\n\t\treturn interval + intervalDelta;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the actual delta since this system was last processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "671", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/EntityProcessingSystem.java", "methodName": "com.artemis.systems.EntityProcessingSystem.EntityProcessingSystem", "methodParameterType": "Aspect.Builder#", "methodParameterName": "aspect#", "methodBody": "public EntityProcessingSystem(Aspect.Builder aspect) {\n\t\tsuper(aspect);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new EntityProcessingSystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "672", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/EntityProcessingSystem.java", "methodName": "com.artemis.systems.EntityProcessingSystem.process", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "protected abstract void process(Entity e);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Process a entity this system is interested in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "673", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/EntityProcessingSystem.java", "methodName": "com.artemis.systems.EntityProcessingSystem.processSystem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tprotected final void processSystem() {\n\t\tBag<Entity> entities = getEntities();\n\t\tObject[] array = entities.getData();\n\t\tfor (int i = 0, s = entities.size(); s > i; i++) {\n\t\t\tprocess((Entity) array[i]);\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "@inheritDoc", "call_func_name": ["com.artemis.systems.EntityProcessingSystem.getEntities", "com.artemis.utils.Bag.getData", "com.artemis.utils.Bag.size", "com.artemis.systems.EntityProcessingSystem.process"], "call_func_parameter": [[""], [""], [""], ["com.artemis.Entity"]], "passed_comments": [{"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.Bag.getData": "Returns this bag's underlying array. <p> <b>Use of this method requires typed instantiation, e.g. Bag<E>(Class<E>)</b> </p>"}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.utils.Bag.size": "Returns the number of elements in this bag."}, {"com.artemis.systems.EntityProcessingSystem.process": "Process a entity this system is interested in."}]}, {"index": "674", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.DelayedEntityProcessingSystem", "methodParameterType": "Aspect.Builder#", "methodParameterName": "aspect#", "methodBody": "public DelayedEntityProcessingSystem(Aspect.Builder aspect) {\n\t\tsuper(aspect);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new DelayedEntityProcessingSystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "675", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.getRemainingDelay", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "protected abstract float getRemainingDelay(Entity e);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return the delay until this entity should be processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "676", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.getTimeDelta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected float getTimeDelta() {\n\t\treturn world.getDelta();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Overridable method to provide custom time delta.", "call_func_name": ["com.artemis.World.getDelta"], "call_func_parameter": [[""]], "passed_comments": [{"com.artemis.World.getDelta": "Time since last game loop."}]}, {"index": "677", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.processDelta", "methodParameterType": "Entity#float#", "methodParameterName": "e#accumulatedDelta#", "methodBody": "protected abstract void processDelta(Entity e, float accumulatedDelta);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Process an entity this system is interested in. <p> Substract the accumulatedDelta from the entities defined delay. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "678", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.offerDelay", "methodParameterType": "float#", "methodParameterName": "offeredDelay#", "methodBody": "public void offerDelay(float offeredDelay) {\n\t\tif (!running) {\n\t\t\trunning = true;\n\t\t\tdelay = offeredDelay;\n\t\t} else {\n\t\t\tdelay = Math.min(delay, offeredDelay);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Restarts the system only if the delay offered is shorter than the time that the system is currently scheduled to execute at. <p> If the system is already stopped (not running) then the offered delay will be used to restart the system with no matter its value. </p><p> If the system is already counting down, and the offered delay is  larger than the time remaining, the system will ignore it. If the offered delay is shorter than the time remaining, the system will restart itself to run at the offered delay. </p>", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["float", "float"]], "passed_comments": "/"}, {"index": "679", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.getInitialTimeDelay", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public float getInitialTimeDelay() {\n\t\treturn delay;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the initial delay that the system was ordered to process entities after.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "680", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.getRemainingTimeUntilProcessing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public float getRemainingTimeUntilProcessing() {\n\t\tif(running) {\n\t\t\treturn delay-acc;\n\t\t}\n\t\treturn 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the time until the system is scheduled to run at. <p> Returns zero (0) if the system is not running. Use  {@link #isRunning() isRunning()} before checking this value.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "681", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.isRunning", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isRunning() {\n\t\treturn running;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the system is counting down towards processing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "682", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/DelayedEntityProcessingSystem.java", "methodName": "com.artemis.systems.DelayedEntityProcessingSystem.stop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void stop() {\n\t\tthis.running = false;\n\t\tthis.acc = 0;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Stops the system from running, aborts current countdown. <p> Call offerDelay or restart to run it again. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "683", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalEntitySystem.java", "methodName": "com.artemis.systems.IntervalEntitySystem.IntervalEntitySystem", "methodParameterType": "Aspect.Builder#float#", "methodParameterName": "aspect#interval#", "methodBody": "public IntervalEntitySystem(Aspect.Builder aspect, float interval) {\n\t\tsuper(aspect);\n\t\tthis.interval = interval;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new IntervalEntitySystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "684", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalEntitySystem.java", "methodName": "com.artemis.systems.IntervalEntitySystem.getIntervalDelta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected float getIntervalDelta() {\n\t\treturn intervalDelta + acc;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the actual delta since this system was last processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "685", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalIteratingSystem.java", "methodName": "com.artemis.systems.IntervalIteratingSystem.IntervalIteratingSystem", "methodParameterType": "Aspect.Builder#float#", "methodParameterName": "aspect#interval#", "methodBody": "public IntervalIteratingSystem(Aspect.Builder aspect, float interval) {\n\t\tsuper(aspect, interval);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new IntervalEntityProcessingSystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "686", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalIteratingSystem.java", "methodName": "com.artemis.systems.IntervalIteratingSystem.process", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "protected abstract void process(int entityId);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Process a entity this system is interested in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "687", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IteratingSystem.java", "methodName": "com.artemis.systems.IteratingSystem.IteratingSystem", "methodParameterType": "Aspect.Builder#", "methodParameterName": "aspect#", "methodBody": "public IteratingSystem(Aspect.Builder aspect) {\n\t\tsuper(aspect);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new IteratingSystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "688", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IteratingSystem.java", "methodName": "com.artemis.systems.IteratingSystem.process", "methodParameterType": "int#", "methodParameterName": "entityId#", "methodBody": "protected abstract void process(int entityId);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Process a entity this system is interested in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "689", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IteratingSystem.java", "methodName": "com.artemis.systems.IteratingSystem.processSystem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tprotected final void processSystem() {\n\t\tIntBag actives = subscription.getEntities();\n\t\tint[] ids = actives.getData();\n\t\tfor (int i = 0, s = actives.size(); s > i; i++) {\n\t\t\tprocess(ids[i]);\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "@inheritDoc", "call_func_name": ["com.artemis.EntitySubscription.getEntities", "com.artemis.utils.IntBag.getData", "com.artemis.utils.IntBag.size", "com.artemis.systems.IteratingSystem.process"], "call_func_parameter": [[""], [""], [""], ["int"]], "passed_comments": [{"com.artemis.EntitySubscription.getEntities": "Returns a reference to the bag holding all matched entities. <p><b>Warning: </b> Never remove elements from the bag, as this will lead to undefined behavior.</p>"}, {"com.artemis.utils.IntBag.getData": "Returns this bag's underlying array. <p> Use with care. </p>"}, {"com.artemis.utils.IntBag.size": "Returns the number of elements in this bag."}, {"com.artemis.systems.IteratingSystem.process": "Process a entity this system is interested in."}]}, {"index": "690", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalEntityProcessingSystem.java", "methodName": "com.artemis.systems.IntervalEntityProcessingSystem.IntervalEntityProcessingSystem", "methodParameterType": "Aspect.Builder#float#", "methodParameterName": "aspect#interval#", "methodBody": "public IntervalEntityProcessingSystem(Aspect.Builder aspect, float interval) {\n\t\tsuper(aspect, interval);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new IntervalEntityProcessingSystem.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "691", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/systems/IntervalEntityProcessingSystem.java", "methodName": "com.artemis.systems.IntervalEntityProcessingSystem.process", "methodParameterType": "Entity#", "methodParameterName": "e#", "methodBody": "protected abstract void process(Entity e);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Process a entity this system is interested in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "692", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/io/InputStreamHelper.java", "methodName": "com.artemis.io.InputStreamHelper.reset", "methodParameterType": "InputStream#", "methodParameterName": "is#", "methodBody": "public static void reset(InputStream is) throws IOException {\n\t\tis.reset();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reset input stream", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "693", "file": "/root/repos/repos18/artemis-odb/artemis-core/artemis/src/main/java/com/artemis/io/InputStreamHelper.java", "methodName": "com.artemis.io.InputStreamHelper.isMarkSupported", "methodParameterType": "InputStream#", "methodParameterName": "is#", "methodBody": "public static boolean isMarkSupported(InputStream is)\n\t{\n\t\treturn is.markSupported();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods. Whether or not <code>mark</code> and <code>reset</code> are supported is an invariant property of a particular input stream instance. The <code>markSupported</code> method of <code>InputStream</code> returns <code>false</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "694", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/TypeModelGenerator.java", "methodName": "com.artemis.generator.TypeModelGenerator.addStrategy", "methodParameterType": "BuilderModelStrategy#", "methodParameterName": "strategy#", "methodBody": "public void addStrategy(BuilderModelStrategy strategy) {\n        strategies.add(strategy);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add strategy used to convert components to agnostic builder model.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "695", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/TypeModelGenerator.java", "methodName": "com.artemis.generator.TypeModelGenerator.generate", "methodParameterType": "ArtemisModel#", "methodParameterName": "artemisModel#", "methodBody": "public TypeModel generate(ArtemisModel artemisModel) {\n        Preconditions.checkArgument(!strategies.isEmpty(), \"No strategies registered to generate model.\");\n\n        TypeModel result = new TypeModel();\n\n        for (BuilderModelStrategy strategy : strategies) {\n            strategy.apply(artemisModel, result);\n        }\n\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a builder based on component model.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "696", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/model/artemis/ComponentDescriptor.java", "methodName": "com.artemis.generator.model.artemis.ComponentDescriptor.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "simple class name. 'RocketFuel'", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "697", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/model/artemis/ComponentDescriptor.java", "methodName": "com.artemis.generator.model.artemis.ComponentDescriptor.getMethodPrefix", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMethodPrefix() {\n\n        return methodPrefix;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "decapitalized class name. 'rocketFuel'", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "698", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/model/artemis/ComponentDescriptor.java", "methodName": "com.artemis.generator.model.artemis.ComponentDescriptor.create", "methodParameterType": "Class<? extends Component>#FluidGeneratorPreferences#", "methodParameterName": "type#globalPreferences#", "methodBody": "public static ComponentDescriptor create(Class<? extends Component> type, FluidGeneratorPreferences globalPreferences) {\n\n        String methodPrefix = Strings.decapitalizeString(type.getSimpleName());\n        String name = type.getSimpleName();\n        FluidGeneratorPreferences preferences = new FluidGeneratorPreferences();\n        preferences.mirror(globalPreferences);\n\n        // @todo make sure this is processed from least to most pressing.\n        for (Annotation annotation : ExtendedTypeReflection.getAllAnnotations(type)) {\n            if (annotation.annotationType().equals(Fluid.class)) {\n                final Fluid fluid = (Fluid) annotation;\n                if (!fluid.name().isEmpty()) {\n                    methodPrefix = fluid.name();\n                    name = Strings.capitalizeString(fluid.name());\n                }\n                preferences.apply(fluid);\n            }\n        }\n\n        return new ComponentDescriptor(type, methodPrefix, name, preferences );\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create descriptor for passed type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "699", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/model/type/TypeModel.java", "methodName": "com.artemis.generator.model.type.TypeModel.add", "methodParameterType": "MethodDescriptor#", "methodParameterName": "method#", "methodBody": "public void add(MethodDescriptor method) {\n        methods.add(method);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add method to model.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "700", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/model/type/TypeModel.java", "methodName": "com.artemis.generator.model.type.TypeModel.getMethodBySignature", "methodParameterType": "String#", "methodParameterName": "signature#", "methodBody": "public MethodDescriptor getMethodBySignature(String signature) {\n        for (MethodDescriptor method : methods) {\n            if (signature.equals(method.signature(true, true))) {\n                return method;\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get method that matches signature exactly.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "701", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/common/IterativeModelStrategy.java", "methodName": "com.artemis.generator.common.IterativeModelStrategy.apply", "methodParameterType": "ComponentDescriptor#TypeModel#", "methodParameterName": "component#model#", "methodBody": "protected abstract void apply(ComponentDescriptor component, TypeModel model);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Implementations should transform model based on component.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "702", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/common/BuilderModelStrategy.java", "methodName": "com.artemis.generator.common.BuilderModelStrategy.apply", "methodParameterType": "ArtemisModel#TypeModel#", "methodParameterName": "artemisModel#model#", "methodBody": "void apply(ArtemisModel artemisModel, TypeModel model);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Apply strategy to model, generating whatever methods needed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "703", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/Strings.java", "methodName": "com.artemis.generator.util.Strings.assembleMethodName", "methodParameterType": "String#String#", "methodParameterName": "prefix#suffix#", "methodBody": "public static String assembleMethodName(String prefix, String suffix) {\n\n        if (StringUtils.isEmpty(prefix)) {\n            return decapitalizeString(suffix);\n        }\n\n        if (!StringUtils.isAlphanumeric(prefix)) {\n            return prefix + decapitalizeString(suffix);\n        }\n\n        return prefix + capitalizeString(suffix);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns method name. <p> For alphanumerical or empty prefixes lowercase, otherwise uppercase.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "704", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/MethodBuilder.java", "methodName": "com.artemis.generator.util.MethodBuilder.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MethodDescriptor build()\n    {\n        return method;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Prep method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "705", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/MethodBuilder.java", "methodName": "com.artemis.generator.util.MethodBuilder.body", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public MethodBuilder body(String value) {\n        String[] split = value.split(\"\\n\");\n        for (String statement : split) {\n            method.addStatement(statement);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add body, excluding outer brackets.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "706", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/ExtendedTypeReflection.java", "methodName": "com.artemis.generator.util.ExtendedTypeReflection.isFlagComponent", "methodParameterType": "Class#", "methodParameterName": "type#", "methodBody": "public static boolean isFlagComponent(Class type) {\n        return getAllPublicFields(type).isEmpty() &&\n                getAllPublicMethods(type).isEmpty();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get if component is a flag component.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "707", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/ExtendedTypeReflection.java", "methodName": "com.artemis.generator.util.ExtendedTypeReflection.getAllPublicFields", "methodParameterType": "Class#", "methodParameterName": "type#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static Set<Field> getAllPublicFields(Class type) {\n        Set<Field> result = allPublicFields.get(type);\n        if (result == null) {\n            result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n            allPublicFields.put(type, result);\n        }\n        return result;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all public fields of this type, cached. <p> Excludes static.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "708", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/ExtendedTypeReflection.java", "methodName": "com.artemis.generator.util.ExtendedTypeReflection.getAllAnnotations", "methodParameterType": "Class#", "methodParameterName": "type#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Annotation> getAllAnnotations(Class type) {\n        List<Annotation> result = allAnnotations.get(type);\n        if (result == null) {\n            result = getAllAnnotationsList(type);\n            allAnnotations.put(type, result);\n        }\n        return result;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all public annotations of type, throughout the hierarchy! Ordered from superclass to subclass.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "709", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/ExtendedTypeReflection.java", "methodName": "com.artemis.generator.util.ExtendedTypeReflection.getAllAnnotationsList", "methodParameterType": "Class#", "methodParameterName": "type#", "methodBody": "public static List<Annotation> getAllAnnotationsList(Class type) {\n        ArrayList<Annotation> result = new ArrayList<Annotation>(4);\n        for (Class t : getHierarchy(type)) {\n            result.addAll(ReflectionUtils.getAnnotations(t));\n        }\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all annotations on hierarchy. Ignores Object and interfaces.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "710", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/ExtendedTypeReflection.java", "methodName": "com.artemis.generator.util.ExtendedTypeReflection.getHierarchy", "methodParameterType": "Class#", "methodParameterName": "type#", "methodBody": "private static List<Class> getHierarchy(Class type) {\n        ArrayList<Class> results = new ArrayList<Class>();\n        while (type != Object.class && !type.isInterface()) {\n            results.add(type);\n            type = type.getSuperclass();\n        }\n        return Lists.reverse(results);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return class hierarchy, except object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "711", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/util/ExtendedTypeReflection.java", "methodName": "com.artemis.generator.util.ExtendedTypeReflection.getAllPublicMethods", "methodParameterType": "Class#", "methodParameterName": "type#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static Set<Method> getAllPublicMethods(Class type) {\n        Set<Method> result = allPublicMethods.get(type);\n        if (result == null) {\n            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n            allPublicMethods.put(type, result);\n        }\n        return result;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all public methods of type, cached. <p> Excludes static, abstract.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "712", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/collect/ReflectionsClassCollectStrategy.java", "methodName": "com.artemis.generator.collect.ReflectionsClassCollectStrategy.allComponents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Set<Class<? extends Component>> allComponents() {\n        // reflect over components.\n        return reflections.getSubTypesOf(Component.class);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all components on classpath.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "713", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/collect/ReflectionsClassCollectStrategy.java", "methodName": "com.artemis.generator.collect.ReflectionsClassCollectStrategy.allFieldProxyStrategies", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Set<Class<? extends FieldProxyStrategy>> allFieldProxyStrategies() {\n        // reflect over components.\n        return reflections.getSubTypesOf(FieldProxyStrategy.class);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all field proxy strategies on classpath.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "714", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/collect/ReflectionsClassCollectStrategy.java", "methodName": "com.artemis.generator.collect.ReflectionsClassCollectStrategy.asClassloader", "methodParameterType": "Set<URL>#", "methodParameterName": "urls#", "methodBody": "private static ClassLoader asClassloader(Set<URL> urls) {\n        return URLClassLoader.newInstance(urls.toArray(new URL[0]), Thread.currentThread().getContextClassLoader());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create classloader for URLS", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "715", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/collect/AbstractClassCollectStrategy.java", "methodName": "com.artemis.generator.collect.AbstractClassCollectStrategy.AbstractClassCollectStrategy", "methodParameterType": "Set<URL>#", "methodParameterName": "urls#", "methodBody": "AbstractClassCollectStrategy(Set<URL> urls) {\n        this.urls = urls;\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param urls locations to search.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "716", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/collect/AbstractClassCollectStrategy.java", "methodName": "com.artemis.generator.collect.AbstractClassCollectStrategy.allComponents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract Collection<Class<? extends Component>> allComponents();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Collect all components within a set of URLs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "717", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/collect/AbstractClassCollectStrategy.java", "methodName": "com.artemis.generator.collect.AbstractClassCollectStrategy.allFieldProxyStrategies", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract Collection<Class<? extends FieldProxyStrategy>> allFieldProxyStrategies();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Collect all components within a set of URLs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "718", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/validator/TypeModelValidator.java", "methodName": "com.artemis.generator.validator.TypeModelValidator.validate", "methodParameterType": "TypeModel#", "methodParameterName": "model#", "methodBody": "public void validate(TypeModel model) {\n        String errors = \"\";\n        errors += validateFields(model.fields);\n        errors += validateMethods(model.methods);\n\n        if (!errors.isEmpty()) {\n            throw new TypeModelValidatorException(\"Ambiguous field(s) or method(s).\\n\" + errors);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Scans for ambiguous methods.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "719", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/supermapper/SuperMapperStrategy.java", "methodName": "com.artemis.generator.strategy.supermapper.SuperMapperStrategy.createEInstancingMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createEInstancingMethod() {\n        return new MethodBuilder(FluidTypes.E_TYPE, \"getE\")\n                .accessLevel(AccessLevel.UNSPECIFIED) // package local.\n                .parameter(int.class, \"entityId\")\n                .statement(\"E e = (E) es.safeGet(entityId)\")\n                .statement(\"if ( e == null ) { e = new E().init(this,entityId); es.set(entityId, e); }\")\n                .statement(\"return e\")\n                .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "SuperMapper::getE(entityId)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "720", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/components/ComponentsClassLibraryStrategy.java", "methodName": "com.artemis.generator.strategy.components.ComponentsClassLibraryStrategy.componentClassField", "methodParameterType": "ComponentDescriptor#", "methodParameterName": "component#", "methodBody": "private FieldDescriptor componentClassField(ComponentDescriptor component) {\n        return new FieldBuilder(new ParameterizedTypeImpl(Class.class, component.getComponentType()), component.getName())\n                .debugNotes(component.getComponentType().getName())\n                .setAccessLevel(AccessLevel.PUBLIC)\n                .setStatic(true)\n                .setFinal(true)\n                .initializer(component.getComponentType().getSimpleName() + \".class\")\n                .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "T componentName() -> create new entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "721", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/ComponentRemoveStrategy.java", "methodName": "com.artemis.generator.strategy.e.ComponentRemoveStrategy.removeComponentStrategy", "methodParameterType": "ComponentDescriptor#", "methodParameterName": "component#", "methodBody": "private MethodDescriptor removeComponentStrategy(ComponentDescriptor component) {\n        return\n                new MethodBuilder(FluidTypes.E_TYPE,\n                        Strings.assembleMethodName(component.getPreferences().getPrefixComponentRemove(),component.getName()))\n                        .debugNotes(component.getComponentType().getName())\n                        .mapper(component, \".remove(entityId)\")\n                        .returnFluid()\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "T componentName() -> create new entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "722", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/EBaseStrategy.java", "methodName": "com.artemis.generator.strategy.e.EBaseStrategy.createStaticInstancerMethodByInt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createStaticInstancerMethodByInt() {\n        return\n                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n                        .setStatic(true)\n                        .parameter(int.class, \"entityId\")\n                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                        .statement(\"return _processingMapper.getE(entityId)\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "static E::E(entityId)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "723", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/EBaseStrategy.java", "methodName": "com.artemis.generator.strategy.e.EBaseStrategy.createStaticInstancerMethodByEntity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createStaticInstancerMethodByEntity() {\n        return\n                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n                        .setStatic(true)\n                        .parameter(Entity.class, \"entity\")\n                        .statement(\"return E(entity.getId())\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "static E::E(entity)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "724", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/EBaseStrategy.java", "methodName": "com.artemis.generator.strategy.e.EBaseStrategy.createStaticInstancerMethodNewEntity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createStaticInstancerMethodNewEntity() {\n        return\n                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n                        .setStatic(true)\n                        .statement(\"return E(_processingMapper.getWorld().create())\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "static E::E() Create a new entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "725", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/EBaseStrategy.java", "methodName": "com.artemis.generator.strategy.e.EBaseStrategy.createEntityGetter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createEntityGetter() {\n        return\n                new MethodBuilder(Entity.class, \"entity\")\n                        .statement(\"return mappers.getWorld().getEntity(entityId)\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Getter Entity E::entity()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "726", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/EBaseStrategy.java", "methodName": "com.artemis.generator.strategy.e.EBaseStrategy.createEntityIdGetter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createEntityIdGetter() {\n        return\n                new MethodBuilder(int.class, \"id\")\n                        .statement(\"return entityId\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#PrimitiveType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Getter Entity E::id()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "727", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/ComponentGroupStrategy.java", "methodName": "com.artemis.generator.strategy.e.ComponentGroupStrategy.createStaticWithGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createStaticWithGroup() {\n        return\n                new MethodBuilder(FluidTypes.EBAG_TYPE, \"withGroup\")\n                        .setStatic(true)\n                        .parameter(String.class, \"groupName\")\n                        .javaDoc(\"Get entities in group..\\n@return {@code EBag} of entities in group. Returns empty bag if group contains no entities.\")\n                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                        .statement(\"return new EBag((com.artemis.utils.IntBag)_processingMapper.getWorld().getSystem(com.artemis.managers.GroupManager.class).getEntityIds(groupName))\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "static EBag E::withGroup(groupName)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "728", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/ComponentAccessorStrategy.java", "methodName": "com.artemis.generator.strategy.e.ComponentAccessorStrategy.createGetComponentMethod", "methodParameterType": "ComponentDescriptor#", "methodParameterName": "component#", "methodBody": "private MethodDescriptor createGetComponentMethod(ComponentDescriptor component) {\n        return\n                new MethodBuilder(component.getComponentType(), Strings.assembleMethodName(component.getPreferences().getPrefixComponentGetter(),component.getMethodPrefix()))\n                        .debugNotes(component.getComponentType().getName())\n                        .mapper(\"return \", component, \".get(entityId)\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "T _componentName() -> return instance of entity Component E::_componentName()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "729", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/DefaultFieldProxyStrategy.java", "methodName": "com.artemis.generator.strategy.e.DefaultFieldProxyStrategy.fieldGetterMethod", "methodParameterType": "ComponentDescriptor#Field#", "methodParameterName": "component#field#", "methodBody": "private MethodDescriptor fieldGetterMethod(ComponentDescriptor component, Field field) {\n        return new MethodBuilder(field.getGenericType(), component.getCompositeName(field.getName()))\n                .mapper(\"return \", component, \".create(entityId).\" + field.getName())\n                .debugNotes(field.toGenericString())\n                .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "int E::posX() -> obtain field directly via interface.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "730", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/DefaultFieldProxyStrategy.java", "methodName": "com.artemis.generator.strategy.e.DefaultFieldProxyStrategy.fieldSetterMethod", "methodParameterType": "ComponentDescriptor#Field#", "methodParameterName": "component#field#", "methodBody": "private MethodDescriptor fieldSetterMethod(ComponentDescriptor component, Field field) {\n        final String parameterName = field.getName();\n        return new MethodBuilder(FluidTypes.E_TYPE, component.getCompositeName(parameterName))\n                .parameter(field.getGenericType(), parameterName)\n                .mapper(component, \".create(this.entityId).\" + parameterName + \"=\" + parameterName)\n                .debugNotes(field.toGenericString())\n                .returnFluid()\n                .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "E E::posX(10) -> set field, returns fluid interface.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "731", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/FieldProxyStrategy.java", "methodName": "com.artemis.generator.strategy.e.FieldProxyStrategy.priority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int priority();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "priority of this strategy compared to others. Higher priority strategies will get first chance to match fields. Use  {@code 0} for default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "732", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/FieldProxyStrategy.java", "methodName": "com.artemis.generator.strategy.e.FieldProxyStrategy.matches", "methodParameterType": "ComponentDescriptor#Field#TypeModel#", "methodParameterName": "component#field#model#", "methodBody": "boolean matches(ComponentDescriptor component, Field field, TypeModel model);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param component Artemis component.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "733", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/FieldProxyStrategy.java", "methodName": "com.artemis.generator.strategy.e.FieldProxyStrategy.execute", "methodParameterType": "ComponentDescriptor#Field#TypeModel#", "methodParameterName": "component#field#model#", "methodBody": "void execute(ComponentDescriptor component, Field field, TypeModel model);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Apply changes to model. Will be called only once per field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "734", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/EQueryExtensionsStrategy.java", "methodName": "com.artemis.generator.strategy.e.EQueryExtensionsStrategy.createStaticWithAspect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createStaticWithAspect() {\n        return\n                new MethodBuilder(FluidTypes.EBAG_TYPE, \"withAspect\")\n                        .setStatic(true)\n                        .parameter(Aspect.Builder.class, \"aspect\")\n                        .javaDoc(\"Get all entities matching aspect.\\nFor performance reasons do not create the aspect every call.\\n@return {@code EBag} of entities matching aspect. Returns empty bag if no entities match aspect.\")\n                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                        .statement(\"return new EBag(_processingMapper.getWorld().getAspectSubscriptionManager().get(aspect).getEntities())\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#TypeLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "static EBag E::withAspect(aspect)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "735", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/EQueryExtensionsStrategy.java", "methodName": "com.artemis.generator.strategy.e.EQueryExtensionsStrategy.createStaticWithComponent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createStaticWithComponent() {\n        return\n                new MethodBuilder(FluidTypes.EBAG_TYPE, \"withComponent\")\n                        .setStatic(true)\n                        .parameter(new ParameterizedTypeImpl(Class.class, FluidTypes.EXTENDS_COMPONENT_TYPE), \"component\")\n                        .javaDoc(\"Get all entities with component.\\nThis is a relatively costly operation. For performance use withAspect instead.\\n@return {@code EBag} of entities matching aspect. Returns empty bag if no entities match aspect.\")\n                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                        .statement(\"return new EBag(_processingMapper.getWorld().getAspectSubscriptionManager().get(Aspect.all(component)).getEntities())\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "static EBag E::withComponent(component)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "736", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/ComponentCreateStrategy.java", "methodName": "com.artemis.generator.strategy.e.ComponentCreateStrategy.createComponentMethod", "methodParameterType": "ComponentDescriptor#", "methodParameterName": "component#", "methodBody": "private MethodDescriptor createComponentMethod(ComponentDescriptor component) {\n        return\n                new MethodBuilder(FluidTypes.E_TYPE,\n                        Strings.assembleMethodName(component.getPreferences().getPrefixComponentCreate(),component.getMethodPrefix()))\n                        .debugNotes(component.getComponentType().getName())\n                        .mapper(component, \".create(entityId)\")\n                        .returnFluid()\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "T componentName() -> create new component.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "737", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/FlagComponentBooleanAccessorStrategy.java", "methodName": "com.artemis.generator.strategy.e.FlagComponentBooleanAccessorStrategy.createCheckFlagComponentExistenceMethod", "methodParameterType": "ComponentDescriptor#", "methodParameterName": "component#", "methodBody": "private MethodDescriptor createCheckFlagComponentExistenceMethod(ComponentDescriptor component) {\n        return\n                new MethodBuilder(boolean.class, \"is\" + component.getName())\n                        .debugNotes(\"flag component(=field/method-less) \" + component.getComponentType().getName())\n                        .mapper(\"return \", component, \".has(entityId)\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#TypeLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "T componentName() -> create new entity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "738", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/ComponentExistStrategy.java", "methodName": "com.artemis.generator.strategy.e.ComponentExistStrategy.createHasComponentMethod", "methodParameterType": "ComponentDescriptor#", "methodParameterName": "component#", "methodBody": "private MethodDescriptor createHasComponentMethod(ComponentDescriptor component) {\n        return\n                new MethodBuilder(boolean.class,\n\n                        Strings.assembleMethodName(component.getPreferences().getPrefixComponentHas(),component.getName()))\n                        .debugNotes(component.getComponentType().getName())\n                        .mapper(\"return \", component, \".has(entityId)\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#TypeLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "boolean E::hasComponent()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "739", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/generator/strategy/e/ComponentTagStrategy.java", "methodName": "com.artemis.generator.strategy.e.ComponentTagStrategy.createStaticWithTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private MethodDescriptor createStaticWithTag() {\n        return\n                new MethodBuilder(FluidTypes.E_TYPE, \"withTag\")\n                        .setStatic(true)\n                        .parameter(String.class, \"tag\")\n                        .javaDoc(\"Get entity by tag.\\n@return {@code E}, or {@code null} if no such tag.\")\n                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                        .statement(\"int id=_processingMapper.getWorld().getSystem(com.artemis.managers.TagManager.class).getEntityId(tag)\")\n                        .statement(\"return id != -1 ? E(id) : null\")\n                        .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "static EBag E::withGroup(groupName)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "740", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/FluidGeneratorPreferences.java", "methodName": "com.artemis.FluidGeneratorPreferences.getPrefixComponentGetter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPrefixComponentGetter() {\n        return prefixComponentGetter;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get prefix for component getters. Default \"get\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "741", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/FluidGeneratorPreferences.java", "methodName": "com.artemis.FluidGeneratorPreferences.setPrefixComponentGetter", "methodParameterType": "String#", "methodParameterName": "prefixComponentGetter#", "methodBody": "public void setPrefixComponentGetter(String prefixComponentGetter) {\n        this.prefixComponentGetter = prefixComponentGetter;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set prefix for component setters. Default \"get\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "742", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/FluidGeneratorPreferences.java", "methodName": "com.artemis.FluidGeneratorPreferences.mirror", "methodParameterType": "FluidGeneratorPreferences#", "methodParameterName": "source#", "methodBody": "public void mirror(FluidGeneratorPreferences source) {\n        this.swallowGettersWithParameters = source.swallowGettersWithParameters;\n\n        this.prefixComponentGetter = source.prefixComponentGetter;\n        this.prefixComponentCreate = source.prefixComponentCreate;\n        this.prefixComponentHas = source.prefixComponentHas;\n        this.prefixComponentRemove = source.prefixComponentRemove;\n\n        this.generateTagMethods = source.generateTagMethods;\n        this.generateGroupMethods = source.generateGroupMethods;\n        this.generateBooleanComponentAccessors = source.generateBooleanComponentAccessors;\n        this.excludeFromClasspath = new ArrayList<String>(source.excludeFromClasspath);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Copy settings from source to this.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "743", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/FluidGenerator.java", "methodName": "com.artemis.FluidGenerator.generate", "methodParameterType": "Set<URL>#File#Log#FluidGeneratorPreferences#", "methodParameterName": "urls#outputDirectory#log#globalPreferences#", "methodBody": "public void generate(Set<URL> urls, File outputDirectory, Log log, FluidGeneratorPreferences globalPreferences) {\n        final AbstractClassCollectStrategy collectStrategy = collectStrategy(urls);\n        generate(collectStrategy.allComponents(), collectStrategy.allFieldProxyStrategies(), outputDirectory, log, globalPreferences);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generate fluid API files. Finds all Component instances at given urls using reflection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "744", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/FluidGenerator.java", "methodName": "com.artemis.FluidGenerator.generate", "methodParameterType": "Collection<Class<? extends Component>>#Collection<Class<? extends FieldProxyStrategy>>#File#Log#FluidGeneratorPreferences#", "methodParameterName": "components#fieldProxyStrategies#outputDirectory#log#globalPreferences#", "methodBody": "public void generate(Collection<Class<? extends Component>> components, Collection<Class<? extends FieldProxyStrategy>> fieldProxyStrategies, File outputDirectory, Log log, FluidGeneratorPreferences globalPreferences) {\n\n        if (fieldProxyStrategies == null || fieldProxyStrategies.isEmpty()) {\n            log.error(\"Fluid API: No field proxy strategies found on class path, unable to add components fields to fluid interface!\");\n            log.error(\"Fluid API: Make sure net.onedaybeard.artemis:artemis-fluid-core is on your compile classpath for the plugin to find.\");\n            throw new RuntimeException(\"Field proxy strategy required but none found on (compile time) class path!\");\n        }\n\n        if (components == null || components.isEmpty()) {\n            log.error(\"Fluid API generation aborted, no components found on class path!\");\n            throw new RuntimeException(\"No components found on class path! Make sure your component classes are available.\");\n        }\n\n        final ArtemisModel artemisModel = createArtemisModel(filterComponents(components, log), fieldProxyStrategies, globalPreferences, log);\n\n        File outputArtemisModuleDirectory = new File(outputDirectory, COM_ARTEMIS_MODULE_DIR);\n        outputArtemisModuleDirectory.mkdirs();\n\n        generateFile(artemisModel, createSupermapperGenerator(globalPreferences), new File(outputArtemisModuleDirectory, \"SuperMapper.java\"), log);\n        generateFile(artemisModel, createFluidInterfaceGenerator(globalPreferences), new File(outputArtemisModuleDirectory, \"E.java\"), log);\n        generateFile(artemisModel, createComponentsGenerator(globalPreferences), new File(outputArtemisModuleDirectory, \"C.java\"), log);\n\n        // deploy static utility classes that depend on E and/or SuperMapper. Do a clean when changing files!\n        copyResourceIfMissing(getClass().getResource(FLUID_UTILITY_SOURCES_DIR + \"/FluidEntityPlugin.java\"), new File(outputArtemisModuleDirectory, \"FluidEntityPlugin.java\"));\n        copyResourceIfMissing(getClass().getResource(FLUID_UTILITY_SOURCES_DIR + \"/EBag.java\"), new File(outputArtemisModuleDirectory, \"EBag.java\"));\n        copyResourceIfMissing(getClass().getResource(FLUID_UTILITY_SOURCES_DIR + \"/ESubscription.java\"), new File(outputArtemisModuleDirectory, \"ESubscription.java\"));\n        copyResourceIfMissing(getClass().getResource(FLUID_UTILITY_SOURCES_DIR + \"/FluidIteratingSystem.java\"), new File(outputArtemisModuleDirectory, \"FluidIteratingSystem.java\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generate fluid API files.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "745", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/src/main/java/com/artemis/FluidGenerator.java", "methodName": "com.artemis.FluidGenerator.generateFile", "methodParameterType": "ArtemisModel#TypeModelGenerator#File#Log#", "methodParameterName": "artemisModel#generator#file#log#", "methodBody": "private void generateFile(ArtemisModel artemisModel, TypeModelGenerator generator, File file, Log log) {\n        try {\n            FileWriter fileWriter = new FileWriter(file);\n            try {\n                TypeModel typeModel = createExampleTypeModel(generator, artemisModel);\n                new TypeModelValidator(log, file.getName()).validate(typeModel);\n                new PoetSourceGenerator().generate(typeModel, fileWriter);\n            } finally {\n                fileWriter.close();\n            }\n\n        } catch (TypeModelValidatorException e) {\n            throw new RuntimeException(\"Fluid API generation aborted, duplicate components, component field or component method names might be to blame.\\n\", e);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@param artemisModel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "746", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/target/classes/fluid-utility-sources/ESubscription.java", "methodName": "com.artemis.ESubscription.ESubscription", "methodParameterType": "EntitySubscription#", "methodParameterName": "wrappedSubscription#", "methodBody": "public ESubscription(EntitySubscription wrappedSubscription) {\n        this.wrappedSubscription = wrappedSubscription;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new instance of ESubscription.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "747", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/target/classes/fluid-utility-sources/ESubscription.java", "methodName": "com.artemis.ESubscription.iterator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Iterator<E> iterator() {\n        return get().iterator();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Iterator over entities matching the wrapped subscription. Not a flyweight!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "748", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/target/classes/fluid-utility-sources/ESubscription.java", "methodName": "com.artemis.ESubscription.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EBag get() {\n        return new EBag(wrappedSubscription.getEntities());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return EBag of entities in subscription. Not a flyweight!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "749", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-core/target/classes/fluid-utility-sources/ESubscription.java", "methodName": "com.artemis.ESubscription.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int size() {\n        return wrappedSubscription.getEntities().size();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return number of items in the subscription.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "750", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-gradle-plugin/src/main/java/net/onedaybeard/gradle/FluidApiGenerationTask.java", "methodName": "net.onedaybeard.gradle.FluidApiGenerationTask.createLogAdapter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private com.artemis.generator.util.Log createLogAdapter() {\n        return new com.artemis.generator.util.Log() {\n            @Override\n            public void info(String msg) {\n                getLogger().info(msg);\n            }\n\n            @Override\n            public void error(String msg) {\n                getLogger().error(msg);\n            }\n        };\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "bridge maven/internal logging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "751", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-gradle-plugin/src/main/java/net/onedaybeard/gradle/FluidApiGenerationTask.java", "methodName": "net.onedaybeard.gradle.FluidApiGenerationTask.prepareGeneratedSourcesFolder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void prepareGeneratedSourcesFolder() {\n        if (!generatedSourcesDirectory.exists() && !generatedSourcesDirectory.mkdirs()) {\n            getLogger().error(\"Could not create \" + generatedSourcesDirectory);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Setup generated sources folder if missing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "752", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-gradle-plugin/src/main/java/net/onedaybeard/gradle/FluidApiGenerationTask.java", "methodName": "net.onedaybeard.gradle.FluidApiGenerationTask.includeGeneratedSourcesInCompilation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void includeGeneratedSourcesInCompilation() {\n//\t\tgetProject().addCompileSourceRoot(generatedSourcesDirectory().getPath());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Must include manually, or maven buids will fail.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "753", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-components/src/main/java/com/artemis/fieldstrategies/ExperimentFieldProxyStrategy.java", "methodName": "com.artemis.fieldstrategies.ExperimentFieldProxyStrategy.fieldGetterMethod", "methodParameterType": "ComponentDescriptor#Field#", "methodParameterName": "component#field#", "methodBody": "private MethodDescriptor fieldGetterMethod(ComponentDescriptor component, Field field) {\n        return new MethodBuilder(field.getGenericType(), \"proxyStrategyWorked\")\n                .mapper(\"return \", component, \".create(entityId).\" + field.getName())\n                .build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#ClassInstanceCreation#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Experiment E::proxyStrategyWorked()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "754", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/E.java", "methodName": "com.artemis.E.withAspect", "methodParameterType": "Aspect.Builder#", "methodParameterName": "aspect#", "methodBody": "public static EBag withAspect(Aspect.Builder aspect) {\n    if(_processingMapper==null) throw new RuntimeException(\"SuperMapper system must be registered before any systems using E().\");;\n    return new EBag(_processingMapper.getWorld().getAspectSubscriptionManager().get(aspect).getEntities());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#EmptyStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(EmptyStatement)EmptyStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all entities matching aspect. For performance reasons do not create the aspect every call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "755", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/E.java", "methodName": "com.artemis.E.withComponent", "methodParameterType": "Class<? extends Component>#", "methodParameterName": "component#", "methodBody": "public static EBag withComponent(Class<? extends Component> component) {\n    if(_processingMapper==null) throw new RuntimeException(\"SuperMapper system must be registered before any systems using E().\");;\n    return new EBag(_processingMapper.getWorld().getAspectSubscriptionManager().get(Aspect.all(component)).getEntities());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#EmptyStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(EmptyStatement)EmptyStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all entities with component. This is a relatively costly operation. For performance use withAspect instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "756", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/E.java", "methodName": "com.artemis.E.withTag", "methodParameterType": "String#", "methodParameterName": "tag#", "methodBody": "public static E withTag(String tag) {\n    if(_processingMapper==null) throw new RuntimeException(\"SuperMapper system must be registered before any systems using E().\");;\n    int id=_processingMapper.getWorld().getSystem(com.artemis.managers.TagManager.class).getEntityId(tag);\n    return id != -1 ? E(id) : null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#EmptyStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(EmptyStatement)EmptyStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get entity by tag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "757", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/E.java", "methodName": "com.artemis.E.withGroup", "methodParameterType": "String#", "methodParameterName": "groupName#", "methodBody": "public static EBag withGroup(String groupName) {\n    if(_processingMapper==null) throw new RuntimeException(\"SuperMapper system must be registered before any systems using E().\");;\n    return new EBag((com.artemis.utils.IntBag)_processingMapper.getWorld().getSystem(com.artemis.managers.GroupManager.class).getEntityIds(groupName));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#EmptyStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(EmptyStatement)EmptyStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(CastExpression(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get entities in group..", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "758", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/ESubscription.java", "methodName": "com.artemis.ESubscription.ESubscription", "methodParameterType": "EntitySubscription#", "methodParameterName": "wrappedSubscription#", "methodBody": "public ESubscription(EntitySubscription wrappedSubscription) {\n        this.wrappedSubscription = wrappedSubscription;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new instance of ESubscription.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "759", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/ESubscription.java", "methodName": "com.artemis.ESubscription.iterator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Iterator<E> iterator() {\n        return get().iterator();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Iterator over entities matching the wrapped subscription. Not a flyweight!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "760", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/ESubscription.java", "methodName": "com.artemis.ESubscription.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EBag get() {\n        return new EBag(wrappedSubscription.getEntities());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return EBag of entities in subscription. Not a flyweight!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "761", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-integration-test/artemis-fluid-maven-integration-test-systems/target/generated-sources/fluid/com/artemis/ESubscription.java", "methodName": "com.artemis.ESubscription.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int size() {\n        return wrappedSubscription.getEntities().size();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return number of items in the subscription.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "762", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/src/main/java/com/artemis/ArtemisFluidMaven.java", "methodName": "com.artemis.ArtemisFluidMaven.createLogAdapter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private com.artemis.generator.util.Log createLogAdapter() {\n        return new com.artemis.generator.util.Log() {\n            @Override\n            public void info(String msg) {\n                log.info(msg);\n            }\n\n            @Override\n            public void error(String msg) {\n                log.error(msg);\n            }\n        };\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "bridge maven/internal logging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "763", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/src/main/java/com/artemis/ArtemisFluidMaven.java", "methodName": "com.artemis.ArtemisFluidMaven.prepareGeneratedSourcesFolder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void prepareGeneratedSourcesFolder() {\n        if (!generatedSourcesDirectory().exists() && !generatedSourcesDirectory().mkdirs()) {\n            log.error(\"Could not create \" + generatedSourcesDirectory());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Setup generated sources folder if missing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "764", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/src/main/java/com/artemis/ArtemisFluidMaven.java", "methodName": "com.artemis.ArtemisFluidMaven.includeGeneratedSourcesInCompilation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void includeGeneratedSourcesInCompilation() {\n        this.project.addCompileSourceRoot(generatedSourcesDirectory().getPath());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Must include manually, or maven buids will fail.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "765", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.execute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void execute()\n        throws MojoExecutionException\n    {\n        if ( lineLength <= 0 )\n        {\n            getLog().warn( \"The parameter 'lineLength' should be positive, using '80' as default.\" );\n            lineLength = DEFAULT_LINE_LENGTH;\n        }\n        if ( indentSize <= 0 )\n        {\n            getLog().warn( \"The parameter 'indentSize' should be positive, using '2' as default.\" );\n            indentSize = 2;\n        }\n\n        Document doc = build();\n\n        StringBuilder sb = new StringBuilder();\n        Node plugin = getSingleChild( doc, \"plugin\" );\n\n\n        String name = getValue( plugin, \"name\" );\n        String version = getValue( plugin, \"version\" );\n        String id = getValue( plugin, \"groupId\" ) + \":\" + getValue( plugin, \"artifactId\" ) + \":\" + version;\n        if ( isNotEmpty( name ) && !name.contains( id ) )\n        {\n            append( sb, name + \" \" + version, 0 );\n        }\n        else\n        {\n            if ( isNotEmpty( name ) )\n            {\n                append( sb, name, 0 );\n            }\n            else\n            {\n                append( sb, id, 0 );\n            }\n        }\n        append( sb, getValue( plugin, \"description\" ), 1 );\n        append( sb, \"\", 0 );\n\n        //<goalPrefix>plugin</goalPrefix>\n        String goalPrefix = getValue( plugin, \"goalPrefix\" );\n\n        Node mojos1 = getSingleChild( plugin, \"mojos\" );\n\n        List<Node> mojos = findNamedChild( mojos1, \"mojo\" );\n\n        if ( goal == null || goal.length() <= 0 )\n        {\n            append( sb, \"This plugin has \" + mojos.size() + ( mojos.size() > 1 ? \" goals:\" : \" goal:\" ), 0 );\n            append( sb, \"\", 0 );\n        }\n\n        for ( Node mojo : mojos )\n        {\n            writeGoal( sb, goalPrefix, (Element) mojo );\n        }\n\n        if ( getLog().isInfoEnabled() )\n        {\n            getLog().info( sb.toString() );\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "766", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.repeat", "methodParameterType": "String#int#", "methodParameterName": "str#repeat#", "methodBody": "private static String repeat( String str, int repeat )\n    {\n        StringBuilder buffer = new StringBuilder( repeat * str.length() );\n\n        for ( int i = 0; i < repeat; i++ )\n        {\n            buffer.append( str );\n        }\n\n        return buffer.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Repeat a String <code>n</code> times to form a new string.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "767", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.append", "methodParameterType": "StringBuilder#String#int#", "methodParameterName": "sb#description#indent#", "methodBody": "private void append( StringBuilder sb, String description, int indent )\n    {\n        for ( String line : toLines( description, indent, indentSize, lineLength ) )\n        {\n            sb.append( line ).append( '\\n' );\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Append a description to the buffer by respecting the indentSize and lineLength parameters. <b>Note</b>: The last character is always a new line.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "768", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.toLines", "methodParameterType": "String#int#int#int#", "methodParameterName": "text#indent#indentSize#lineLength#", "methodBody": "private static List<String> toLines( String text, int indent, int indentSize, int lineLength )\n    {\n        List<String> lines = new ArrayList<String>();\n\n        String ind = repeat( \"\\t\", indent );\n\n        String[] plainLines = text.split( \"(\\r\\n)|(\\r)|(\\n)\" );\n\n        for ( String plainLine : plainLines )\n        {\n            toLines( lines, ind + plainLine, indentSize, lineLength );\n        }\n\n        return lines;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Splits the specified text into lines of convenient display length.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "769", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.toLines", "methodParameterType": "List<String>#String#int#int#", "methodParameterName": "lines#line#indentSize#lineLength#", "methodBody": "private static void toLines( List<String> lines, String line, int indentSize, int lineLength )\n    {\n        int lineIndent = getIndentLevel( line );\n        StringBuilder buf = new StringBuilder( 256 );\n\n        String[] tokens = line.split( \" +\" );\n\n        for ( String token : tokens )\n        {\n            if ( buf.length() > 0 )\n            {\n                if ( buf.length() + token.length() >= lineLength )\n                {\n                    lines.add( buf.toString() );\n                    buf.setLength( 0 );\n                    buf.append( repeat( \" \", lineIndent * indentSize ) );\n                }\n                else\n                {\n                    buf.append( ' ' );\n                }\n            }\n\n            for ( int j = 0; j < token.length(); j++ )\n            {\n                char c = token.charAt( j );\n                if ( c == '\\t' )\n                {\n                    buf.append( repeat( \" \", indentSize - buf.length() % indentSize ) );\n                }\n                else if ( c == '\\u00A0' )\n                {\n                    buf.append( ' ' );\n                }\n                else\n                {\n                    buf.append( c );\n                }\n            }\n        }\n        lines.add( buf.toString() );\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified line to the output sequence, performing line wrapping if necessary.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "770", "file": "/root/repos/repos18/artemis-odb/artemis-fluid/artemis-fluid-maven-plugin/target/generated-sources/plugin/com/artemis/HelpMojo.java", "methodName": "com.artemis.HelpMojo.getIndentLevel", "methodParameterType": "String#", "methodParameterName": "line#", "methodBody": "private static int getIndentLevel( String line )\n    {\n        int level = 0;\n        for ( int i = 0; i < line.length() && line.charAt( i ) == '\\t'; i++ )\n        {\n            level++;\n        }\n        for ( int i = level + 1; i <= level + 4 && i < line.length(); i++ )\n        {\n            if ( line.charAt( i ) == '\\t' )\n            {\n                level++;\n                break;\n            }\n        }\n        return level;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#PostfixExpression#ExpressionStatement#Block#ForStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the indentation level of the specified line.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]