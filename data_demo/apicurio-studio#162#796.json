[{"index": "0", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.core.metrics.PrometheusApiMetrics.socketConnected", "methodParameterType": "String#String#", "methodParameterName": "designId#user#", "methodBody": "@Override\n    public void socketConnected(String designId, String user) {\n        sockets.labels(designId, user).inc();\n        \n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see IEditingMetrics#socketConnected(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.core.metrics.PrometheusApiMetrics.editingSessionCreated", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public void editingSessionCreated(String designId) {\n        sessions.labels(designId).inc();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see IEditingMetrics#editingSessionCreated(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.core.metrics.PrometheusApiMetrics.contentCommand", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public void contentCommand(String designId) {\n        commands.labels(designId).inc();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see IEditingMetrics#contentCommand(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.core.metrics.PrometheusApiMetrics.getCurrentMetricsInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getCurrentMetricsInfo() throws IOException {\n        StringWriter writer = new StringWriter();\n        TextFormat.write004(writer, CollectorRegistry.defaultRegistry.metricFamilySamples());\n\n        String content = writer.getBuffer().toString();\n        return content;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see IEditingMetrics#getCurrentMetricsInfo()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.core.metrics.PrometheusApiMetrics.batchCommand", "methodParameterType": "String#int#", "methodParameterName": "designId#count#", "methodBody": "@Override\n    public void batchCommand(String designId, int count) {\n        commands.labels(designId).inc(count);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingMetrics#batchCommand(java.lang.String,int)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.core.metrics.PrometheusApiMetrics.undoCommand", "methodParameterType": "String#long#", "methodParameterName": "designId#contentVersion#", "methodBody": "@Override\n    public void undoCommand(String designId, long contentVersion) {\n        // Nothing yet.\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "@see IEditingMetrics#undoCommand(java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.core.metrics.PrometheusApiMetrics.redoCommand", "methodParameterType": "String#long#", "methodParameterName": "designId#contentVersion#", "methodBody": "@Override\n    public void redoCommand(String designId, long contentVersion) {\n        // Nothing yet\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "@see IEditingMetrics#redoCommand(java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.CodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenProject() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setId", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "public void setId(String id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getCreatedOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getCreatedOn() {\n        return createdOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the createdOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setCreatedOn", "methodParameterType": "Date#", "methodParameterName": "createdOn#", "methodBody": "public void setCreatedOn(Date createdOn) {\n        this.createdOn = createdOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param createdOn the createdOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getCreatedBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCreatedBy() {\n        return createdBy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the createdBy", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setCreatedBy", "methodParameterType": "String#", "methodParameterName": "createdBy#", "methodBody": "public void setCreatedBy(String createdBy) {\n        this.createdBy = createdBy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param createdBy the createdBy to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getModifiedOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getModifiedOn() {\n        return modifiedOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the modifiedOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setModifiedOn", "methodParameterType": "Date#", "methodParameterName": "modifiedOn#", "methodBody": "public void setModifiedOn(Date modifiedOn) {\n        this.modifiedOn = modifiedOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param modifiedOn the modifiedOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getModifiedBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getModifiedBy() {\n        return modifiedBy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the modifiedBy", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setModifiedBy", "methodParameterType": "String#", "methodParameterName": "modifiedBy#", "methodBody": "public void setModifiedBy(String modifiedBy) {\n        this.modifiedBy = modifiedBy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param modifiedBy the modifiedBy to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getDesignId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDesignId() {\n        return designId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the designId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setDesignId", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public void setDesignId(String designId) {\n        this.designId = designId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param designId the designId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenProjectType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setType", "methodParameterType": "CodegenProjectType#", "methodParameterName": "type#", "methodBody": "public void setType(CodegenProjectType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.getAttributes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getAttributes() {\n        return attributes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the attributes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CodegenProject.java", "methodName": "io.apicurio.hub.core.beans.CodegenProject.setAttributes", "methodParameterType": "Map<String,String>#", "methodParameterName": "attributes#", "methodBody": "public void setAttributes(Map<String, String> attributes) {\n        this.attributes = attributes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param attributes the attributes to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.ValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ValidationProfile() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.setId", "methodParameterType": "long#", "methodParameterName": "id#", "methodBody": "public void setId(long id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.getSeverities", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ValidationSeverity> getSeverities() {\n        return severities;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the severities", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.ValidationProfile.setSeverities", "methodParameterType": "Map<String,ValidationSeverity>#", "methodParameterName": "severities#", "methodBody": "public void setSeverities(Map<String, ValidationSeverity> severities) {\n        this.severities = severities;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param severities the severities to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/MockReference.java", "methodName": "io.apicurio.hub.core.beans.MockReference.MockReference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MockReference() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/MockReference.java", "methodName": "io.apicurio.hub.core.beans.MockReference.getMockType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMockType() {\n        return mockType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the mockType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/MockReference.java", "methodName": "io.apicurio.hub.core.beans.MockReference.setMockType", "methodParameterType": "String#", "methodParameterName": "mockType#", "methodBody": "public void setMockType(String mockType) {\n        this.mockType = mockType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param mockType the mockType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/MockReference.java", "methodName": "io.apicurio.hub.core.beans.MockReference.getServiceRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getServiceRef() {\n        return serviceRef;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the serviceRef", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/MockReference.java", "methodName": "io.apicurio.hub.core.beans.MockReference.setServiceRef", "methodParameterType": "String#", "methodParameterName": "serviceRef#", "methodBody": "public void setServiceRef(String serviceRef) {\n        this.serviceRef = serviceRef;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param serviceRef the serviceRef to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/MockReference.java", "methodName": "io.apicurio.hub.core.beans.MockReference.getMockURL", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMockURL() {\n        return mockURL;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the mockURL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/MockReference.java", "methodName": "io.apicurio.hub.core.beans.MockReference.setMockURL", "methodParameterType": "String#", "methodParameterName": "mockURL#", "methodBody": "public void setMockURL(String mockURL) {\n        this.mockURL = mockURL;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param mockURL the mockURL to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Contributor.java", "methodName": "io.apicurio.hub.core.beans.Contributor.Contributor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Contributor() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Contributor.java", "methodName": "io.apicurio.hub.core.beans.Contributor.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Contributor.java", "methodName": "io.apicurio.hub.core.beans.Contributor.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Contributor.java", "methodName": "io.apicurio.hub.core.beans.Contributor.getEdits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getEdits() {\n        return edits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the commits", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Contributor.java", "methodName": "io.apicurio.hub.core.beans.Contributor.setEdits", "methodParameterType": "int#", "methodParameterName": "commits#", "methodBody": "public void setEdits(int commits) {\n        this.edits = commits;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param commits the commits to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CreateValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.CreateValidationProfile.CreateValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CreateValidationProfile() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CreateValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.CreateValidationProfile.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CreateValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.CreateValidationProfile.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CreateValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.CreateValidationProfile.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CreateValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.CreateValidationProfile.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CreateValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.CreateValidationProfile.getSeverities", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ValidationSeverity> getSeverities() {\n        return severities;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the severities", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/CreateValidationProfile.java", "methodName": "io.apicurio.hub.core.beans.CreateValidationProfile.setSeverities", "methodParameterType": "Map<String,ValidationSeverity>#", "methodParameterName": "severities#", "methodBody": "public void setSeverities(Map<String, ValidationSeverity> severities) {\n        this.severities = severities;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param severities the severities to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.ApiDesignResourceInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignResourceInfo() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getTags", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getTags() {\n        return tags;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tags", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setTags", "methodParameterType": "Set<String>#", "methodParameterName": "tags#", "methodBody": "public void setTags(Set<String> tags) {\n        this.tags = tags;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tags the tags to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FormatType getFormat() {\n        return format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setFormat", "methodParameterType": "FormatType#", "methodParameterName": "format#", "methodBody": "public void setFormat(FormatType format) {\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param format the format to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignResourceInfo.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setType", "methodParameterType": "ApiDesignType#", "methodParameterName": "type#", "methodBody": "public void setType(ApiDesignType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignContent.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignContent.ApiDesignContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignContent() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignContent.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignContent.getDocument", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDocument() {\n        return document;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the oaiDocument", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignContent.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignContent.setDocument", "methodParameterType": "String#", "methodParameterName": "oaiDocument#", "methodBody": "public void setDocument(String oaiDocument) {\n        this.document = oaiDocument;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param oaiDocument the oaiDocument to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignContent.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignContent.getContentVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getContentVersion() {\n        return contentVersion;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the contentVersion", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignContent.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignContent.setContentVersion", "methodParameterType": "long#", "methodParameterName": "contentVersion#", "methodBody": "public void setContentVersion(long contentVersion) {\n        this.contentVersion = contentVersion;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param contentVersion the contentVersion to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.SharingConfiguration.SharingConfiguration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SharingConfiguration() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.SharingConfiguration.getLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SharingLevel getLevel() {\n        return level;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the level", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.SharingConfiguration.setLevel", "methodParameterType": "SharingLevel#", "methodParameterName": "level#", "methodBody": "public void setLevel(SharingLevel level) {\n        this.level = level;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param level the level to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.SharingConfiguration.getUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUuid() {\n        return uuid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the uuid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.SharingConfiguration.setUuid", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "public void setUuid(String uuid) {\n        this.uuid = uuid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param uuid the uuid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.ApiDesignChange", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignChange() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.getVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getVersion() {\n        return version;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the version", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.setVersion", "methodParameterType": "long#", "methodParameterName": "version#", "methodBody": "public void setVersion(long version) {\n        this.version = version;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param version the version to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiContentType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.setType", "methodParameterType": "ApiContentType#", "methodParameterName": "type#", "methodBody": "public void setType(ApiContentType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getData() {\n        return data;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.setData", "methodParameterType": "String#", "methodParameterName": "data#", "methodBody": "public void setData(String data) {\n        this.data = data;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param data the data to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.getBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBy() {\n        return by;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the by", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.setBy", "methodParameterType": "String#", "methodParameterName": "by#", "methodBody": "public void setBy(String by) {\n        this.by = by;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param by the by to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.getOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getOn() {\n        return on;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the on", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignChange.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignChange.setOn", "methodParameterType": "Date#", "methodParameterName": "on#", "methodBody": "public void setOn(Date on) {\n        this.on = on;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param on the on to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCollaborator.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCollaborator.ApiDesignCollaborator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignCollaborator() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCollaborator.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCollaborator.getUserId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUserId() {\n        return userId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCollaborator.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCollaborator.setUserId", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public void setUserId(String userId) {\n        this.userId = userId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userId the userId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCollaborator.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCollaborator.getUserName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUserName() {\n        return userName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCollaborator.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCollaborator.setUserName", "methodParameterType": "String#", "methodParameterName": "userName#", "methodBody": "public void setUserName(String userName) {\n        this.userName = userName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userName the userName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCollaborator.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCollaborator.getRole", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRole() {\n        return role;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the role", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCollaborator.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCollaborator.setRole", "methodParameterType": "String#", "methodParameterName": "role#", "methodBody": "public void setRole(String role) {\n        this.role = role;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param role the role to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/UpdateSharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.UpdateSharingConfiguration.UpdateSharingConfiguration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UpdateSharingConfiguration() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/UpdateSharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.UpdateSharingConfiguration.getLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SharingLevel getLevel() {\n        return level;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the level", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/UpdateSharingConfiguration.java", "methodName": "io.apicurio.hub.core.beans.UpdateSharingConfiguration.setLevel", "methodParameterType": "SharingLevel#", "methodParameterName": "level#", "methodBody": "public void setLevel(SharingLevel level) {\n        this.level = level;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param level the level to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.Invitation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Invitation() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getInviteId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInviteId() {\n        return inviteId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the inviteId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setInviteId", "methodParameterType": "String#", "methodParameterName": "inviteId#", "methodBody": "public void setInviteId(String inviteId) {\n        this.inviteId = inviteId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param inviteId the inviteId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getDesignId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDesignId() {\n        return designId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the designId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setDesignId", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public void setDesignId(String designId) {\n        this.designId = designId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param designId the designId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getCreatedBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCreatedBy() {\n        return createdBy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the createdBy", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setCreatedBy", "methodParameterType": "String#", "methodParameterName": "createdBy#", "methodBody": "public void setCreatedBy(String createdBy) {\n        this.createdBy = createdBy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param createdBy the createdBy to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getCreatedOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getCreatedOn() {\n        return createdOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the createdOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setCreatedOn", "methodParameterType": "Date#", "methodParameterName": "createdOn#", "methodBody": "public void setCreatedOn(Date createdOn) {\n        this.createdOn = createdOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param createdOn the createdOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus() {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the status", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status) {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param status the status to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getModifiedBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getModifiedBy() {\n        return modifiedBy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the modifiedBy", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setModifiedBy", "methodParameterType": "String#", "methodParameterName": "modifiedBy#", "methodBody": "public void setModifiedBy(String modifiedBy) {\n        this.modifiedBy = modifiedBy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param modifiedBy the modifiedBy to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getModifiedOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getModifiedOn() {\n        return modifiedOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the modifiedOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setModifiedOn", "methodParameterType": "Date#", "methodParameterName": "modifiedOn#", "methodBody": "public void setModifiedOn(Date modifiedOn) {\n        this.modifiedOn = modifiedOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param modifiedOn the modifiedOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getRole", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRole() {\n        return role;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the role", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setRole", "methodParameterType": "String#", "methodParameterName": "role#", "methodBody": "public void setRole(String role) {\n        this.role = role;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param role the role to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.getSubject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSubject() {\n        return subject;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the subject", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/Invitation.java", "methodName": "io.apicurio.hub.core.beans.Invitation.setSubject", "methodParameterType": "String#", "methodParameterName": "subject#", "methodBody": "public void setSubject(String subject) {\n        this.subject = subject;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param subject the subject to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiMock.java", "methodName": "io.apicurio.hub.core.beans.ApiMock.ApiMock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiMock() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiMock.java", "methodName": "io.apicurio.hub.core.beans.ApiMock.getBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBy() {\n        return by;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the by", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiMock.java", "methodName": "io.apicurio.hub.core.beans.ApiMock.setBy", "methodParameterType": "String#", "methodParameterName": "by#", "methodBody": "public void setBy(String by) {\n        this.by = by;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param by the by to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiMock.java", "methodName": "io.apicurio.hub.core.beans.ApiMock.getOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getOn() {\n        return on;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the on", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiMock.java", "methodName": "io.apicurio.hub.core.beans.ApiMock.setOn", "methodParameterType": "Date#", "methodParameterName": "on#", "methodBody": "public void setOn(Date on) {\n        this.on = on;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param on the on to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiMock.java", "methodName": "io.apicurio.hub.core.beans.ApiMock.getInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInfo() {\n        return info;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the info", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiMock.java", "methodName": "io.apicurio.hub.core.beans.ApiMock.setInfo", "methodParameterType": "String#", "methodParameterName": "info#", "methodBody": "public void setInfo(String info) {\n        this.info = info;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param info the info to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiPublication.java", "methodName": "io.apicurio.hub.core.beans.ApiPublication.ApiPublication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiPublication() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiPublication.java", "methodName": "io.apicurio.hub.core.beans.ApiPublication.getBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBy() {\n        return by;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the by", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiPublication.java", "methodName": "io.apicurio.hub.core.beans.ApiPublication.setBy", "methodParameterType": "String#", "methodParameterName": "by#", "methodBody": "public void setBy(String by) {\n        this.by = by;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param by the by to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiPublication.java", "methodName": "io.apicurio.hub.core.beans.ApiPublication.getOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getOn() {\n        return on;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the on", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiPublication.java", "methodName": "io.apicurio.hub.core.beans.ApiPublication.setOn", "methodParameterType": "Date#", "methodParameterName": "on#", "methodBody": "public void setOn(Date on) {\n        this.on = on;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param on the on to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiPublication.java", "methodName": "io.apicurio.hub.core.beans.ApiPublication.getInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getInfo() {\n        return info;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the info", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiPublication.java", "methodName": "io.apicurio.hub.core.beans.ApiPublication.setInfo", "methodParameterType": "String#", "methodParameterName": "info#", "methodBody": "public void setInfo(String info) {\n        this.info = info;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param info the info to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingInfo.java", "methodName": "io.apicurio.hub.core.beans.SharingInfo.SharingInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SharingInfo() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingInfo.java", "methodName": "io.apicurio.hub.core.beans.SharingInfo.getDesignId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDesignId() {\n        return designId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the designId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingInfo.java", "methodName": "io.apicurio.hub.core.beans.SharingInfo.setDesignId", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public void setDesignId(String designId) {\n        this.designId = designId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param designId the designId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingInfo.java", "methodName": "io.apicurio.hub.core.beans.SharingInfo.getShareUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getShareUuid() {\n        return shareUuid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the shareUuid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingInfo.java", "methodName": "io.apicurio.hub.core.beans.SharingInfo.setShareUuid", "methodParameterType": "String#", "methodParameterName": "shareUuid#", "methodBody": "public void setShareUuid(String shareUuid) {\n        this.shareUuid = shareUuid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param shareUuid the shareUuid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingInfo.java", "methodName": "io.apicurio.hub.core.beans.SharingInfo.getLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SharingLevel getLevel() {\n        return level;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the level", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/SharingInfo.java", "methodName": "io.apicurio.hub.core.beans.SharingInfo.setLevel", "methodParameterType": "SharingLevel#", "methodParameterName": "level#", "methodBody": "public void setLevel(SharingLevel level) {\n        this.level = level;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param level the level to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.ApiDesignCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignCommand() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.getContentVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getContentVersion() {\n        return contentVersion;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the contentVersion", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.setContentVersion", "methodParameterType": "long#", "methodParameterName": "contentVersion#", "methodBody": "public void setContentVersion(long contentVersion) {\n        this.contentVersion = contentVersion;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param contentVersion the contentVersion to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.getCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommand() {\n        return command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the command", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.setCommand", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public void setCommand(String command) {\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param command the command to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.getAuthor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAuthor() {\n        return author;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the author", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.setAuthor", "methodParameterType": "String#", "methodParameterName": "author#", "methodBody": "public void setAuthor(String author) {\n        this.author = author;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param author the author to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.isReverted", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isReverted() {\n        return reverted;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the reverted", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesignCommand.java", "methodName": "io.apicurio.hub.core.beans.ApiDesignCommand.setReverted", "methodParameterType": "boolean#", "methodParameterName": "reverted#", "methodBody": "public void setReverted(boolean reverted) {\n        this.reverted = reverted;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param reverted the reverted to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.ApiDesign", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesign() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.setId", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "public void setId(String id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.getCreatedBy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCreatedBy() {\n        return createdBy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the createdBy", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.setCreatedBy", "methodParameterType": "String#", "methodParameterName": "createdBy#", "methodBody": "public void setCreatedBy(String createdBy) {\n        this.createdBy = createdBy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param createdBy the createdBy to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.getCreatedOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getCreatedOn() {\n        return createdOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the createdOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.setCreatedOn", "methodParameterType": "Date#", "methodParameterName": "createdOn#", "methodBody": "public void setCreatedOn(Date createdOn) {\n        this.createdOn = createdOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param createdOn the createdOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.getTags", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getTags() {\n        return tags;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tags", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.setTags", "methodParameterType": "Set<String>#", "methodParameterName": "tags#", "methodBody": "public void setTags(Set<String> tags) {\n        this.tags = tags;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tags the tags to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/ApiDesign.java", "methodName": "io.apicurio.hub.core.beans.ApiDesign.setType", "methodParameterType": "ApiDesignType#", "methodParameterName": "type#", "methodBody": "public void setType(ApiDesignType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.LinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedAccount() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedAccountType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.setType", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void setType(LinkedAccountType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.getLinkedOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getLinkedOn() {\n        return linkedOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the linkedOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.setLinkedOn", "methodParameterType": "Date#", "methodParameterName": "linkedOn#", "methodBody": "public void setLinkedOn(Date linkedOn) {\n        this.linkedOn = linkedOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param linkedOn the linkedOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.getUsedOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getUsedOn() {\n        return usedOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the usedOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.setUsedOn", "methodParameterType": "Date#", "methodParameterName": "usedOn#", "methodBody": "public void setUsedOn(Date usedOn) {\n        this.usedOn = usedOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param usedOn the usedOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.getNonce", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNonce() {\n        return nonce;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the nonce", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/beans/LinkedAccount.java", "methodName": "io.apicurio.hub.core.beans.LinkedAccount.setNonce", "methodParameterType": "String#", "methodParameterName": "nonce#", "methodBody": "public void setNonce(String nonce) {\n        this.nonce = nonce;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param nonce the nonce to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/exceptions/AccessDeniedException.java", "methodName": "io.apicurio.hub.core.exceptions.AccessDeniedException.AccessDeniedException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccessDeniedException() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/exceptions/AlreadyExistsException.java", "methodName": "io.apicurio.hub.core.exceptions.AlreadyExistsException.AlreadyExistsException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AlreadyExistsException() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/exceptions/ApiValidationException.java", "methodName": "io.apicurio.hub.core.exceptions.ApiValidationException.ApiValidationException", "methodParameterType": "String#", "methodParameterName": "reason#", "methodBody": "public ApiValidationException(String reason) {\n        super(reason);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/exceptions/ApiValidationException.java", "methodName": "io.apicurio.hub.core.exceptions.ApiValidationException.ApiValidationException", "methodParameterType": "String#Throwable#", "methodParameterName": "reason#root#", "methodBody": "public ApiValidationException(String reason, Throwable root) {\n        super(reason, root);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/exceptions/ServerError.java", "methodName": "io.apicurio.hub.core.exceptions.ServerError.ServerError", "methodParameterType": "String#", "methodParameterName": "error#", "methodBody": "public ServerError(String error) {\n        super(error);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/exceptions/ServerError.java", "methodName": "io.apicurio.hub.core.exceptions.ServerError.ServerError", "methodParameterType": "Exception#", "methodParameterName": "rootCause#", "methodBody": "public ServerError(Exception rootCause) {\n        super(\"Unexpected server error\", rootCause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/exceptions/NotFoundException.java", "methodName": "io.apicurio.hub.core.exceptions.NotFoundException.NotFoundException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NotFoundException() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IRollupExecutor.java", "methodName": "io.apicurio.hub.core.storage.IRollupExecutor.rollupCommands", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "void rollupCommands(String userId, String designId) throws NotFoundException, StorageException, OaiCommandException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Finds all commands executed since the last full content rollup and applies them to the API design.  This produces a \"latest\" version of the API and stores that as a new content entry in the storage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IRollupExecutor.java", "methodName": "io.apicurio.hub.core.storage.IRollupExecutor.rollupCommands", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "void rollupCommands(String designId) throws NotFoundException, StorageException, OaiCommandException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "As  {@link #rollupCommands(String,String)}, but infers userId from the database by retrieving the last command on the design and extracting its user. This may be useful in distributed setups, where the node performing a rollup does not actually host the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/RollupExecutor.java", "methodName": "io.apicurio.hub.core.storage.RollupExecutor.rollupCommands", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public void rollupCommands(String userId, String designId) throws NotFoundException, StorageException, OaiCommandException {\n        logger.debug(\"Rolling up commands for API with ID: {} with User: {}\", designId, userId);\n        ApiDesignContent designContent = storage.getLatestContentDocument(userId, designId);\n        logger.debug(\"Using latest contentVersion {} for possible command rollup.\", designContent.getContentVersion());\n        List<ApiDesignCommand> apiCommands = storage.listContentCommands(userId, designId, designContent.getContentVersion());\n        if (apiCommands.isEmpty()) {\n            logger.debug(\"No hanging commands found, rollup of API {} canceled.\", designId);\n            return;\n        }\n        List<String> commands = new ArrayList<>(apiCommands.size());\n        for (ApiDesignCommand apiCommand : apiCommands) {\n            commands.add(apiCommand.getCommand());\n        }\n        String content = this.oaiCommandExecutor.executeCommands(designContent.getDocument(), commands);\n        long contentVersion = storage.addContent(userId, designId, ApiContentType.Document, content);\n        logger.debug(\"Rollup of {} commands complete with new content version: {}\", commands.size(), contentVersion);\n\n        try {\n            logger.debug(\"Updating meta-data for API design {} if necessary.\", designId);\n            ApiDesign design = storage.getApiDesign(userId, designId);\n            ApiDesignResourceInfo info = ApiDesignResourceInfo.fromContent(content);\n            boolean dirty = false;\n            if (design.getName() == null || !design.getName().equals(info.getName())) {\n                design.setName(info.getName());\n                dirty = true;\n            }\n            if (design.getDescription() == null || !design.getDescription().equals(info.getDescription())) {\n                design.setDescription(info.getDescription());\n                dirty = true;\n            }\n            if (design.getTags() == null || !design.getTags().equals(info.getTags())) {\n                design.setTags(info.getTags());\n                dirty = true;\n            }\n            if (dirty) {\n                logger.debug(\"API design {} meta-data changed, updating in storage.\", designId);\n                storage.updateApiDesign(userId, design);\n            }\n        } catch (Exception e) {\n            // Not the end of the world if we fail to update the API's meta-data\n            logger.error(e.getMessage(), e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IRollupExecutor#rollupCommands(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/RollupExecutor.java", "methodName": "io.apicurio.hub.core.storage.RollupExecutor.rollupCommands", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public void rollupCommands(String designId) throws NotFoundException, StorageException, OaiCommandException {\n        Optional<ApiDesignCommand> lastCommandOptional = storage.getLatestCommand(designId);\n\n        // Doing it this tortured way as using the lambda does not allow checked exceptions to be gracefully propagated\n        if (lastCommandOptional.isPresent()) {\n            // Rollup using author selected from the last command.\n            rollupCommands(lastCommandOptional.get().getAuthor(), designId);\n        } else {\n            // Edge case: If user imports a document, makes no edits, then leaves immediately, we won't find any commands\n            // In this case, we don't actually need to do a rollup anyway, so can just early terminate.\n            logger.debug(\"No commands exist for design: {}. No rollup needed.\", designId);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IRollupExecutor#rollupCommands(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/H2SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.H2SqlStatements.H2SqlStatements", "methodParameterType": "HubConfiguration#", "methodParameterName": "config#", "methodBody": "public H2SqlStatements(HubConfiguration config) {\n        super(config);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/H2SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.H2SqlStatements.dbType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected String dbType() {\n        return \"h2\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.CommonSqlStatements#dbType()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/H2SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.H2SqlStatements.isDatabaseInitialized", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String isDatabaseInitialized() {\n        return \"SELECT COUNT(*) AS count FROM information_schema.tables WHERE table_name = 'API_DESIGNS'\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#isDatabaseInitialized()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/H2SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.H2SqlStatements.supportsUpsert", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean supportsUpsert() {\n        return false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#supportsUpsert()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/H2SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.H2SqlStatements.upsertSharing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String upsertSharing() {\n        return \"MERGE INTO sharing (design_id, uuid, level) KEY (design_id) VALUES(?, ?, ?);\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#upsertSharing()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/PostgreSQL9SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.PostgreSQL9SqlStatements.PostgreSQL9SqlStatements", "methodParameterType": "HubConfiguration#", "methodParameterName": "config#", "methodBody": "public PostgreSQL9SqlStatements(HubConfiguration config) {\n        super(config);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/PostgreSQL9SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.PostgreSQL9SqlStatements.dbType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected String dbType() {\n        return \"postgresql9\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.CommonSqlStatements#dbType()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/PostgreSQL9SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.PostgreSQL9SqlStatements.isDatabaseInitialized", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String isDatabaseInitialized() {\n        return \"SELECT count(*) AS count FROM information_schema.tables WHERE table_name = 'api_designs' LIMIT 1\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#isDatabaseInitialized()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/PostgreSQL9SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.PostgreSQL9SqlStatements.supportsUpsert", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean supportsUpsert() {\n        return false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#supportsUpsert()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/PostgreSQL9SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.PostgreSQL9SqlStatements.upsertSharing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String upsertSharing() {\n        return \"SELECT upsert_sharing(?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#upsertSharing()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.isDatabaseInitialized", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private boolean isDatabaseInitialized() {\n        logger.debug(\"Checking to see if the DB is initialized.\");\n        return this.jdbi.withHandle(handle -> {\n            ResultIterable<Integer> result = handle.createQuery(this.sqlStatements.isDatabaseInitialized()).mapTo(Integer.class);\n            return result.one().intValue() > 0;\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the database has already been initialized", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.isDatabaseCurrent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private boolean isDatabaseCurrent() {\n        logger.debug(\"Checking to see if the DB is up-to-date.\");\n        int version = this.getDatabaseVersion();\n        return version == DB_VERSION;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the database has already been initialized", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.initializeDatabase", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void initializeDatabase() {\n        logger.info(\"Initializing the Apicurio Hub API database.\");\n        logger.info(\"\\tDatabase type: \" + config.getJdbcType());\n        \n        final List<String> statements = this.sqlStatements.databaseInitialization();\n        logger.debug(\"---\");\n        this.jdbi.withHandle( handle -> {\n            statements.forEach( statement -> {\n                logger.debug(statement);\n                handle.createUpdate(statement).execute();\n            });\n            return null;\n        });\n        logger.debug(\"---\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initializes the database by executing a number of DDL statements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.upgradeDatabase", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void upgradeDatabase() {\n        logger.info(\"Upgrading the Apicurio Hub API database.\");\n        \n        int fromVersion = this.getDatabaseVersion();\n        int toVersion = DB_VERSION;\n\n        logger.info(\"\\tDatabase type: {}\", config.getJdbcType());\n        logger.info(\"\\tFrom Version:  {}\", fromVersion);\n        logger.info(\"\\tTo Version:    {}\", toVersion);\n\n        final List<String> statements = this.sqlStatements.databaseUpgrade(fromVersion, toVersion);\n        logger.debug(\"---\");\n        this.jdbi.withHandle( handle -> {\n            statements.forEach( statement -> {\n                logger.debug(statement);\n                \n                if (statement.startsWith(\"UPGRADER:\")) {\n                    String cname = statement.substring(9).trim();\n                    applyUpgrader(handle, cname);\n                } else {\n                    handle.createUpdate(statement).execute();\n                }\n            });\n            return null;\n        });\n        logger.debug(\"---\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Upgrades the database by executing a number of DDL statements found in DB-specific DDL upgrade scripts.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.applyUpgrader", "methodParameterType": "Handle#String#", "methodParameterName": "handle#cname#", "methodBody": "private void applyUpgrader(Handle handle, String cname) {\n        try {\n            @SuppressWarnings(\"unchecked\")\n            Class<IDbUpgrader> upgraderClass = (Class<IDbUpgrader>) Class.forName(cname);\n            IDbUpgrader upgrader = upgraderClass.newInstance();\n            upgrader.upgrade(handle);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Instantiates an instance of the given upgrader class and then invokes it.  Used to perform advanced upgrade logic when upgrading the DB (logic that cannot be handled in simple SQL  statements).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getDatabaseVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private int getDatabaseVersion() {\n        return this.jdbi.withHandle(handle -> {\n            ResultIterable<String> result = handle.createQuery(this.sqlStatements.getDatabaseVersion())\n                    .bind(0, \"db_version\")\n                    .mapTo(String.class);\n            try {\n                String versionStr = result.one();\n                int version = Integer.parseInt(versionStr);\n                return version;\n            } catch (Exception e) {\n                return 0;\n            }\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NumberLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reuturns the current DB version by selecting the value in the 'apicurio' table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.hasOwnerPermission", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public boolean hasOwnerPermission(String userId, String designId) throws StorageException {\n        try {\n            return this.jdbi.withHandle( handle -> {\n                // Check for permissions first\n                String statement = sqlStatements.hasOwnerPermission();\n                Long did = Long.valueOf(designId);\n                int count = handle.createQuery(statement)\n                    .bind(0, did)\n                    .bind(1, userId)\n                    .mapTo(Integer.class).one();\n                return count == 1;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error checking permission.\", e);\n        }        \n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#hasOwnerPermission(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.hasWritePermission", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public boolean hasWritePermission(String userId, String designId) throws StorageException {\n        if (this.shareForEveryone) {\n            return true;\n        }\n        try {\n            return this.jdbi.withHandle( handle -> {\n                // Check for permissions first\n                String statement = sqlStatements.hasWritePermission();\n                Long did = Long.valueOf(designId);\n                int count = handle.createQuery(statement)\n                    .bind(0, did)\n                    .bind(1, userId)\n                    .mapTo(Integer.class).one();\n                return count == 1;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error checking permission.\", e);\n        }        \n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#hasWritePermission(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listPermissions", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Collection<ApiDesignCollaborator> listPermissions(String designId) throws StorageException {\n        logger.debug(\"Getting a list of all permissions (collaborators) for API: {}.\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectPermissions();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .map(ApiDesignCollaboratorRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error listing linked accounts.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listPermissions(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.createPermission", "methodParameterType": "String#String#String#", "methodParameterName": "designId#userId#permission#", "methodBody": "@Override\n    public void createPermission(String designId, String userId, String permission) throws StorageException {\n        logger.debug(\"Inserting an ACL row for: {}\", designId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.insertAcl();\n                Long did = Long.valueOf(designId);\n                handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .bind(1, did)\n                      .bind(2, permission)\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error inserting ACL row.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#createPermission(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.deletePermission", "methodParameterType": "String#String#", "methodParameterName": "designId#userId#", "methodBody": "@Override\n    public void deletePermission(String designId, String userId) throws StorageException {\n        logger.debug(\"Deleting an ACL row for: {}\", designId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.deleteAcl();\n                Long did = Long.valueOf(designId);\n                handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .bind(1, did)\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting ACL row.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#deletePermission(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.updatePermission", "methodParameterType": "String#String#String#", "methodParameterName": "designId#userId#permission#", "methodBody": "@Override\n    public void updatePermission(String designId, String userId, String permission) throws StorageException {\n        logger.debug(\"Updating an ACL row for: {}\", designId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.updateAcl();\n                Long did = Long.valueOf(designId);\n                handle.createUpdate(statement)\n                      .bind(0, permission)\n                      .bind(1, userId)\n                      .bind(2, did)\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting ACL row.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#updatePermission(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.createLinkedAccount", "methodParameterType": "String#LinkedAccount#", "methodParameterName": "userId#account#", "methodBody": "@Override\n    public void createLinkedAccount(String userId, LinkedAccount account)\n            throws AlreadyExistsException, StorageException {\n        logger.debug(\"Inserting a Linked Account {} for {}\", account.getType().name(), userId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.insertLinkedAccount();\n                handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .bind(1, account.getType().name())\n                      .bind(2, account.getLinkedOn())\n                      .bind(3, account.getUsedOn())\n                      .bind(4, account.getNonce())\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            if (e.getMessage().contains(\"Unique\")) {\n                throw new AlreadyExistsException();\n            } else {\n                throw new StorageException(\"Error inserting Linked Account.\", e);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#createLinkedAccount(java.lang.String,io.apicurio.hub.core.beans.LinkedAccount)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getLinkedAccount", "methodParameterType": "String#LinkedAccountType#", "methodParameterName": "userId#type#", "methodBody": "@Override\n    public LinkedAccount getLinkedAccount(String userId, LinkedAccountType type)\n            throws StorageException, NotFoundException {\n        logger.debug(\"Selecting a single Linked Account: {}::{}\", userId, type.name());\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectLinkedAccountByType();\n                return handle.createQuery(statement)\n                        .bind(0, userId)\n                        .bind(1, type.name())\n                        .mapToBean(LinkedAccount.class)\n                        .one();\n            });\n        } catch (IllegalStateException e) {\n            throw new NotFoundException();\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting linked account.\");\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getLinkedAccount(java.lang.String,io.apicurio.hub.core.beans.LinkedAccountType)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listLinkedAccounts", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "@Override\n    public Collection<LinkedAccount> listLinkedAccounts(String userId) throws StorageException {\n        logger.debug(\"Getting a list of all Linked Accounts for {}.\", userId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectLinkedAccounts();\n                return handle.createQuery(statement)\n                        .bind(0, userId)\n                        .mapToBean(LinkedAccount.class)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error listing linked accounts.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listLinkedAccounts(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.deleteLinkedAccount", "methodParameterType": "String#LinkedAccountType#", "methodParameterName": "userId#type#", "methodBody": "@Override\n    public void deleteLinkedAccount(String userId, LinkedAccountType type)\n            throws StorageException, NotFoundException {\n        logger.debug(\"Deleting a Linked Account: {}::{}\", userId, type.name());\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.deleteLinkedAccount();\n                int rowCount = handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .bind(1, type.name())\n                      .execute();\n                if (rowCount == 0) {\n                    throw new NotFoundException();\n                }\n                return null;\n            });\n        } catch (NotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting a Linked Account\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#deleteLinkedAccount(java.lang.String,io.apicurio.hub.core.beans.LinkedAccountType)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.deleteLinkedAccounts", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "@Override\n    public void deleteLinkedAccounts(String userId) throws StorageException {\n        logger.debug(\"Deleting all Linked Accounts for {}\", userId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.deleteLinkedAccounts();\n                handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting Linked Accounts\", e);\n        }        \n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#deleteLinkedAccounts(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.updateLinkedAccount", "methodParameterType": "String#LinkedAccount#", "methodParameterName": "userId#account#", "methodBody": "@Override\n    public void updateLinkedAccount(String userId, LinkedAccount account) throws NotFoundException, StorageException {\n        logger.debug(\"Updating a Linked Account: {}::{}\", userId, account.getType().name());\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.updateLinkedAccount();\n                int rowCount = handle.createUpdate(statement)\n                        .bind(0, account.getUsedOn())\n                        .bind(1, account.getLinkedOn())\n                        .bind(2, account.getNonce())\n                        .bind(3, userId)\n                        .bind(4, account.getType().name())\n                        .execute();\n                if (rowCount == 0) {\n                    throw new NotFoundException();\n                }\n                return null;\n            });\n        } catch (NotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new StorageException(\"Error updating a Linked Account.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#updateLinkedAccount(java.lang.String,io.apicurio.hub.core.beans.LinkedAccount)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listContributors", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public Collection<Contributor> listContributors(String userId, String designId)\n            throws NotFoundException, StorageException {\n        logger.debug(\"Selecting all contributors for API Design: {}\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectApiDesignContributors();\n                Query query = handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId));\n                if (!shareForEveryone) {\n                    query = query.bind(1, userId);\n                }\n                return query.map(ContributorRowMapper.instance).list();\n            });\n        } catch (IllegalStateException e) {\n            throw new NotFoundException();\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting contributors.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listContributors(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.addContent", "methodParameterType": "String#String#ApiContentType#String#", "methodParameterName": "userId#designId#type#data#", "methodBody": "@Override\n    public long addContent(String userId, String designId, ApiContentType type, String data) throws StorageException {\n        logger.debug(\"Inserting a 'command' content row for: {}\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                // Insert a row in the api_content table.  Retrieve the ID.\n                String statement = sqlStatements.insertContent();\n                CharacterStreamArgument contentClob = new CharacterStreamArgument(new StringReader(data), data.length());\n                Long contentVersion = handle.createUpdate(statement)\n                      .bind(0, Long.parseLong(designId))\n                      .bind(1, type.getId())\n                      .bind(2, contentClob)\n                      .bind(3, userId)\n                      .bind(4, new Date())\n                      .executeAndReturnGeneratedKeys(\"version\")\n                      .mapTo(Long.class)\n                      .one();\n                return contentVersion;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error adding content entry for API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#addContent(java.lang.String,java.lang.String,io.apicurio.hub.core.beans.ApiContentType,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.undoContent", "methodParameterType": "String#String#long#", "methodParameterName": "user#designId#contentVersion#", "methodBody": "@Override\n    public boolean undoContent(String user, String designId, long contentVersion) throws StorageException {\n        logger.debug(\"Undoing a content row for: {}  version: {}\", designId, contentVersion);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.undoContent();\n                long updateCount = handle.createUpdate(statement)\n                        .bind(0, new Date())\n                        .bind(1, user)\n                        .bind(2, Long.parseLong(designId))\n                        .bind(3, contentVersion)\n                        .execute();\n                return updateCount > 0;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error undoing content entry for API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#undoContent(java.lang.String,java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.redoContent", "methodParameterType": "String#String#long#", "methodParameterName": "user#designId#contentVersion#", "methodBody": "@Override\n    public boolean redoContent(String user, String designId, long contentVersion) throws StorageException {\n        logger.debug(\"Undoing a content row for: {}  version: {}\", designId, contentVersion);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.redoContent();\n                long updateCount = handle.createUpdate(statement)\n                        .bind(0, new Date())\n                        .bind(1, user)\n                        .bind(2, Long.parseLong(designId))\n                        .bind(3, contentVersion)\n                        .execute();\n                return updateCount > 0;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error undoing content entry for API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#redoContent(java.lang.String,java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getApiDesign", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public ApiDesign getApiDesign(String userId, String designId) throws NotFoundException, StorageException {\n        logger.debug(\"Selecting a single API Design: {}\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectApiDesignById();\n                Query query = handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId));\n                if (!shareForEveryone) {\n                    query = query.bind(1, userId);\n                }\n                return query.map(ApiDesignRowMapper.instance).one();\n            });\n        } catch (IllegalStateException e) {\n            throw new NotFoundException();\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getApiDesign(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getLatestContentDocument", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public ApiDesignContent getLatestContentDocument(String userId, String designId)\n            throws NotFoundException, StorageException {\n        logger.debug(\"Selecting the most recent api_content row of type 'document' for: {}\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectLatestContentDocument();\n                Query query = handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId));\n                if (!shareForEveryone) {\n                    query = query.bind(1, userId);\n                }\n                return query.map(ApiDesignContentRowMapper.instance).one();\n            });\n        } catch (IllegalStateException e) {\n            logger.error(\"Error getting latest content document\", e);\n            throw new NotFoundException();\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting content document.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getLatestContentDocument(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getLatestContentDocumentForSharing", "methodParameterType": "String#", "methodParameterName": "sharingUuid#", "methodBody": "@Override\n    public ApiDesignContent getLatestContentDocumentForSharing(String sharingUuid)\n            throws NotFoundException, StorageException {\n        logger.debug(\"Selecting the most recent api_content row of type 'document' for sharing UUID: {}\", sharingUuid);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectLatestContentDocumentForSharing();\n                Query query = handle.createQuery(statement)\n                        .bind(0, sharingUuid);\n                return query.map(ApiDesignContentRowMapper.instance).one();\n            });\n        } catch (IllegalStateException e) {\n            throw new NotFoundException();\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting content document.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getLatestContentDocumentForSharing(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listContentCommands", "methodParameterType": "String#String#long#", "methodParameterName": "userId#designId#sinceVersion#", "methodBody": "@Override\n    public List<ApiDesignCommand> listContentCommands(String userId, String designId, long sinceVersion)\n            throws StorageException {\n        logger.debug(\"Selecting the content 'command' rows for API {} since content version {}\", designId, sinceVersion);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectContentCommands();\n                \n                Query query = handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId));\n                if (!shareForEveryone) {\n                    query = query.bind(2, userId);\n                }\n                return query.bind(1, sinceVersion).map(ApiDesignCommandRowMapper.instance).list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting content commands.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listContentCommands(java.lang.String,java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "214", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listAllContentCommands", "methodParameterType": "String#String#long#", "methodParameterName": "userId#designId#sinceVersion#", "methodBody": "@Override\n    public List<ApiDesignCommand> listAllContentCommands(String userId, String designId, long sinceVersion)\n            throws StorageException {\n        logger.debug(\"Selecting ALL content 'command' rows for API {} since content version {}\", designId, sinceVersion);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectAllContentCommands();\n                if (shareForEveryone) {\n                    return handle.createQuery(statement)\n                            .bind(0, Long.valueOf(designId))\n                            .bind(1, sinceVersion)\n                            .map(ApiDesignCommandRowMapper.instance)\n                            .list();\n                } else {\n                    return handle.createQuery(statement)\n                            .bind(0, Long.valueOf(designId))\n                            .bind(1, userId)\n                            .bind(2, sinceVersion)\n                            .map(ApiDesignCommandRowMapper.instance)\n                            .list();\n                }\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting content commands.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listAllContentCommands(java.lang.String,java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.createApiDesign", "methodParameterType": "String#ApiDesign#String#", "methodParameterName": "userId#design#initialContent#", "methodBody": "@Override\n    public String createApiDesign(String userId, ApiDesign design, String initialContent) throws StorageException {\n        logger.debug(\"Inserting an API Design: {}\", design.getName());\n        try {\n            return this.jdbi.withHandle( handle -> {\n                // Insert a row in the api_designs table first.  Retrieve the ID.\n                String statement = sqlStatements.insertApiDesign();\n                String designId = handle.createUpdate(statement)\n                      .bind(0, design.getName())\n                      .bind(1, trimTo255(design.getDescription()))\n                      .bind(2, design.getCreatedBy())\n                      .bind(3, design.getCreatedOn())\n                      .bind(4, asCsv(design.getTags(), 2048))\n                      .bind(5, design.getType().name())\n                      .executeAndReturnGeneratedKeys(\"id\")\n                      .mapTo(String.class)\n                      .one();\n                \n                long did = Long.parseLong(designId);\n                \n                // Insert a row in the ACL table with role 'owner' for this API\n                statement = sqlStatements.insertAcl();\n                handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .bind(1, did)\n                      .bind(2, \"owner\")\n                      .execute();\n                \n                // Insert a row in the api_content table (initial value)\n                statement = sqlStatements.insertContent();\n                CharacterStreamArgument contentClob = new CharacterStreamArgument(new StringReader(initialContent), initialContent.length());\n                handle.createUpdate(statement)\n                      .bind(0, did)\n                      .bind(1, ApiContentType.Document.getId())\n                      .bind(2, contentClob)\n                      .bind(3, userId)\n                      .bind(4, design.getCreatedOn())\n                      .execute();\n                \n                return designId;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error inserting API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#createApiDesign(java.lang.String,io.apicurio.hub.core.beans.ApiDesign,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.asCsv", "methodParameterType": "Set<String>#int#", "methodParameterName": "tags#maxLength#", "methodBody": "private static String asCsv(Set<String> tags, int maxLength) {\n        StringBuilder builder = new StringBuilder();\n        tags.forEach( tag -> {\n            if (builder.length() + tag.length() + 2 < maxLength) {\n                builder.append(tag);\n                builder.append(',');\n            }\n        });\n        if (builder.length() > 0) {\n            return builder.substring(0, builder.length() - 1);\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Converts from a Set of tags to a CSV of those tags.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.deleteApiDesign", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public void deleteApiDesign(String userId, String designId) throws NotFoundException, StorageException {\n        logger.debug(\"Deleting an API Design: {}\", designId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                // Check for permissions first - must be owner to delete an API\n                String statement = sqlStatements.hasOwnerPermission();\n                Long did = Long.valueOf(designId);\n                int count = handle.createQuery(statement)\n                    .bind(0, did)\n                    .bind(1, userId)\n                    .mapTo(Integer.class).one();\n                if (count == 0) {\n                    throw new NotFoundException();\n                }\n\n                // If OK then delete ACL entries\n                statement = sqlStatements.clearAcl();\n                handle.createUpdate(statement).bind(0, did).execute();\n\n                // And also delete any invitations\n                statement = sqlStatements.clearInvitations();\n                handle.createUpdate(statement).bind(0, did).execute();\n\n                // And also delete the api_content rows\n                statement = sqlStatements.clearContent();\n                handle.createUpdate(statement).bind(0, did).execute();\n\n                // And also delete the codegen rows\n                statement = sqlStatements.deleteCodegenProjects();\n                handle.createUpdate(statement).bind(0, did).execute();\n\n                // And also delete sharing config\n                statement = sqlStatements.deleteSharingConfig();\n                handle.createUpdate(statement).bind(0, did).execute();\n\n                // Then delete the api design itself\n                statement = sqlStatements.deleteApiDesign();\n                int rowCount = handle.createUpdate(statement)\n                      .bind(0, did)\n                      .execute();\n                if (rowCount == 0) {\n                    throw new NotFoundException();\n                }\n                return null;\n            });\n        } catch (NotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting an API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#deleteApiDesign(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "218", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.updateApiDesign", "methodParameterType": "String#ApiDesign#", "methodParameterName": "userId#design#", "methodBody": "@Override\n    public void updateApiDesign(String userId, ApiDesign design) throws NotFoundException, StorageException {\n        logger.debug(\"Updating an API Design: {}\", design.getId());\n        try {\n            this.jdbi.withHandle( handle -> {\n                // Check for permissions first\n                if (!shareForEveryone) {\n                    String statementPerms = sqlStatements.hasWritePermission();\n                    int count = handle.createQuery(statementPerms)\n                        .bind(0, Long.valueOf(design.getId()))\n                        .bind(1, userId)\n                        .mapTo(Integer.class).one();\n                    if (count == 0) {\n                        throw new NotFoundException();\n                    }\n                }\n\n                // Then perform the update\n                String statement = sqlStatements.updateApiDesign();\n                int rowCount = handle.createUpdate(statement)\n                        .bind(0, design.getName())\n                        .bind(1, trimTo255(design.getDescription()))\n                        .bind(2, asCsv(design.getTags(), 2048))\n                        .bind(3, Long.valueOf(design.getId()))\n                        .execute();\n                if (rowCount == 0) {\n                    throw new NotFoundException();\n                }\n                return null;\n            });\n        } catch (NotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new StorageException(\"Error updating an API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#updateApiDesign(java.lang.String,io.apicurio.hub.core.beans.ApiDesign)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.trimTo255", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "private String trimTo255(String description) {\n        if (description == null || description.length() <= 255) {\n            return description;\n        }\n        return description.substring(0, 252) + \"...\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Trims the given string to a length of no more than 255 - for storing in the DB.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listApiDesigns", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "@Override\n    public Collection<ApiDesign> listApiDesigns(String userId) throws StorageException {\n        logger.debug(\"Getting a list of all API designs.\");\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectApiDesigns();\n                Query query = handle.createQuery(statement);\n                if (!shareForEveryone) {\n                    query = query.bind(0, userId);\n                }\n                return query.map(ApiDesignRowMapper.instance).list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error listing API designs.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listApiDesigns(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getRecentApiDesigns", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "@Override\n    public Collection<ApiDesign> getRecentApiDesigns(String userId) throws StorageException {\n        logger.debug(\"Getting a list of the user's recent APIs.\");\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectRecentApiDesigns();\n                Collection<ApiDesign> designs = new ArrayList<>();\n                Collection<Long> recentApiIds;\n                if (shareForEveryone) {\n                    recentApiIds = handle.createQuery(statement)\n                            .bind(0, userId)\n                            .map(new SingleColumnMapper<Long>(new ColumnMapper<Long>() {\n                                @Override\n                                public Long map(ResultSet r, int columnNumber, StatementContext ctx) throws SQLException {\n                                    return r.getLong(columnNumber);\n                                }\n                            }, \"design_id\"))\n                            .list();\n                } else {\n                    recentApiIds = handle.createQuery(statement)\n                            .bind(0, userId)\n                            .bind(1, userId)\n                            .map(new SingleColumnMapper<Long>(new ColumnMapper<Long>() {\n                                @Override\n                                public Long map(ResultSet r, int columnNumber, StatementContext ctx) throws SQLException {\n                                    return r.getLong(columnNumber);\n                                }\n                            }, \"design_id\"))\n                            .list();\n                }\n                for (Long did : recentApiIds) {\n                    designs.add(this.getApiDesign(userId, String.valueOf(did)));\n                }\n                return designs;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error listing API designs.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#StringLiteral#ClassInstanceCreation#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#StringLiteral#ClassInstanceCreation#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getRecentApiDesigns(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "222", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.createEditingSessionUuid", "methodParameterType": "String#String#String#String#long#long#", "methodParameterName": "uuid#designId#userId#hash#contentVersion#expiresOn#", "methodBody": "@Override\n    public void createEditingSessionUuid(String uuid, String designId, String userId, String hash, long contentVersion,\n            long expiresOn) throws StorageException {\n        logger.debug(\"Inserting an Editing Session UUID row: {}\", uuid);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.insertEditingSessionUuid();\n                handle.createUpdate(statement)\n                      .bind(0, uuid)\n                      .bind(1, Long.valueOf(designId))\n                      .bind(2, userId)\n                      .bind(3, hash)\n                      .bind(4, contentVersion)\n                      .bind(5, expiresOn)\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error inserting editing session UUID row.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#createEditingSessionUuid(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.lookupEditingSessionUuid", "methodParameterType": "String#String#String#String#", "methodParameterName": "uuid#designId#userId#hash#", "methodBody": "@Override\n    public long lookupEditingSessionUuid(String uuid, String designId, String userId, String hash)\n            throws StorageException {\n        logger.debug(\"Looking up an editing session UUID: {}\", uuid);\n        long now = System.currentTimeMillis();\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectEditingSessionUuid();\n                Long contentVersion = handle.createQuery(statement)\n                        .bind(0, uuid)\n                        .bind(1, Long.valueOf(designId))\n                        .bind(2, hash)\n                        .bind(3, now)\n                        .map(new RowMapper<Long>() {\n                            @Override\n                            public Long map(ResultSet rs, StatementContext ctx) throws SQLException {\n                                return rs.getLong(\"version\");\n                            }\n                        })\n                        .one();\n                return contentVersion;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting Editing Session UUID.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#lookupEditingSessionUuid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "224", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.consumeEditingSessionUuid", "methodParameterType": "String#String#String#String#", "methodParameterName": "uuid#designId#userId#hash#", "methodBody": "@Override\n    public boolean consumeEditingSessionUuid(String uuid, String designId, String userId, String hash)\n            throws StorageException {\n        logger.debug(\"Consuming/Deleting an editing session UUID: {}\", uuid);\n        long now = System.currentTimeMillis();\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.deleteEditingSessionUuid();\n                int rowCount = handle.createUpdate(statement)\n                        .bind(0, uuid)\n                        .bind(1, Long.valueOf(designId))\n                        .bind(2, hash)\n                        .bind(3, now)\n                        .execute();\n                if (rowCount == 0) {\n                    return false;\n                }\n                return true;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting a Linked Account\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#consumeEditingSessionUuid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.createCollaborationInvite", "methodParameterType": "String#String#String#String#String#String#", "methodParameterName": "inviteId#designId#userId#username#role#subject#", "methodBody": "@Override\n    public void createCollaborationInvite(String inviteId, String designId, String userId, String username, String role,\n            String subject) throws StorageException {\n        logger.debug(\"Inserting a collaboration invitation row: {}  for design: {}\", inviteId, designId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.insertCollaborationInvitation();\n                handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .bind(1, new Date())\n                      .bind(2, username)\n                      .bind(3, Long.valueOf(designId))\n                      .bind(4, role)\n                      .bind(5, inviteId)\n                      .bind(6, \"pending\")\n                      .bind(7, subject)\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error inserting editing session UUID row.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#StringLiteral#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#createCollaborationInvite(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.updateCollaborationInviteStatus", "methodParameterType": "String#String#String#String#", "methodParameterName": "inviteId#fromStatus#toStatus#userId#", "methodBody": "@Override\n    public boolean updateCollaborationInviteStatus(String inviteId, String fromStatus, String toStatus, String userId)\n            throws StorageException {\n        logger.debug(\"Updating the status of an invitation: {}  from: {}  to: {}\", inviteId, fromStatus, toStatus);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.updateCollaborationInvitationStatus();\n                int rowCount = handle.createUpdate(statement)\n                        .bind(0, toStatus)\n                        .bind(1, userId)\n                        .bind(2, new Date())\n                        .bind(3, inviteId)\n                        .bind(4, fromStatus)\n                        .execute();\n                if (rowCount == 0) {\n                    return false;\n                }\n                return true;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error updating an invitation status.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#updateCollaborationInviteStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listCollaborationInvites", "methodParameterType": "String#String#", "methodParameterName": "designId#userId#", "methodBody": "@Override\n    public List<Invitation> listCollaborationInvites(String designId, String userId) throws StorageException {\n        logger.debug(\"Selecting all invitations for API Design: {}\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectCollaborationInvitations();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .bind(1, userId)\n                        .map(InvitationRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting invitations.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listCollaborationInvites(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getCollaborationInvite", "methodParameterType": "String#String#", "methodParameterName": "designId#inviteId#", "methodBody": "@Override\n    public Invitation getCollaborationInvite(String designId, String inviteId)\n            throws StorageException, NotFoundException {\n        logger.debug(\"Selecting a single invitation for API Design: {}  with inviteId: {}\", designId, inviteId);\n        try {\n            return (Invitation) this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectCollaborationInvitation();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .bind(1, inviteId)\n                        .map(InvitationRowMapper.instance)\n                        .one();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting invitations.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getCollaborationInvite(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listApiDesignActivity", "methodParameterType": "String#int#int#", "methodParameterName": "designId#from#to#", "methodBody": "@Override\n    public Collection<ApiDesignChange> listApiDesignActivity(String designId, int from, int to) throws StorageException {\n        logger.debug(\"Selecting activity for API Design: {} from {} to {}\", designId, from, to);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectApiDesignActivity();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .bind(1, to - from)\n                        .bind(2, from)\n                        .map(ApiDesignChangeRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting contributors.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listApiDesignActivity(java.lang.String,int,int)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "230", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listUserActivity", "methodParameterType": "String#int#int#", "methodParameterName": "user#from#to#", "methodBody": "@Override\n    public Collection<ApiDesignChange> listUserActivity(String user, int from, int to) throws StorageException {\n        logger.debug(\"Selecting activity for User: {} from {} to {}\", user, from, to);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectUserActivity();\n                return handle.createQuery(statement)\n                        .bind(0, user)\n                        .bind(1, to - from)\n                        .bind(2, from)\n                        .map(ApiDesignChangeRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting contributors.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listUserActivity(java.lang.String,int,int)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "231", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listApiDesignPublications", "methodParameterType": "String#int#int#", "methodParameterName": "designId#from#to#", "methodBody": "@Override\n    public Collection<ApiPublication> listApiDesignPublications(String designId, int from, int to) throws StorageException {\n        logger.debug(\"Selecting publication activity for API Design: {} from {} to {}\", designId, from, to);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectApiPublicationActivity();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .bind(1, to - from)\n                        .bind(2, from)\n                        .map(ApiPublicationRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting publications.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listApiDesignPublications(java.lang.String,int,int)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "232", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listApiDesignPublicationsBy", "methodParameterType": "String#String#int#int#", "methodParameterName": "designId#user#from#to#", "methodBody": "@Override\n    public Collection<ApiPublication> listApiDesignPublicationsBy(String designId, String user, int from, int to) throws StorageException {\n        logger.debug(\"Selecting publication activity for API Design: {} from {} to {} and by {}\", designId, from, to, user);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectApiPublicationActivityByUser();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .bind(1, user)\n                        .bind(2, to - from)\n                        .bind(3, from)\n                        .map(ApiPublicationRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting publications.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listApiDesignPublicationsBy(java.lang.String,java.lang.String,int,int)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "233", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listApiDesignMocks", "methodParameterType": "String#int#int#", "methodParameterName": "designId#from#to#", "methodBody": "@Override\n    public Collection<ApiMock> listApiDesignMocks(String designId, int from, int to) throws StorageException {\n        logger.debug(\"Selecting mock activity for API Design: {} from {} to {}\", designId, from, to);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectApiMockActivity();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .bind(1, to - from)\n                        .bind(2, from)\n                        .map(ApiMockRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting mocks.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listApiDesignMocks(java.lang.String,int,int)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listCodegenProjects", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public Collection<CodegenProject> listCodegenProjects(String userId, String designId)\n            throws StorageException {\n        logger.debug(\"Selecting codegen projects for API Design: {}\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectCodegenProjects();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .map(CodegenProjectRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting codegen projects.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listCodegenProjects(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "235", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.createCodegenProject", "methodParameterType": "String#CodegenProject#", "methodParameterName": "userId#project#", "methodBody": "@Override\n    public String createCodegenProject(String userId, CodegenProject project) throws StorageException {\n        logger.debug(\"Inserting a codegen project: {}\", project.getType());\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.insertCodegenProject();\n                String attrs = CodegenProjectRowMapper.toString(project.getAttributes());\n                CharacterStreamArgument attributesClob = new CharacterStreamArgument(new StringReader(attrs), attrs.length());\n                String projectId = handle.createUpdate(statement)\n                      .bind(0, project.getCreatedBy())\n                      .bind(1, project.getCreatedOn())\n                      .bind(2, project.getCreatedBy())\n                      .bind(3, project.getCreatedOn())\n                      .bind(4, Long.valueOf(project.getDesignId()))\n                      .bind(5, project.getType().toString())\n                      .bind(6, attributesClob)\n                      .executeAndReturnGeneratedKeys(\"id\")\n                      .mapTo(String.class)\n                      .one();\n                return projectId;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error inserting codegen project.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#createCodegenProject(java.lang.String,io.apicurio.hub.core.beans.CodegenProject)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "236", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getCodegenProject", "methodParameterType": "String#String#String#", "methodParameterName": "userId#designId#projectId#", "methodBody": "@Override\n    public CodegenProject getCodegenProject(String userId, String designId, String projectId)\n            throws StorageException, NotFoundException {\n        logger.debug(\"Selecting a single codegen project for API Design: {}  with projectId: {}\", designId, projectId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectCodegenProject();\n                return handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId))\n                        .bind(1, Long.valueOf(projectId))\n                        .map(CodegenProjectRowMapper.instance)\n                        .one();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting invitations.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getCodegenProject(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "237", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.updateCodegenProject", "methodParameterType": "String#CodegenProject#", "methodParameterName": "userId#project#", "methodBody": "@Override\n    public void updateCodegenProject(String userId, CodegenProject project) throws StorageException, NotFoundException {\n        logger.debug(\"Updating a codegen project: {}\", project.getId());\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.updateCodegenProject();\n                String attrs = CodegenProjectRowMapper.toString(project.getAttributes());\n                CharacterStreamArgument attributesClob = new CharacterStreamArgument(new StringReader(attrs), attrs.length());\n                int rowCount = handle.createUpdate(statement)\n                        .bind(0, userId)\n                        .bind(1, new Date())\n                        .bind(2, project.getType().toString())\n                        .bind(3, attributesClob)\n                        .bind(4, Long.valueOf(project.getId()))\n                        .execute();\n                if (rowCount == 0) {\n                    throw new NotFoundException();\n                }\n                return null;\n            });\n        } catch (NotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new StorageException(\"Error updating an API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#updateCodegenProject(java.lang.String,io.apicurio.hub.core.beans.CodegenProject)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "238", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.deleteCodegenProject", "methodParameterType": "String#String#String#", "methodParameterName": "userId#designId#projectId#", "methodBody": "@Override\n    public void deleteCodegenProject(String userId, String designId, String projectId)\n            throws NotFoundException, StorageException {\n        logger.debug(\"Deleting a codegen project: {}\", projectId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.deleteCodegenProject();\n                handle.createUpdate(statement)\n                      .bind(0, Long.valueOf(projectId))\n                      .bind(1, Long.valueOf(designId))\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting a codegen project.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#deleteCodegenProject(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.deleteCodegenProjects", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "@Override\n    public void deleteCodegenProjects(String userId, String designId)\n            throws NotFoundException, StorageException {\n        logger.debug(\"Deleting all codegen projects for: {}\", designId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.deleteCodegenProjects();\n                handle.createUpdate(statement)\n                      .bind(0, Long.valueOf(designId))\n                      .execute();\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting a codegen project.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#deleteCodegenProjects(java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getLatestCommand", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Optional<ApiDesignCommand> getLatestCommand(String designId) throws NotFoundException, StorageException {\n        try {\n            return this.jdbi.withHandle(handle -> {\n                String statement = sqlStatements.selectLatestContentCommand();\n                Query query = handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId));\n                return query.map(ApiDesignCommandRowMapper.instance).findFirst();\n            });\n        } catch (IllegalStateException e) {\n            throw new NotFoundException();\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting content document.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getLatestCommand(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.listValidationProfiles", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "@Override\n    public Collection<ValidationProfile> listValidationProfiles(String userId) throws StorageException {\n        logger.debug(\"Getting a list of all validation profiles for {}.\", userId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectValidationProfiles();\n                return handle.createQuery(statement)\n                        .bind(0, userId)\n                        .map(ValidationProfileRowMapper.instance)\n                        .list();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error listing linked accounts.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#listValidationProfiles(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.createValidationProfile", "methodParameterType": "String#ValidationProfile#", "methodParameterName": "userId#profile#", "methodBody": "@Override\n    public long createValidationProfile(String userId, ValidationProfile profile) throws StorageException {\n        logger.debug(\"Inserting a validation profile for: {}  name: \", userId, profile.getName());\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.insertValidationProfile();\n                String severities = ValidationProfileRowMapper.toString(profile.getSeverities());\n                CharacterStreamArgument severitiesClob = new CharacterStreamArgument(new StringReader(severities), severities.length());\n                Long profileId = handle.createUpdate(statement)\n                      .bind(0, userId)\n                      .bind(1, profile.getName())\n                      .bind(2, profile.getDescription())\n                      .bind(3, severitiesClob)\n                      .executeAndReturnGeneratedKeys(\"id\")\n                      .mapTo(Long.class)\n                      .one();\n                return profileId;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error inserting codegen project.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#createValidationProfile(java.lang.String,io.apicurio.hub.core.beans.ValidationProfile)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "243", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.updateValidationProfile", "methodParameterType": "String#ValidationProfile#", "methodParameterName": "userId#profile#", "methodBody": "@Override\n    public void updateValidationProfile(String userId, ValidationProfile profile) throws StorageException, NotFoundException {\n        logger.debug(\"Updating a validation profile: {}\", profile.getId());\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.updateValidationProfile();\n                String severities = ValidationProfileRowMapper.toString(profile.getSeverities());\n                CharacterStreamArgument severitiesClob = new CharacterStreamArgument(new StringReader(severities), severities.length());\n                int rowCount = handle.createUpdate(statement)\n                        .bind(0, profile.getName())\n                        .bind(1, profile.getDescription())\n                        .bind(2, severitiesClob)\n                        .bind(3, profile.getId())\n                        .bind(4, userId)\n                        .execute();\n                if (rowCount == 0) {\n                    throw new NotFoundException();\n                }\n                return null;\n            });\n        } catch (NotFoundException nfe) {\n            throw nfe;\n        } catch (Exception e) {\n            throw new StorageException(\"Error updating an API design.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#updateValidationProfile(java.lang.String,io.apicurio.hub.core.beans.ValidationProfile)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.deleteValidationProfile", "methodParameterType": "String#long#", "methodParameterName": "userId#profileId#", "methodBody": "@Override\n    public void deleteValidationProfile(String userId, long profileId) throws StorageException, NotFoundException {\n        logger.debug(\"Deleting a validation profile for: {} with profileId: {}\", userId, profileId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.deleteValidationProfile();\n                int rowCount = handle.createUpdate(statement)\n                      .bind(0, profileId)\n                      .bind(1, userId)\n                      .execute();\n                if (rowCount == 0) {\n                    throw new NotFoundException();\n                }\n                return null;\n            });\n        } catch (NotFoundException nfe) {\n            throw nfe;\n        } catch (Exception e) {\n            throw new StorageException(\"Error deleting a codegen project.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#deleteValidationProfile(java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getSharingConfig", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public SharingConfiguration getSharingConfig(String designId) throws StorageException {\n        logger.debug(\"Getting sharing config for API Design: {}\", designId);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectSharingConfig();\n                Query query = handle.createQuery(statement)\n                        .bind(0, Long.valueOf(designId));\n                return query.map(SharingConfigurationRowMapper.instance).one();\n            });\n        } catch (IllegalStateException e) {\n            return null;\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting sharing config.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getSharingConfig(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "246", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.getSharingInfo", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "@Override\n    public SharingInfo getSharingInfo(String uuid) throws StorageException, NotFoundException {\n        logger.debug(\"Getting sharing info for UUID: {}\", uuid);\n        try {\n            return this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.selectSharingInfo();\n                Query query = handle.createQuery(statement)\n                        .bind(0, uuid);\n                return query.map(SharingInfoRowMapper.instance).one();\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error getting sharing info.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#getSharingInfo(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/JdbcStorage.java", "methodName": "io.apicurio.hub.core.storage.jdbc.JdbcStorage.setSharingConfig", "methodParameterType": "String#String#SharingLevel#", "methodParameterName": "designId#uuid#level#", "methodBody": "@Override\n    public void setSharingConfig(String designId, String uuid, SharingLevel level) throws StorageException {\n        logger.debug(\"Updating sharing settings for: {}\", designId);\n        try {\n            this.jdbi.withHandle( handle -> {\n                String statement = sqlStatements.upsertSharing();\n                Long did = Long.valueOf(designId);\n                if (sqlStatements.supportsUpsert()) {\n                    handle.createUpdate(statement)\n                            .bind(0, did)\n                            .bind(1, uuid)\n                            .bind(2, level.name())\n                            .bind(3, level.name())\n                            .execute();\n                } else {\n                    handle.createUpdate(statement)\n                            .bind(0, did)\n                            .bind(1, uuid)\n                            .bind(2, level.name())\n                            .execute();\n                }\n                return null;\n            });\n        } catch (Exception e) {\n            throw new StorageException(\"Error updating sharing config.\", e);\n        }        \n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.IStorage#setSharingConfig(java.lang.String,java.lang.String,io.apicurio.hub.core.beans.SharingLevel)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/MySQL5SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.MySQL5SqlStatements.MySQL5SqlStatements", "methodParameterType": "HubConfiguration#", "methodParameterName": "config#", "methodBody": "public MySQL5SqlStatements(HubConfiguration config) {\n        super(config);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/MySQL5SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.MySQL5SqlStatements.dbType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected String dbType() {\n        return \"mysql5\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.CommonSqlStatements#dbType()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/MySQL5SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.MySQL5SqlStatements.isDatabaseInitialized", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String isDatabaseInitialized() {\n        return \"SELECT count(*) AS count FROM information_schema.tables WHERE table_name = 'api_designs' LIMIT 1\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#isDatabaseInitialized()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/MySQL5SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.MySQL5SqlStatements.supportsUpsert", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean supportsUpsert() {\n        return true;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#supportsUpsert()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/MySQL5SqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.MySQL5SqlStatements.upsertSharing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String upsertSharing() {\n        return \"INSERT INTO sharing (design_id, uuid, level) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE level = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#upsertSharing()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "253", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.isDatabaseInitialized", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String isDatabaseInitialized();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement that returns 'true' if the database has already been initialized.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.databaseInitialization", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> databaseInitialization();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A sequence of statements needed to initialize the database.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "255", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.databaseUpgrade", "methodParameterType": "int#int#", "methodParameterName": "fromVersion#toVersion#", "methodBody": "public List<String> databaseUpgrade(int fromVersion, int toVersion);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "A sequence of statements needed to upgrade the DB from one version to another.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "256", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.getDatabaseVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDatabaseVersion();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement that returns the current DB version (pulled from the \"apicurio\" attribute table).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "257", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertLinkedAccount();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a row into the accounts table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "258", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectLinkedAccounts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectLinkedAccounts();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select all API designs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectLinkedAccountByType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectLinkedAccountByType();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select a single Linked Account by its type (and user).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteLinkedAccount();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete a row from the accounts table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "261", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteLinkedAccounts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteLinkedAccounts();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete all rows from the accounts table (per user).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.updateLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String updateLinkedAccount();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to update information about a linked account.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "263", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertApiDesign", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertApiDesign();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a row into the api_designs table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "264", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteApiDesign", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteApiDesign();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete a row from the api_designs table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectApiDesigns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectApiDesigns();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select all API designs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "266", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectApiDesignById", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectApiDesignById();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select a single API design by its unique id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.updateApiDesign", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String updateApiDesign();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to update a single API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "268", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.updateCollaborationInvitationStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String updateCollaborationInvitationStatus();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to update the status of an invitation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "269", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteSharingConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteSharingConfig();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete the sharing config for a design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "270", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectSharingConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectSharingConfig();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets sharing config for an API design by design id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "271", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectSharingInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectSharingInfo();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets sharing info for an API design by sharing UUID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "272", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.upsertSharing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String upsertSharing();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to update a row in the sharing table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "273", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertAcl();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a row into the acl table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "274", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.updateAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String updateAcl();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to update a row in the acl table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteAcl();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete a row from the acl table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "276", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertContent();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a content row.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "277", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.undoContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String undoContent();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to undo some content.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.redoContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String redoContent();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to redo some content.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "279", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.clearAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String clearAcl();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete all acl rows for an api design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.clearInvitations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String clearInvitations();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete all acl_invites rows for an api design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.clearContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String clearContent();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete all api_content rows for a given api design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.hasOwnerPermission", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String hasOwnerPermission();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to determine if a user has ownership permission on an API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "283", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectPermissions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectPermissions();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return all rows in the ACL table for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "284", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.hasWritePermission", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String hasWritePermission();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to determine if a user has write permission on an API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "285", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectApiDesignContributors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectApiDesignContributors();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return all contributors (editors) of a given API Design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "286", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectLatestContentDocument", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectLatestContentDocument();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return the latest 'document' style api_content row for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectLatestContentDocumentForSharing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectLatestContentDocumentForSharing();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return the latest 'document' style api_content row for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "288", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectContentCommands", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectContentCommands();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return all of the 'command' style api_content rows for a given API Design (excludes reverted commands).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectAllContentCommands", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectAllContentCommands();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return all of the 'command' style api_content rows for a given API Design, including reverted commands.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectCollaborationInvitations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectCollaborationInvitations();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return all of the collaboration invitations for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "291", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectCollaborationInvitation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectCollaborationInvitation();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to return a single collaboration invitation by its ID for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertCollaborationInvitation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertCollaborationInvitation();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a collaboration invitation row into the db.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertEditingSessionUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertEditingSessionUuid();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a new row in the 'session_uuids' table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "294", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectEditingSessionUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectEditingSessionUuid();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select a unique editing session UUID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "295", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteEditingSessionUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteEditingSessionUuid();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete a unique editing session UUID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "296", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectApiDesignActivity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectApiDesignActivity();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select rows from the api_content table (limited by a range) per API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "297", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectUserActivity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectUserActivity();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select rows from the api_content table (limited by a range) per user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "298", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectApiPublicationActivity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectApiPublicationActivity();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select rows from the api_content table (limited by a range).  Selects only the publication rows.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "299", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectApiPublicationActivityByUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectApiPublicationActivityByUser();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select rows from the api_content table (limited by a range).  Selects only the publication rows.  Filters by user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "300", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectApiMockActivity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectApiMockActivity();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select rows from the api_content table (limited by a range).  Selects  only the mock rows.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectRecentApiDesigns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectRecentApiDesigns();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select the most recent 5 APIs for a given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "302", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectCodegenProjects", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectCodegenProjects();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select the codegen projects for an API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "303", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectCodegenProject();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select a single codegen project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertCodegenProject();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a single row on the codegen table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.updateCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String updateCodegenProject();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to update a row in the codegen table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteCodegenProject();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete a single row in the codegen table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteCodegenProjects", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteCodegenProjects();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete all rows in the codegen table for a single design_id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectLatestContentCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectLatestContentCommand();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select the latest command for a single design_id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "309", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.selectValidationProfiles", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String selectValidationProfiles();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to select all validation profiles for a user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.insertValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String insertValidationProfile();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to insert a single row on the validation profiles table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.updateValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String updateValidationProfile();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to update a row in the validation profiles table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.deleteValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deleteValidationProfile();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "A statement used to delete a single row in the validation profiles table.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "313", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/ISqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.ISqlStatements.supportsUpsert", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean supportsUpsert();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the DB supports standard \"upsert\" syntax (e.g. mysql and postgresql).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/SqlStatementsProducer.java", "methodName": "io.apicurio.hub.core.storage.jdbc.SqlStatementsProducer.createSqlStatements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Produces @ApplicationScoped\n    public ISqlStatements createSqlStatements() {\n        logger.debug(\"Creating an instance of ISqlStatements for DB: \" + config.getJdbcType());\n        switch (config.getJdbcType()) {\n            case \"h2\":\n                return new H2SqlStatements(config);\n            case \"mysql5\":\n                return new MySQL5SqlStatements(config);\n            case \"postgresql9\":\n                return new PostgreSQL9SqlStatements(config);\n            default:\n                throw new RuntimeException(\"Unsupported JDBC type: \" + config.getJdbcType());\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#StringLiteral#SwitchCase#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#StringLiteral#SwitchCase#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#StringLiteral#SwitchCase#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Produces an  {@link ISqlStatements} instance for injection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/IDbUpgrader.java", "methodName": "io.apicurio.hub.core.storage.jdbc.IDbUpgrader.upgrade", "methodParameterType": "Handle#", "methodParameterName": "dbHandle#", "methodBody": "public void upgrade(Handle dbHandle) throws Exception;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called by the  {@link JdbcStorage} class when upgrading the database.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiDesignChangeRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiDesignChangeRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ApiDesignChange map(ResultSet rs, StatementContext ctx) throws SQLException {\n        try {\n            ApiDesignChange change = new ApiDesignChange();\n            change.setApiId(rs.getString(\"design_id\"));\n            change.setApiName(rs.getString(\"name\"));\n            change.setBy(rs.getString(\"created_by\"));\n            change.setData(IOUtils.toString(rs.getCharacterStream(\"data\")));\n            change.setOn(rs.getTimestamp(\"created_on\"));\n            change.setType(ApiContentType.fromId(rs.getInt(\"type\")));\n            change.setVersion(rs.getLong(\"version\"));\n            return change;\n        } catch (IOException e) {\n            throw new SQLException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiDesignRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiDesignRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ApiDesign map(ResultSet rs, StatementContext ctx) throws SQLException {\n        ApiDesign design = new ApiDesign();\n        design.setId(rs.getString(\"id\"));\n        design.setName(rs.getString(\"name\"));\n        design.setDescription(rs.getString(\"description\"));\n        design.setCreatedBy(rs.getString(\"created_by\"));\n        design.setCreatedOn(rs.getTimestamp(\"created_on\"));\n        String tags = rs.getString(\"tags\");\n        design.getTags().addAll(toSet(tags));\n        design.setType(ApiDesignType.valueOf(rs.getString(\"api_type\")));\n        return design;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiDesignRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiDesignRowMapper.toSet", "methodParameterType": "String#", "methodParameterName": "tags#", "methodBody": "private Set<String> toSet(String tags) {\n        Set<String> rval = new HashSet<String>();\n        if (tags != null && tags.length() > 0) {\n            String[] split = tags.split(\",\");\n            for (String tag : split) {\n                rval.add(tag.trim());\n            }\n        }\n        return rval;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read CSV data and convert to a set of strings.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "319", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiDesignContentRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiDesignContentRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ApiDesignContent map(ResultSet rs, StatementContext ctx) throws SQLException {\n        try {\n            ApiDesignContent content = new ApiDesignContent();\n            content.setContentVersion(rs.getLong(\"version\"));\n            content.setDocument(IOUtils.toString(rs.getCharacterStream(\"data\")));\n            return content;\n        } catch (IOException e) {\n            throw new SQLException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "320", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiDesignCommandRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiDesignCommandRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ApiDesignCommand map(ResultSet rs, StatementContext ctx) throws SQLException {\n        try {\n            ApiDesignCommand cmd = new ApiDesignCommand();\n            cmd.setContentVersion(rs.getLong(\"version\"));\n            cmd.setCommand(IOUtils.toString(rs.getCharacterStream(\"data\")));\n            cmd.setAuthor(rs.getString(\"created_by\"));\n            cmd.setReverted(rs.getInt(\"reverted\") > 0);\n            return cmd;\n        } catch (IOException e) {\n            throw new SQLException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/CodegenProjectRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.CodegenProjectRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public CodegenProject map(ResultSet rs, StatementContext ctx) throws SQLException {\n        try {\n            CodegenProject project = new CodegenProject();\n            project.setId(String.valueOf(rs.getLong(\"id\")));\n            project.setCreatedBy(rs.getString(\"created_by\"));\n            project.setCreatedOn(rs.getTimestamp(\"created_on\"));\n            project.setModifiedBy(rs.getString(\"modified_by\"));\n            project.setModifiedOn(rs.getTimestamp(\"modified_on\"));\n            project.setDesignId(String.valueOf(rs.getLong(\"design_id\")));\n            project.setType(CodegenProjectType.valueOf(rs.getString(\"ptype\")));\n            project.setAttributes(toMap(IOUtils.toString(rs.getCharacterStream(\"attributes\"))));\n            return project;\n        } catch (IOException e) {\n            throw new SQLException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ValidationProfileRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ValidationProfileRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ValidationProfile map(ResultSet rs, StatementContext ctx) throws SQLException {\n        try {\n            ValidationProfile profile = new ValidationProfile();\n            profile.setId(rs.getLong(\"id\"));\n            profile.setName(rs.getString(\"name\"));\n            profile.setDescription(rs.getString(\"description\"));\n            profile.setSeverities(ValidationProfileRowMapper.toSeverities(IOUtils.toString(rs.getCharacterStream(\"severities\"))));\n            return profile;\n        } catch (IOException e) {\n            throw new SQLException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "323", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/SharingInfoRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.SharingInfoRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public SharingInfo map(ResultSet rs, StatementContext ctx) throws SQLException {\n        SharingInfo design = new SharingInfo();\n        design.setDesignId(rs.getString(\"design_id\"));\n        design.setShareUuid(rs.getString(\"uuid\"));\n        design.setLevel(SharingLevel.valueOf(rs.getString(\"level\")));\n        return design;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/SharingConfigurationRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.SharingConfigurationRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public SharingConfiguration map(ResultSet rs, StatementContext ctx) throws SQLException {\n        SharingConfiguration design = new SharingConfiguration();\n        design.setUuid(rs.getString(\"uuid\"));\n        design.setLevel(SharingLevel.valueOf(rs.getString(\"level\")));\n        return design;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "325", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiMockRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiMockRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ApiMock map(ResultSet rs, StatementContext ctx) throws SQLException {\n        try {\n            ApiMock publication = new ApiMock();\n            publication.setBy(rs.getString(\"created_by\"));\n            publication.setInfo(IOUtils.toString(rs.getCharacterStream(\"data\")));\n            publication.setOn(rs.getTimestamp(\"created_on\"));\n            return publication;\n        } catch (IOException e) {\n            throw new SQLException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "326", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/InvitationRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.InvitationRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public Invitation map(ResultSet rs, StatementContext ctx) throws SQLException {\n        Invitation invite = new Invitation();\n        invite.setCreatedBy(rs.getString(\"created_by\"));\n        invite.setCreatedOn(rs.getTimestamp(\"created_on\"));\n        invite.setDesignId(rs.getString(\"design_id\"));\n        invite.setInviteId(rs.getString(\"invite_id\"));\n        invite.setModifiedBy(rs.getString(\"modified_by\"));\n        invite.setModifiedOn(rs.getTimestamp(\"modified_on\"));\n        invite.setStatus(rs.getString(\"status\"));\n        invite.setRole(rs.getString(\"role\"));\n        invite.setSubject(rs.getString(\"subject\"));\n        return invite;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "327", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiDesignCollaboratorRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiDesignCollaboratorRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ApiDesignCollaborator map(ResultSet rs, StatementContext ctx) throws SQLException {\n        ApiDesignCollaborator collaborator = new ApiDesignCollaborator();\n        collaborator.setUserName(rs.getString(\"user_id\"));\n        collaborator.setUserId(rs.getString(\"user_id\"));\n        collaborator.setRole(rs.getString(\"role\"));\n        return collaborator;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "328", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ContributorRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ContributorRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public Contributor map(ResultSet rs, StatementContext ctx) throws SQLException {\n        Contributor contributor = new Contributor();\n        contributor.setName(rs.getString(\"created_by\"));\n        contributor.setEdits(rs.getInt(\"edits\"));\n        return contributor;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "329", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/mappers/ApiPublicationRowMapper.java", "methodName": "io.apicurio.hub.core.storage.jdbc.mappers.ApiPublicationRowMapper.map", "methodParameterType": "ResultSet#StatementContext#", "methodParameterName": "rs#ctx#", "methodBody": "@Override\n    public ApiPublication map(ResultSet rs, StatementContext ctx) throws SQLException {\n        try {\n            ApiPublication publication = new ApiPublication();\n            publication.setBy(rs.getString(\"created_by\"));\n            publication.setInfo(IOUtils.toString(rs.getCharacterStream(\"data\")));\n            publication.setOn(rs.getTimestamp(\"created_on\"));\n            return publication;\n        } catch (IOException e) {\n            throw new SQLException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see org.jdbi.v3.core.mapper.RowMapper#map(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "330", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/upgraders/ApiDesignTypeUpgrader.java", "methodName": "io.apicurio.hub.core.storage.jdbc.upgraders.ApiDesignTypeUpgrader.upgrade", "methodParameterType": "Handle#", "methodParameterName": "dbHandle#", "methodBody": "@Override\n    public void upgrade(Handle dbHandle) throws Exception {\n        logger.debug(\"Setting the value of 'api_type' for all rows in 'api_designs'.\");\n\n        // Explanation of query:\n        //   - Select all rows from api_designs (we want to update the \"api_type\" column for each such row)\n        //   - Include in the result set the raw content (any \"Document\" row from the api_content table)\n        String query = \"SELECT d.* FROM api_designs d WHERE d.api_type IS NULL\";\n\n        Connection connection = dbHandle.getConnection();\n        Statement statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);\n        ResultSet resultSet = statement.executeQuery(query);\n        \n        long rowCount = 0;\n        while (resultSet.next()) {\n            String designId = resultSet.getString(\"id\");\n            ApiDesignType apiType = getApiType(dbHandle, designId);\n            resultSet.updateString(\"api_type\", apiType.name());\n            resultSet.updateRow();\n            rowCount++;\n        }\n        \n        logger.debug(\"Updated \" + rowCount + \" rows (added api_type column to every row).\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.IDbUpgrader#upgrade(org.jdbi.v3.core.Handle)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "331", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/upgraders/ApiDesignTypeUpgrader.java", "methodName": "io.apicurio.hub.core.storage.jdbc.upgraders.ApiDesignTypeUpgrader.getApiType", "methodParameterType": "Handle#String#", "methodParameterName": "dbHandle#designId#", "methodBody": "private ApiDesignType getApiType(Handle dbHandle, String designId) {\n        String query = \"SELECT c.data FROM api_content c WHERE c.type = 0 AND c.design_id = ? LIMIT 1\";\n        String content = dbHandle.createQuery(query)\n            .bind(0, Long.parseLong(designId))\n            .map(new RowMapper<String>() {\n                @Override\n                public String map(ResultSet rs, StatementContext ctx) throws SQLException {\n                    try {\n                        return IOUtils.toString(rs.getCharacterStream(\"data\"));\n                    } catch (IOException e) {\n                        throw new SQLException(\"Error reading data from 'api_content'.\", e);\n                    }\n                }\n            })\n            .one();\n        try {\n            ApiDesignResourceInfo info = ApiDesignResourceInfo.fromContent(content);\n            return info.getType();\n        } catch (Exception e) {\n            logger.error(\"Error determining specification type from content for API with ID: \" + designId, e);\n            return ApiDesignType.OpenAPI20;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Figures out the right API type by loading the actual content of the API, parsing it, and  checking the spec version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "332", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.CommonSqlStatements", "methodParameterType": "HubConfiguration#", "methodParameterName": "config#", "methodBody": "public CommonSqlStatements(HubConfiguration config) {\n        this.shareForEveryone = config.isShareForEveryone();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.dbType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String dbType();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the database type identifier.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "334", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.databaseInitialization", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public List<String> databaseInitialization() {\n        DdlParser parser = new DdlParser();\n        try (InputStream input = getClass().getResourceAsStream(\"hub_\" + dbType() + \".ddl\")) {\n            return parser.parse(input);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#databaseInitialization()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "335", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.databaseUpgrade", "methodParameterType": "int#int#", "methodParameterName": "fromVersion#toVersion#", "methodBody": "@Override\n    public List<String> databaseUpgrade(int fromVersion, int toVersion) {\n        List<String> statements = new ArrayList<>();\n        DdlParser parser = new DdlParser();\n        \n        for (int version = fromVersion + 1; version <= toVersion; version++) {\n            try (InputStream input = getClass().getResourceAsStream(\"upgrade-\" + version + \"_\" + dbType() + \".ddl\")) {\n                statements.addAll(parser.parse(input));\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        \n        return statements;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#databaseUpgrade(int,int)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "336", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.getDatabaseVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDatabaseVersion() {\n        return \"SELECT a.prop_value FROM apicurio a WHERE a.prop_name = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#getDatabaseVersion()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "337", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertLinkedAccount() {\n        return \"INSERT INTO accounts (user_id, type, linked_on, used_on, nonce) VALUES (?, ?, ?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertLinkedAccount()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "338", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectLinkedAccountByType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectLinkedAccountByType() {\n        return \"SELECT a.* FROM accounts a WHERE a.user_id = ? AND a.type = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectLinkedAccountByType()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "339", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.updateLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String updateLinkedAccount() {\n        return \"UPDATE accounts SET used_on = ?, linked_on = ?, nonce = ? WHERE user_id = ? AND type = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#updateLinkedAccount()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "340", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectLinkedAccounts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectLinkedAccounts() {\n        return \"SELECT a.* FROM accounts a WHERE a.user_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectLinkedAccounts()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "341", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteLinkedAccount() {\n        return \"DELETE FROM accounts WHERE user_id = ? AND type = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteLinkedAccount()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "342", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteLinkedAccounts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteLinkedAccounts() {\n        return \"DELETE FROM accounts WHERE user_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteLinkedAccounts()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "343", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertApiDesign", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertApiDesign() {\n        return \"INSERT INTO api_designs (name, description, created_by, created_on, tags, api_type) VALUES (?, ?, ?, ?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertApiDesign()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "344", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteApiDesign", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteApiDesign() {\n        return \"DELETE FROM api_designs WHERE id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteApiDesign()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "345", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectApiDesigns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectApiDesigns() {\n    \tif (shareForEveryone) {\n    \t\treturn \"SELECT d.* FROM api_designs d\";\n    \t}\n        return \"SELECT d.* FROM api_designs d JOIN acl a ON a.design_id = d.id WHERE a.user_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#ReturnStatement#Block#IfStatement#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectApiDesigns()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "346", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectApiDesignById", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectApiDesignById() {\n    \tif (shareForEveryone) {\n    \t\treturn \"SELECT d.* FROM api_designs d WHERE d.id = ?\";\n    \t}\n        return \"SELECT d.* FROM api_designs d JOIN acl a ON a.design_id = d.id WHERE d.id = ? AND a.user_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#ReturnStatement#Block#IfStatement#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectApiDesignById()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "347", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.updateApiDesign", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String updateApiDesign() {\n        return \"UPDATE api_designs SET name = ?, description = ?, tags = ? WHERE id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#updateApiDesign()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "348", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertContent() {\n        return \"INSERT INTO api_content (design_id, type, data, created_by, created_on) VALUES (?, ?, ?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertContent()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "349", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.undoContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String undoContent() {\n        return \"UPDATE api_content SET reverted = 1, modified_on = ? WHERE reverted = 0 AND created_by = ? AND design_id = ? AND version = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#undoContent()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "350", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.redoContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String redoContent() {\n        return \"UPDATE api_content SET reverted = 0, modified_on = ? WHERE reverted = 1 AND created_by = ? AND design_id = ? AND version = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#redoContent()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "351", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertAcl() {\n        return \"INSERT INTO acl (user_id, design_id, role) VALUES (?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertAcl()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "352", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteAcl() {\n        return \"DELETE FROM acl WHERE user_id = ? AND design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteAcl()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "353", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.updateAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String updateAcl() {\n        return \"UPDATE acl SET role = ? WHERE user_id = ? AND design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#updateAcl()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "354", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.clearContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String clearContent() {\n        return \"DELETE FROM api_content WHERE design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#clearContent()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "355", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.clearAcl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String clearAcl() {\n        return \"DELETE FROM acl WHERE design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#clearAcl()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "356", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.clearInvitations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String clearInvitations() {\n        return \"DELETE FROM acl_invites WHERE design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#clearInvitations()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "357", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.hasOwnerPermission", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String hasOwnerPermission() {\n        return \"SELECT COUNT(*) \"\n                + \"FROM acl a \"\n                + \"WHERE a.design_id = ? AND a.user_id = ? AND a.role = 'owner'\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#hasOwnerPermission()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "358", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.hasWritePermission", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String hasWritePermission() {\n        return \"SELECT COUNT(*) \"\n                + \"FROM acl a \"\n                + \"WHERE a.design_id = ? AND a.user_id = ? AND (a.role = 'owner' OR a.role = 'collaborator')\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#hasWritePermission()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "359", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectPermissions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectPermissions() {\n        return \"SELECT a.* FROM acl a WHERE a.design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectPermissions()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "360", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectApiDesignContributors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectApiDesignContributors() {\n        // TODO order by the # of edits and LIMIT the results to 5\n        if (shareForEveryone) {\n            return \"SELECT DISTINCT COUNT(c.created_by) as edits, c.created_by \"\n                    + \"FROM api_content c \"\n                    + \"WHERE c.design_id = ? \"\n                    + \"GROUP BY c.created_by\";\n        } else {\n            return \"SELECT DISTINCT COUNT(c.created_by) as edits, c.created_by \"\n                    + \"FROM api_content c \"\n                    + \"JOIN acl a ON a.design_id = c.design_id \"\n                    + \"WHERE c.design_id = ? AND a.user_id = ? \"\n                    + \"GROUP BY c.created_by\";\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectApiDesignContributors()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "361", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectLatestContentDocument", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectLatestContentDocument() {\n    \tif (shareForEveryone) {\n    \t\treturn \"SELECT c.* \"\n                    + \"FROM api_content c \"\n                    + \"WHERE c.design_id = ? AND c.type = 0 \"\n                    + \"ORDER BY c.version DESC LIMIT 1\";\n    \t}\n        return \"SELECT c.* \"\n                + \"FROM api_content c \"\n                + \"JOIN acl a ON a.design_id = c.design_id \"\n                + \"WHERE c.design_id = ? AND c.type = 0 AND a.user_id = ? \"\n                + \"ORDER BY c.version DESC LIMIT 1\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#IfStatement#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectLatestContentDocument()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "362", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectLatestContentDocumentForSharing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectLatestContentDocumentForSharing() {\n        return \"SELECT c.* \"\n                + \"FROM api_content c \"\n                + \"JOIN sharing s ON s.design_id = c.design_id \"\n                + \"WHERE s.uuid = ? AND s.level = 'DOCUMENTATION' AND c.type = 0 \"\n                + \"ORDER BY c.version DESC LIMIT 1\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectLatestContentDocumentForSharing()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "363", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectLatestContentCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectLatestContentCommand() {\n        return \"SELECT c.* \"\n                + \"FROM api_content c \"\n                + \"WHERE c.design_id = ? AND c.type = 1 \"\n                + \"ORDER BY c.version DESC LIMIT 1\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see ISqlStatements#selectLatestContentCommand()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "364", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectContentCommands", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectContentCommands() {\n    \tif (shareForEveryone) {\n    \t\treturn \"SELECT c.* \"\n                    + \"FROM api_content c \"\n                    + \"WHERE c.reverted = 0 AND c.design_id = ? AND c.type = 1 AND c.version > ? \"\n                    + \"ORDER BY c.version ASC\";\n    \t}\n        return \"SELECT c.* \"\n                + \"FROM api_content c \"\n                + \"JOIN acl a ON a.design_id = c.design_id \"\n                + \"WHERE c.reverted = 0 AND c.design_id = ? AND c.type = 1 AND c.version > ? AND a.user_id = ? \"\n                + \"ORDER BY c.version ASC\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#IfStatement#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectContentCommands()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectAllContentCommands", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectAllContentCommands() {\n        if (shareForEveryone) {\n            return \"SELECT c.* \"\n                    + \"FROM api_content c \"\n                    + \"WHERE c.design_id = ? AND c.type = 1 AND c.version > ? \"\n                    + \"ORDER BY c.version ASC\";\n        }\n        return \"SELECT c.* \"\n                + \"FROM api_content c \"\n                + \"JOIN acl a ON a.design_id = c.design_id \"\n                + \"WHERE c.design_id = ? AND c.type = 1 AND a.user_id = ? AND c.version > ? \"\n                + \"ORDER BY c.version ASC\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#IfStatement#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectAllContentCommands()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertEditingSessionUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertEditingSessionUuid() {\n        return \"INSERT INTO session_uuids (uuid, design_id, user_id, secret, version, expires_on) VALUES (?, ?, ?, ?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertEditingSessionUuid()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "367", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectEditingSessionUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectEditingSessionUuid() {\n        return \"SELECT u.version \"\n                + \"FROM session_uuids u \"\n                + \"WHERE u.uuid = ? AND u.design_id = ? AND u.secret = ? AND u.expires_on > ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectEditingSessionUuid()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "368", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.updateCollaborationInvitationStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String updateCollaborationInvitationStatus() {\n        return \"UPDATE acl_invites SET status = ?, modified_by = ?, modified_on = ? WHERE invite_id = ? AND status = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#updateCollaborationInvitationStatus()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "369", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertCollaborationInvitation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertCollaborationInvitation() {\n        return \"INSERT INTO acl_invites (created_by, created_on, created_by_display, design_id, role, invite_id, status, subject) \"\n                  + \"VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertCollaborationInvitation()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "370", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectCollaborationInvitations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectCollaborationInvitations() {\n        return \"SELECT i.* \"\n                + \"FROM acl_invites i \"\n                + \"JOIN acl a ON a.design_id = i.design_id \"\n                + \"WHERE i.design_id = ? AND a.user_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectCollaborationInvitations()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "371", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectCollaborationInvitation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectCollaborationInvitation() {\n        return \"SELECT i.* \"\n                + \"FROM acl_invites i \"\n                + \"WHERE i.design_id = ? AND i.invite_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectCollaborationInvitation()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteEditingSessionUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteEditingSessionUuid() {\n        return \"DELETE FROM session_uuids WHERE uuid = ? AND design_id = ? AND secret = ? AND expires_on > ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteEditingSessionUuid()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "373", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectApiDesignActivity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectApiDesignActivity() {\n        return \"SELECT c.*, d.name \"\n        \t\t+ \"FROM api_content c \"\n                + \"JOIN api_designs d ON d.id = c.design_id \"\n        \t\t+ \"WHERE c.design_id = ? \"\n        \t\t+ \"  AND (c.type = 1 OR c.type = 2 OR c.type = 3) \"\n        \t\t+ \"  AND c.reverted = 0 \"\n        \t\t+ \"ORDER BY created_on DESC LIMIT ? OFFSET ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectApiDesignActivity()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectApiPublicationActivity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectApiPublicationActivity() {\n        return \"SELECT c.* FROM api_content c WHERE c.design_id = ? AND c.type = 2 ORDER BY created_on DESC LIMIT ? OFFSET ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectApiPublicationActivity()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectApiPublicationActivityByUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectApiPublicationActivityByUser() {\n        return \"SELECT c.* FROM api_content c WHERE c.design_id = ? AND c.created_by = ? AND c.type = 2 ORDER BY created_on DESC LIMIT ? OFFSET ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectApiPublicationActivityByUser()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "376", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectApiMockActivity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectApiMockActivity() {\n        return \"SELECT c.* FROM api_content c WHERE c.design_id = ? AND c.type = 3 ORDER BY created_on DESC LIMIT ? OFFSET ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectApiMockActivity()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "377", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectCodegenProjects", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectCodegenProjects() {\n        return \"SELECT c.* FROM codegen c WHERE c.design_id = ? ORDER BY c.modified_on DESC\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectCodegenProjects()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "378", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectCodegenProject() {\n        return \"SELECT c.* FROM codegen c WHERE c.design_id = ? AND c.id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectCodegenProject()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "379", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertCodegenProject() {\n        return \"INSERT INTO codegen (created_by, created_on, modified_by, modified_on, design_id, ptype, attributes) VALUES (?, ?, ?, ?, ?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertCodegenProject()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "380", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.updateCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String updateCodegenProject() {\n        return \"UPDATE codegen SET modified_by = ?, modified_on = ?, ptype = ?, attributes = ? WHERE id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#updateCodegenProject()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "381", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteCodegenProject() {\n        return \"DELETE FROM codegen WHERE id = ? AND design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteCodegenProject()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "382", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteCodegenProjects", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteCodegenProjects() {\n        return \"DELETE FROM codegen WHERE design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteCodegenProjects()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "383", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectValidationProfiles", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectValidationProfiles() {\n        return \"SELECT * FROM validation_profiles WHERE owner = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectValidationProfiles()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "384", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.insertValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String insertValidationProfile() {\n        return \"INSERT INTO validation_profiles (owner, name, description, severities) VALUES (?, ?, ?, ?)\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#insertValidationProfile()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "385", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.updateValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String updateValidationProfile() {\n        return \"UPDATE validation_profiles SET name = ?, description = ?, severities = ? WHERE id = ? AND owner = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#updateValidationProfile()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "386", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteValidationProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteValidationProfile() {\n        return \"DELETE FROM validation_profiles WHERE id = ? AND owner = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteValidationProfile()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.deleteSharingConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String deleteSharingConfig() {\n        return \"DELETE FROM sharing WHERE design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#deleteSharingConfig()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectSharingConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectSharingConfig() {\n        return \"SELECT * FROM sharing WHERE design_id = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectSharingConfig()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "389", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/CommonSqlStatements.java", "methodName": "io.apicurio.hub.core.storage.jdbc.CommonSqlStatements.selectSharingInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String selectSharingInfo() {\n        return \"SELECT * FROM sharing WHERE uuid = ?\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.storage.jdbc.ISqlStatements#selectSharingInfo()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "390", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/DdlParser.java", "methodName": "io.apicurio.hub.core.storage.jdbc.DdlParser.DdlParser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DdlParser() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "391", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/DdlParser.java", "methodName": "io.apicurio.hub.core.storage.jdbc.DdlParser.parse", "methodParameterType": "File#", "methodParameterName": "ddlFile#", "methodBody": "public List<String> parse(File ddlFile) {\n        try (InputStream is = new FileInputStream(ddlFile)) {\n            return parse(is);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@param ddlFile", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/jdbc/DdlParser.java", "methodName": "io.apicurio.hub.core.storage.jdbc.DdlParser.parse", "methodParameterType": "InputStream#", "methodParameterName": "ddlStream#", "methodBody": "public List<String> parse(InputStream ddlStream) throws IOException {\n        List<String> rval = new LinkedList<>();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(ddlStream, StandardCharsets.UTF_8));\n        String line;\n        StringBuilder builder = new StringBuilder();\n        boolean isInMultiLineStatement = false;\n        while ( (line = reader.readLine()) != null) {\n            if (line.startsWith(\"--\")) {\n                continue;\n            }\n            if (line.trim().isEmpty() && !isInMultiLineStatement) {\n                continue;\n            }\n            if (line.trim().isEmpty() && isInMultiLineStatement) {\n                isInMultiLineStatement = false;\n            }\n            if (line.endsWith(\"'\") || line.endsWith(\"(\")) {\n                isInMultiLineStatement = true;\n            }\n            if (line.startsWith(\"'\") || line.startsWith(\")\")) {\n                isInMultiLineStatement = false;\n            }\n            if (line.startsWith(\"CREATE FUNCTION\")) {\n                isInMultiLineStatement = true;\n            }\n            builder.append(line);\n            builder.append(\"\\n\");\n\n            if (!isInMultiLineStatement) {\n                String sqlStatement = builder.toString().trim();\n                if (sqlStatement.endsWith(\";\")) {\n                    sqlStatement = sqlStatement.substring(0, sqlStatement.length() - 1);\n                }\n                rval.add(sqlStatement);\n                builder = new StringBuilder();\n            }\n        }\n        return rval;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#PrefixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param ddlStream", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/StorageException.java", "methodName": "io.apicurio.hub.core.storage.StorageException.StorageException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public StorageException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/StorageException.java", "methodName": "io.apicurio.hub.core.storage.StorageException.StorageException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public StorageException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.hasOwnerPermission", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public boolean hasOwnerPermission(String userId, String designId) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns true if the given user has ownership permission over the API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public boolean hasWritePermission(String userId, String designId) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns true if the given user has write permission over the API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listPermissions", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public Collection<ApiDesignCollaborator> listPermissions(String designId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of all collaborators for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.createPermission", "methodParameterType": "String#String#String#", "methodParameterName": "designId#userId#permission#", "methodBody": "public void createPermission(String designId, String userId, String permission) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a permission for a single user for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "399", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.updatePermission", "methodParameterType": "String#String#String#", "methodParameterName": "designId#userId#permission#", "methodBody": "public void updatePermission(String designId, String userId, String permission) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Changes the permission of a given user.  For example, this might change a user's permission from 'collaborator' to 'owner'.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "400", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.deletePermission", "methodParameterType": "String#String#", "methodParameterName": "designId#userId#", "methodBody": "public void deletePermission(String designId, String userId) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes a permission.  This will typically revoke a user's access to an API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.createLinkedAccount", "methodParameterType": "String#LinkedAccount#", "methodParameterName": "userId#account#", "methodBody": "public void createLinkedAccount(String userId, LinkedAccount account) throws AlreadyExistsException, StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a linked account for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "402", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listLinkedAccounts", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public Collection<LinkedAccount> listLinkedAccounts(String userId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of linked accounts for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "403", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.deleteLinkedAccount", "methodParameterType": "String#LinkedAccountType#", "methodParameterName": "userId#type#", "methodBody": "public void deleteLinkedAccount(String userId, LinkedAccountType type) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes a single linked account for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.deleteLinkedAccounts", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public void deleteLinkedAccounts(String userId) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes all linked accounts for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getLinkedAccount", "methodParameterType": "String#LinkedAccountType#", "methodParameterName": "userId#type#", "methodBody": "public LinkedAccount getLinkedAccount(String userId, LinkedAccountType type) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets a single linked account for a user by its type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.updateLinkedAccount", "methodParameterType": "String#LinkedAccount#", "methodParameterName": "userId#account#", "methodBody": "public void updateLinkedAccount(String userId, LinkedAccount account) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Updates a linked account.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getApiDesign", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public ApiDesign getApiDesign(String userId, String designId) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets a single API Design from the storage layer by its unique ID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listContributors", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public Collection<Contributor> listContributors(String userId, String designId) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the list of users who have collaborated to edit the given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.createApiDesign", "methodParameterType": "String#ApiDesign#String#", "methodParameterName": "userId#design#initialApiDocument#", "methodBody": "public String createApiDesign(String userId, ApiDesign design, String initialApiDocument) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a new API Design in the storage layer and returns a new unique Design ID.  This ID should be used in the future to retrieve information about the design (and to delete or update it). Initial content for the API must be provided (in the form of an OAI 2.0 or 3.0.0 document).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "410", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.deleteApiDesign", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public void deleteApiDesign(String userId, String designId) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes a single API Design by its unique ID.  Throws an exception if no design was found.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "411", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.updateApiDesign", "methodParameterType": "String#ApiDesign#", "methodParameterName": "userId#design#", "methodBody": "public void updateApiDesign(String userId, ApiDesign design) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Updates a single API design.  An exception is thrown if no design for the given ID was found.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listApiDesigns", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public Collection<ApiDesign> listApiDesigns(String userId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of API Designs accessible by the currently authenticated user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "413", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getRecentApiDesigns", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public Collection<ApiDesign> getRecentApiDesigns(String userId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of API Designs that represent the \"recent\" APIs edited by the  given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "414", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getLatestContentDocument", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public ApiDesignContent getLatestContentDocument(String userId, String designId) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the most recent full content row for the given API Design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "415", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getLatestContentDocumentForSharing", "methodParameterType": "String#", "methodParameterName": "sharingUuid#", "methodBody": "public ApiDesignContent getLatestContentDocumentForSharing(String sharingUuid) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the most recent full content row for the given API Design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listContentCommands", "methodParameterType": "String#String#long#", "methodParameterName": "userId#designId#sinceVersion#", "methodBody": "public List<ApiDesignCommand> listContentCommands(String userId, String designId, long sinceVersion) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a list of commands for a given API design that have been executed since  a specific content version (excludes reverted commands).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "417", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listAllContentCommands", "methodParameterType": "String#String#long#", "methodParameterName": "userId#designId#sinceVersion#", "methodBody": "public List<ApiDesignCommand> listAllContentCommands(String userId, String designId, long sinceVersion) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a list of commands for a given API design that have been executed since  a specific content version, including reverted commands.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "418", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.addContent", "methodParameterType": "String#String#ApiContentType#String#", "methodParameterName": "userId#designId#type#data#", "methodBody": "public long addContent(String userId, String designId, ApiContentType type, String data) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Adds a single content row to the DB and returns a unique content version number  for it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.undoContent", "methodParameterType": "String#String#long#", "methodParameterName": "user#designId#contentVersion#", "methodBody": "public boolean undoContent(String user, String designId, long contentVersion) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Marks a single content change as \"reverted\", which will undo that one change, removing it from the document.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "420", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.redoContent", "methodParameterType": "String#String#long#", "methodParameterName": "user#designId#contentVersion#", "methodBody": "public boolean redoContent(String user, String designId, long contentVersion) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Restores a single content change by changing the \"reverted\" flag back to false.  This restores that one change, returning it to the document.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "421", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.createEditingSessionUuid", "methodParameterType": "String#String#String#String#long#long#", "methodParameterName": "uuid#designId#userId#hash#contentVersion#expiresOn#", "methodBody": "public void createEditingSessionUuid(String uuid, String designId, String userId, String hash, long contentVersion, \n            long expiresOn) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates an entry for an editing session UID.  Throws an exception if the entry could not be created for any reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "422", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.lookupEditingSessionUuid", "methodParameterType": "String#String#String#String#", "methodParameterName": "uuid#designId#userId#hash#", "methodBody": "public long lookupEditingSessionUuid(String uuid, String designId, String userId, String hash) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Looks up an editing session and returns the Content Version associated with it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "423", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.consumeEditingSessionUuid", "methodParameterType": "String#String#String#String#", "methodParameterName": "uuid#designId#userId#hash#", "methodBody": "public boolean consumeEditingSessionUuid(String uuid, String designId, String userId, String hash) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Consumes (deletes) an editing session UUID.  Returns true if the UUID was successfully consumed or false if not (e.g. if it did not exist).  Throws an exception only if an error of some kind occurs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.createCollaborationInvite", "methodParameterType": "String#String#String#String#String#String#", "methodParameterName": "inviteId#designId#userId#username#role#subject#", "methodBody": "public void createCollaborationInvite(String inviteId, String designId, String userId, String username, String role,\n            String subject) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates an invitation to collaborate on an API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "425", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.updateCollaborationInviteStatus", "methodParameterType": "String#String#String#String#", "methodParameterName": "inviteId#fromStatus#toStatus#userId#", "methodBody": "public boolean updateCollaborationInviteStatus(String inviteId, String fromStatus, String toStatus, String userId)\n            throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Updates the status of an invitation.  This can be used to accept, reject, or cancel an invite.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listCollaborationInvites", "methodParameterType": "String#String#", "methodParameterName": "designId#userId#", "methodBody": "public List<Invitation> listCollaborationInvites(String designId, String userId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns all of the invitations for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "427", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getCollaborationInvite", "methodParameterType": "String#String#", "methodParameterName": "designId#inviteId#", "methodBody": "public Invitation getCollaborationInvite(String designId, String inviteId) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a single invitation for a given API design.  The invitation ID is required.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "428", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listApiDesignActivity", "methodParameterType": "String#int#int#", "methodParameterName": "designId#from#to#", "methodBody": "public Collection<ApiDesignChange> listApiDesignActivity(String designId, int from, int to) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of API design changes.  Since there can be many of these per API,  it is required to include a FROM and TO parameter to limit the result set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listUserActivity", "methodParameterType": "String#int#int#", "methodParameterName": "user#from#to#", "methodBody": "public Collection<ApiDesignChange> listUserActivity(String user, int from, int to) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of API design changes made by a given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listApiDesignPublications", "methodParameterType": "String#int#int#", "methodParameterName": "designId#from#to#", "methodBody": "public Collection<ApiPublication> listApiDesignPublications(String designId, int from, int to) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of API publications (recorded whenever a user publishes an API).  This is a paged method similar to listApiDesignActivity().", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listApiDesignPublicationsBy", "methodParameterType": "String#String#int#int#", "methodParameterName": "designId#user#from#to#", "methodBody": "public Collection<ApiPublication> listApiDesignPublicationsBy(String designId, String user, int from, int to) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of API publications done by the given user (recorded whenever a user publishes  an API).  This is a paged method similar to listApiDesignActivity().", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listApiDesignMocks", "methodParameterType": "String#int#int#", "methodParameterName": "designId#from#to#", "methodBody": "public Collection<ApiMock> listApiDesignMocks(String designId, int from, int to) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of API mocks (recorded whenever a user mocks an API).  This is a paged method similar to listApiDesignActivity().", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "433", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listCodegenProjects", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public Collection<CodegenProject> listCodegenProjects(String userId, String designId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of codegen projects for the given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getCodegenProject", "methodParameterType": "String#String#String#", "methodParameterName": "userId#designId#projectId#", "methodBody": "public CodegenProject getCodegenProject(String userId, String designId, String projectId) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a single codegen project by its ID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.createCodegenProject", "methodParameterType": "String#CodegenProject#", "methodParameterName": "userId#project#", "methodBody": "public String createCodegenProject(String userId, CodegenProject project) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a codegen project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.updateCodegenProject", "methodParameterType": "String#CodegenProject#", "methodParameterName": "userId#project#", "methodBody": "public void updateCodegenProject(String userId, CodegenProject project) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Updates a codegen project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "437", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.deleteCodegenProject", "methodParameterType": "String#String#String#", "methodParameterName": "userId#designId#projectId#", "methodBody": "public void deleteCodegenProject(String userId, String designId, String projectId) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes a single codegen project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.deleteCodegenProjects", "methodParameterType": "String#String#", "methodParameterName": "userId#designId#", "methodBody": "public void deleteCodegenProjects(String userId, String designId) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes all codegen projects for an API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "439", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getLatestCommand", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public Optional<ApiDesignCommand> getLatestCommand(String designId) throws NotFoundException, StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the latest command for the given design id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "440", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.listValidationProfiles", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public Collection<ValidationProfile> listValidationProfiles(String userId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns a collection of validation profiles for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "441", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.createValidationProfile", "methodParameterType": "String#ValidationProfile#", "methodParameterName": "userId#profile#", "methodBody": "public long createValidationProfile(String userId, ValidationProfile profile) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a single new validation profile for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "442", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.updateValidationProfile", "methodParameterType": "String#ValidationProfile#", "methodParameterName": "userId#profile#", "methodBody": "public void updateValidationProfile(String userId, ValidationProfile profile) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Updates a single new validation profile for the given user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "443", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.deleteValidationProfile", "methodParameterType": "String#long#", "methodParameterName": "userId#profileId#", "methodBody": "public void deleteValidationProfile(String userId, long profileId) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes a single validation profile.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "444", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getSharingConfig", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public SharingConfiguration getSharingConfig(String designId) throws StorageException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the sharing config for a given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "445", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.setSharingConfig", "methodParameterType": "String#String#SharingLevel#", "methodParameterName": "designId#uuid#level#", "methodBody": "public void setSharingConfig(String designId, String uuid, SharingLevel level) throws StorageException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sets the sharing configuration for the given API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "446", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/storage/IStorage.java", "methodName": "io.apicurio.hub.core.storage.IStorage.getSharingInfo", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "public SharingInfo getSharingInfo(String uuid) throws StorageException, NotFoundException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the sharing info given the share UUID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "447", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/util/FormatUtils.java", "methodName": "io.apicurio.hub.core.util.FormatUtils.jsonToYaml", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public static String jsonToYaml(String content) throws IOException {\n        JsonNode tree = jsonMapper.reader().readTree(content);\n        return yamlMapper.writeValueAsString(tree);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts the content from JSON to YAML format.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/util/FormatUtils.java", "methodName": "io.apicurio.hub.core.util.FormatUtils.yamlToJson", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public static String yamlToJson(String content) throws IOException {\n        JsonNode tree = yamlMapper.reader().readTree(content);\n        return jsonMapper.writeValueAsString(tree);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts the content from YAML to JSON format.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "449", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/util/FormatUtils.java", "methodName": "io.apicurio.hub.core.util.FormatUtils.formatJson", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public static String formatJson(String content) throws IOException {\n        // If it's already formatted, do nothing.\n        if (content.contains(\"\\n\")) {\n            return content;\n        }\n        JsonNode tree = jsonMapper.reader().readTree(content);\n        return jsonMapper.writeValueAsString(tree);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Takes JSON content and formats with a standard 2 spaces per indent.  This is used to take (potentially) unformatted JSON and convert it to formatted JSON.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "450", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/util/JsonUtil.java", "methodName": "io.apicurio.hub.core.util.JsonUtil.toJson", "methodParameterType": "T#", "methodParameterName": "object#", "methodBody": "public static <T> String toJson(T object) {\n        try {\n            return OBJECT_MAPPER.writeValueAsString(object);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert object to JSON", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "451", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/util/JsonUtil.java", "methodName": "io.apicurio.hub.core.util.JsonUtil.toJsonTree", "methodParameterType": "String#", "methodParameterName": "json#", "methodBody": "public static JsonNode toJsonTree(String json) {\n        try {\n            return OBJECT_MAPPER.readTree(json);\n        } catch (IOException ioe) {\n            System.err.println(json);\n            throw new UncheckedIOException(ioe);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert JSON content into a tree represented using  {@link JsonNode} structure.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "452", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/util/JsonUtil.java", "methodName": "io.apicurio.hub.core.util.JsonUtil.fromJson", "methodParameterType": "String#Class<T>#", "methodParameterName": "json#unmarshallClass#", "methodBody": "public static <T> T fromJson(String json, Class<T> unmarshallClass) {\n        try {\n            return OBJECT_MAPPER.readValue(json, unmarshallClass);\n        } catch (IOException ioe) {\n            throw new UncheckedIOException(ioe);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Unmarshall from JSON into a specific object tree, with clazz as the root.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "453", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/util/JsonUtil.java", "methodName": "io.apicurio.hub.core.util.JsonUtil.fromJsonToOperation", "methodParameterType": "JsonNode#Class<? extends BaseOperation>#", "methodParameterName": "payload#unmarshallClass#", "methodBody": "public static BaseOperation fromJsonToOperation(JsonNode payload, Class<? extends BaseOperation> unmarshallClass) {\n        try {\n            return OBJECT_MAPPER.treeToValue(payload, unmarshallClass);\n        } catch (JsonProcessingException e) {\n            System.err.println(payload.toString());\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Unmarshall  {@link JsonNode} structure into an operation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "454", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/Version.java", "methodName": "io.apicurio.hub.core.Version.getVersionString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVersionString() {\n        return this.properties.getProperty(\"version\", \"Unknown\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the versionString", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/Version.java", "methodName": "io.apicurio.hub.core.Version.getVersionDate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getVersionDate() {\n        String vds = this.properties.getProperty(\"date\");\n        try {\n            if (vds == null) {\n                return new Date();\n            } else {\n                return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(vds);\n            }\n        } catch (ParseException e) {\n            return new Date();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@return the versionDate", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/Version.java", "methodName": "io.apicurio.hub.core.Version.getVersionInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVersionInfo() {\n        return properties.getProperty(\"git.commit.id.describe\", \"<Non-Git Build>\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the composite \"full\" version info", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "457", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/Version.java", "methodName": "io.apicurio.hub.core.Version.getVersionProperty", "methodParameterType": "String#", "methodParameterName": "propertyName#", "methodBody": "public String getVersionProperty(String propertyName) {\n        return this.properties.getProperty(propertyName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a version property value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "458", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getJdbcType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getJdbcType() {\n        return getConfigurationProperty(JDBC_TYPE_ENV, JDBC_TYPE_SYSPROP, \"h2\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured JDBC type (default: h2)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.isJdbcInit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isJdbcInit() {\n        return \"true\".equals(getConfigurationProperty(JDBC_INIT_ENV, JDBC_INIT_SYSPROP, \"true\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the database should be initialized programmatically (default: true)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.isDisableKeycloakTrustManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDisableKeycloakTrustManager() {\n        return \"true\".equals(getConfigurationProperty(KEYCLOAK_DISABLE_TRUST_MANAGER_ENV, KEYCLOAK_DISABLE_TRUST_MANAGER_SYSPROP, \"false\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the trust manager should be disabled when communicating with Keycloak", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "461", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getRepositoryFilter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRepositoryFilter() {\n        return getConfigurationProperty(REPOSITORY_FILTER_ENV, REPOSITORY_FILTER_SYSPROP, \"\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Bitbucket repository filter (if any)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.isShareForEveryone", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isShareForEveryone() {\n        return \"true\".equals(getConfigurationProperty(SHARE_FOR_EVERYONE_ENV, SHARE_FOR_EVERYONE_SYSPROP, \"false\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the \"share APIs for everyone\" global option is enabled", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "463", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getGitHubUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGitHubUrl() {\n        return getConfigurationProperty(GITHUB_URL_ENV, GITHUB_URL_SYSPROP, \"https://github.com\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured GitHub URL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "464", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getGitHubApiUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGitHubApiUrl() {\n        return getConfigurationProperty(GITHUB_API_URL_ENV, GITHUB_API_URL_SYSPROP, \"https://api.github.com\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured GitHub API URL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "465", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getGitLabGroupAllAvailable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGitLabGroupAllAvailable() {\n        return getConfigurationProperty(GITLAB_GROUP_ALL_AVAILABLE_ENV, GITLAB_GROUP_ALL_AVAILABLE_SYSPROP, \"false\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured GitLab Group access mode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "466", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getGitLabGroupMinAccessLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGitLabGroupMinAccessLevel() {\n        return getConfigurationProperty(GITLAB_GROUP_MIN_ACCESS_LEVEL_ENV, GITLAB_GROUP_MIN_ACCESS_LEVEL_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured GitLab Group min access level", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "467", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getGitLabUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGitLabUrl() {\n        return getConfigurationProperty(GITLAB_URL_ENV, GITLAB_URL_SYSPROP, \"https://gitlab.com\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured GitLab URL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "468", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getGitLabApiUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGitLabApiUrl() {\n        return getConfigurationProperty(GITLAB_API_URL_ENV, GITLAB_API_URL_SYSPROP, \"https://gitlab.com\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured GitLab API URL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "469", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getBitbucketUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBitbucketUrl() {\n        return getConfigurationProperty(BITBUCKET_URL_ENV, BITBUCKET_URL_SYSPROP, \"https://bitbucket.org\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Bitbucket URL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "470", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getBitbucketApiUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBitbucketApiUrl() {\n        return getConfigurationProperty(BITBUCKET_API_URL_ENV, BITBUCKET_API_URL_SYSPROP, \"https://api.bitbucket.org/2.0\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Bitbucket API URL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.isMicrocksConfigured", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMicrocksConfigured() {\n        return getMicrocksApiUrl() != null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if a microcks API has been configured (we assume that means microcks exists and we're integrated with it)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "472", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getMicrocksApiUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMicrocksApiUrl() {\n        return getConfigurationProperty(MICROCKS_API_URL_ENV, MICROCKS_API_URL_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Microcks API URL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "473", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getMicrocksClientId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMicrocksClientId() {\n        return getConfigurationProperty(MICROCKS_CLIENT_ID_ENV, MICROCKS_CLIENT_ID_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Microcks ClientId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "474", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getMicrocksClientSecret", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMicrocksClientSecret() {\n        return getConfigurationProperty(MICROCKS_CLIENT_SECRET_ENV, MICROCKS_CLIENT_SECRET_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Microcks ClientSecret", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/config/HubConfiguration.java", "methodName": "io.apicurio.hub.core.config.HubConfiguration.getEditingSessionType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEditingSessionType() {\n        return getConfigurationProperty(EDITING_SESSION_TYPE_ENV, EDITING_SESSION_TYPE_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured distributed session type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "476", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingMetrics.java", "methodName": "io.apicurio.hub.core.editing.IEditingMetrics.getCurrentMetricsInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCurrentMetricsInfo() throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the current state of the metrics.  This information is typically presented via a REST API or servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "477", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingMetrics.java", "methodName": "io.apicurio.hub.core.editing.IEditingMetrics.socketConnected", "methodParameterType": "String#String#", "methodParameterName": "designId#user#", "methodBody": "public void socketConnected(String designId, String user);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that a web socket was connected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingMetrics.java", "methodName": "io.apicurio.hub.core.editing.IEditingMetrics.editingSessionCreated", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public void editingSessionCreated(String designId);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that an editing session was created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "479", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingMetrics.java", "methodName": "io.apicurio.hub.core.editing.IEditingMetrics.contentCommand", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public void contentCommand(String designId);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that a content command was received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingMetrics.java", "methodName": "io.apicurio.hub.core.editing.IEditingMetrics.undoCommand", "methodParameterType": "String#long#", "methodParameterName": "designId#contentVersion#", "methodBody": "public void undoCommand(String designId, long contentVersion);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that a user wants to \"undo\" a command/content version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingMetrics.java", "methodName": "io.apicurio.hub.core.editing.IEditingMetrics.redoCommand", "methodParameterType": "String#long#", "methodParameterName": "designId#contentVersion#", "methodBody": "public void redoCommand(String designId, long contentVersion);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that a user wants to \"redo\" a command/content version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingMetrics.java", "methodName": "io.apicurio.hub.core.editing.IEditingMetrics.batchCommand", "methodParameterType": "String#int#", "methodParameterName": "designId#count#", "methodBody": "public void batchCommand(String designId, int count);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that a batch of commands was sent to the server for the given design ID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.EditingSession", "methodParameterType": "String#IRollupExecutor#", "methodParameterName": "designId#rollupExecutor#", "methodBody": "public EditingSession(String designId, IRollupExecutor rollupExecutor) {\n        this.designId = designId;\n        this.rollupExecutor = rollupExecutor;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "484", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.getUsers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Map<String, String> getUsers() {\n        return this.users;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Getter for the users.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "485", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.getSessions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Map<String, ISessionContext> getSessions() {\n        return this.sessions;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Getter for the sessions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "486", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.getDesignId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDesignId() {\n        return designId;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#getDesignId()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "487", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.getUserContexts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Set<ISessionContext> getUserContexts() {\n        return new HashSet<>(this.sessions.values());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#getUserContexts()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.getUser", "methodParameterType": "ISessionContext#", "methodParameterName": "context#", "methodBody": "@Override\n    public String getUser(ISessionContext context) {\n        return users.get(context.getId());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#getUser(io.apicurio.hub.core.editing.ISessionContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "489", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.join", "methodParameterType": "ISessionContext#String#", "methodParameterName": "context#user#", "methodBody": "@Override\n    public void join(ISessionContext context, String user) {\n        this.sessions.put(context.getId(), context);\n        this.users.put(context.getId(), user);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#join(io.apicurio.hub.core.editing.ISessionContext,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "490", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.leave", "methodParameterType": "ISessionContext#", "methodParameterName": "context#", "methodBody": "@Override\n    public void leave(ISessionContext context) {\n        this.sessions.remove(context.getId());\n        this.users.remove(context.getId());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#leave(io.apicurio.hub.core.editing.ISessionContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "491", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean isEmpty() {\n        return this.sessions.isEmpty();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#isEmpty()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void close() {\n        try {\n            this.rollupExecutor.rollupCommands(designId);\n        } catch (NotFoundException | StorageException | OaiCommandException e) {\n            logger.error(\"Error detected closing an Editing Session.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see java.io.Closeable#close()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "493", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.sendTo", "methodParameterType": "BaseOperation#ISessionContext#", "methodParameterName": "operation#to#", "methodBody": "@Override\n    public void sendTo(BaseOperation operation, ISessionContext to) {\n        try {\n            to.sendAsText(operation);\n        } catch (IOException e) {\n            logger.error(\"Error sending (\" + operation.getType() + \") operation/message to websocket with sessionId: \" + to.getId(), e);\n            // TODO what else can we do here??\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#sendTo(io.apicurio.hub.core.editing.ops.BaseOperation,io.apicurio.hub.core.editing.ISessionContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "494", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSession.java", "methodName": "io.apicurio.hub.core.editing.EditingSession.sendToOthers", "methodParameterType": "BaseOperation#ISessionContext#", "methodParameterName": "operation#exclude#", "methodBody": "@Override\n    public void sendToOthers(BaseOperation operation, ISessionContext exclude) {\n        for (ISessionContext otherSession : this.sessions.values()) {\n            if (!otherSession.getId().equals(exclude.getId())) {\n                this.sendTo(operation, otherSession);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSession#sendToOthers(io.apicurio.hub.core.editing.ops.BaseOperation,io.apicurio.hub.core.editing.ISessionContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void close();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Called to close the editing session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "496", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.getDesignId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDesignId();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the design id associated with this editing session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.getUser", "methodParameterType": "ISessionContext#", "methodParameterName": "context#", "methodBody": "public String getUser(ISessionContext context);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Resolves the given session context to a user name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.getUserContexts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<ISessionContext> getUserContexts();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the current set of user session contexts.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "499", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.join", "methodParameterType": "ISessionContext#String#", "methodParameterName": "context#user#", "methodBody": "public void join(ISessionContext context, String user);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Join the session context to this editing session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "500", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.leave", "methodParameterType": "ISessionContext#", "methodParameterName": "context#", "methodBody": "public void leave(ISessionContext context);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Removes a session context from this editing session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "501", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.isEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEmpty();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return true if the editing session has no more users", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "502", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.sendToOthers", "methodParameterType": "BaseOperation#ISessionContext#", "methodParameterName": "operation#exclude#", "methodBody": "public void sendToOthers(BaseOperation operation, ISessionContext exclude);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sends an operation/message to all collaborators except the one represented by 'exclude'.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "503", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSession.java", "methodName": "io.apicurio.hub.core.editing.IEditingSession.sendTo", "methodParameterType": "BaseOperation#ISessionContext#", "methodParameterName": "operation#to#", "methodBody": "public void sendTo(BaseOperation operation, ISessionContext to);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sends an operation/message to just the given collaborator.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "504", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.EditingSessionManager.createSessionUuid", "methodParameterType": "String#String#String#long#", "methodParameterName": "designId#user#secret#contentVersion#", "methodBody": "@Override\n    public String createSessionUuid(String designId, String user, String secret, long contentVersion) throws ServerError {\n        try {\n            UUID uuid = UUID.randomUUID();\n            String hash = DigestUtils.sha512Hex(SALT + user + secret);\n            long expiresOn = System.currentTimeMillis() + EXPIRATION_OFFSET;\n            this.storage.createEditingSessionUuid(uuid.toString(), designId, user, hash, contentVersion, expiresOn);\n            return uuid.toString();\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSessionManager#createSessionUuid(java.lang.String,java.lang.String,java.lang.String,long)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "505", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.EditingSessionManager.validateSessionUuid", "methodParameterType": "String#String#String#String#", "methodParameterName": "uuid#designId#user#secret#", "methodBody": "@Override\n    public long validateSessionUuid(String uuid, String designId, String user, String secret) throws ServerError {\n        try {\n            String hash = DigestUtils.sha512Hex(SALT + user + secret);\n            long contentVersion = this.storage.lookupEditingSessionUuid(uuid, designId, user, hash);\n            if (this.storage.consumeEditingSessionUuid(uuid, designId, user, hash)) {\n                return contentVersion;\n            } else {\n                throw new ServerError(\"Failed to connect to API editing session using UUID: \" + uuid);\n            }\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSessionManager#validateSessionUuid(java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.EditingSessionManager.getOrCreateEditingSession", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public synchronized IEditingSession getOrCreateEditingSession(String designId) {\n        IEditingSession session = editingSessions.get(designId);\n        if (session == null) {\n            session = editingSessionFactory.createEditingSession(designId);\n            editingSessions.put(designId, session);\n        }\n        return session;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSessionManager#getOrCreateEditingSession(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.EditingSessionManager.getEditingSession", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public synchronized IEditingSession getEditingSession(String designId) {\n        return editingSessions.get(designId);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSessionManager#getEditingSession(java.lang.String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "508", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.EditingSessionManager.closeEditingSession", "methodParameterType": "IEditingSession#", "methodParameterName": "editingSession#", "methodBody": "@Override\n    public synchronized void closeEditingSession(IEditingSession editingSession) {\n        editingSessions.remove(editingSession.getDesignId());\n        editingSession.close();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.IEditingSessionManager#closeEditingSession(io.apicurio.hub.core.editing.IEditingSession)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "509", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ActiveCollaborator.java", "methodName": "io.apicurio.hub.core.editing.ActiveCollaborator.ActiveCollaborator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ActiveCollaborator() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "510", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ActiveCollaborator.java", "methodName": "io.apicurio.hub.core.editing.ActiveCollaborator.getUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUuid() {\n        return uuid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the uuid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ActiveCollaborator.java", "methodName": "io.apicurio.hub.core.editing.ActiveCollaborator.setUuid", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "public void setUuid(String uuid) {\n        this.uuid = uuid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param uuid the uuid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "512", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ActiveCollaborator.java", "methodName": "io.apicurio.hub.core.editing.ActiveCollaborator.getUserId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUserId() {\n        return userId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "513", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ActiveCollaborator.java", "methodName": "io.apicurio.hub.core.editing.ActiveCollaborator.setUserId", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public void setUserId(String userId) {\n        this.userId = userId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userId the userId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "514", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ActiveCollaborator.java", "methodName": "io.apicurio.hub.core.editing.ActiveCollaborator.getUserName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUserName() {\n        return userName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "515", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ActiveCollaborator.java", "methodName": "io.apicurio.hub.core.editing.ActiveCollaborator.setUserName", "methodParameterType": "String#", "methodParameterName": "userName#", "methodBody": "public void setUserName(String userName) {\n        this.userName = userName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userName the userName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "516", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/BatchProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.BatchProcessor.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "@Override\n    public void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) throws OperationProcessorException {\n        BatchOperation batch = (BatchOperation) operation;\n        \n        String designId = editingSession.getDesignId();\n\n        this.metrics.batchCommand(designId, batch.getOperations().size());\n        \n        logger.debug(\"Processing a batch of {} operations for design: {}\", batch.getOperations().size(), designId);  \n\n        for (BaseOperation op : batch.getOperations()) {\n            opDispatcher.process(editingSession, context, op);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#process(io.apicurio.hub.core.editing.IEditingSession,io.apicurio.hub.core.editing.ISessionContext,io.apicurio.hub.core.editing.ops.BaseOperation)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/BatchProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.BatchProcessor.getOperationName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getOperationName() {\n        return \"batch\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#getOperationName()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "518", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/RedoProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.RedoProcessor.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "@Override\n    public void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) throws OperationProcessorException {\n        VersionedOperation vo = (VersionedOperation) operation;\n        String user = editingSession.getUser(context);\n\n        long contentVersion = vo.getContentVersion();\n        String designId = editingSession.getDesignId();\n\n        this.metrics.redoCommand(designId, contentVersion);\n\n        logger.debug(\"\\tuser:\" + user);\n        boolean restored = false;\n        try {\n            restored = storage.redoContent(user, designId, contentVersion);\n        } catch (StorageException e) {\n            // Let the browser know that we failed to store the user's undo - so the browser needs to let the\n            // user know and perhaps try again later...\n            StorageError error = OperationFactory.storageError(contentVersion, \"redo\");\n            editingSession.sendTo(error, context);\n            throw new OperationProcessorException(\"Error redoing a command: \" + vo.getContentVersion(), e);\n        }\n\n        // If the command wasn't successfully restored (it was already restored or didn't exist)\n        // then return without doing anything else.\n        if (!restored) {\n            // Send a \"action deferred\" message back to the user\n            editingSession.sendTo(OperationFactory.deferred(contentVersion, \"redo\"), context);\n            logger.debug(\"DEFER sent back to client.\");\n            return;\n        }\n\n        // Send an ack message back to the user\n        editingSession.sendTo(OperationFactory.ack(contentVersion, \"redo\"), context);\n        logger.debug(\"ACK sent back to client.\");\n\n        // Now propagate the redo to all other clients\n        editingSession.sendToOthers(OperationFactory.redo(contentVersion), context);\n        logger.debug(\"Redo sent to 'other' clients.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#process(io.apicurio.hub.core.editing.IEditingSession,io.apicurio.hub.core.editing.ISessionContext,io.apicurio.hub.core.editing.ops.BaseOperation)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "519", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/RedoProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.RedoProcessor.getOperationName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getOperationName() {\n        return \"redo\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#getOperationName()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "520", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/SelectionProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.SelectionProcessor.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "@Override\n    public void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) {\n        SelectionOperation so = (SelectionOperation) operation;\n        String user = editingSession.getUser(context);\n        String selection = so.getSelection();\n        logger.debug(\"\\tuser:\" + user);\n        logger.debug(\"\\tselection:\" + selection);\n        \n        editingSession.sendToOthers(OperationFactory.select(user, context.getId(), selection), context);\n        logger.debug(\"User selection propagated to 'other' clients.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#process(io.apicurio.hub.core.editing.IEditingSession,io.apicurio.hub.core.editing.ISessionContext,io.apicurio.hub.core.editing.ops.BaseOperation)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "521", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/SelectionProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.SelectionProcessor.getOperationName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getOperationName() {\n        return \"selection\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#getOperationName()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "522", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/PingProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.PingProcessor.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "@Override\n    public void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) {\n        logger.trace(\"PING message received.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#process(io.apicurio.hub.core.editing.IEditingSession,io.apicurio.hub.core.editing.ISessionContext,io.apicurio.hub.core.editing.ops.BaseOperation)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/PingProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.PingProcessor.getOperationName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getOperationName() {\n        return \"ping\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#getOperationName()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/IOperationProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.IOperationProcessor.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) throws OperationProcessorException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Processes the given operation, performing some work specific to the type of operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/IOperationProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.IOperationProcessor.getOperationName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getOperationName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the operation that this processor is responsible for.  The name of the operation maps to the \"type\" of an inbound websocket message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/OperationProcessorDispatcher.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.OperationProcessorDispatcher.process", "methodParameterType": "IEditingSession#ISessionContext#JsonNode#", "methodParameterName": "editingSession#context#message#", "methodBody": "public void process(IEditingSession editingSession, ISessionContext context, JsonNode message) throws OperationProcessorException {\n        BaseOperation operation = OperationFactory.operation(message);\n        process(editingSession, context, operation);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process a given JSON payload (obtained from the inbound websocket).  This is done by figuring out the type of the payload and then unmarshalling it into a  {@link BaseOperation}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/OperationProcessorDispatcher.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.OperationProcessorDispatcher.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "public void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) throws OperationProcessorException {\n        String opType = operation.getType();\n        IOperationProcessor processor = processorMap.get(opType);\n\n        logger.debug(\"Received a \\\"{}\\\" message/operation from a client for API Design: {}\", opType, editingSession.getDesignId());\n\n        if (processor != null) {\n            processor.process(editingSession, context, operation);\n        } else {\n            logger.error(\"Unknown message/operation type: {}. \\nKnown types: {}\", opType, processorMap);\n            throw new OperationProcessorException(\"Unknown message type: '\" + opType + \"'\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Process a given operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/CommandProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.CommandProcessor.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "@Override\n    public void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) throws OperationProcessorException {\n        VersionedCommandOperation vco = (VersionedCommandOperation) operation;\n        String user = editingSession.getUser(context);\n\n        long localCommandId = vco.getCommandId();\n\n        long cmdContentVersion;\n        String designId = editingSession.getDesignId();\n\n        this.metrics.contentCommand(designId);\n\n        logger.debug(\"\\tuser: {}\", user);\n\n        try {\n            cmdContentVersion = storage.addContent(user, designId, ApiContentType.Command, vco.getCommandStr());\n        } catch (StorageException e) {\n            // Let the browser know that we failed to store the user's command - so the browser needs to let the\n            // user know and perhaps try again later...\n            StorageError error = OperationFactory.storageError(localCommandId, \"command\");\n            editingSession.sendTo(error, context);\n            throw new OperationProcessorException(\"Error storing command: \" + vco.getCommandId(), e);\n        }\n\n        // Send an ack message back to the user\n        VersionedAck ack = OperationFactory.ack(cmdContentVersion, localCommandId, \"command\");\n        editingSession.sendTo(ack, context);\n        logger.debug(\"ACK sent back to client.\");\n\n        // Now propagate the command to all other clients\n        FullCommandOperation cmd = OperationFactory.fullCommand(cmdContentVersion, vco.getCommandStr(), user, false);\n        editingSession.sendToOthers(cmd, context);\n        logger.debug(\"Command propagated to 'other' clients.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#process(io.apicurio.hub.core.editing.IEditingSession,io.apicurio.hub.core.editing.ISessionContext,io.apicurio.hub.core.editing.ops.BaseOperation)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "529", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/CommandProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.CommandProcessor.getOperationName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getOperationName() {\n        return \"command\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#getOperationName()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "530", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/UndoProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.UndoProcessor.process", "methodParameterType": "IEditingSession#ISessionContext#BaseOperation#", "methodParameterName": "editingSession#context#operation#", "methodBody": "@Override\n    public void process(IEditingSession editingSession, ISessionContext context, BaseOperation operation) throws OperationProcessorException {\n        VersionedOperation vo = (VersionedOperation) operation;\n        String user = editingSession.getUser(context);\n        String designId = editingSession.getDesignId();\n\n        long contentVersion = vo.getContentVersion();\n\n        this.metrics.undoCommand(designId, contentVersion);\n\n        logger.debug(\"\\tuser:\" + user);\n        boolean reverted = false;\n        try {\n            reverted = storage.undoContent(user, designId, contentVersion);\n        } catch (StorageException e) {\n            // Let the browser know that we failed to store the user's undo - so the browser needs to let the\n            // user know and perhaps try again later...\n            StorageError error = OperationFactory.storageError(contentVersion, \"undo\");\n            editingSession.sendTo(error, context);\n            throw new OperationProcessorException(\"Error undoing a command: \" + vo.getContentVersion(), e);\n        }\n\n        // If the command wasn't successfully reverted (it was already reverted or didn't exist)\n        // then return without doing anything else.\n        if (!reverted) {\n            // Send a \"action deferred\" message back to the user\n            editingSession.sendTo(OperationFactory.deferred(contentVersion, \"undo\"), context);\n            logger.debug(\"DEFER sent back to client.\");\n            return;\n        }\n\n        // Send an ack message back to the user\n        editingSession.sendTo(OperationFactory.ack(contentVersion, \"undo\"), context);\n        logger.debug(\"ACK sent back to client.\");\n\n        // Now propagate the undo to all other clients\n        editingSession.sendToOthers(OperationFactory.undo(contentVersion), context);\n        logger.debug(\"Undo sent to 'other' clients.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#process(io.apicurio.hub.core.editing.IEditingSession,io.apicurio.hub.core.editing.ISessionContext,io.apicurio.hub.core.editing.ops.BaseOperation)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "531", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/processors/UndoProcessor.java", "methodName": "io.apicurio.hub.core.editing.ops.processors.UndoProcessor.getOperationName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getOperationName() {\n        return \"undo\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ops.processors.IOperationProcessor#getOperationName()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/StorageError.java", "methodName": "io.apicurio.hub.core.editing.ops.StorageError.getFailedType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFailedType() {\n        return failedType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the failedType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "533", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/StorageError.java", "methodName": "io.apicurio.hub.core.editing.ops.StorageError.setFailedType", "methodParameterType": "String#", "methodParameterName": "failedType#", "methodBody": "public StorageError setFailedType(String failedType) {\n        this.failedType = failedType;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param failedType the failedType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/OperationProcessorException.java", "methodName": "io.apicurio.hub.core.editing.ops.OperationProcessorException.OperationProcessorException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OperationProcessorException() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "535", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/OperationProcessorException.java", "methodName": "io.apicurio.hub.core.editing.ops.OperationProcessorException.OperationProcessorException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public OperationProcessorException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "536", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/OperationProcessorException.java", "methodName": "io.apicurio.hub.core.editing.ops.OperationProcessorException.OperationProcessorException", "methodParameterType": "Throwable#", "methodParameterName": "cause#", "methodBody": "public OperationProcessorException(Throwable cause) {\n        super(cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "537", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/OperationProcessorException.java", "methodName": "io.apicurio.hub.core.editing.ops.OperationProcessorException.OperationProcessorException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public OperationProcessorException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "538", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/VersionedAck.java", "methodName": "io.apicurio.hub.core.editing.ops.VersionedAck.getAckType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAckType() {\n        return ackType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ackType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "539", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/VersionedAck.java", "methodName": "io.apicurio.hub.core.editing.ops.VersionedAck.setAckType", "methodParameterType": "String#", "methodParameterName": "ackType#", "methodBody": "public VersionedAck setAckType(String ackType) {\n        this.ackType = ackType;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param ackType the ackType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "540", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/DeferredAction.java", "methodName": "io.apicurio.hub.core.editing.ops.DeferredAction.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "541", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/DeferredAction.java", "methodName": "io.apicurio.hub.core.editing.ops.DeferredAction.setId", "methodParameterType": "long#", "methodParameterName": "id#", "methodBody": "public DeferredAction setId(long id) {\n        this.id = id;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "542", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/DeferredAction.java", "methodName": "io.apicurio.hub.core.editing.ops.DeferredAction.getActionType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getActionType() {\n        return actionType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the actionType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "543", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/DeferredAction.java", "methodName": "io.apicurio.hub.core.editing.ops.DeferredAction.setActionType", "methodParameterType": "String#", "methodParameterName": "actionType#", "methodBody": "public DeferredAction setActionType(String actionType) {\n        this.actionType = actionType;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param actionType the actionType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "544", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/BatchOperation.java", "methodName": "io.apicurio.hub.core.editing.ops.BatchOperation.getOperations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<BaseOperation> getOperations() {\n        return operations;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the operations", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "545", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ops/BatchOperation.java", "methodName": "io.apicurio.hub.core.editing.ops.BatchOperation.setOperations", "methodParameterType": "List<BaseOperation>#", "methodParameterName": "operations#", "methodBody": "public void setOperations(List<BaseOperation> operations) {\n        this.operations = operations;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param operations the operations to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "546", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.IEditingSessionManager.createSessionUuid", "methodParameterType": "String#String#String#long#", "methodParameterName": "designId#user#secret#contentVersion#", "methodBody": "public String createSessionUuid(String designId, String user, String secret, long contentVersion) throws ServerError;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called to create a unique one-time-use UUID issued to a client so they can connect to an editing session for an API design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "547", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.IEditingSessionManager.validateSessionUuid", "methodParameterType": "String#String#String#String#", "methodParameterName": "uuid#designId#user#secret#", "methodBody": "public long validateSessionUuid(String uuid, String designId, String user, String secret) throws ServerError;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called to validate a session UUID.  This confirms that an appropriate entry for the  session exists and then consumes it, ensuring only one client can consume any given UUID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "548", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.IEditingSessionManager.getOrCreateEditingSession", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public IEditingSession getOrCreateEditingSession(String designId);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called to get or create an editing session for a given API Design.  This will either return an existing session or create a new one if one doesn't exist.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "549", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.IEditingSessionManager.getEditingSession", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public IEditingSession getEditingSession(String designId);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called to get an editing session for a given API Design.  If no editing session exists for the given design, then null is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/IEditingSessionManager.java", "methodName": "io.apicurio.hub.core.editing.IEditingSessionManager.closeEditingSession", "methodParameterType": "IEditingSession#", "methodParameterName": "editingSession#", "methodBody": "public void closeEditingSession(IEditingSession editingSession);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called to close an editing session.  This should be called only when the editing session is empty (has no more participants).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "551", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ISessionContext.java", "methodName": "io.apicurio.hub.core.editing.ISessionContext.getPathParameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> getPathParameters();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@see Session#getPathParameters()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "552", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ISessionContext.java", "methodName": "io.apicurio.hub.core.editing.ISessionContext.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@see Session#getId()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "553", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ISessionContext.java", "methodName": "io.apicurio.hub.core.editing.ISessionContext.getQueryParam", "methodParameterType": "String#", "methodParameterName": "paramName#", "methodBody": "String getQueryParam(String paramName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets a query parameter from the session URL.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "554", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ISessionContext.java", "methodName": "io.apicurio.hub.core.editing.ISessionContext.sendAsText", "methodParameterType": "String#", "methodParameterName": "serialized#", "methodBody": "void sendAsText(String serialized) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Send string payload as text", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ISessionContext.java", "methodName": "io.apicurio.hub.core.editing.ISessionContext.sendAsText", "methodParameterType": "T#", "methodParameterName": "obj#", "methodBody": "<T> void sendAsText(T obj) throws IOException;", "AST": "Javadoc#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Send object payload as JSON", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "556", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/ISessionContext.java", "methodName": "io.apicurio.hub.core.editing.ISessionContext.close", "methodParameterType": "CloseReason#", "methodParameterName": "closeReason#", "methodBody": "void close(CloseReason closeReason) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@see Session#close(CloseReason)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "557", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/EditingSessionFactory.java", "methodName": "io.apicurio.hub.core.editing.EditingSessionFactory.createEditingSession", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "public IEditingSession createEditingSession(String designId) {\n        String type = config.getEditingSessionType();\n        if (\"jms\".equals(type)) {\n            return new JMSEditingSession(designId, (JMSSessionFactory) jms, operationProcessor);\n        } else {\n            return new EditingSession(designId, rollupExecutor);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to create an editing session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "558", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSEditingSession.JMSEditingSession", "methodParameterType": "String#JMSSessionFactory#OperationProcessorDispatcher#", "methodParameterName": "designId#jms#operationProcessor#", "methodBody": "public JMSEditingSession(String designId, JMSSessionFactory jms,\n            OperationProcessorDispatcher operationProcessor) {\n        super(designId, null); // OK to pass null for the rollup executor, because we override close()\n        logger.debug(\"Creating a JMS editing session for id: {}\", designId);\n        this.distributedSession = jms.joinSession(designId, message -> {\n            handleRemoteOperation(message);\n        });\n        sendListClients();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SuperConstructorInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "559", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSEditingSession.handleRemoteOperation", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "private void handleRemoteOperation(String message) {\n        logger.debug(\"Message received from JMS channel for design id: {}\", this.getDesignId());\n        logger.debug(\"    Message: {}\", message);\n        JsonNode jsonMsg = JsonUtil.toJsonTree(message);\n        BaseOperation op = OperationFactory.operation(jsonMsg);\n        if (op.getType().equals(\"list-clients\")) {\n            this.sendJoinToRemote();\n        } else {\n            sendToAll(op);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called when we receive a message from a remote editing session (via the JMS channel).  What we want to do with that is blast it out to", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "560", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSEditingSession.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void close() {\n        // All local connections have terminated, so close the JMS session\n        distributedSession.close();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see java.io.Closeable#close()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "561", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSEditingSession.sendToOthers", "methodParameterType": "BaseOperation#ISessionContext#", "methodParameterName": "operation#exclude#", "methodBody": "@Override\n    public void sendToOthers(BaseOperation operation, ISessionContext exclude) {\n        super.sendToOthers(operation, exclude);\n        distributedSession.sendOperation(operation);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.EditingSession#sendToOthers(io.apicurio.hub.core.editing.ops.BaseOperation,io.apicurio.hub.core.editing.ISessionContext)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "562", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSEditingSession.sendToAll", "methodParameterType": "BaseOperation#", "methodParameterName": "operation#", "methodBody": "private void sendToAll(BaseOperation operation) {\n        logger.debug(\"Sending operation to all connected websocket clients: {}\", operation.getType());\n        for (ISessionContext context : this.getSessions().values()) {\n            this.sendTo(operation, context);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Called to send the given operation to ALL connected websocket clients.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "563", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSEditingSession.sendJoinToRemote", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void sendJoinToRemote() {\n        for (ISessionContext conext : this.getSessions().values()) {\n            JoinLeaveOperation joinOperation = OperationFactory.join(getUser(conext), conext.getId());\n            distributedSession.sendOperation(joinOperation);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Called to send a \"join\" message over the JMS channel for each connected websocket.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "564", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSEditingSession.sendListClients", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void sendListClients() {\n        distributedSession.sendOperation(ListClientsOperation.listClients());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to send the \"list-clients\" operation to all remote sessions.  This will cause all of those remote sessions to respond with \"join\" messages for each websocket connected to their respective sessions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "565", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/IDistributedEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.IDistributedEditingSession.sendOperation", "methodParameterType": "BaseOperation#", "methodParameterName": "command#", "methodBody": "void sendOperation(BaseOperation command);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Send an operation over the shared session", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "566", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/IDistributedEditingSession.java", "methodName": "io.apicurio.hub.core.editing.distributed.IDistributedEditingSession.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Close the shared session", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "567", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/IOperationHandler.java", "methodName": "io.apicurio.hub.core.editing.distributed.IOperationHandler.consumeOperation", "methodParameterType": "String#", "methodParameterName": "operation#", "methodBody": "void consumeOperation(String operation);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Provide a handler implementation to consume the operation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "568", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSSessionFactory.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSSessionFactory.initialize", "methodParameterType": "IRollupExecutor#", "methodParameterName": "rollupExecutor#", "methodBody": "public void initialize(IRollupExecutor rollupExecutor) {\n        this.rollupExecutor = rollupExecutor;\n        connectionFactory = lookupConnectionFactory();\n        managementEventListener = new BrokerManagementEventListener();\n        managementEventListener.listen();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initializes the JMS session factory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "569", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSSessionFactory.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSSessionFactory.lookupConnectionFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private ConnectionFactory lookupConnectionFactory() {\n        logger.debug(\"Looking up the JMS connection factory from: \" +  CONNECTION_FACTORY_JNDI_LOCATION);\n        ConnectionFactory cf;\n        try {\n            InitialContext ctx = new InitialContext();\n            cf = (ConnectionFactory) ctx.lookup(CONNECTION_FACTORY_JNDI_LOCATION);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        if (cf == null) {\n            throw new RuntimeException(\"JMS Connection Factory not found: \" + CONNECTION_FACTORY_JNDI_LOCATION); //$NON-NLS-1$\n        }\n        return cf;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Looks up the connection factory in JNDI.  Fails if it could not be found.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "570", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/editing/distributed/JMSSessionFactory.java", "methodName": "io.apicurio.hub.core.editing.distributed.JMSSessionFactory.joinSession", "methodParameterType": "String#IOperationHandler#", "methodParameterName": "designId#handler#", "methodBody": "public synchronized MessagingSessionContainer joinSession(String designId, IOperationHandler handler) {\n        logger.debug(\"Joining session {}\", designId);\n        JMSContext context = connectionFactory.createContext();\n        Topic sessionTopic = context.createTopic(JAVA_JMS_TOPIC_SESSION + designId);\n        // Subscribe to the topic\n        JMSConsumer consumer = context.createConsumer(sessionTopic, null, true);\n        // When a new node joins the distributed session, it doesn't know about the session(s) attached to the\n        // other nodes already in the session(s).\n        return new MessagingSessionContainer(sessionTopic, consumer, context.createProducer(), handler);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to add a consumer to the JMS topic specific to the given design id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "571", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/cmd/OaiCommandExecutor.java", "methodName": "io.apicurio.hub.core.cmd.OaiCommandExecutor.executeCommands", "methodParameterType": "String#List<String>#", "methodParameterName": "oaiDocument#commands#", "methodBody": "public String executeCommands(String oaiDocument, List<String> commands) throws OaiCommandException {\n        if (commands == null || commands.isEmpty()) {\n            return oaiDocument;\n        }\n        \n        logger.info(\"Applying {} commands to a document.\", commands.size());\n        \n        Document doc = Library.readDocumentFromJSONString(oaiDocument);\n        commands.forEach(cmdStr -> {\n            ICommand cmd = MarshallCompat.unmarshallCommand(JsonCompat.parseJSON(cmdStr));\n            cmd.execute(doc);\n        });\n        \n        return Library.writeDocumentToJSONString(doc);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes the given sequence of commands (as serialized JSON) against the given OAI document.  Returns the document after the commands have been executed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "572", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-core/src/main/java/io/apicurio/hub/core/cmd/OaiCommandException.java", "methodName": "io.apicurio.hub.core.cmd.OaiCommandException.OaiCommandException", "methodParameterType": "Throwable#", "methodParameterName": "root#", "methodBody": "public OaiCommandException(Throwable root) {\n        super(root);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.PrometheusApiMetrics.getCurrentMetricsInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getCurrentMetricsInfo() throws IOException {\n        StringWriter writer = new StringWriter();\n        TextFormat.write004(writer, CollectorRegistry.defaultRegistry.metricFamilySamples());\n\n        String content = writer.getBuffer().toString();\n        return content;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.metrics.IApiMetrics#getCurrentMetricsInfo()", "call_func_name": ["java.io.StringWriter.<init>", "io.prometheus.client.CollectorRegistry.metricFamilySamples", "io.prometheus.client.exporter.common.TextFormat.write004", "java.io.StringWriter.getBuffer", "java.lang.StringBuffer.toString"], "call_func_parameter": [[""], [""], ["java.io.Writer", "java.util.Enumeration"], [""], [""]], "passed_comments": "/"}, {"index": "574", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.PrometheusApiMetrics.apiCall", "methodParameterType": "String#String#", "methodParameterName": "endpoint#method#", "methodBody": "@Override\n    public void apiCall(String endpoint, String method) {\n        apiRequests.labels(endpoint, method).inc();;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#EmptyStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EmptyStatement)EmptyStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.metrics.IApiMetrics#apiCall(java.lang.String,java.lang.String)", "call_func_name": ["io.prometheus.client.Counter.labels"], "call_func_parameter": [["java.lang.String[]"]], "passed_comments": "/"}, {"index": "575", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.PrometheusApiMetrics.apiCreate", "methodParameterType": "ApiDesignType#", "methodParameterName": "type#", "methodBody": "@Override\n    public void apiCreate(ApiDesignType type) {\n        apisCreated.labels(type.name()).inc();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.metrics.IApiMetrics#apiCreate(java.lang.String)", "call_func_name": ["io.apicurio.hub.core.beans.ApiDesignType.name", "io.prometheus.client.Counter.labels"], "call_func_parameter": [[""], ["java.lang.String[]"]], "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.PrometheusApiMetrics.apiImport", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "@Override\n    public void apiImport(LinkedAccountType type) {\n        if (type == null) {\n            apisImported.labels(\"url\");\n        } else {\n            apisImported.labels(type.name()).inc();\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.metrics.IApiMetrics#apiImport(io.apicurio.hub.core.beans.LinkedAccountType)", "call_func_name": ["io.prometheus.client.Counter.labels", "io.apicurio.hub.core.beans.LinkedAccountType.name"], "call_func_parameter": [["java.lang.String[]"], [""]], "passed_comments": "/"}, {"index": "577", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.PrometheusApiMetrics.accountLinkInitiated", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "@Override\n    public void accountLinkInitiated(LinkedAccountType type) {\n        accountLinksInitiated.labels(type.name()).inc();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.metrics.IApiMetrics#accountLinkInitiated(io.apicurio.hub.core.beans.LinkedAccountType)", "call_func_name": ["io.apicurio.hub.core.beans.LinkedAccountType.name", "io.prometheus.client.Counter.labels"], "call_func_parameter": [[""], ["java.lang.String[]"]], "passed_comments": "/"}, {"index": "578", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/PrometheusApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.PrometheusApiMetrics.accountLinkCompleted", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "@Override\n    public void accountLinkCompleted(LinkedAccountType type) {\n        accountLinksCompleted.labels(type.name()).inc();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.metrics.IApiMetrics#accountLinkCompleted(io.apicurio.hub.core.beans.LinkedAccountType)", "call_func_name": ["io.apicurio.hub.core.beans.LinkedAccountType.name", "io.prometheus.client.Counter.labels"], "call_func_parameter": [[""], ["java.lang.String[]"]], "passed_comments": "/"}, {"index": "579", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/IApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.IApiMetrics.getCurrentMetricsInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCurrentMetricsInfo() throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the current state of the metrics.  This information is typically presented via a REST API or servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "580", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/IApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "methodParameterType": "String#String#", "methodParameterName": "endpoint#method#", "methodBody": "public void apiCall(String endpoint, String method);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates an API call was made.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/IApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.IApiMetrics.apiCreate", "methodParameterType": "ApiDesignType#", "methodParameterName": "type#", "methodBody": "public void apiCreate(ApiDesignType type);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that an API was created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "582", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/IApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.IApiMetrics.apiImport", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void apiImport(LinkedAccountType type);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that an API was imported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "583", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/IApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.IApiMetrics.accountLinkInitiated", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void accountLinkInitiated(LinkedAccountType type);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates a linked account creation was initiated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "584", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/metrics/IApiMetrics.java", "methodName": "io.apicurio.hub.api.metrics.IApiMetrics.accountLinkCompleted", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void accountLinkCompleted(LinkedAccountType type);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Indicates that a linked account was successfully created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "585", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/IBitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getTeams", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<BitbucketTeam> getTeams() throws BitbucketException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the Bitbucket teams for the current user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "586", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/IBitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getRepositories", "methodParameterType": "String#", "methodParameterName": "teamName#", "methodBody": "public Collection<BitbucketRepository> getRepositories(String teamName) throws BitbucketException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the Bitbucket repositories for the current user within the given group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "587", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/IBitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getBranches", "methodParameterType": "String#String#", "methodParameterName": "group#repo#", "methodBody": "public Collection<SourceCodeBranch> getBranches(String group, String repo) throws BitbucketException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the branches available in the given Bitbucket repository.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "588", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketException.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketException.BitbucketException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public BitbucketException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "589", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketException.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketException.BitbucketException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public BitbucketException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "590", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public LinkedAccountType getType() {\n        return LinkedAccountType.Bitbucket;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#getType()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "591", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getBaseApiEndpointUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected String getBaseApiEndpointUrl() {\n        if (apiUrl == null) {\n            apiUrl = this.config.getBitbucketApiUrl();\n        }\n        return apiUrl;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see AbstractSourceConnector#getBaseApiEndpointUrl()", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getBitbucketApiUrl"], "call_func_parameter": [[""]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.getBitbucketApiUrl": "@return the configured Bitbucket API URL"}]}, {"index": "592", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getExternalTokenType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Object getExternalTokenType() {\n        return TOKEN_TYPE_OAUTH;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type of the external token (either private or oauth)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "593", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.parseExternalTokenResponse", "methodParameterType": "String#", "methodParameterName": "body#", "methodBody": "protected Map<String, String> parseExternalTokenResponse(String body) {\n        try {\n            Map<String, String> rval = new HashMap<>();\n            JsonNode jsonNode = mapper.readTree(body);\n            rval.put(\"access_token\", jsonNode.get(\"access_token\").asText());\n            rval.put(\"token_type\", jsonNode.get(\"token_type\").asText());\n            rval.put(\"refresh_token\", jsonNode.get(\"refresh_token\").asText());\n            rval.put(\"scope\", jsonNode.get(\"scopes\").asText());\n            rval.put(\"expires_in\", jsonNode.get(\"expires_in\").asText());\n            return rval;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see AbstractSourceConnector#parseExternalTokenResponse(String)", "call_func_name": ["java.util.HashMap.<init>", "com.fasterxml.jackson.databind.ObjectMapper.readTree", "com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.asText", "java.util.Map.put", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "594", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.validateResourceExists", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "@Override\n    public ApiDesignResourceInfo validateResourceExists(String repositoryUrl) throws NotFoundException, SourceConnectorException, ApiValidationException {\n        logger.debug(\"Validating the existence of resource {}\", repositoryUrl);\n        try {\n            BitbucketResource resource = resolver.resolve(repositoryUrl);\n            if (resource == null) {\n                throw new NotFoundException();\n            }\n            String content = getResourceContent(resource);\n\n            ApiDesignResourceInfo info = ApiDesignResourceInfo.fromContent(content);\n            if (info.getName() == null) {\n                info.setName(resource.getResourcePath());\n            }\n            return info;\n        } catch (NotFoundException nfe) {\n            throw nfe;\n        } catch (ApiValidationException ave) {\n            throw ave;\n        } catch (Exception e) {\n            throw new SourceConnectorException(\"Error checking that a Bitbucket resource exists.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#validateResourceExists(String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getResourceContent", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.fromContent", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName", "io.apicurio.hub.api.bitbucket.BitbucketResource.getResourcePath", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String"], [""], ["io.apicurio.hub.api.bitbucket.BitbucketResource"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve": "Resolves a bitbucket URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getResourceContent": "Gets the content of the given Bitbucket resource.  This is done by querying for the content using the GH API."}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName": "@return the name"}, {"io.apicurio.hub.api.bitbucket.BitbucketResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName": "@param name the name to set"}]}, {"index": "595", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getResourceContent", "methodParameterType": "BitbucketResource#", "methodParameterName": "resource#", "methodBody": "private String getResourceContent(BitbucketResource resource) throws NotFoundException, SourceConnectorException {\n        logger.debug(\"Getting resource content for: {}/{} - {}\",\n                resource.getTeam(), resource.getRepository(), resource.getResourcePath());\n\n        ResourceContent content = getResourceContentFromBitbucket(resource);\n\n        return content.getContent();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the content of the given Bitbucket resource.  This is done by querying for the content using the GH API.", "call_func_name": ["io.apicurio.hub.api.bitbucket.BitbucketResource.getTeam", "io.apicurio.hub.api.bitbucket.BitbucketResource.getRepository", "io.apicurio.hub.api.bitbucket.BitbucketResource.getResourcePath", "org.slf4j.Logger.debug", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getResourceContentFromBitbucket", "io.apicurio.hub.api.beans.ResourceContent.getContent"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["io.apicurio.hub.api.bitbucket.BitbucketResource"], [""]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.api.beans.ResourceContent.getContent": "@return the content"}]}, {"index": "596", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getResourceContent", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "@Override\n    public ResourceContent getResourceContent(String repositoryUrl) throws NotFoundException, SourceConnectorException {\n        BitbucketResource resource = resolver.resolve(repositoryUrl);\n        return getResourceContentFromBitbucket(resource);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#getResourceContent(String)", "call_func_name": ["io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getResourceContentFromBitbucket"], "call_func_parameter": [["java.lang.String"], ["io.apicurio.hub.api.bitbucket.BitbucketResource"]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve": "Resolves a bitbucket URL into a resource object.  The URL must be of the proper format."}]}, {"index": "597", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.updateResourceContent", "methodParameterType": "String#String#String#ResourceContent#", "methodParameterName": "repositoryUrl#commitMessage#commitComment#content#", "methodBody": "@Override\n    public String updateResourceContent(String repositoryUrl, String commitMessage, String commitComment,\n                                        ResourceContent content) throws SourceConnectorException {\n        commitToBitbucket(repositoryUrl, content.getContent(), commitMessage, false);\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#updateResourceContent(String,String,String,ResourceContent)", "call_func_name": ["io.apicurio.hub.api.beans.ResourceContent.getContent", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.commitToBitbucket"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "boolean"]], "passed_comments": [{"io.apicurio.hub.api.beans.ResourceContent.getContent": "@return the content"}, {"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.commitToBitbucket": "Commits new repository file content to Bitbucket."}]}, {"index": "598", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.createResourceContent", "methodParameterType": "String#String#String#", "methodParameterName": "repositoryUrl#commitMessage#content#", "methodBody": "@Override\n    public void createResourceContent(String repositoryUrl, String commitMessage, String content) throws SourceConnectorException {\n        try {\n            this.validateResourceExists(repositoryUrl);\n            throw new SourceConnectorException(\"Cannot create resource (already exists): \" + repositoryUrl);\n        } catch (NotFoundException | ApiValidationException e) {\n            // This is what we want!\n        }\n        commitToBitbucket(repositoryUrl, content, commitMessage, true);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#createResourceContent(String,String,String)", "call_func_name": ["io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.validateResourceExists", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.commitToBitbucket"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "boolean"]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.validateResourceExists": "@see io.apicurio.hub.api.connectors.ISourceConnector#validateResourceExists(String)"}, {"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.commitToBitbucket": "Commits new repository file content to Bitbucket."}]}, {"index": "599", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getTeams", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Collection<BitbucketTeam> getTeams() throws BitbucketException, SourceConnectorException {\n        logger.debug(\"Getting the Bitbucket teams for current user\");\n        Collection<BitbucketTeam> rVal =  new HashSet<>();\n        \n        // First figure out the user's \"user team\" (the team with the user's name)\n        try {\n            String teamsUrl = endpoint(\"/user\")\n                    .toString();\n            HttpRequest request = Unirest.get(teamsUrl);\n            addSecurityTo(request);\n            HttpResponse<com.mashape.unirest.http.JsonNode> response = request.asJson();\n            \n            JSONObject responseObj = response.getBody().getObject();\n\n            if (response.getStatus() != 200) {\n                throw new UnirestException(\"Unexpected response from Bitbucket: \" + response.getStatus() + \"::\" + response.getStatusText());\n            }\n            \n            BitbucketTeam team = new BitbucketTeam();\n            team.setDisplayName(responseObj.getString(\"display_name\"));\n            team.setUsername(responseObj.getString(\"username\"));\n            team.setUserTeam(true);\n            team.setUuid(responseObj.getString(\"uuid\"));\n            rVal.add(team);\n        } catch (UnirestException e) {\n            throw new BitbucketException(\"Error getting Bitbucket teams.\", e);\n        }\n\n        // Now query for all Teams the user is a member of\n        try {\n            String teamsUrl = endpoint(\"/teams\")\n                    .queryParam(\"role\", \"member\")\n                    .queryParam(\"pagelen\", \"25\")\n                    .toString();\n\n            boolean done = false;\n\n            while (!done) {\n                HttpRequest request = Unirest.get(teamsUrl);\n                addSecurityTo(request);\n                HttpResponse<com.mashape.unirest.http.JsonNode> response = request.asJson();\n    \n                JSONObject responseObj = response.getBody().getObject();\n    \n                if (response.getStatus() != 200) {\n                    throw new UnirestException(\"Unexpected response from Bitbucket: \" + response.getStatus() + \"::\" + response.getStatusText());\n                }\n    \n                responseObj.getJSONArray(\"values\").forEach(obj -> {\n                    BitbucketTeam bbt = new BitbucketTeam();\n                    JSONObject team = (JSONObject) obj;\n                    bbt.setDisplayName(team.getString(\"display_name\"));\n                    bbt.setUsername(team.getString(\"username\"));\n                    bbt.setUuid(team.getString(\"uuid\"));\n                    rVal.add(bbt);\n                });\n\n                done = true;\n                if (responseObj.has(\"next\")) {\n                    String next = responseObj.getString(\"next\");\n                    if (!StringUtils.isEmpty(next) && !next.equals(teamsUrl)) {\n                        done = false;\n                        teamsUrl = next;\n                    }\n                }\n            }\n        } catch (UnirestException e) {\n            throw new BitbucketException(\"Error getting Bitbucket teams.\", e);\n        }\n\n        return rVal;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see IBitbucketSourceConnector#getTeams()", "call_func_name": ["org.slf4j.Logger.debug", "java.util.HashSet.<init>", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.endpoint", "com.mashape.unirest.http.Unirest.get", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.addSecurityTo", "com.mashape.unirest.request.HttpRequest.asJson", "com.mashape.unirest.http.HttpResponse.getBody", "com.mashape.unirest.http.JsonNode.getObject", "com.mashape.unirest.http.HttpResponse.getStatus", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.mashape.unirest.http.HttpResponse.getStatusText", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.exceptions.UnirestException.<init>", "io.apicurio.hub.api.beans.BitbucketTeam.<init>", "org.json.JSONObject.getString", "io.apicurio.hub.api.beans.BitbucketTeam.setDisplayName", "io.apicurio.hub.api.beans.BitbucketTeam.setUsername", "io.apicurio.hub.api.beans.BitbucketTeam.setUserTeam", "io.apicurio.hub.api.beans.BitbucketTeam.setUuid", "java.util.Collection.add", "io.apicurio.hub.api.bitbucket.BitbucketException.<init>", "org.json.JSONObject.getJSONArray", "java.util.function.Consumer.accept", "org.json.JSONArray.forEach", "org.json.JSONObject.has", "org.apache.commons.lang.StringUtils.isEmpty", "java.lang.String.equals"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["com.mashape.unirest.request.HttpRequest"], [""], [""], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["boolean"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], ["java.util.Collection"], ["java.util.function.Consumer"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.addSecurityTo": "Adds security information to the http request."}, {"io.apicurio.hub.api.beans.BitbucketTeam.setDisplayName": "@param displayName the displayName to set"}, {"io.apicurio.hub.api.beans.BitbucketTeam.setUsername": "@param username the username to set"}, {"io.apicurio.hub.api.beans.BitbucketTeam.setUserTeam": "@param userTeam the userTeam to set"}, {"io.apicurio.hub.api.beans.BitbucketTeam.setUuid": "@param uuid the uuid to set"}]}, {"index": "600", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getBranches", "methodParameterType": "String#String#", "methodParameterName": "group#repo#", "methodBody": "@Override\n    public Collection<SourceCodeBranch> getBranches(String group, String repo)\n            throws BitbucketException, SourceConnectorException {\n        try {\n            //@formatter:off\n            String branchesUrl = endpoint(\"/repositories/:uname/:repo/refs/branches\")\n                    .bind(\"uname\", group)\n                    .bind(\"repo\", repo)\n                    .queryParam(\"pagelen\", \"25\")\n                    .toString();\n            //@formatter:on;\n\n            Collection<SourceCodeBranch> rVal =  new HashSet<>();\n            boolean done = false;\n\n            while (!done) {\n                HttpRequest request = Unirest.get(branchesUrl);\n                addSecurityTo(request);\n                HttpResponse<com.mashape.unirest.http.JsonNode> response = request.asJson();\n    \n                JSONObject responseObj = response.getBody().getObject();\n    \n                if (response.getStatus() != 200) {\n                    throw new UnirestException(\"Unexpected response from Bitbucket: \" + response.getStatus() + \"::\" + response.getStatusText());\n                }\n    \n    \n                responseObj.getJSONArray(\"values\").forEach(obj -> {\n                    JSONObject b = (JSONObject) obj;\n                    SourceCodeBranch branch = new SourceCodeBranch();\n                    branch.setName(b.getString(\"name\"));\n                    branch.setCommitId(b.getJSONObject(\"target\").getString(\"hash\"));\n                    rVal.add(branch);\n                });\n                \n                done = true;\n                if (responseObj.has(\"next\")) {\n                    String next = responseObj.getString(\"next\");\n                    if (!StringUtils.isEmpty(next) && !next.equals(branchesUrl)) {\n                        done = false;\n                        branchesUrl = next;\n                    }\n                }\n            }\n\n            return rVal;\n\n        } catch (UnirestException e) {\n            throw new BitbucketException(\"Error getting Bitbucket teams.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector#getBranches(java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.endpoint", "java.util.HashSet.<init>", "com.mashape.unirest.http.Unirest.get", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.addSecurityTo", "com.mashape.unirest.request.HttpRequest.asJson", "com.mashape.unirest.http.HttpResponse.getBody", "com.mashape.unirest.http.JsonNode.getObject", "com.mashape.unirest.http.HttpResponse.getStatus", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.mashape.unirest.http.HttpResponse.getStatusText", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.exceptions.UnirestException.<init>", "org.json.JSONObject.getJSONArray", "java.util.function.Consumer.accept", "org.json.JSONArray.forEach", "org.json.JSONObject.has", "org.json.JSONObject.getString", "org.apache.commons.lang.StringUtils.isEmpty", "java.lang.String.equals", "io.apicurio.hub.api.bitbucket.BitbucketException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["com.mashape.unirest.request.HttpRequest"], [""], [""], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.util.Collection"], ["java.util.function.Consumer"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.addSecurityTo": "Adds security information to the http request."}]}, {"index": "601", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.addSecurityTo", "methodParameterType": "HttpRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    protected void addSecurityTo(HttpRequest request) throws SourceConnectorException {\n        if (this.getExternalTokenType() == TOKEN_TYPE_BASIC) {\n            request.header(\"Authorization\", \"Basic \" + getExternalToken());\n        }\n        if (this.getExternalTokenType() == TOKEN_TYPE_OAUTH) {\n            request.header(\"Authorization\", \"Bearer \" + getExternalToken());\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds security information to the http request.", "call_func_name": ["io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getExternalTokenType", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getExternalToken", "java.lang.StringBuilder.toString", "com.mashape.unirest.request.HttpRequest.header"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.getExternalTokenType": "@return the type of the external token (either private or oauth)"}]}, {"index": "602", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.commitToBitbucket", "methodParameterType": "String#String#String#boolean#", "methodParameterName": "repositoryUrl#content#commitMessage#create#", "methodBody": "private String commitToBitbucket(String repositoryUrl, String content, String commitMessage, boolean create) throws SourceConnectorException {\n\n        BitbucketResource resource = resolver.resolve(repositoryUrl);\n\n        try {\n            //@formatter:off\n            String contentUrl = endpoint(\"/repositories/:team/:repo/src\")\n                    .bind(\"team\", resource.getTeam())\n                    .bind(\"repo\", resource.getRepository())\n                    .toString();\n            //@formatter:on\n\n            InputStream filesStream = null;\n            try {\n                filesStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8.name()));\n            } catch (UnsupportedEncodingException e) {\n                throw new SourceConnectorException(\"Error writing content to file stream.\");\n            }\n\n            HttpRequestWithBody request = Unirest.post(contentUrl);\n            addSecurityTo(request);\n\n            //@formatter:off\n            HttpResponse<com.mashape.unirest.http.JsonNode> response = request\n                    .field(resource.getResourcePath(), filesStream, resource.getResourcePath())\n                    .field(\"message\", commitMessage)\n                    .field(\"branch\", resource.getBranch())\n                    .asJson();\n            //@formatter:on\n\n            int responseStatus = response.getStatus();\n            if (responseStatus != 201) {\n                throw new UnirestException(\"Unexpected response from Bitbucket: \" + responseStatus + \"::\" + response.getStatusText());\n            }\n        } catch (UnirestException e) {\n            throw new SourceConnectorException(e);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Commits new repository file content to Bitbucket.", "call_func_name": ["io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.endpoint", "io.apicurio.hub.api.bitbucket.BitbucketResource.getTeam", "io.apicurio.hub.api.bitbucket.BitbucketResource.getRepository", "java.nio.charset.Charset.name", "java.lang.String.getBytes", "java.io.ByteArrayInputStream.<init>", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>", "com.mashape.unirest.http.Unirest.post", "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.addSecurityTo", "io.apicurio.hub.api.bitbucket.BitbucketResource.getResourcePath", "com.mashape.unirest.request.HttpRequestWithBody.field", "com.mashape.unirest.request.body.MultipartBody.field", "io.apicurio.hub.api.bitbucket.BitbucketResource.getBranch", "com.mashape.unirest.request.body.MultipartBody.asJson", "com.mashape.unirest.http.HttpResponse.getStatus", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.mashape.unirest.http.HttpResponse.getStatusText", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.exceptions.UnirestException.<init>", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["byte[]"], ["java.lang.String"], ["java.lang.String"], ["com.mashape.unirest.request.HttpRequest"], [""], ["java.lang.String", "java.io.InputStream", "java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve": "Resolves a bitbucket URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.addSecurityTo": "Adds security information to the http request."}, {"io.apicurio.hub.api.bitbucket.BitbucketResource.getResourcePath": "@return the resourcePath"}]}, {"index": "603", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketSourceConnector.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketSourceConnector.createPullRequestFromZipContent", "methodParameterType": "String#String#ZipInputStream#", "methodParameterName": "repositoryUrl#commitMessage#generatedContent#", "methodBody": "@Override\n    public String createPullRequestFromZipContent(String repositoryUrl, String commitMessage,\n            ZipInputStream generatedContent) throws SourceConnectorException {\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#createPullRequestFromZipContent(java.lang.String,java.lang.String,java.util.zip.ZipInputStream)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketResource.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketResource.BitbucketResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitbucketResource() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketResource.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketResource.getResourcePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResourcePath() {\n        return resourcePath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resourcePath", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketResource.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketResource.setResourcePath", "methodParameterType": "String#", "methodParameterName": "resourcePath#", "methodBody": "public void setResourcePath(String resourcePath) {\n        this.resourcePath = resourcePath;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resourcePath the resourcePath to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketResourceResolver.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.BitbucketResourceResolver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BitbucketResourceResolver() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketResourceResolver.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.createPatternOrTemplate", "methodParameterType": "String#", "methodParameterName": "suffix#", "methodBody": "private String createPatternOrTemplate(String suffix) {\n        String bitbucket = config.getBitbucketUrl();\n        if (bitbucket == null || bitbucket.trim().isEmpty()) {\n            bitbucket = \"https://bitbucket.org\";\n        }\n        if (bitbucket.endsWith(\"/\")) {\n            bitbucket = bitbucket.substring(0, bitbucket.length() - 1);\n        }\n        return bitbucket + suffix;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a pattern with the configured GitLab URL as the prefix and the given suffix at the end.", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getBitbucketUrl", "java.lang.String.trim", "java.lang.String.isEmpty", "java.lang.String.endsWith", "java.lang.String.length", "java.lang.String.substring", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["int", "int"], [""], ["java.lang.String"], [""]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.getBitbucketUrl": "@return the configured Bitbucket URL"}]}, {"index": "609", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketResourceResolver.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public BitbucketResource resolve(String url) {\n        Matcher matcher = pattern1.matcher(url);\n        if (matcher.matches()) {\n            BitbucketResource resource = new BitbucketResource();\n            String team = AbstractResourceResolver.decode(matcher.group(1));\n            String repo = AbstractResourceResolver.decode(matcher.group(2));\n            String branch = AbstractResourceResolver.decode(matcher.group(3));\n            String path = matcher.group(4);\n            if (path.contains(\"?\")) {\n                path = path.substring(0, path.indexOf(\"?\"));\n            }\n            path = AbstractResourceResolver.decode(path);\n            resource.setTeam(team);\n            resource.setRepository(repo);\n            resource.setBranch(branch);\n            resource.setResourcePath(path);\n            return resource;\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves a bitbucket URL into a resource object.  The URL must be of the proper format.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "io.apicurio.hub.api.bitbucket.BitbucketResource.<init>", "java.util.regex.Matcher.group", "io.apicurio.hub.api.github.AbstractResourceResolver.decode", "java.lang.String.contains", "java.lang.String.indexOf", "java.lang.String.substring", "io.apicurio.hub.api.bitbucket.BitbucketResource.setTeam", "io.apicurio.hub.api.bitbucket.BitbucketResource.setRepository", "io.apicurio.hub.api.bitbucket.BitbucketResource.setBranch", "io.apicurio.hub.api.bitbucket.BitbucketResource.setResourcePath"], "call_func_parameter": [["java.lang.CharSequence"], [""], [""], ["int"], ["java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String"], ["int", "int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.github.AbstractResourceResolver.decode": "Decodes a value (in case the value is URL encoded)."}, {"io.apicurio.hub.api.bitbucket.BitbucketResource.setResourcePath": "@param resourcePath the resourcePath to set"}]}, {"index": "610", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/bitbucket/BitbucketResourceResolver.java", "methodName": "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.create", "methodParameterType": "String#String#String#String#", "methodParameterName": "team#repo#branch#resourcePath#", "methodBody": "public String create(String team, String repo, String branch, String resourcePath) {\n        String resource = resourcePath;\n        if (resource == null) {\n            resource = \"\";\n        }\n        if (resource.startsWith(\"/\")) {\n            resource = resource.substring(1);\n        }\n        return template.replace(\":team\", AbstractResourceResolver.encode(team))\n                .replace(\":repo\", AbstractResourceResolver.encode(repo))\n                .replace(\":branch\", AbstractResourceResolver.encode(branch))\n                .replace(\":resource\", resource);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a resource url from the information provided.", "call_func_name": ["java.lang.String.startsWith", "java.lang.String.substring", "io.apicurio.hub.api.github.AbstractResourceResolver.encode", "java.lang.String.replace"], "call_func_parameter": [["java.lang.String"], ["int"], ["java.lang.String"], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.MicrocksConnector", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MicrocksConnector() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Create a new connector for interacting with Microcks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.getKeycloakOAuthToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String getKeycloakOAuthToken() throws MicrocksConnectorException {\n        String keycloakURL = getKeycloakURL();\n        String keycloakClientId = config.getMicrocksClientId();\n        String keycloakClientSecret = config.getMicrocksClientSecret();\n\n        // Retrieve a token using client_credentials flow.\n        HttpRequestWithBody tokenRequest = Unirest.post(keycloakURL + \"/protocol/openid-connect/token\")\n                .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                .header(\"Accept\", \"application/json\").basicAuth(keycloakClientId, keycloakClientSecret);\n\n        HttpResponse<JsonNode> tokenResponse = null;\n        try {\n            tokenResponse = tokenRequest.body(\"grant_type=client_credentials\").asJson();\n        } catch (UnirestException e) {\n            logger.error(\"Exception while connecting to Keycloak backend\", e);\n            throw new MicrocksConnectorException(\n                    \"Exception while connecting Microcks Keycloak backend. Check Keycloak configuration.\");\n        }\n\n        if (tokenResponse.getStatus() != 200) {\n            logger.error(\n                    \"OAuth token cannot be retrieved for Microcks server, check keycloakClient configuration\");\n            throw new MicrocksConnectorException(\n                    \"OAuth token cannot be retrieved for Microcks. Check keycloakClient.\");\n        }\n        return tokenResponse.getBody().getObject().getString(\"access_token\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the OAuth token to use when accessing Microcks.", "call_func_name": ["io.apicurio.hub.api.microcks.MicrocksConnector.getKeycloakURL", "io.apicurio.hub.core.config.HubConfiguration.getMicrocksClientId", "io.apicurio.hub.core.config.HubConfiguration.getMicrocksClientSecret", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.Unirest.post", "com.mashape.unirest.request.HttpRequestWithBody.header", "com.mashape.unirest.request.HttpRequestWithBody.basicAuth", "com.mashape.unirest.request.HttpRequestWithBody.body", "com.mashape.unirest.request.body.RequestBodyEntity.asJson", "org.slf4j.Logger.error", "io.apicurio.hub.api.microcks.MicrocksConnectorException.<init>", "com.mashape.unirest.http.HttpResponse.getStatus", "org.slf4j.Logger.error", "com.mashape.unirest.http.HttpResponse.getBody", "com.mashape.unirest.http.JsonNode.getObject", "org.json.JSONObject.getString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.microcks.MicrocksConnector.getKeycloakURL": "Figures out the URL of the Keycloak server that is protecting Microcks."}, {"io.apicurio.hub.core.config.HubConfiguration.getMicrocksClientId": "@return the configured Microcks ClientId"}, {"io.apicurio.hub.core.config.HubConfiguration.getMicrocksClientSecret": "@return the configured Microcks ClientSecret"}]}, {"index": "613", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.getKeycloakURL", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String getKeycloakURL() throws MicrocksConnectorException {\n        if (this._keycloakURL == null) {\n            // Retrieve the Keycloak configuration to build keycloakURL.\n            HttpResponse<JsonNode> keycloakConfig = null;\n            try {\n                keycloakConfig = Unirest.get(this.apiURL + \"/keycloak/config\")\n                        .header(\"Accept\", \"application/json\").asJson();\n            } catch (UnirestException e) {\n                logger.error(\"Exception while connecting to Microcks backend\", e);\n                throw new MicrocksConnectorException(\n                        \"Exception while connecting Microcks backend. Check URL.\");\n            }\n\n            if (keycloakConfig.getStatus() != 200) {\n                logger.error(\"Keycloak config cannot be fetched from Microcks server, check configuration\");\n                throw new MicrocksConnectorException(\n                        \"Keycloak configuration cannot be fetched from Microcks. Check URL.\");\n            }\n            String authServer = keycloakConfig.getBody().getObject().getString(\"auth-server-url\");\n            String realmName = keycloakConfig.getBody().getObject().getString(\"realm\");\n            this._keycloakURL = authServer + \"/realms/\" + realmName;\n        }\n        return this._keycloakURL;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#StringLiteral#InfixExpression#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Figures out the URL of the Keycloak server that is protecting Microcks.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.Unirest.get", "com.mashape.unirest.request.GetRequest.header", "com.mashape.unirest.request.GetRequest.asJson", "org.slf4j.Logger.error", "io.apicurio.hub.api.microcks.MicrocksConnectorException.<init>", "com.mashape.unirest.http.HttpResponse.getStatus", "org.slf4j.Logger.error", "com.mashape.unirest.http.HttpResponse.getBody", "com.mashape.unirest.http.JsonNode.getObject", "org.json.JSONObject.getString"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.uploadResourceContent", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public String uploadResourceContent(String content) throws MicrocksConnectorException {\n        String oauthToken = this.getKeycloakOAuthToken();\n        MultipartBody uploadRequest = Unirest.post(this.apiURL + \"/artifact/upload\")\n                .header(\"Authorization\", \"Bearer \" + oauthToken)\n                .field(\"file\", new ByteArrayInputStream(content.getBytes(Charset.forName(\"UTF-8\"))), \"open-api-contract.yml\");\n\n        HttpResponse<String> response = null;\n        try {\n            response = uploadRequest.asString();\n        } catch (UnirestException e) {\n            logger.error(\"Exception while connecting to Microcks backend\", e);\n            throw new MicrocksConnectorException(\"Exception while connecting Microcks backend. Check URL.\");\n        }\n\n        switch (response.getStatus()) {\n            case 201:\n                String serviceRef = response.getBody();\n                logger.info(\"Microcks mocks have been created/updated for \" + serviceRef);\n                return serviceRef;\n            case 204:\n                logger.warn(\"NoContent returned by Microcks server\");\n                throw new MicrocksConnectorException(\n                        \"NoContent returned by Microcks server is unexpected return\");\n            case 400:\n                logger.error(\n                        \"ClientRequestMalformed returned by Microcks server: \" + response.getStatusText());\n                throw new MicrocksConnectorException(\"ClientRequestMalformed returned by Microcks server\");\n            case 500:\n                logger.error(\"InternalServerError returned by Microcks server\");\n                throw new MicrocksConnectorException(\"InternalServerError returned by Microcks server\");\n            default:\n                logger.error(\"Unexpected response from Microcks server: \" + response.getStatusText());\n                throw new MicrocksConnectorException(\n                        \"Unexpected response by Microcks server: \" + response.getStatusText());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#StringLiteral#InfixExpression#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ClassInstanceCreation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchCase#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ClassInstanceCreation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Upload an OAS v3 specification content to Microcks. This will trigger service discovery and mock endpoint publication on the Microcks side.", "call_func_name": ["io.apicurio.hub.api.microcks.MicrocksConnector.getKeycloakOAuthToken", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.Unirest.post", "com.mashape.unirest.request.HttpRequestWithBody.header", "java.nio.charset.Charset.forName", "java.lang.String.getBytes", "java.io.ByteArrayInputStream.<init>", "com.mashape.unirest.request.HttpRequestWithBody.field", "com.mashape.unirest.request.body.MultipartBody.asString", "org.slf4j.Logger.error", "io.apicurio.hub.api.microcks.MicrocksConnectorException.<init>", "com.mashape.unirest.http.HttpResponse.getStatus", "com.mashape.unirest.http.HttpResponse.getBody", "org.slf4j.Logger.info", "org.slf4j.Logger.warn", "com.mashape.unirest.http.HttpResponse.getStatusText", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.nio.charset.Charset"], ["byte[]"], ["java.lang.String", "java.io.InputStream", "java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.microcks.MicrocksConnector.getKeycloakOAuthToken": "Returns the OAuth token to use when accessing Microcks."}]}, {"index": "615", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.getSecrets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<MicrocksSecret> getSecrets() throws MicrocksConnectorException {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.getImportJobs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<MicrocksImporter> getImportJobs() throws MicrocksConnectorException {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "617", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.createImportJob", "methodParameterType": "MicrocksImporter#", "methodParameterName": "job#", "methodBody": "public void createImportJob(MicrocksImporter job) throws MicrocksConnectorException {\n        throw new MicrocksConnectorException(\"Not implemented\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": ["io.apicurio.hub.api.microcks.MicrocksConnectorException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "618", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnector.forceResourceImport", "methodParameterType": "MicrocksImporter#", "methodParameterName": "job#", "methodBody": "public void forceResourceImport(MicrocksImporter job) throws MicrocksConnectorException {\n        throw new MicrocksConnectorException(\"Not implemented\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": ["io.apicurio.hub.api.microcks.MicrocksConnectorException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "619", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/MicrocksConnectorException.java", "methodName": "io.apicurio.hub.api.microcks.MicrocksConnectorException.MicrocksConnectorException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public MicrocksConnectorException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Cerate a MicrocksConnectorException with text message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "620", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/IMicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.IMicrocksConnector.uploadResourceContent", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public String uploadResourceContent(String content) throws MicrocksConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Upload an OAS v3 specification content to Microcks. This will trigger service discovery and mock endpoint publication on the Microcks side.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "621", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/IMicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.IMicrocksConnector.getSecrets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<MicrocksSecret> getSecrets() throws MicrocksConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "622", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/IMicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.IMicrocksConnector.getImportJobs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<MicrocksImporter> getImportJobs() throws MicrocksConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/IMicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.IMicrocksConnector.createImportJob", "methodParameterType": "MicrocksImporter#", "methodParameterName": "job#", "methodBody": "public void createImportJob(MicrocksImporter job) throws MicrocksConnectorException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "624", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/microcks/IMicrocksConnector.java", "methodName": "io.apicurio.hub.api.microcks.IMicrocksConnector.forceResourceImport", "methodParameterType": "MicrocksImporter#", "methodParameterName": "job#", "methodBody": "public void forceResourceImport(MicrocksImporter job) throws MicrocksConnectorException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reserved for future usage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/DisableCachingFilter.java", "methodName": "io.apicurio.hub.api.filters.DisableCachingFilter.DisableCachingFilter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DisableCachingFilter() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "C'tor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/DisableCachingFilter.java", "methodName": "io.apicurio.hub.api.filters.DisableCachingFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "config#", "methodBody": "@Override\n    public void init(FilterConfig config) throws ServletException {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "627", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/DisableCachingFilter.java", "methodName": "io.apicurio.hub.api.filters.DisableCachingFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        disableHttpCaching((HttpServletResponse) response);\n        chain.doFilter(request, response);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": ["io.apicurio.hub.api.filters.DisableCachingFilter.disableHttpCaching", "javax.servlet.FilterChain.doFilter"], "call_func_parameter": [["javax.servlet.http.HttpServletResponse"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": "/"}, {"index": "628", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/DisableCachingFilter.java", "methodName": "io.apicurio.hub.api.filters.DisableCachingFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "629", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/CorsFilter.java", "methodName": "io.apicurio.hub.api.filters.CorsFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "config#", "methodBody": "@Override\n    public void init(FilterConfig config) throws ServletException {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "630", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/CorsFilter.java", "methodName": "io.apicurio.hub.api.filters.CorsFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n            ServletException {\n        HttpServletRequest httpReq = (HttpServletRequest) request;\n        HttpServletResponse httpResp = (HttpServletResponse) response;\n\n        if (isPreflightRequest(httpReq)) {\n            httpResp.setHeader(\"Access-Control-Allow-Origin\", httpReq.getHeader(\"Origin\")); //$NON-NLS-1$ //$NON-NLS-2$\n            httpResp.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n            httpResp.setHeader(\"Access-Control-Max-Age\", \"1800\"); //$NON-NLS-1$ //$NON-NLS-2$\n            httpResp.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,HEAD,DELETE\"); //$NON-NLS-1$ //$NON-NLS-2$\n            httpResp.setHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With,Content-Type,Accept,Origin,Authorization,X-Content-SHA,X-Apicurio-CommitMessage,X-Apicurio-CommitComment\"); //$NON-NLS-1$ //$NON-NLS-2$\n            httpResp.setHeader(\"Access-Control-Expose-Headers\", \"X-Apicurio-Error,X-Content-SHA,X-Apicurio-CommitMessage,X-Apicurio-CommitComment,X-Apicurio-EditingSessionUuid,X-Apicurio-ContentVersion\"); //$NON-NLS-1$ //$NON-NLS-2$\n        } else {\n            if (hasOriginHeader(httpReq)) {\n                httpResp.setHeader(\"Access-Control-Allow-Origin\", httpReq.getHeader(\"Origin\")); //$NON-NLS-1$ //$NON-NLS-2$\n                httpResp.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n                httpResp.setHeader(\"Access-Control-Expose-Headers\", \"X-Apicurio-Error,X-Content-SHA,X-Apicurio-CommitMessage,X-Apicurio-CommitComment,X-Apicurio-EditingSessionUuid,X-Apicurio-ContentVersion\"); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n            chain.doFilter(httpReq, httpResp);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": ["io.apicurio.hub.api.filters.CorsFilter.isPreflightRequest", "javax.servlet.http.HttpServletRequest.getHeader", "javax.servlet.http.HttpServletResponse.setHeader", "io.apicurio.hub.api.filters.CorsFilter.hasOriginHeader", "javax.servlet.FilterChain.doFilter"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["javax.servlet.http.HttpServletRequest"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": [{"io.apicurio.hub.api.filters.CorsFilter.isPreflightRequest": "Determines whether the request is a CORS preflight request."}, {"io.apicurio.hub.api.filters.CorsFilter.hasOriginHeader": "Returns true if the Origin request header is present."}]}, {"index": "631", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/CorsFilter.java", "methodName": "io.apicurio.hub.api.filters.CorsFilter.isPreflightRequest", "methodParameterType": "HttpServletRequest#", "methodParameterName": "httpReq#", "methodBody": "private boolean isPreflightRequest(HttpServletRequest httpReq) {\n        return isOptionsMethod(httpReq) && hasOriginHeader(httpReq);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the request is a CORS preflight request.", "call_func_name": ["io.apicurio.hub.api.filters.CorsFilter.isOptionsMethod", "io.apicurio.hub.api.filters.CorsFilter.hasOriginHeader"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest"], ["javax.servlet.http.HttpServletRequest"]], "passed_comments": [{"io.apicurio.hub.api.filters.CorsFilter.isOptionsMethod": "Returns true if it's an OPTIONS http request."}, {"io.apicurio.hub.api.filters.CorsFilter.hasOriginHeader": "Returns true if the Origin request header is present."}]}, {"index": "632", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/CorsFilter.java", "methodName": "io.apicurio.hub.api.filters.CorsFilter.isOptionsMethod", "methodParameterType": "HttpServletRequest#", "methodParameterName": "httpReq#", "methodBody": "private boolean isOptionsMethod(HttpServletRequest httpReq) {\n        return \"OPTIONS\".equals(httpReq.getMethod()); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if it's an OPTIONS http request.", "call_func_name": ["javax.servlet.http.HttpServletRequest.getMethod", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "633", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/CorsFilter.java", "methodName": "io.apicurio.hub.api.filters.CorsFilter.hasOriginHeader", "methodParameterType": "HttpServletRequest#", "methodParameterName": "httpReq#", "methodBody": "private boolean hasOriginHeader(HttpServletRequest httpReq) {\n        String origin = httpReq.getHeader(\"Origin\"); //$NON-NLS-1$\n        return origin != null && origin.trim().length() > 0;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the Origin request header is present.", "call_func_name": ["javax.servlet.http.HttpServletRequest.getHeader", "java.lang.String.trim", "java.lang.String.length"], "call_func_parameter": [["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "634", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/filters/CorsFilter.java", "methodName": "io.apicurio.hub.api.filters.CorsFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "635", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SourceCodeBranch.java", "methodName": "io.apicurio.hub.api.beans.SourceCodeBranch.SourceCodeBranch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SourceCodeBranch() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "636", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SourceCodeBranch.java", "methodName": "io.apicurio.hub.api.beans.SourceCodeBranch.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "637", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SourceCodeBranch.java", "methodName": "io.apicurio.hub.api.beans.SourceCodeBranch.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "638", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SourceCodeBranch.java", "methodName": "io.apicurio.hub.api.beans.SourceCodeBranch.getCommitId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommitId() {\n        return commitId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the commitId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "639", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SourceCodeBranch.java", "methodName": "io.apicurio.hub.api.beans.SourceCodeBranch.setCommitId", "methodParameterType": "String#", "methodParameterName": "commitId#", "methodBody": "public void setCommitId(String commitId) {\n        this.commitId = commitId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param commitId the commitId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "640", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.SystemStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SystemStatus() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "641", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "642", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "643", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "644", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "645", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.getMoreInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMoreInfo() {\n        return moreInfo;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the moreInfo", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "646", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.setMoreInfo", "methodParameterType": "String#", "methodParameterName": "moreInfo#", "methodBody": "public void setMoreInfo(String moreInfo) {\n        this.moreInfo = moreInfo;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param moreInfo the moreInfo to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "647", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.getVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVersion() {\n        return version;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the version", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "648", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.setVersion", "methodParameterType": "String#", "methodParameterName": "version#", "methodBody": "public void setVersion(String version) {\n        this.version = version;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param version the version to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "649", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.getBuiltOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Date getBuiltOn() {\n        return builtOn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the builtOn", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "650", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.setBuiltOn", "methodParameterType": "Date#", "methodParameterName": "builtOn#", "methodBody": "public void setBuiltOn(Date builtOn) {\n        this.builtOn = builtOn;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param builtOn the builtOn to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "651", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.isUp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUp() {\n        return up;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the up", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "652", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.setUp", "methodParameterType": "boolean#", "methodParameterName": "up#", "methodBody": "public void setUp(boolean up) {\n        this.up = up;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param up the up to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "653", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public User getUser() {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the user", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "654", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemStatus.java", "methodName": "io.apicurio.hub.api.beans.SystemStatus.setUser", "methodParameterType": "User#", "methodParameterName": "user#", "methodBody": "public void setUser(User user) {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param user the user to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "655", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.GitHubGetContentsResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubGetContentsResponse() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "656", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "657", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public void setType(String type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "658", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getEncoding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEncoding() {\n        return encoding;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the encoding", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "659", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setEncoding", "methodParameterType": "String#", "methodParameterName": "encoding#", "methodBody": "public void setEncoding(String encoding) {\n        this.encoding = encoding;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param encoding the encoding to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "660", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getSize() {\n        return size;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the size", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "661", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public void setSize(int size) {\n        this.size = size;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param size the size to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "662", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "663", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "664", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "665", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "666", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContent() {\n        return content;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the content", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "667", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setContent", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public void setContent(String content) {\n        this.content = content;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param content the content to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "668", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "669", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "670", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "671", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "672", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getGit_url", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGit_url() {\n        return git_url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the git_url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "673", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setGit_url", "methodParameterType": "String#", "methodParameterName": "git_url#", "methodBody": "public void setGit_url(String git_url) {\n        this.git_url = git_url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param git_url the git_url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "674", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getHtml_url", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHtml_url() {\n        return html_url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the html_url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "675", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setHtml_url", "methodParameterType": "String#", "methodParameterName": "html_url#", "methodBody": "public void setHtml_url(String html_url) {\n        this.html_url = html_url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param html_url the html_url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "676", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getDownload_url", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDownload_url() {\n        return download_url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the download_url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "677", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubGetContentsResponse.java", "methodName": "io.apicurio.hub.api.beans.GitHubGetContentsResponse.setDownload_url", "methodParameterType": "String#", "methodParameterName": "download_url#", "methodBody": "public void setDownload_url(String download_url) {\n        this.download_url = download_url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param download_url the download_url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "678", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.GitLabProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitLabProject() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "679", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "680", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "681", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "682", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.setId", "methodParameterType": "int#", "methodParameterName": "id#", "methodBody": "public void setId(int id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "683", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "684", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "685", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.getFull_path", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFull_path() {\n        return full_path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the full_path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "686", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabProject.java", "methodName": "io.apicurio.hub.api.beans.GitLabProject.setFull_path", "methodParameterType": "String#", "methodParameterName": "full_path#", "methodBody": "public void setFull_path(String full_path) {\n        this.full_path = full_path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param full_path the full_path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "687", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/InitiatedLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.InitiatedLinkedAccount.InitiatedLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InitiatedLinkedAccount() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "688", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/InitiatedLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.InitiatedLinkedAccount.getAuthUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAuthUrl() {\n        return authUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the authUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "689", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/InitiatedLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.InitiatedLinkedAccount.setAuthUrl", "methodParameterType": "String#", "methodParameterName": "authUrl#", "methodBody": "public void setAuthUrl(String authUrl) {\n        this.authUrl = authUrl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param authUrl the authUrl to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "690", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/InitiatedLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.InitiatedLinkedAccount.getNonce", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNonce() {\n        return nonce;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the nonce", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "691", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/InitiatedLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.InitiatedLinkedAccount.setNonce", "methodParameterType": "String#", "methodParameterName": "nonce#", "methodBody": "public void setNonce(String nonce) {\n        this.nonce = nonce;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param nonce the nonce to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "692", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "693", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "694", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "695", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "696", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.getSpecVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSpecVersion() {\n        return specVersion;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the specVersion", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "697", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.setSpecVersion", "methodParameterType": "String#", "methodParameterName": "specVersion#", "methodBody": "public void setSpecVersion(String specVersion) {\n        this.specVersion = specVersion;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param specVersion the specVersion to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "698", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiDesignType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "699", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiDesign.java", "methodName": "io.apicurio.hub.api.beans.NewApiDesign.setType", "methodParameterType": "ApiDesignType#", "methodParameterName": "type#", "methodBody": "public void setType(ApiDesignType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "700", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.GitHubUpdateFileRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubUpdateFileRequest() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "701", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage() {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "702", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message) {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param message the message to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "703", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.getContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContent() {\n        return content;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the content", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "704", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setContent", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public void setContent(String content) {\n        this.content = content;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param content the content to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "705", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "706", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "707", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.getBranch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBranch() {\n        return branch;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the branch", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "708", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubUpdateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setBranch", "methodParameterType": "String#", "methodParameterName": "branch#", "methodBody": "public void setBranch(String branch) {\n        this.branch = branch;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param branch the branch to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "709", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateCommitCommentRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.GitHubCreateCommitCommentRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreateCommitCommentRequest() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "710", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateCommitCommentRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.getBody", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBody() {\n        return body;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the body", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "711", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateCommitCommentRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.setBody", "methodParameterType": "String#", "methodParameterName": "body#", "methodBody": "public void setBody(String body) {\n        this.body = body;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param body the body to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "712", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateCommitCommentRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "713", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateCommitCommentRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "714", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateCommitCommentRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.getPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPosition() {\n        return position;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the position", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "715", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateCommitCommentRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.setPosition", "methodParameterType": "String#", "methodParameterName": "position#", "methodBody": "public void setPosition(String position) {\n        this.position = position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param position the position to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "716", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.getDisplayName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDisplayName() {\n        return displayName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the displayName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "717", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.setDisplayName", "methodParameterType": "String#", "methodParameterName": "displayName#", "methodBody": "public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param displayName the displayName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "718", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsername() {\n        return username;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the username", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "719", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username) {\n        this.username = username;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param username the username to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "720", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.getUuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUuid() {\n        return uuid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the uuid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "721", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.setUuid", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "public void setUuid(String uuid) {\n        this.uuid = uuid;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param uuid the uuid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "722", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.isUserTeam", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUserTeam() {\n        return userTeam;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userTeam", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "723", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/BitbucketTeam.java", "methodName": "io.apicurio.hub.api.beans.BitbucketTeam.setUserTeam", "methodParameterType": "boolean#", "methodParameterName": "userTeam#", "methodBody": "public void setUserTeam(boolean userTeam) {\n        this.userTeam = userTeam;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userTeam the userTeam to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "724", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateFileRequest.GitHubCreateFileRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreateFileRequest() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "725", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateFileRequest.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage() {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "726", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateFileRequest.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message) {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param message the message to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "727", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateFileRequest.getContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContent() {\n        return content;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the content", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "728", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateFileRequest.setContent", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public void setContent(String content) {\n        this.content = content;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param content the content to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "729", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateFileRequest.getBranch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBranch() {\n        return branch;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the branch", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "730", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubCreateFileRequest.java", "methodName": "io.apicurio.hub.api.beans.GitHubCreateFileRequest.setBranch", "methodParameterType": "String#", "methodParameterName": "branch#", "methodBody": "public void setBranch(String branch) {\n        this.branch = branch;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param branch the branch to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "731", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ValidationError.java", "methodName": "io.apicurio.hub.api.beans.ValidationError.ValidationError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ValidationError() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "732", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ValidationError.java", "methodName": "io.apicurio.hub.api.beans.ValidationError.ValidationError", "methodParameterType": "String#String#String#String#String#", "methodParameterName": "errorCode#nodePath#property#message#severity#", "methodBody": "public ValidationError(String errorCode, String nodePath, String property, String message,\n            String severity) {\n        this.errorCode = errorCode;\n        this.nodePath = nodePath;\n        this.property = property;\n        this.message = message;\n        this.severity = severity;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "733", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.NewCodegenProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NewCodegenProject() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "734", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.getProjectType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenProjectType getProjectType() {\n        return projectType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the projectType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "735", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.setProjectType", "methodParameterType": "CodegenProjectType#", "methodParameterName": "projectType#", "methodBody": "public void setProjectType(CodegenProjectType projectType) {\n        this.projectType = projectType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param projectType the projectType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "736", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.getProjectConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getProjectConfig() {\n        return projectConfig;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the projectConfig", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "737", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.setProjectConfig", "methodParameterType": "Map<String,String>#", "methodParameterName": "projectConfig#", "methodBody": "public void setProjectConfig(Map<String, String> projectConfig) {\n        this.projectConfig = projectConfig;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param projectConfig the projectConfig to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "738", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenLocation getLocation() {\n        return location;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the location", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "739", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.setLocation", "methodParameterType": "CodegenLocation#", "methodParameterName": "location#", "methodBody": "public void setLocation(CodegenLocation location) {\n        this.location = location;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param location the location to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "740", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.getPublishInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenPublishInfo getPublishInfo() {\n        return publishInfo;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the publishInfo", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "741", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewCodegenProject.java", "methodName": "io.apicurio.hub.api.beans.NewCodegenProject.setPublishInfo", "methodParameterType": "CodegenPublishInfo#", "methodParameterName": "publishInfo#", "methodBody": "public void setPublishInfo(CodegenPublishInfo publishInfo) {\n        this.publishInfo = publishInfo;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param publishInfo the publishInfo to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "742", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.GitLabGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitLabGroup() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "743", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "744", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.setId", "methodParameterType": "int#", "methodParameterName": "id#", "methodBody": "public void setId(int id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "745", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "746", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "747", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "748", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "749", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.isUserGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUserGroup() {\n        return userGroup;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userGroup", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "750", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.setUserGroup", "methodParameterType": "boolean#", "methodParameterName": "userGroup#", "methodBody": "public void setUserGroup(boolean userGroup) {\n        this.userGroup = userGroup;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userGroup the userGroup to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "751", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.getFull_path", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFull_path() {\n        return full_path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the full_path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "752", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitLabGroup.java", "methodName": "io.apicurio.hub.api.beans.GitLabGroup.setFull_path", "methodParameterType": "String#", "methodParameterName": "full_path#", "methodBody": "public void setFull_path(String full_path) {\n        this.full_path = full_path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param full_path the full_path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "753", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.NewApiPublication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NewApiPublication() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "754", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedAccountType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "755", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setType", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void setType(LinkedAccountType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "756", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getOrg", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOrg() {\n        return org;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the org", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "757", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setOrg", "methodParameterType": "String#", "methodParameterName": "org#", "methodBody": "public void setOrg(String org) {\n        this.org = org;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param org the org to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "758", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getRepo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRepo() {\n        return repo;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the repo", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "759", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setRepo", "methodParameterType": "String#", "methodParameterName": "repo#", "methodBody": "public void setRepo(String repo) {\n        this.repo = repo;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param repo the repo to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "760", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getTeam", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTeam() {\n        return team;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the team", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "761", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setTeam", "methodParameterType": "String#", "methodParameterName": "team#", "methodBody": "public void setTeam(String team) {\n        this.team = team;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param team the team to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "762", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGroup() {\n        return group;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the group", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "763", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setGroup", "methodParameterType": "String#", "methodParameterName": "group#", "methodBody": "public void setGroup(String group) {\n        this.group = group;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param group the group to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "764", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getProject() {\n        return project;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the project", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "765", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setProject", "methodParameterType": "String#", "methodParameterName": "project#", "methodBody": "public void setProject(String project) {\n        this.project = project;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param project the project to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "766", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FormatType getFormat() {\n        return format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "767", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setFormat", "methodParameterType": "FormatType#", "methodParameterName": "format#", "methodBody": "public void setFormat(FormatType format) {\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param format the format to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "768", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getCommitMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommitMessage() {\n        return commitMessage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the commitMessage", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "769", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setCommitMessage", "methodParameterType": "String#", "methodParameterName": "commitMessage#", "methodBody": "public void setCommitMessage(String commitMessage) {\n        this.commitMessage = commitMessage;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param commitMessage the commitMessage to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "770", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResource() {\n        return resource;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "771", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setResource", "methodParameterType": "String#", "methodParameterName": "resource#", "methodBody": "public void setResource(String resource) {\n        this.resource = resource;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resource the resource to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "772", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.getBranch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBranch() {\n        return branch;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the branch", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "773", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/NewApiPublication.java", "methodName": "io.apicurio.hub.api.beans.NewApiPublication.setBranch", "methodParameterType": "String#", "methodParameterName": "branch#", "methodBody": "public void setBranch(String branch) {\n        this.branch = branch;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param branch the branch to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "774", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/UpdateCollaborator.java", "methodName": "io.apicurio.hub.api.beans.UpdateCollaborator.UpdateCollaborator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UpdateCollaborator() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "775", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/UpdateCollaborator.java", "methodName": "io.apicurio.hub.api.beans.UpdateCollaborator.getNewRole", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNewRole() {\n        return newRole;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the newRole", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "776", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/UpdateCollaborator.java", "methodName": "io.apicurio.hub.api.beans.UpdateCollaborator.setNewRole", "methodParameterType": "String#", "methodParameterName": "newRole#", "methodBody": "public void setNewRole(String newRole) {\n        this.newRole = newRole;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param newRole the newRole to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "777", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemReady.java", "methodName": "io.apicurio.hub.api.beans.SystemReady.SystemReady", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SystemReady() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "778", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemReady.java", "methodName": "io.apicurio.hub.api.beans.SystemReady.isUp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUp() {\n        return up;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the up", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "779", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/SystemReady.java", "methodName": "io.apicurio.hub.api.beans.SystemReady.setUp", "methodParameterType": "boolean#", "methodParameterName": "up#", "methodBody": "public void setUp(boolean up) {\n        this.up = up;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param up the up to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "780", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CompleteLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CompleteLinkedAccount.CompleteLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CompleteLinkedAccount() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "781", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CompleteLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CompleteLinkedAccount.getNonce", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNonce() {\n        return nonce;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the nonce", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "782", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CompleteLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CompleteLinkedAccount.setNonce", "methodParameterType": "String#", "methodParameterName": "nonce#", "methodBody": "public void setNonce(String nonce) {\n        this.nonce = nonce;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param nonce the nonce to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "783", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.CodegenPublishInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenPublishInfo() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "784", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedAccountType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "785", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setType", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void setType(LinkedAccountType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "786", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getOrg", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOrg() {\n        return org;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the org", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "787", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setOrg", "methodParameterType": "String#", "methodParameterName": "org#", "methodBody": "public void setOrg(String org) {\n        this.org = org;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param org the org to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "788", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getRepo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRepo() {\n        return repo;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the repo", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "789", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setRepo", "methodParameterType": "String#", "methodParameterName": "repo#", "methodBody": "public void setRepo(String repo) {\n        this.repo = repo;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param repo the repo to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "790", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getTeam", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTeam() {\n        return team;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the team", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "791", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setTeam", "methodParameterType": "String#", "methodParameterName": "team#", "methodBody": "public void setTeam(String team) {\n        this.team = team;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param team the team to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "792", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGroup() {\n        return group;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the group", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "793", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setGroup", "methodParameterType": "String#", "methodParameterName": "group#", "methodBody": "public void setGroup(String group) {\n        this.group = group;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param group the group to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "794", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getProject() {\n        return project;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the project", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "795", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setProject", "methodParameterType": "String#", "methodParameterName": "project#", "methodBody": "public void setProject(String project) {\n        this.project = project;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param project the project to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "796", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getBranch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBranch() {\n        return branch;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the branch", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "797", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setBranch", "methodParameterType": "String#", "methodParameterName": "branch#", "methodBody": "public void setBranch(String branch) {\n        this.branch = branch;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param branch the branch to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "798", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLocation() {\n        return location;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the location", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "799", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setLocation", "methodParameterType": "String#", "methodParameterName": "location#", "methodBody": "public void setLocation(String location) {\n        this.location = location;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param location the location to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "800", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.getCommitMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommitMessage() {\n        return commitMessage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the commitMessage", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "801", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CodegenPublishInfo.java", "methodName": "io.apicurio.hub.api.beans.CodegenPublishInfo.setCommitMessage", "methodParameterType": "String#", "methodParameterName": "commitMessage#", "methodBody": "public void setCommitMessage(String commitMessage) {\n        this.commitMessage = commitMessage;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param commitMessage the commitMessage to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "802", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ResourceContent.java", "methodName": "io.apicurio.hub.api.beans.ResourceContent.ResourceContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResourceContent() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "803", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ResourceContent.java", "methodName": "io.apicurio.hub.api.beans.ResourceContent.getContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContent() {\n        return content;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the content", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "804", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ResourceContent.java", "methodName": "io.apicurio.hub.api.beans.ResourceContent.setContent", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public void setContent(String content) {\n        this.content = content;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param content the content to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "805", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ResourceContent.java", "methodName": "io.apicurio.hub.api.beans.ResourceContent.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "806", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ResourceContent.java", "methodName": "io.apicurio.hub.api.beans.ResourceContent.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "807", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ApiError.java", "methodName": "io.apicurio.hub.api.beans.ApiError.ApiError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiError() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "808", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ApiError.java", "methodName": "io.apicurio.hub.api.beans.ApiError.getErrorType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getErrorType() {\n        return errorType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the errorType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "809", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ApiError.java", "methodName": "io.apicurio.hub.api.beans.ApiError.setErrorType", "methodParameterType": "String#", "methodParameterName": "errorType#", "methodBody": "public void setErrorType(String errorType) {\n        this.errorType = errorType;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param errorType the errorType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "810", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ApiError.java", "methodName": "io.apicurio.hub.api.beans.ApiError.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage() {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "811", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ApiError.java", "methodName": "io.apicurio.hub.api.beans.ApiError.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message) {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param message the message to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "812", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ApiError.java", "methodName": "io.apicurio.hub.api.beans.ApiError.getTrace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTrace() {\n        return trace;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the trace", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "813", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ApiError.java", "methodName": "io.apicurio.hub.api.beans.ApiError.setTrace", "methodParameterType": "String#", "methodParameterName": "trace#", "methodBody": "public void setTrace(String trace) {\n        this.trace = trace;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param trace the trace to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "814", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubOrganization.java", "methodName": "io.apicurio.hub.api.beans.GitHubOrganization.GitHubOrganization", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubOrganization() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "815", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubOrganization.java", "methodName": "io.apicurio.hub.api.beans.GitHubOrganization.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "816", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubOrganization.java", "methodName": "io.apicurio.hub.api.beans.GitHubOrganization.setId", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "public void setId(String id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "817", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubOrganization.java", "methodName": "io.apicurio.hub.api.beans.GitHubOrganization.isUserOrg", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUserOrg() {\n        return userOrg;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the userOrg", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "818", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubOrganization.java", "methodName": "io.apicurio.hub.api.beans.GitHubOrganization.setUserOrg", "methodParameterType": "boolean#", "methodParameterName": "userOrg#", "methodBody": "public void setUserOrg(boolean userOrg) {\n        this.userOrg = userOrg;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param userOrg the userOrg to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "819", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CreateLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CreateLinkedAccount.CreateLinkedAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CreateLinkedAccount() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "820", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CreateLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CreateLinkedAccount.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedAccountType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "821", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CreateLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CreateLinkedAccount.setType", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void setType(LinkedAccountType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "822", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CreateLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CreateLinkedAccount.getRedirectUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRedirectUrl() {\n        return redirectUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the redirectUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "823", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/CreateLinkedAccount.java", "methodName": "io.apicurio.hub.api.beans.CreateLinkedAccount.setRedirectUrl", "methodParameterType": "String#", "methodParameterName": "redirectUrl#", "methodBody": "public void setRedirectUrl(String redirectUrl) {\n        this.redirectUrl = redirectUrl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param redirectUrl the redirectUrl to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "824", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ImportApiDesign.java", "methodName": "io.apicurio.hub.api.beans.ImportApiDesign.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "825", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ImportApiDesign.java", "methodName": "io.apicurio.hub.api.beans.ImportApiDesign.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "826", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ImportApiDesign.java", "methodName": "io.apicurio.hub.api.beans.ImportApiDesign.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getData() {\n        return data;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "827", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/ImportApiDesign.java", "methodName": "io.apicurio.hub.api.beans.ImportApiDesign.setData", "methodParameterType": "String#", "methodParameterName": "data#", "methodBody": "public void setData(String data) {\n        this.data = data;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param data the data to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "828", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubRepository.java", "methodName": "io.apicurio.hub.api.beans.GitHubRepository.GitHubRepository", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubRepository() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "829", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubRepository.java", "methodName": "io.apicurio.hub.api.beans.GitHubRepository.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "830", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubRepository.java", "methodName": "io.apicurio.hub.api.beans.GitHubRepository.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "831", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubRepository.java", "methodName": "io.apicurio.hub.api.beans.GitHubRepository.isPriv", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPriv() {\n        return priv;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the priv", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "832", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/beans/GitHubRepository.java", "methodName": "io.apicurio.hub.api.beans.GitHubRepository.setPriv", "methodParameterType": "boolean#", "methodParameterName": "priv#", "methodBody": "public void setPriv(boolean priv) {\n        this.priv = priv;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param priv the priv to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "833", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public LinkedAccountType getType() {\n        return LinkedAccountType.GitLab;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#getType()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "834", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getBaseApiEndpointUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected String getBaseApiEndpointUrl() {\n        if (apiUrl == null) {\n            apiUrl = this.config.getGitLabApiUrl();\n        }\n        return apiUrl;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see AbstractSourceConnector#getBaseApiEndpointUrl()", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getGitLabApiUrl"], "call_func_parameter": [[""]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.getGitLabApiUrl": "@return the configured GitLab API URL"}]}, {"index": "835", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.parseExternalTokenResponse", "methodParameterType": "String#", "methodParameterName": "body#", "methodBody": "protected Map<String, String> parseExternalTokenResponse(String body) {\n        try {\n            Map<String, String> rval = new HashMap<>();\n            JsonNode jsonNode = mapper.readTree(body);\n            rval.put(\"access_token\", jsonNode.get(\"access_token\").asText());\n            rval.put(\"token_type\", jsonNode.get(\"token_type\").asText());\n            rval.put(\"refresh_token\", jsonNode.get(\"refresh_token\").asText());\n            rval.put(\"scope\", jsonNode.get(\"scope\").asText());\n            rval.put(\"created_at\", jsonNode.get(\"created_at\").asText());\n            rval.put(\"id_token\", jsonNode.get(\"id_token\").asText());\n            return rval;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.AbstractSourceConnector#parseExternalTokenResponse(java.lang.String)", "call_func_name": ["java.util.HashMap.<init>", "com.fasterxml.jackson.databind.ObjectMapper.readTree", "com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.asText", "java.util.Map.put", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "836", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.validateResourceExists", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "@Override\n    public ApiDesignResourceInfo validateResourceExists(String repositoryUrl) throws NotFoundException, SourceConnectorException, ApiValidationException {\n        logger.debug(\"Validating the existence of resource {}\", repositoryUrl);\n        try {\n            GitLabResource resource = resolver.resolve(repositoryUrl);\n\n            if (resource == null) {\n                throw new NotFoundException();\n            }\n            String content = getResourceContent(resource);\n            \n            ApiDesignResourceInfo info = ApiDesignResourceInfo.fromContent(content);\n            if (info.getName() == null) {\n                info.setName(resource.getResourcePath());\n            }\n            return info;\n        } catch (NotFoundException nfe) {\n            throw nfe;\n        } catch (ApiValidationException ave) {\n            throw ave;\n        } catch (Exception e) {\n            throw new SourceConnectorException(\"Error checking that a GitLab resource exists.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#validateResourceExists(String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContent", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.fromContent", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName", "io.apicurio.hub.api.gitlab.GitLabResource.getResourcePath", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String"], [""], ["io.apicurio.hub.api.gitlab.GitLabResource"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve": "Resolves a GitLab URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContent": "Gets the content of the given GitLab resource.  This is done by querying for the content using the GH API."}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName": "@return the name"}, {"io.apicurio.hub.api.gitlab.GitLabResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName": "@param name the name to set"}]}, {"index": "837", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContent", "methodParameterType": "GitLabResource#", "methodParameterName": "resource#", "methodBody": "private String getResourceContent(GitLabResource resource) throws NotFoundException, SourceConnectorException {\n        logger.debug(\"Getting resource content for: {}/{} - {}\",\n                resource.getGroup(), resource.getProject(), resource.getResourcePath());\n\n        ResourceContent content = getResourceContentFromGitLab(resource);\n\n        return content.getContent();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the content of the given GitLab resource.  This is done by querying for the content using the GH API.", "call_func_name": ["io.apicurio.hub.api.gitlab.GitLabResource.getGroup", "io.apicurio.hub.api.gitlab.GitLabResource.getProject", "io.apicurio.hub.api.gitlab.GitLabResource.getResourcePath", "org.slf4j.Logger.debug", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContentFromGitLab", "io.apicurio.hub.api.beans.ResourceContent.getContent"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["io.apicurio.hub.api.gitlab.GitLabResource"], [""]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabResource.getGroup": "@return the group"}, {"io.apicurio.hub.api.gitlab.GitLabResource.getProject": "@return the project"}, {"io.apicurio.hub.api.gitlab.GitLabResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContentFromGitLab": "Gets the actual content of a resource.  Returns the raw content and the commit id."}, {"io.apicurio.hub.api.beans.ResourceContent.getContent": "@return the content"}]}, {"index": "838", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity", "methodParameterType": "HttpRequestBase#", "methodParameterName": "request#", "methodBody": "protected void addSecurity(HttpRequestBase request) throws SourceConnectorException {\n        if (this.getExternalTokenType() == TOKEN_TYPE_PAT) {\n            request.addHeader(\"PRIVATE-TOKEN\", getExternalToken());\n        }\n        if (this.getExternalTokenType() == TOKEN_TYPE_OAUTH) {\n            request.addHeader(\"Authorization\", \"Bearer \" + getExternalToken());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds security information to the http request.", "call_func_name": ["io.apicurio.hub.api.gitlab.GitLabSourceConnector.getExternalTokenType", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getExternalToken", "org.apache.http.client.methods.HttpRequestBase.addHeader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabSourceConnector.getExternalTokenType": "@return the type of the external token (either private or oauth)"}]}, {"index": "839", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getExternalTokenType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Object getExternalTokenType() {\n        return TOKEN_TYPE_OAUTH;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type of the external token (either private or oauth)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "840", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContent", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "@Override\n    public ResourceContent getResourceContent(String repositoryUrl) throws NotFoundException, SourceConnectorException {\n        GitLabResource resource = resolver.resolve(repositoryUrl);\n        return getResourceContentFromGitLab(resource);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#getResourceContent(String)", "call_func_name": ["io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContentFromGitLab"], "call_func_parameter": [["java.lang.String"], ["io.apicurio.hub.api.gitlab.GitLabResource"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve": "Resolves a GitLab URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContentFromGitLab": "Gets the actual content of a resource.  Returns the raw content and the commit id."}]}, {"index": "841", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.updateResourceContent", "methodParameterType": "String#String#String#ResourceContent#", "methodParameterName": "repositoryUrl#commitMessage#commitComment#content#", "methodBody": "@Override\n    public String updateResourceContent(String repositoryUrl, String commitMessage, String commitComment,\n                                        ResourceContent content) throws SourceConnectorException {\n        String rval = commitToGitLab(repositoryUrl, content.getContent(), commitMessage, false);\n        if (commitComment != null && !commitComment.trim().isEmpty()) {\n            addCommitComment(repositoryUrl, rval, commitComment);\n        }\n        return rval;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#updateResourceContent(String,String,String,ResourceContent)", "call_func_name": ["io.apicurio.hub.api.beans.ResourceContent.getContent", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.commitToGitLab", "java.lang.String.trim", "java.lang.String.isEmpty", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addCommitComment"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "boolean"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.beans.ResourceContent.getContent": "@return the content"}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.commitToGitLab": "Commits new repository file content to GitLab."}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.addCommitComment": "Uses the GH API to add a commit comment."}]}, {"index": "842", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addCommitComment", "methodParameterType": "String#String#String#", "methodParameterName": "repositoryUrl#commitSha#commitComment#", "methodBody": "private void addCommitComment(String repositoryUrl, String commitSha, String commitComment)\n            throws SourceConnectorException {\n\n        GitLabResource resource = resolver.resolve(repositoryUrl);\n\n        String urlEncodedId = toEncodedId(resource);\n        String addCommentUrl = this.endpoint(\"/api/v4/projects/:id/repository/commits/:sha/comments\")\n                .bind(\"id\", urlEncodedId)\n                .bind(\"sha\", commitSha)\n                .toString();\n\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpPost post = new HttpPost(addCommentUrl);\n            addSecurity(post);\n            // Set note as a form body parameter\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"note\", commitComment));\n            post.setEntity(new UrlEncodedFormEntity(nvps));\n            \n            try (CloseableHttpResponse response = httpClient.execute(post)) {\n                if (response.getStatusLine().getStatusCode() != 201) {\n                    throw new SourceConnectorException(\"Unexpected response from GitLab: \" + response.getStatusLine().toString());\n                }\n            }\n        } catch (IOException e) {\n            throw new SourceConnectorException(\"Error adding comment to GitLab commit.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Uses the GH API to add a commit comment.", "call_func_name": ["io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.toEncodedId", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.endpoint", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpPost.<init>", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity", "java.util.ArrayList.<init>", "org.apache.http.message.BasicNameValuePair.<init>", "java.util.List.add", "org.apache.http.client.entity.UrlEncodedFormEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.toString", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.close", "java.lang.Throwable.addSuppressed", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.lang.String"], ["io.apicurio.hub.api.gitlab.GitLabResource"], ["java.lang.String"], [""], ["java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.util.List"], ["org.apache.http.HttpEntity"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.Throwable"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve": "Resolves a GitLab URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity": "Adds security information to the http request."}]}, {"index": "843", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.createResourceContent", "methodParameterType": "String#String#String#", "methodParameterName": "repositoryUrl#commitMessage#content#", "methodBody": "@Override\n    public void createResourceContent(String repositoryUrl, String commitMessage, String content) throws SourceConnectorException {\n        commitToGitLab(repositoryUrl, content, commitMessage, true);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#createResourceContent(String,String,String)", "call_func_name": ["io.apicurio.hub.api.gitlab.GitLabSourceConnector.commitToGitLab"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "boolean"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabSourceConnector.commitToGitLab": "Commits new repository file content to GitLab."}]}, {"index": "844", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getGroups", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Collection<GitLabGroup> getGroups() throws GitLabException, SourceConnectorException {\n        logger.debug(\"Getting the GitLab groups for current user\");\n\n        Collection<GitLabGroup> rval = new HashSet<>();\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            \n            // Get the user's personal group\n            HttpGet get = new HttpGet(this.endpoint(\"/api/v4/user\").toString());\n            get.addHeader(\"Accept\", \"application/json\");\n            addSecurity(get);\n            try (CloseableHttpResponse response = httpClient.execute(get)) {\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    throw new SourceConnectorException(\"Error getting GitLab user information: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    JsonNode node = mapper.readTree(contentStream);\n                    if (node.isObject()) {\n                        int id = node.get(\"id\").asInt();\n                        String username = node.get(\"username\").asText();\n                        String fullName = node.get(\"name\").asText();\n                        GitLabGroup glg = new GitLabGroup();\n                        glg.setId(id);\n                        glg.setName(fullName);\n                        glg.setPath(username);\n                        glg.setFull_path(username);\n                        glg.setUserGroup(true);\n                        rval.add(glg);\n                    }\n                }\n            }\n            \n            // Now get all the groups the user has access to\n            Endpoint endpoint = pagedEndpoint(\"/api/v4/groups\", 1, DEFAULT_PAGE_SIZE);\n            \n            // Set the \"all_available\" and \"min_access_level\" params, if configured.\n            String allAvailable = this.config.getGitLabGroupAllAvailable();\n            if (allAvailable != null && !allAvailable.isEmpty()) {\n                endpoint.queryParam(\"all_available\", allAvailable);\n            }\n            String minAccessLevel = this.config.getGitLabGroupMinAccessLevel();\n            if (minAccessLevel != null && !minAccessLevel.isEmpty()) {\n                endpoint.queryParam(\"min_access_level\", minAccessLevel);\n            }\n\n            Collection<GitLabGroup> groups = getAllGroups(httpClient, endpoint);\n            rval.addAll(groups);\n        } catch (IOException e) {\n            throw new GitLabException(\"Error getting GitLab groups.\", e);\n        }\n        return rval;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see IGitLabSourceConnector#getGroups()", "call_func_name": ["org.slf4j.Logger.debug", "java.util.HashSet.<init>", "org.apache.http.impl.client.HttpClients.createDefault", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.endpoint", "org.apache.http.client.methods.HttpGet.<init>", "org.apache.http.client.methods.HttpGet.addHeader", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readTree", "com.fasterxml.jackson.databind.JsonNode.isObject", "com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.asInt", "com.fasterxml.jackson.databind.JsonNode.asText", "io.apicurio.hub.api.beans.GitLabGroup.<init>", "io.apicurio.hub.api.beans.GitLabGroup.setId", "io.apicurio.hub.api.beans.GitLabGroup.setName", "io.apicurio.hub.api.beans.GitLabGroup.setPath", "io.apicurio.hub.api.beans.GitLabGroup.setFull_path", "io.apicurio.hub.api.beans.GitLabGroup.setUserGroup", "java.util.Collection.add", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.pagedEndpoint", "io.apicurio.hub.core.config.HubConfiguration.getGitLabGroupAllAvailable", "java.lang.String.isEmpty", "io.apicurio.hub.core.config.HubConfiguration.getGitLabGroupMinAccessLevel", "java.util.Collection.addAll", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.gitlab.GitLabException.<init>"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream"], [""], ["java.lang.String"], [""], [""], [""], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["boolean"], ["java.lang.Object"], [""], ["java.lang.Throwable"], [""], ["java.lang.String", "int", "int"], [""], [""], [""], ["java.util.Collection"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity": "Adds security information to the http request."}, {"io.apicurio.hub.api.beans.GitLabGroup.setId": "@param id the id to set"}, {"io.apicurio.hub.api.beans.GitLabGroup.setName": "@param name the name to set"}, {"io.apicurio.hub.api.beans.GitLabGroup.setPath": "@param path the path to set"}, {"io.apicurio.hub.api.beans.GitLabGroup.setFull_path": "@param full_path the full_path to set"}, {"io.apicurio.hub.api.beans.GitLabGroup.setUserGroup": "@param userGroup the userGroup to set"}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.pagedEndpoint": "Convenience for getting an endpoint with the page and page size configured."}, {"io.apicurio.hub.core.config.HubConfiguration.getGitLabGroupAllAvailable": "@return the configured GitLab Group access mode"}, {"io.apicurio.hub.core.config.HubConfiguration.getGitLabGroupMinAccessLevel": "@return the configured GitLab Group min access level"}]}, {"index": "845", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getAllGroups", "methodParameterType": "CloseableHttpClient#Endpoint#", "methodParameterName": "httpClient#endpoint#", "methodBody": "private Collection<GitLabGroup> getAllGroups(CloseableHttpClient httpClient, Endpoint endpoint) throws IOException, SourceConnectorException {\n        Collection<GitLabGroup> groups = new ArrayList<>();\n        \n        String nextPageUrl = addGroups(httpClient, endpoint, groups);\n        while (nextPageUrl != null) {\n            Endpoint nextEndpoint = new Endpoint(nextPageUrl);\n            nextPageUrl = addGroups(httpClient, nextEndpoint, groups);\n        }\n        return groups;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the full list of groups - handles paged results.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "846", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addGroups", "methodParameterType": "CloseableHttpClient#Endpoint#Collection<GitLabGroup>#", "methodParameterName": "httpClient#endpoint#groups#", "methodBody": "private String addGroups(CloseableHttpClient httpClient, Endpoint endpoint,\n            Collection<GitLabGroup> groups) throws IOException, SourceConnectorException {\n        HttpGet get = new HttpGet(endpoint.toString());\n        get.addHeader(\"Accept\", \"application/json\");\n        addSecurity(get);\n        try (CloseableHttpResponse response = httpClient.execute(get)) {\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new SourceConnectorException(\n                        \"Error getting GitLab groups: \" + response.getStatusLine().getReasonPhrase());\n            }\n            try (InputStream contentStream = response.getEntity().getContent()) {\n                JsonNode node = mapper.readTree(contentStream);\n                if (node.isArray()) {\n                    ArrayNode array = (ArrayNode) node;\n                    array.forEach(obj -> {\n                        JsonNode org = (JsonNode) obj;\n                        int id = org.get(\"id\").asInt();\n                        String name = org.get(\"name\").asText();\n                        String path = org.get(\"path\").asText();\n                        String fullPath = org.get(\"full_path\").asText();\n                        GitLabGroup glg = new GitLabGroup();\n                        glg.setId(id);\n                        glg.setName(name);\n                        glg.setPath(path);\n                        glg.setFull_path(fullPath);\n                        groups.add(glg);\n                    });\n                }\n            }\n            Header linkHeader = response.getFirstHeader(\"Link\");\n            return getNextPage(linkHeader);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Queries the given endpoint, reads the resulting groups, adds all of the groups it finds to the collection of groups, and then returns a URL of the next page of results.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "847", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getProjects", "methodParameterType": "String#", "methodParameterName": "group#", "methodBody": "@Override\n    public Collection<GitLabProject> getProjects(String group) throws GitLabException, SourceConnectorException {\n        logger.debug(\"Getting the projects from group {}\", group);\n\n        Collection<GitLabProject> rval = new HashSet<>();\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\n            // Get the user's personal group\n            String gitLabUsername = null;\n            String gitLabUserId = null;\n            HttpGet get = new HttpGet(this.endpoint(\"/api/v4/user\").toString());\n            get.addHeader(\"Accept\", \"application/json\");\n            addSecurity(get);\n            try (CloseableHttpResponse response = httpClient.execute(get)) {\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    throw new SourceConnectorException(\"Error getting GitLab user information: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    JsonNode node = mapper.readTree(contentStream);\n                    if (node.isObject()) {\n                        gitLabUsername = node.get(\"username\").asText();\n                        gitLabUserId = node.get(\"id\").asText();\n                    }\n                }\n            }\n            \n            if (group != null && group.equalsIgnoreCase(gitLabUsername)) {\n                // List all user projects\n                //////////////////////////////\n                Endpoint endpoint = pagedEndpoint(\"/api/v4/users/:user_id/projects\", 1, DEFAULT_PAGE_SIZE).bind(\"user_id\", gitLabUserId);\n                Collection<GitLabProject> projects = getAllProjects(httpClient, endpoint);\n                rval.addAll(projects);\n            } else {\n                // List all group projects\n                //////////////////////////////\n                String gid = toId(group);\n                Endpoint endpoint = pagedEndpoint(\"/api/v4/groups/:group/projects\", 1, DEFAULT_PAGE_SIZE).bind(\"group\", gid);\n                Collection<GitLabProject> projects = getAllProjects(httpClient, endpoint);\n                rval.addAll(projects);\n            }\n        } catch (IOException e) {\n            throw new GitLabException(\"Error getting GitLab repositories.\", e);\n        }\n        return rval;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#NumberLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#NumberLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)TryStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.gitlab.IGitLabSourceConnector#getProjects(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "java.util.HashSet.<init>", "org.apache.http.impl.client.HttpClients.createDefault", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.endpoint", "org.apache.http.client.methods.HttpGet.<init>", "org.apache.http.client.methods.HttpGet.addHeader", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readTree", "com.fasterxml.jackson.databind.JsonNode.isObject", "com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.asText", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "java.lang.String.equalsIgnoreCase", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.pagedEndpoint", "java.util.Collection.addAll", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.toId", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.gitlab.GitLabException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream"], [""], ["java.lang.String"], [""], [""], ["java.lang.Throwable"], [""], ["java.lang.String"], ["java.lang.String", "int", "int"], ["java.util.Collection"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity": "Adds security information to the http request."}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.pagedEndpoint": "Convenience for getting an endpoint with the page and page size configured."}]}, {"index": "848", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getAllProjects", "methodParameterType": "CloseableHttpClient#Endpoint#", "methodParameterName": "httpClient#endpoint#", "methodBody": "private Collection<GitLabProject> getAllProjects(CloseableHttpClient httpClient, Endpoint endpoint) throws IOException, SourceConnectorException {\n        Collection<GitLabProject> projects = new ArrayList<>();\n        \n        String nextPageUrl = addProjects(httpClient, endpoint, projects);\n        while (nextPageUrl != null) {\n            Endpoint nextEndpoint = new Endpoint(nextPageUrl);\n            nextPageUrl = addProjects(httpClient, nextEndpoint, projects);\n        }\n        return projects;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets all of the projects using the given endpoint.  This handles paging by following the Link HTTP header returned by GitLab.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "849", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addProjects", "methodParameterType": "CloseableHttpClient#Endpoint#Collection<GitLabProject>#", "methodParameterName": "httpClient#endpoint#projects#", "methodBody": "private String addProjects(CloseableHttpClient httpClient, Endpoint endpoint,\n            Collection<GitLabProject> projects) throws IOException, SourceConnectorException {\n        HttpGet get = new HttpGet(endpoint.toString());\n        get.addHeader(\"Accept\", \"application/json\");\n        addSecurity(get);\n\n        try (CloseableHttpResponse response = httpClient.execute(get)) {\n            try (InputStream contentStream = response.getEntity().getContent()) {\n                JsonNode node = mapper.readTree(contentStream);\n                if (node.isArray()) {\n                    ArrayNode array = (ArrayNode) node;\n                    array.forEach(obj -> {\n                        JsonNode project = (JsonNode) obj;\n                        int id = project.get(\"id\").asInt();\n                        String name = project.get(\"name\").asText();\n                        String path = project.get(\"path\").asText();\n                        String fullPath = project.get(\"path_with_namespace\").asText();\n                        GitLabProject glp = new GitLabProject();\n                        glp.setId(id);\n                        glp.setName(name);\n                        glp.setPath(path);\n                        glp.setFull_path(fullPath);\n                        projects.add(glp);\n                    });\n                }\n            }\n            Header linkHeader = response.getFirstHeader(\"Link\");\n            return getNextPage(linkHeader);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Queries the given endpoint, reads the resulting projects, adds all of the projects it finds to the collection of projects, and then returns a URL of the next page of results.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "850", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getBranches", "methodParameterType": "String#String#", "methodParameterName": "group#project#", "methodBody": "@Override\n    public Collection<SourceCodeBranch> getBranches(String group, String project)\n            throws GitLabException, SourceConnectorException {\n        logger.debug(\"Getting the branches from {} / {}\", group, project);\n\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            Endpoint endpoint = pagedEndpoint(\"/api/v4/projects/:id/repository/branches\", 1, DEFAULT_PAGE_SIZE)\n                    .bind(\"id\", toEncodedId(group, project));\n            return getAllBranches(httpClient, endpoint);\n        } catch (IOException e) {\n            throw new GitLabException(\"Error getting GitLab branches.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#NumberLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.gitlab.IGitLabSourceConnector#getBranches(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "org.apache.http.impl.client.HttpClients.createDefault", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.pagedEndpoint", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.toEncodedId", "org.apache.http.impl.client.CloseableHttpClient.close", "java.lang.Throwable.addSuppressed", "io.apicurio.hub.api.gitlab.GitLabException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "int", "int"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabSourceConnector.pagedEndpoint": "Convenience for getting an endpoint with the page and page size configured."}]}, {"index": "851", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getAllBranches", "methodParameterType": "CloseableHttpClient#Endpoint#", "methodParameterName": "httpClient#endpoint#", "methodBody": "private Collection<SourceCodeBranch> getAllBranches(CloseableHttpClient httpClient, Endpoint endpoint) throws IOException, SourceConnectorException {\n        Collection<SourceCodeBranch> branches = new ArrayList<>();\n        \n        String nextPageUrl = addBranches(httpClient, endpoint, branches);\n        while (nextPageUrl != null) {\n            Endpoint nextEndpoint = new Endpoint(nextPageUrl);\n            nextPageUrl = addBranches(httpClient, nextEndpoint, branches);\n        }\n        return branches;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets all branches using the given endpoint.  Handles paging by following the Link HTTP header returned by GitLab.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "852", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addBranches", "methodParameterType": "CloseableHttpClient#Endpoint#Collection<SourceCodeBranch>#", "methodParameterName": "httpClient#endpoint#branches#", "methodBody": "private String addBranches(CloseableHttpClient httpClient, Endpoint endpoint,\n            Collection<SourceCodeBranch> branches) throws IOException, SourceConnectorException {\n        HttpGet get = new HttpGet(endpoint.toString());\n        get.addHeader(\"Accept\", \"application/json\");\n        addSecurity(get);\n\n        try (CloseableHttpResponse response = httpClient.execute(get)) {\n            try (InputStream contentStream = response.getEntity().getContent()) {\n                JsonNode node = mapper.readTree(contentStream);\n                if (node.isArray()) {\n                    ArrayNode array = (ArrayNode) node;\n                    array.forEach(obj -> {\n                        JsonNode branch = (JsonNode) obj;\n                        SourceCodeBranch glBranch = new SourceCodeBranch();\n                        glBranch.setName(branch.get(\"name\").asText());\n                        glBranch.setCommitId(branch.get(\"commit\").get(\"id\").asText());\n                        branches.add(glBranch);\n                    });\n                }\n            }\n            Header linkHeader = response.getFirstHeader(\"Link\");\n            return getNextPage(linkHeader);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Queries the given endpoint, reads the resulting branches, adds all of the branches it finds to the collection of branches, and then returns a URL of the next page of results.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "853", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.pagedEndpoint", "methodParameterType": "String#int#int#", "methodParameterName": "path#page#perPage#", "methodBody": "private Endpoint pagedEndpoint(String path, int page, int perPage){\n        return this.endpoint(path)\n                .queryParam(\"page\", String.valueOf(page))\n                .queryParam(\"per_page\", String.valueOf(perPage));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience for getting an endpoint with the page and page size configured.", "call_func_name": ["io.apicurio.hub.api.gitlab.GitLabSourceConnector.endpoint", "java.lang.String.valueOf"], "call_func_parameter": [["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "854", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurityTo", "methodParameterType": "HttpRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    protected void addSecurityTo(HttpRequest request) throws SourceConnectorException {\n        // TODO: not currently supported because we're not using Unirest as our HTTP client.  We'll convert *all* clients to use Apache HTTP Client soon and this method will change\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see AbstractSourceConnector#addSecurityTo(HttpRequest)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "855", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.commitToGitLab", "methodParameterType": "String#String#String#boolean#", "methodParameterName": "repositoryUrl#content#commitMessage#create#", "methodBody": "private String commitToGitLab(String repositoryUrl, String content, String commitMessage, boolean create) throws SourceConnectorException {\n\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            GitLabResource resource = resolver.resolve(repositoryUrl);\n\n            String contentUrl = this.endpoint(\"/api/v4/projects/:id/repository/commits\")\n                    .bind(\"id\", toEncodedId(resource))\n                    .toString();\n            \n            HttpPost post = new HttpPost(contentUrl);\n            post.addHeader(\"Content-Type\", \"application/json\");\n            addSecurity(post);\n\n            GitLabCreateFileRequest body = new GitLabCreateFileRequest();\n            body.setBranch(resource.getBranch());\n            body.setCommitMessage(commitMessage);\n            \n            body.setActions(new ArrayList<>());\n            GitLabAction action = new GitLabAction();\n            String b64Content = Base64.encodeBase64String(content.getBytes(StandardCharsets.UTF_8));\n            action.setGitLabAction(GitLabActionType.UPDATE);\n            if (create) {\n                action.setGitLabAction(GitLabActionType.CREATE);\n            }\n            action.setFilePath(resource.getResourcePath());\n            action.setContent(b64Content);\n            action.setEncoding(\"base64\");\n            body.getActions().add(action);\n            \n            // Set the POST body\n            post.setEntity(new StringEntity(mapper.writeValueAsString(body),StandardCharsets.UTF_8));\n            \n            try (CloseableHttpResponse response = httpClient.execute(post)) {\n                if (response.getStatusLine().getStatusCode() != 201) {\n                    throw new SourceConnectorException(\"Unexpected response from GitLab: \" + response.getStatusLine().toString());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    JsonNode node = mapper.readTree(contentStream);\n                    return node.get(\"id\").asText();\n                }\n            }\n        } catch (IOException e) {\n            throw new SourceConnectorException(\"Error creating GitLab resource content.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Commits new repository file content to GitLab.", "call_func_name": ["org.apache.http.impl.client.HttpClients.createDefault", "io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.endpoint", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.toEncodedId", "org.apache.http.client.methods.HttpPost.<init>", "org.apache.http.client.methods.HttpPost.addHeader", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity", "io.apicurio.hub.api.beans.GitLabCreateFileRequest.<init>", "io.apicurio.hub.api.gitlab.GitLabResource.getBranch", "io.apicurio.hub.api.beans.GitLabCreateFileRequest.setBranch", "io.apicurio.hub.api.beans.GitLabCreateFileRequest.setCommitMessage", "java.util.ArrayList.<init>", "io.apicurio.hub.api.beans.GitLabCreateFileRequest.setActions", "io.apicurio.hub.api.beans.GitLabAction.<init>", "java.lang.String.getBytes", "org.apache.commons.codec.binary.Base64.encodeBase64String", "io.apicurio.hub.api.gitlab.GitLabResource.getResourcePath", "io.apicurio.hub.api.beans.GitLabAction.setFilePath", "io.apicurio.hub.api.beans.GitLabAction.setContent", "io.apicurio.hub.api.beans.GitLabAction.setEncoding", "io.apicurio.hub.api.beans.GitLabCreateFileRequest.getActions", "java.util.List.add", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.toString", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readTree", "com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.asText", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["io.apicurio.hub.api.gitlab.GitLabResource"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.util.List"], [""], ["java.nio.charset.Charset"], ["byte[]"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String", "java.nio.charset.Charset"], ["org.apache.http.HttpEntity"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream"], ["java.lang.String"], [""], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve": "Resolves a GitLab URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity": "Adds security information to the http request."}, {"io.apicurio.hub.api.gitlab.GitLabResource.getResourcePath": "@return the resourcePath"}]}, {"index": "856", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.getResourceContentFromGitLab", "methodParameterType": "GitLabResource#", "methodParameterName": "resource#", "methodBody": "private ResourceContent getResourceContentFromGitLab(GitLabResource resource) throws NotFoundException, SourceConnectorException {\n        try (CloseableHttpClient httpClient = HttpClients.createSystem()) {\n            String getContentUrl = this.endpoint(\"/api/v4/projects/:id/repository/files/:path\")\n                    .bind(\"id\", toEncodedId(resource))\n                    .bind(\"path\", toEncodedPath(resource))\n                    .queryParam(\"ref\", toEncodedBranch(resource))\n                    .toString();\n            \n            HttpGet get = new HttpGet(getContentUrl);\n            get.addHeader(\"Accept\", \"application/json\");\n            get.addHeader(\"Cache-Control\", \"no-cache\");\n            get.addHeader(\"Postman-Token\", \"4d2517bb-72d0-9175-1cbe-04d61e9258a0\");\n            get.addHeader(\"DNT\", \"1\");\n            get.addHeader(\"Accept-Language\", \"en-US,en;q=0.8\");\n            \n            try {\n                addSecurity(get);\n            } catch (Exception e) {\n                // If adding security fails, just go ahead and try without security.  If it's a public\n                // repository then this will work.  If not, then it will fail with a 404.\n            }\n            \n            try (CloseableHttpResponse response = httpClient.execute(get)) {\n                if (response.getStatusLine().getStatusCode() == 404) {\n                    throw new NotFoundException();\n                }\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    throw new SourceConnectorException(\"Unexpected response from GitLab: \" + response.getStatusLine().toString());\n                }\n    \n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    Map<String, Object> jsonContent = mapper.readerFor(Map.class).readValue(contentStream);\n                    String b64Content = jsonContent.get(\"content\").toString();\n                    String content = new String(Base64.decodeBase64(b64Content), StandardCharsets.UTF_8);\n                    ResourceContent rval = new ResourceContent();\n        \n                    rval.setContent(content);\n                    rval.setSha(jsonContent.get(\"commit_id\").toString());\n        \n                    return rval;\n                }\n            }\n        } catch (IOException e) {\n            throw new SourceConnectorException(\"Error getting GitLab resource content.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the actual content of a resource.  Returns the raw content and the commit id.", "call_func_name": ["org.apache.http.impl.client.HttpClients.createSystem", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.endpoint", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.toEncodedId", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.toEncodedPath", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.toEncodedBranch", "org.apache.http.client.methods.HttpGet.<init>", "org.apache.http.client.methods.HttpGet.addHeader", "io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.toString", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readerFor", "com.fasterxml.jackson.databind.ObjectReader.readValue", "java.util.Map.get", "org.apache.commons.codec.binary.Base64.decodeBase64", "java.lang.String.<init>", "io.apicurio.hub.api.beans.ResourceContent.<init>", "io.apicurio.hub.api.beans.ResourceContent.setContent", "io.apicurio.hub.api.beans.ResourceContent.setSha", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["io.apicurio.hub.api.gitlab.GitLabResource"], ["io.apicurio.hub.api.gitlab.GitLabResource"], ["io.apicurio.hub.api.gitlab.GitLabResource"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Class"], ["java.io.InputStream"], ["java.lang.Object"], ["java.lang.String"], ["byte[]", "java.nio.charset.Charset"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.gitlab.GitLabSourceConnector.addSecurity": "Adds security information to the http request."}, {"io.apicurio.hub.api.beans.ResourceContent.setContent": "@param content the content to set"}, {"io.apicurio.hub.api.beans.ResourceContent.setSha": "@param sha the sha to set"}]}, {"index": "857", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabSourceConnector.createPullRequestFromZipContent", "methodParameterType": "String#String#ZipInputStream#", "methodParameterName": "repositoryUrl#commitMessage#generatedContent#", "methodBody": "@Override\n    public String createPullRequestFromZipContent(String repositoryUrl, String commitMessage,\n            ZipInputStream generatedContent) throws SourceConnectorException {\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#createPullRequestFromZipContent(java.lang.String,java.lang.String,java.util.zip.ZipInputStream)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "858", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/IGitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getGroups", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<GitLabGroup> getGroups() throws GitLabException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the GitLab groups for the current user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "859", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/IGitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getProjects", "methodParameterType": "String#", "methodParameterName": "group#", "methodBody": "public Collection<GitLabProject> getProjects(String group) throws GitLabException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the GitLab projects for the current user within the given group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "860", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/IGitLabSourceConnector.java", "methodName": "io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getBranches", "methodParameterType": "String#String#", "methodParameterName": "group#project#", "methodBody": "public Collection<SourceCodeBranch> getBranches(String group, String project) throws GitLabException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the branches available in the given GitLab group/project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "861", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResourceResolver.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResourceResolver.GitLabResourceResolver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitLabResourceResolver() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "862", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResourceResolver.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResourceResolver.createPatternOrTemplate", "methodParameterType": "String#", "methodParameterName": "suffix#", "methodBody": "private String createPatternOrTemplate(String suffix) {\n        String gitlab = config.getGitLabUrl();\n        if (gitlab == null || gitlab.trim().isEmpty()) {\n            gitlab = \"https://gitlab.com\";\n        }\n        if (gitlab.endsWith(\"/\")) {\n            gitlab = gitlab.substring(0, gitlab.length() - 1);\n        }\n        return gitlab + suffix;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a pattern with the configured GitLab URL as the prefix and the given suffix at the end.", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getGitLabUrl", "java.lang.String.trim", "java.lang.String.isEmpty", "java.lang.String.endsWith", "java.lang.String.length", "java.lang.String.substring", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["int", "int"], [""], ["java.lang.String"], [""]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.getGitLabUrl": "@return the configured GitLab URL"}]}, {"index": "863", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResourceResolver.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve", "methodParameterType": "String#", "methodParameterName": "glUrl#", "methodBody": "public GitLabResource resolve(String glUrl) {\n        Matcher matcher = pattern1.matcher(glUrl);\n        if (matcher.matches()) {\n            GitLabResource resource = new GitLabResource();\n            String group = AbstractResourceResolver.decode(matcher.group(1));\n            String project = AbstractResourceResolver.decode(matcher.group(2));\n            String branch = AbstractResourceResolver.decode(matcher.group(3));\n            String path = AbstractResourceResolver.decode(matcher.group(4));\n            resource.setGroup(group);\n            resource.setProject(project);\n            resource.setBranch(branch);\n            resource.setResourcePath(path);\n            return resource;\n        }\n        matcher = pattern2.matcher(glUrl);\n        if (matcher.matches()) {\n            GitLabResource resource = new GitLabResource();\n            String group = AbstractResourceResolver.decode(matcher.group(1));\n            String subGroup = AbstractResourceResolver.decode(matcher.group(2));\n            String project = AbstractResourceResolver.decode(matcher.group(3));\n            String branch = AbstractResourceResolver.decode(matcher.group(4));\n            String path = AbstractResourceResolver.decode(matcher.group(5));\n            resource.setGroup(group + \"/\" + subGroup);\n            resource.setProject(project);\n            resource.setBranch(branch);\n            resource.setResourcePath(path);\n            return resource;\n        }\n        matcher = pattern3.matcher(glUrl);\n        if (matcher.matches()) {\n            GitLabResource resource = new GitLabResource();\n            String group = AbstractResourceResolver.decode(matcher.group(1));\n            String subGroup = AbstractResourceResolver.decode(matcher.group(2));\n            String subSubGroup = AbstractResourceResolver.decode(matcher.group(3));\n            String project = AbstractResourceResolver.decode(matcher.group(4));\n            String branch = AbstractResourceResolver.decode(matcher.group(5));\n            String path = AbstractResourceResolver.decode(matcher.group(6));\n            resource.setGroup(group + \"/\" + subGroup + \"/\" + subSubGroup);\n            resource.setProject(project);\n            resource.setBranch(branch);\n            resource.setResourcePath(path);\n            return resource;\n        }\n        \n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves a GitLab URL into a resource object.  The URL must be of the proper format.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "io.apicurio.hub.api.gitlab.GitLabResource.<init>", "java.util.regex.Matcher.group", "io.apicurio.hub.api.github.AbstractResourceResolver.decode", "io.apicurio.hub.api.gitlab.GitLabResource.setGroup", "io.apicurio.hub.api.gitlab.GitLabResource.setProject", "io.apicurio.hub.api.gitlab.GitLabResource.setBranch", "io.apicurio.hub.api.gitlab.GitLabResource.setResourcePath", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.CharSequence"], [""], [""], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": [{"io.apicurio.hub.api.github.AbstractResourceResolver.decode": "Decodes a value (in case the value is URL encoded)."}, {"io.apicurio.hub.api.gitlab.GitLabResource.setGroup": "@param group the group to set"}, {"io.apicurio.hub.api.gitlab.GitLabResource.setProject": "@param project the project to set"}, {"io.apicurio.hub.api.gitlab.GitLabResource.setResourcePath": "@param resourcePath the resourcePath to set"}]}, {"index": "864", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResourceResolver.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResourceResolver.create", "methodParameterType": "String#String#String#String#", "methodParameterName": "group#project#branch#resourcePath#", "methodBody": "public String create(String group, String project, String branch, String resourcePath) {\n        String resource = resourcePath;\n        if (resource == null) {\n            resource = \"\";\n        }\n        if (resource.startsWith(\"/\")) {\n            resource = resource.substring(1);\n        }\n        return template.replace(\":group\", AbstractResourceResolver.encode(group))\n                .replace(\":project\", AbstractResourceResolver.encode(project))\n                .replace(\":branch\", AbstractResourceResolver.encode(branch))\n                .replace(\":resource\", resource);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a resource url from the information provided.", "call_func_name": ["java.lang.String.startsWith", "java.lang.String.substring", "io.apicurio.hub.api.github.AbstractResourceResolver.encode", "java.lang.String.replace"], "call_func_parameter": [["java.lang.String"], ["int"], ["java.lang.String"], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "865", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabException.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabException.GitLabException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public GitLabException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "866", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabException.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabException.GitLabException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public GitLabException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "867", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResource.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResource.GitLabResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitLabResource() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "868", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResource.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResource.getGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getGroup() {\n        return group;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the group", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "869", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResource.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResource.setGroup", "methodParameterType": "String#", "methodParameterName": "group#", "methodBody": "public void setGroup(String group) {\n        this.group = group;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param group the group to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "870", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResource.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResource.getProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getProject() {\n        return project;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the project", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "871", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResource.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResource.setProject", "methodParameterType": "String#", "methodParameterName": "project#", "methodBody": "public void setProject(String project) {\n        this.project = project;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param project the project to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "872", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResource.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResource.getResourcePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResourcePath() {\n        return resourcePath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resourcePath", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "873", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/gitlab/GitLabResource.java", "methodName": "io.apicurio.hub.api.gitlab.GitLabResource.setResourcePath", "methodParameterType": "String#", "methodParameterName": "resourcePath#", "methodBody": "public void setResourcePath(String resourcePath) {\n        this.resourcePath = resourcePath;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resourcePath the resourcePath to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "874", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/SecurityContext.java", "methodName": "io.apicurio.hub.api.security.SecurityContext.SecurityContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SecurityContext() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "875", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/SecurityContext.java", "methodName": "io.apicurio.hub.api.security.SecurityContext.setUser", "methodParameterType": "User#", "methodParameterName": "user#", "methodBody": "public void setUser(User user) {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param user", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "876", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/SecurityContext.java", "methodName": "io.apicurio.hub.api.security.SecurityContext.getCurrentUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public User getCurrentUser() {\n        return user;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.security.ISecurityContext#getCurrentUser()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "877", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/SecurityContext.java", "methodName": "io.apicurio.hub.api.security.SecurityContext.getToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getToken() {\n        return token;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "878", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/SecurityContext.java", "methodName": "io.apicurio.hub.api.security.SecurityContext.setToken", "methodParameterType": "String#", "methodParameterName": "token#", "methodBody": "public void setToken(String token) {\n        this.token = token;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param token the token to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "879", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.GitHubAuthenticationFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "filterConfig#", "methodBody": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "880", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.GitHubAuthenticationFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        HttpServletRequest httpReq = (HttpServletRequest) request;\n        HttpServletResponse httpResp = (HttpServletResponse) response;\n        \n        String token = getAuthenticationToken(httpReq);\n        if (token == null || token.trim().isEmpty()) {\n            httpResp.setHeader(\"WWW-Authenticate\", \"Bearer realm=\\\"apicurio-studio\\\"\");\n            httpResp.sendError(401);\n        } else {\n            User user = getCachedUser(token);\n            if (user == null) {\n                user = authenticateUser(token);\n                if (user != null) {\n                    cacheAuthenticatedUser(token, user);\n                }\n            }\n            if (user == null) {\n                httpResp.setHeader(\"WWW-Authenticate\", \"Bearer realm=\\\"apicurio-studio\\\"\");\n                httpResp.sendError(401);\n            } else {\n                ((SecurityContext) security).setUser(user);\n                chain.doFilter(request, response);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": ["io.apicurio.hub.api.security.GitHubAuthenticationFilter.getAuthenticationToken", "java.lang.String.trim", "java.lang.String.isEmpty", "javax.servlet.http.HttpServletResponse.setHeader", "javax.servlet.http.HttpServletResponse.sendError", "io.apicurio.hub.api.security.GitHubAuthenticationFilter.getCachedUser", "io.apicurio.hub.api.security.GitHubAuthenticationFilter.authenticateUser", "io.apicurio.hub.api.security.GitHubAuthenticationFilter.cacheAuthenticatedUser", "io.apicurio.hub.api.security.SecurityContext.setUser", "javax.servlet.FilterChain.doFilter"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest"], [""], [""], ["java.lang.String", "java.lang.String"], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "io.apicurio.studio.shared.beans.User"], ["io.apicurio.studio.shared.beans.User"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": [{"io.apicurio.hub.api.security.GitHubAuthenticationFilter.getAuthenticationToken": "Extracts the access token from the \"Authorization\" HTTP header.  Returns null if no Authorization header is found."}, {"io.apicurio.hub.api.security.GitHubAuthenticationFilter.getCachedUser": "Gets the cached authenticated user object for the given token.  Returns null if no authenticated user is found in the cache."}, {"io.apicurio.hub.api.security.GitHubAuthenticationFilter.authenticateUser": "Fetches information about the authenticated user.  Uses the github access token to make an authenticated call to the GitHub API to fetch the user info."}, {"io.apicurio.hub.api.security.GitHubAuthenticationFilter.cacheAuthenticatedUser": "Caches the given authenticated user, mapping it to the given token.  Future requests will be able to look up the authenticated user from the token without accessing GitHub again."}, {"io.apicurio.hub.api.security.SecurityContext.setUser": "@param user"}]}, {"index": "881", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.GitHubAuthenticationFilter.getAuthenticationToken", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "private String getAuthenticationToken(HttpServletRequest request) {\n        String tokenHeader = request.getHeader(\"Authorization\");\n        if (tokenHeader == null || !(tokenHeader.toLowerCase().startsWith(\"bearer \") || tokenHeader.toLowerCase().startsWith(\"token \"))) {\n            return null;\n        }\n        String token = tokenHeader.substring(tokenHeader.indexOf(' ') + 1);\n        return token;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the access token from the \"Authorization\" HTTP header.  Returns null if no Authorization header is found.", "call_func_name": ["javax.servlet.http.HttpServletRequest.getHeader", "java.lang.String.toLowerCase", "java.lang.String.startsWith", "java.lang.String.indexOf", "java.lang.String.substring"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["int"], ["int"]], "passed_comments": "/"}, {"index": "882", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.GitHubAuthenticationFilter.getCachedUser", "methodParameterType": "String#", "methodParameterName": "token#", "methodBody": "private User getCachedUser(String token) {\n        return authCache.get(token);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the cached authenticated user object for the given token.  Returns null if no authenticated user is found in the cache.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "883", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.GitHubAuthenticationFilter.authenticateUser", "methodParameterType": "String#", "methodParameterName": "token#", "methodBody": "private User authenticateUser(String token) {\n        try {\n            HttpResponse<String> userResp = Unirest.get(\"https://api.github.com/user\")\n                    .header(\"Accept\", \"application/json\")\n                    .header(\"Authorization\", \"Bearer \" + token)\n                    .asString();\n            if (userResp.getStatus() != 200) {\n                return null;\n            } else {\n                String json = userResp.getBody();\n                User user = mapper.readerFor(User.class).readValue(json);\n                return user;\n            }\n        } catch (Exception e) {\n            logger.error(\"Failed to authenticate with the GitHub API\", e);\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Fetches information about the authenticated user.  Uses the github access token to make an authenticated call to the GitHub API to fetch the user info.", "call_func_name": ["com.mashape.unirest.http.Unirest.get", "com.mashape.unirest.request.GetRequest.header", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.mashape.unirest.request.GetRequest.asString", "com.mashape.unirest.http.HttpResponse.getStatus", "com.mashape.unirest.http.HttpResponse.getBody", "com.fasterxml.jackson.databind.ObjectMapper.readerFor", "com.fasterxml.jackson.databind.ObjectReader.readValue", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.Class"], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "884", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.GitHubAuthenticationFilter.cacheAuthenticatedUser", "methodParameterType": "String#User#", "methodParameterName": "token#user#", "methodBody": "private void cacheAuthenticatedUser(String token, User user) {\n        authCache.put(token, user);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Caches the given authenticated user, mapping it to the given token.  Future requests will be able to look up the authenticated user from the token without accessing GitHub again.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "885", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.GitHubAuthenticationFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "886", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/ILinkedAccountsProvider.java", "methodName": "io.apicurio.hub.api.security.ILinkedAccountsProvider.initiateLinkedAccount", "methodParameterType": "LinkedAccountType#String#String#", "methodParameterName": "accountType#redirectUri#nonce#", "methodBody": "public InitiatedLinkedAccount initiateLinkedAccount(LinkedAccountType accountType, String redirectUri, String nonce) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called to generate a URL that a browser will use to initiate a new linked account.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "887", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/ILinkedAccountsProvider.java", "methodName": "io.apicurio.hub.api.security.ILinkedAccountsProvider.deleteLinkedAccount", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public void deleteLinkedAccount(LinkedAccountType type) throws IOException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes the linked account (by type).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "888", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/ILinkedAccountsProvider.java", "methodName": "io.apicurio.hub.api.security.ILinkedAccountsProvider.getLinkedAccountToken", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "public String getLinkedAccountToken(LinkedAccountType type) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the linked account's access token.  This access token is what is provided by the external system (e.g. GitHub) to be used for secure access to its API.  The returned value is platform-specific but is typically a JSON formatted string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "889", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.KeycloakAuthenticationFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "filterConfig#", "methodBody": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "890", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.KeycloakAuthenticationFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        HttpServletRequest httpReq = (HttpServletRequest) request;\n        KeycloakSecurityContext session = getSession(httpReq);\n        if (session != null) {\n            // Fabricate a User object from information in the access token and store it in the security context.\n            AccessToken token = session.getToken();\n            if (token != null) {\n                User user = new User();\n                user.setEmail(token.getEmail());\n                user.setLogin(token.getPreferredUsername());\n                user.setName(token.getName());\n                ((SecurityContext) security).setUser(user);\n                ((SecurityContext) security).setToken(session.getTokenString());\n            }\n        }\n        chain.doFilter(request, response);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": ["io.apicurio.hub.api.security.KeycloakAuthenticationFilter.getSession", "org.keycloak.KeycloakSecurityContext.getToken", "io.apicurio.studio.shared.beans.User.<init>", "org.keycloak.representations.AccessToken.getEmail", "io.apicurio.studio.shared.beans.User.setEmail", "org.keycloak.representations.AccessToken.getPreferredUsername", "io.apicurio.studio.shared.beans.User.setLogin", "org.keycloak.representations.AccessToken.getName", "io.apicurio.studio.shared.beans.User.setName", "io.apicurio.hub.api.security.SecurityContext.setUser", "org.keycloak.KeycloakSecurityContext.getTokenString", "io.apicurio.hub.api.security.SecurityContext.setToken", "javax.servlet.FilterChain.doFilter"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["io.apicurio.studio.shared.beans.User"], [""], ["java.lang.String"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": [{"io.apicurio.studio.shared.beans.User.setEmail": "@param email the email to set"}, {"io.apicurio.studio.shared.beans.User.setLogin": "@param login the login to set"}, {"io.apicurio.studio.shared.beans.User.setName": "@param name the name to set"}, {"io.apicurio.hub.api.security.SecurityContext.setUser": "@param user"}, {"io.apicurio.hub.api.security.SecurityContext.setToken": "@param token the token to set"}]}, {"index": "891", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.hub.api.security.KeycloakAuthenticationFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "892", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/ISecurityContext.java", "methodName": "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public User getCurrentUser();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the User information for the currently authenticated user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "893", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/ISecurityContext.java", "methodName": "io.apicurio.hub.api.security.ISecurityContext.getToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getToken();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the token used to authenticate.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "894", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/KeycloakLinkedAccountsProvider.java", "methodName": "io.apicurio.hub.api.security.KeycloakLinkedAccountsProvider.initiateLinkedAccount", "methodParameterType": "LinkedAccountType#String#String#", "methodParameterName": "accountType#redirectUri#nonce#", "methodBody": "@Override\n    public InitiatedLinkedAccount initiateLinkedAccount(LinkedAccountType accountType, String redirectUri,\n            String nonce) {\n        String authServerRootUrl = config.getKeycloakAuthUrl();\n        String realm = config.getKeycloakRealm();\n        String provider = accountType.alias();\n\n        KeycloakSecurityContext session = (KeycloakSecurityContext) request.getAttribute(KeycloakSecurityContext.class.getName());\n        AccessToken token = session.getToken();\n\n        String clientId = token.getIssuedFor();\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA-256\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n        String input = nonce + token.getSessionState() + clientId + provider;\n        byte[] check = md.digest(input.getBytes(StandardCharsets.UTF_8));\n        String hash = Base64Url.encode(check);\n        String accountLinkUrl = KeycloakUriBuilder.fromUri(authServerRootUrl)\n            .path(\"/realms/{realm}/broker/{provider}/link\").queryParam(\"nonce\", nonce)\n            .queryParam(\"hash\", hash).queryParam(\"client_id\", clientId)\n            .queryParam(\"redirect_uri\", redirectUri).build(realm, provider).toString();\n\n        logger.debug(\"Account Link URL: {}\", accountLinkUrl);\n\n        // Return the URL that the browser should use to initiate the account linking\n        InitiatedLinkedAccount rval = new InitiatedLinkedAccount();\n        rval.setAuthUrl(accountLinkUrl);\n        rval.setNonce(nonce);\n        return rval;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.security.ILinkedAccountsProvider#initiateLinkedAccount(io.apicurio.hub.core.beans.LinkedAccountType,java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getKeycloakAuthUrl", "io.apicurio.hub.core.config.HubConfiguration.getKeycloakRealm", "io.apicurio.hub.core.beans.LinkedAccountType.alias", "java.lang.Class.getName", "javax.servlet.http.HttpServletRequest.getAttribute", "org.keycloak.KeycloakSecurityContext.getToken", "org.keycloak.representations.AccessToken.getIssuedFor", "java.security.MessageDigest.getInstance", "java.lang.RuntimeException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.keycloak.representations.AccessToken.getSessionState", "java.lang.StringBuilder.toString", "java.lang.String.getBytes", "java.security.MessageDigest.digest", "org.keycloak.common.util.Base64Url.encode", "org.keycloak.common.util.KeycloakUriBuilder.fromUri", "org.keycloak.common.util.KeycloakUriBuilder.path", "org.keycloak.common.util.KeycloakUriBuilder.queryParam", "org.keycloak.common.util.KeycloakUriBuilder.build", "java.net.URI.toString", "org.slf4j.Logger.debug", "io.apicurio.hub.api.beans.InitiatedLinkedAccount.<init>", "io.apicurio.hub.api.beans.InitiatedLinkedAccount.setAuthUrl", "io.apicurio.hub.api.beans.InitiatedLinkedAccount.setNonce"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Throwable"], [""], ["java.lang.String"], [""], [""], ["java.nio.charset.Charset"], ["byte[]"], ["byte[]"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Object[]"], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.beans.InitiatedLinkedAccount.setAuthUrl": "@param authUrl the authUrl to set"}, {"io.apicurio.hub.api.beans.InitiatedLinkedAccount.setNonce": "@param nonce the nonce to set"}]}, {"index": "895", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/KeycloakLinkedAccountsProvider.java", "methodName": "io.apicurio.hub.api.security.KeycloakLinkedAccountsProvider.deleteLinkedAccount", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "@Override\n    public void deleteLinkedAccount(LinkedAccountType type) throws IOException {\n        try {\n            KeycloakSecurityContext session = (KeycloakSecurityContext) request.getAttribute(KeycloakSecurityContext.class.getName());\n\n            String authServerRootUrl = config.getKeycloakAuthUrl();\n            String realm = config.getKeycloakRealm();\n            String provider = type.alias();\n\n            session.getToken().getSessionState();\n\n            String url = KeycloakUriBuilder.fromUri(authServerRootUrl)\n                .path(\"/realms/{realm}/account/federated-identity-update\")\n                .queryParam(\"action\", \"REMOVE\").queryParam(\"provider_id\", provider).build(realm)\n                .toString();\n            logger.debug(\"Deleting identity provider using URL: {}\", url);\n\n            HttpGet get = new HttpGet(url);\n            get.addHeader(\"Accept\", \"application/json\");\n            get.addHeader(\"Authorization\", \"Bearer \" + session.getTokenString());\n            \n            try (CloseableHttpResponse response = httpClient.execute(get)) {\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    logger.debug(\"HTTP Response Status Code when deleting identity provider: {}\",\n                        response.getStatusLine().getStatusCode());\n                }\n            }            \n        } catch (Exception e) {\n            throw new IOException(\"Error deleting linked account.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.security.ILinkedAccountsProvider#deleteLinkedAccount(io.apicurio.hub.core.beans.LinkedAccountType)", "call_func_name": ["java.lang.Class.getName", "javax.servlet.http.HttpServletRequest.getAttribute", "io.apicurio.hub.core.config.HubConfiguration.getKeycloakAuthUrl", "io.apicurio.hub.core.config.HubConfiguration.getKeycloakRealm", "io.apicurio.hub.core.beans.LinkedAccountType.alias", "org.keycloak.KeycloakSecurityContext.getToken", "org.keycloak.representations.AccessToken.getSessionState", "org.keycloak.common.util.KeycloakUriBuilder.fromUri", "org.keycloak.common.util.KeycloakUriBuilder.path", "org.keycloak.common.util.KeycloakUriBuilder.queryParam", "org.keycloak.common.util.KeycloakUriBuilder.build", "java.net.URI.toString", "org.slf4j.Logger.debug", "org.apache.http.client.methods.HttpGet.<init>", "org.apache.http.client.methods.HttpGet.addHeader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.keycloak.KeycloakSecurityContext.getTokenString", "java.lang.StringBuilder.toString", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.Integer.valueOf", "org.apache.http.client.methods.CloseableHttpResponse.close", "java.lang.Throwable.addSuppressed", "java.io.IOException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Object[]"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], [""], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], ["int"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "896", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/security/KeycloakLinkedAccountsProvider.java", "methodName": "io.apicurio.hub.api.security.KeycloakLinkedAccountsProvider.getLinkedAccountToken", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "@Override\n    public String getLinkedAccountToken(LinkedAccountType type) throws IOException {\n        String authServerRootUrl = config.getKeycloakAuthUrl();\n        String realm = config.getKeycloakRealm();\n        String provider = type.alias();\n\n        try {\n            String externalTokenUrl = KeycloakUriBuilder.fromUri(authServerRootUrl)\n                    .path(\"/realms/{realm}/broker/{provider}/token\")\n                    .build(realm, provider).toString();\n            String token = this.security.getToken();\n\n            HttpGet get = new HttpGet(externalTokenUrl);\n            get.addHeader(\"Accept\", \"application/json\");\n            get.addHeader(\"Authorization\", \"Bearer \" + token);\n\n            try (CloseableHttpResponse response = httpClient.execute(get)) {\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    logger.error(\"Failed to access External IDP Access Token from Keycloak: {} - {}\", \n                            response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase());\n                    throw new IOException(\n                            \"Unexpected response from Keycloak: \" + response.getStatusLine().getStatusCode() + \"::\"\n                                    + response.getStatusLine().getReasonPhrase());\n                }\n                \n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    String content = IOUtils.toString(contentStream, Charset.forName(\"UTF-8\"));\n                    return content;\n                }\n            }            \n        } catch (IllegalArgumentException e) {\n            throw new IOException(\"Error getting linked account token.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.security.ILinkedAccountsProvider#getLinkedAccountToken(io.apicurio.hub.core.beans.LinkedAccountType)", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getKeycloakAuthUrl", "io.apicurio.hub.core.config.HubConfiguration.getKeycloakRealm", "io.apicurio.hub.core.beans.LinkedAccountType.alias", "org.keycloak.common.util.KeycloakUriBuilder.fromUri", "org.keycloak.common.util.KeycloakUriBuilder.path", "org.keycloak.common.util.KeycloakUriBuilder.build", "java.net.URI.toString", "io.apicurio.hub.api.security.ISecurityContext.getToken", "org.apache.http.client.methods.HttpGet.<init>", "org.apache.http.client.methods.HttpGet.addHeader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.Integer.valueOf", "org.apache.http.StatusLine.getReasonPhrase", "org.slf4j.Logger.error", "java.lang.StringBuilder.append", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "java.io.IOException.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object[]"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], ["int"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["int"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.io.InputStream", "java.nio.charset.Charset"], [""], ["java.lang.Throwable"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.security.ISecurityContext.getToken": "Returns the token used to authenticate."}]}, {"index": "897", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.AccountsResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccountsResource() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "898", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.listLinkedAccounts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Collection<LinkedAccount> listLinkedAccounts() throws ServerError {\n        metrics.apiCall(\"/accounts\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            logger.debug(\"Listing Linked Accounts for {}\", user);\n            return this.storage.listLinkedAccounts(user);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#listLinkedAccounts()", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "org.slf4j.Logger.debug", "io.apicurio.hub.core.storage.IStorage.listLinkedAccounts", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.listLinkedAccounts": "Returns a collection of linked accounts for the given user."}]}, {"index": "899", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.createLinkedAccount", "methodParameterType": "CreateLinkedAccount#", "methodParameterName": "info#", "methodBody": "@Override\n    public InitiatedLinkedAccount createLinkedAccount(CreateLinkedAccount info) throws ServerError, AlreadyExistsException {\n        metrics.apiCall(\"/accounts\", \"POST\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            logger.debug(\"Creating a linked {} account for user {}\", info.getType().name(), user);\n\n            String nonce = UUID.randomUUID().toString();\n\n            // Step #1 - create an entry in the storage (with a null \"linkedOn\" field)\n            LinkedAccount account = new LinkedAccount();\n            account.setType(info.getType());\n            account.setNonce(nonce);\n            this.storage.createLinkedAccount(user, account);\n\n            logger.debug(\"Linked Account created in DB.\");\n\n            // Step #2 - initiate account linking with e.g. Keycloak\n            InitiatedLinkedAccount rval = linkedAccountsProvider.initiateLinkedAccount(info.getType(), info.getRedirectUrl(), nonce);\n            logger.debug(\"Sending browser redirect URL: {}\", rval.getAuthUrl());\n            \n            metrics.accountLinkInitiated(info.getType());\n            \n            return rval;\n        } catch (StorageException | IOException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#createLinkedAccount(io.apicurio.hub.api.beans.CreateLinkedAccount)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.api.beans.CreateLinkedAccount.getType", "io.apicurio.hub.core.beans.LinkedAccountType.name", "org.slf4j.Logger.debug", "java.util.UUID.randomUUID", "java.util.UUID.toString", "io.apicurio.hub.core.beans.LinkedAccount.<init>", "io.apicurio.hub.core.beans.LinkedAccount.setType", "io.apicurio.hub.core.beans.LinkedAccount.setNonce", "io.apicurio.hub.core.storage.IStorage.createLinkedAccount", "org.slf4j.Logger.debug", "io.apicurio.hub.api.beans.CreateLinkedAccount.getRedirectUrl", "io.apicurio.hub.api.security.ILinkedAccountsProvider.initiateLinkedAccount", "io.apicurio.hub.api.beans.InitiatedLinkedAccount.getAuthUrl", "org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.accountLinkInitiated", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], [""], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["java.lang.String"], ["java.lang.String", "io.apicurio.hub.core.beans.LinkedAccount"], ["java.lang.String"], [""], ["io.apicurio.hub.core.beans.LinkedAccountType", "java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.api.beans.CreateLinkedAccount.getType": "@return the type"}, {"io.apicurio.hub.core.beans.LinkedAccount.setType": "@param type the type to set"}, {"io.apicurio.hub.core.beans.LinkedAccount.setNonce": "@param nonce the nonce to set"}, {"io.apicurio.hub.core.storage.IStorage.createLinkedAccount": "Creates a linked account for the given user."}, {"io.apicurio.hub.api.beans.CreateLinkedAccount.getRedirectUrl": "@return the redirectUrl"}, {"io.apicurio.hub.api.security.ILinkedAccountsProvider.initiateLinkedAccount": "Called to generate a URL that a browser will use to initiate a new linked account."}, {"io.apicurio.hub.api.beans.InitiatedLinkedAccount.getAuthUrl": "@return the authUrl"}, {"io.apicurio.hub.api.metrics.IApiMetrics.accountLinkInitiated": "Indicates a linked account creation was initiated."}]}, {"index": "900", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getLinkedAccount", "methodParameterType": "String#", "methodParameterName": "accountType#", "methodBody": "@Override\n    public LinkedAccount getLinkedAccount(String accountType) throws ServerError, NotFoundException {\n        logger.debug(\"Getting a Linked Account of type {}\", accountType);\n        metrics.apiCall(\"/accounts/{accountType}\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            return this.storage.getLinkedAccount(user, LinkedAccountType.valueOf(accountType));\n        } catch (StorageException | IllegalArgumentException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getLinkedAccount(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "io.apicurio.hub.core.storage.IStorage.getLinkedAccount", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String", "io.apicurio.hub.core.beans.LinkedAccountType"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getLinkedAccount": "Gets a single linked account for a user by its type."}]}, {"index": "901", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.completeLinkedAccount", "methodParameterType": "String#CompleteLinkedAccount#", "methodParameterName": "accountType#update#", "methodBody": "@Override\n    public void completeLinkedAccount(String accountType, CompleteLinkedAccount update) throws ServerError, NotFoundException {\n        logger.debug(\"Completing account lingage for: {}\", accountType);\n        metrics.apiCall(\"/accounts/{accountType}\", \"PUT\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            String nonce = update.getNonce();\n            if (nonce == null) {\n                throw new ServerError(\"Invalid request: nonce not provided\");\n            }\n\n            LinkedAccount account = this.getLinkedAccount(accountType);\n            if (!nonce.equals(account.getNonce())) {\n                throw new ServerError(\"Invalid request: nonce mismatch\");\n            }\n\n            account.setLinkedOn(new Date());\n            account.setNonce(null);\n\n            this.storage.updateLinkedAccount(user, account);\n            \n            metrics.accountLinkCompleted(account.getType());\n        } catch (StorageException | IllegalArgumentException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#completeLinkedAccount(java.lang.String,io.apicurio.hub.api.beans.CompleteLinkedAccount)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.api.beans.CompleteLinkedAccount.getNonce", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.rest.impl.AccountsResource.getLinkedAccount", "io.apicurio.hub.core.beans.LinkedAccount.getNonce", "java.lang.String.equals", "java.util.Date.<init>", "io.apicurio.hub.core.beans.LinkedAccount.setLinkedOn", "io.apicurio.hub.core.beans.LinkedAccount.setNonce", "io.apicurio.hub.core.storage.IStorage.updateLinkedAccount", "io.apicurio.hub.core.beans.LinkedAccount.getType", "io.apicurio.hub.api.metrics.IApiMetrics.accountLinkCompleted", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.util.Date"], ["java.lang.String"], ["java.lang.String", "io.apicurio.hub.core.beans.LinkedAccount"], [""], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.api.beans.CompleteLinkedAccount.getNonce": "@return the nonce"}, {"io.apicurio.hub.api.rest.impl.AccountsResource.getLinkedAccount": "@see io.apicurio.hub.api.rest.IAccountsResource#getLinkedAccount(java.lang.String)"}, {"io.apicurio.hub.core.beans.LinkedAccount.getNonce": "@return the nonce"}, {"io.apicurio.hub.core.beans.LinkedAccount.setLinkedOn": "@param linkedOn the linkedOn to set"}, {"io.apicurio.hub.core.beans.LinkedAccount.setNonce": "@param nonce the nonce to set"}, {"io.apicurio.hub.core.storage.IStorage.updateLinkedAccount": "Updates a linked account."}, {"io.apicurio.hub.core.beans.LinkedAccount.getType": "@return the type"}, {"io.apicurio.hub.api.metrics.IApiMetrics.accountLinkCompleted": "Indicates that a linked account was successfully created."}]}, {"index": "902", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.deleteLinkedAccount", "methodParameterType": "String#", "methodParameterName": "accountType#", "methodBody": "@Override\n    public void deleteLinkedAccount(String accountType) throws ServerError, NotFoundException {\n        logger.debug(\"Deleting a Linked Account of type {}\", accountType);\n        metrics.apiCall(\"/accounts/{accountType}\", \"DELETE\");\n\n        try {\n            LinkedAccountType type = LinkedAccountType.valueOf(accountType);\n            String user = this.security.getCurrentUser().getLogin();\n\n            this.storage.deleteLinkedAccount(user, type);\n\n            this.deleteIdentityProvider(type);\n        } catch (StorageException | IllegalArgumentException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#deleteLinkedAccount(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.deleteLinkedAccount", "io.apicurio.hub.api.rest.impl.AccountsResource.deleteIdentityProvider", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String", "io.apicurio.hub.core.beans.LinkedAccountType"], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.deleteLinkedAccount": "Deletes a single linked account for the given user."}, {"io.apicurio.hub.api.rest.impl.AccountsResource.deleteIdentityProvider": "Removes the linked account from the provider."}]}, {"index": "903", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.deleteIdentityProvider", "methodParameterType": "LinkedAccountType#", "methodParameterName": "type#", "methodBody": "private void deleteIdentityProvider(LinkedAccountType type) {\n        logger.debug(\"Deleting identity provider from Keycloak: {}\", type);\n\n        try {\n            this.linkedAccountsProvider.deleteLinkedAccount(type);\n        } catch (IOException e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Removes the linked account from the provider.", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.security.ILinkedAccountsProvider.deleteLinkedAccount", "java.io.IOException.getMessage", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["io.apicurio.hub.core.beans.LinkedAccountType"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.security.ILinkedAccountsProvider.deleteLinkedAccount": "Deletes the linked account (by type)."}]}, {"index": "904", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getOrganizations", "methodParameterType": "String#", "methodParameterName": "accountType#", "methodBody": "@Override\n    public Collection<GitHubOrganization> getOrganizations(String accountType) throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/organizations\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.GitHub) {\n            throw new ServerError(\"Invalid account type.  Expected 'GitHub' but got: \" + accountType);\n        }\n        try {\n            return this.github.getOrganizations();\n        } catch (GitHubException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getOrganizations(java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.github.IGitHubSourceConnector.getOrganizations", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.github.IGitHubSourceConnector.getOrganizations": "Lists all of the GitHub organizations for the current user."}]}, {"index": "905", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getRepositories", "methodParameterType": "String#String#", "methodParameterName": "accountType#org#", "methodBody": "@Override\n    public Collection<GitHubRepository> getRepositories(String accountType, String org) throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/organizations/{org}/repositories\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.GitHub) {\n            throw new ServerError(\"Invalid account type.  Expected 'GitHub' but got: \" + accountType);\n        }\n        try {\n            return this.github.getRepositories(org);\n        } catch (GitHubException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getRepositories(java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.github.IGitHubSourceConnector.getRepositories", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.github.IGitHubSourceConnector.getRepositories": "Lists all of the GitHub repositories for the current user within the given organization."}]}, {"index": "906", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getGroups", "methodParameterType": "String#", "methodParameterName": "accountType#", "methodBody": "@Override\n    public Collection<GitLabGroup> getGroups(String accountType) throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/groups\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.GitLab) {\n            throw new ServerError(\"Invalid account type.  Expected 'GitLab' but got: \" + accountType);\n        }\n\n        try {\n            return gitLab.getGroups();\n        } catch (GitLabException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getGroups(java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getGroups", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getGroups": "Lists all of the GitLab groups for the current user."}]}, {"index": "907", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getProjects", "methodParameterType": "String#String#", "methodParameterName": "accountType#group#", "methodBody": "@Override\n    public Collection<GitLabProject> getProjects(String accountType, String group) throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/groups/{group}/projects\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.GitLab) {\n            throw new ServerError(\"Invalid account type.  Expected 'GitLab' but got: \" + accountType);\n        }\n        try {\n            return gitLab.getProjects(group);\n        } catch (GitLabException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getProjects(java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getProjects", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getProjects": "Lists all of the GitLab projects for the current user within the given group."}]}, {"index": "908", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getTeams", "methodParameterType": "String#", "methodParameterName": "accountType#", "methodBody": "@Override\n    public Collection<BitbucketTeam> getTeams(String accountType) throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/teams\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.Bitbucket) {\n            throw new ServerError(\"Invalid account type.  Expected 'Bitbucket' but got: \" + accountType);\n        }\n        try {\n            return this.bitbucket.getTeams();\n        } catch (BitbucketException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getTeams(java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getTeams", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getTeams": "Lists all of the Bitbucket teams for the current user."}]}, {"index": "909", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getBitbucketRepositories", "methodParameterType": "String#String#", "methodParameterName": "accountType#group#", "methodBody": "@Override\n    public Collection<BitbucketRepository> getBitbucketRepositories(String accountType, String group)\n            throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/teams/{team}/repositories\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.Bitbucket) {\n            throw new ServerError(\"Invalid account type.  Expected 'Bitbucket' but got: \" + accountType);\n        }\n        try {\n            return this.bitbucket.getRepositories(group);\n        } catch (SourceConnectorException | BitbucketException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getBitbucketRepositories(java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getRepositories", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getRepositories": "Lists all of the Bitbucket repositories for the current user within the given group."}]}, {"index": "910", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getRepositoryBranches", "methodParameterType": "String#String#String#", "methodParameterName": "accountType#org#repo#", "methodBody": "@Override\n    public Collection<SourceCodeBranch> getRepositoryBranches(String accountType, String org, String repo)\n            throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/organizations/{org}/repositories/{repo}/branches\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.GitHub) {\n            throw new ServerError(\"Invalid account type.  Expected 'GitHub' but got: \" + accountType);\n        }\n        try {\n            return this.github.getBranches(org, repo);\n        } catch (GitHubException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getRepositoryBranches(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.github.IGitHubSourceConnector.getBranches", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.github.IGitHubSourceConnector.getBranches": "Lists all of the branches available on the given GitHub repository in the given org."}]}, {"index": "911", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getProjectBranches", "methodParameterType": "String#String#String#", "methodParameterName": "accountType#group#project#", "methodBody": "@Override\n    public Collection<SourceCodeBranch> getProjectBranches(String accountType, String group, String project)\n            throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/groups/{group}/projects/{project}/branches\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.GitLab) {\n            throw new ServerError(\"Invalid account type.  Expected 'GitLab' but got: \" + accountType);\n        }\n        try {\n            return gitLab.getBranches(group, project);\n        } catch (GitLabException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getProjectBranches(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getBranches", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.gitlab.IGitLabSourceConnector.getBranches": "Lists all of the branches available in the given GitLab group/project."}]}, {"index": "912", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccountsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.AccountsResource.getBitbucketBranches", "methodParameterType": "String#String#String#", "methodParameterName": "accountType#group#repo#", "methodBody": "@Override\n    public Collection<SourceCodeBranch> getBitbucketBranches(String accountType, String group, String repo)\n            throws ServerError {\n        metrics.apiCall(\"/accounts/{accountType}/teams/{team}/repositories/{repo}/branches\", \"GET\");\n\n        LinkedAccountType at = LinkedAccountType.valueOf(accountType);\n        if (at != LinkedAccountType.Bitbucket) {\n            throw new ServerError(\"Invalid account type.  Expected 'Bitbucket' but got: \" + accountType);\n        }\n        try {\n            return this.bitbucket.getBranches(group, repo);\n        } catch (SourceConnectorException | BitbucketException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IAccountsResource#getBitbucketBranches(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getBranches", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.bitbucket.IBitbucketSourceConnector.getBranches": "Lists all of the branches available in the given Bitbucket repository."}]}, {"index": "913", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ServerErrorMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.ServerErrorMapper.ServerErrorMapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ServerErrorMapper() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "914", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ServerErrorMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.ServerErrorMapper.toResponse", "methodParameterType": "ServerError#", "methodParameterName": "data#", "methodBody": "@Override\n    public Response toResponse(ServerError data) {\n        ApiError error = new ApiError();\n        error.setErrorType(data.getClass().getSimpleName());\n        error.setMessage(data.getMessage());\n        error.setTrace(getStackTrace(data));\n        ResponseBuilder builder = Response.status(500).header(\"X-API-Error\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n        builder.type(MediaType.APPLICATION_JSON_TYPE);\n        return builder.entity(error).build();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see javax.ws.rs.ext.ExceptionMapper#toResponse(java.lang.Throwable)", "call_func_name": ["io.apicurio.hub.api.beans.ApiError.<init>", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "io.apicurio.hub.api.beans.ApiError.setErrorType", "io.apicurio.hub.core.exceptions.ServerError.getMessage", "io.apicurio.hub.api.beans.ApiError.setMessage", "io.apicurio.hub.api.rest.impl.ServerErrorMapper.getStackTrace", "io.apicurio.hub.api.beans.ApiError.setTrace", "javax.ws.rs.core.Response.status"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["io.apicurio.hub.core.exceptions.ServerError"], ["java.lang.String"], ["int"]], "passed_comments": [{"io.apicurio.hub.api.beans.ApiError.setErrorType": "@param errorType the errorType to set"}, {"io.apicurio.hub.api.beans.ApiError.setMessage": "@param message the message to set"}, {"io.apicurio.hub.api.rest.impl.ServerErrorMapper.getStackTrace": "Gets the full stack trace for the given exception and returns it as a string."}, {"io.apicurio.hub.api.beans.ApiError.setTrace": "@param trace the trace to set"}]}, {"index": "915", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ServerErrorMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.ServerErrorMapper.getStackTrace", "methodParameterType": "ServerError#", "methodParameterName": "data#", "methodBody": "private String getStackTrace(ServerError data) {\n        try (StringBuilderWriter writer = new StringBuilderWriter()) {\n            data.printStackTrace(new PrintWriter(writer));\n            return writer.getBuilder().toString();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the full stack trace for the given exception and returns it as a string.", "call_func_name": ["org.apache.commons.io.output.StringBuilderWriter.<init>", "java.io.PrintWriter.<init>", "io.apicurio.hub.core.exceptions.ServerError.printStackTrace", "org.apache.commons.io.output.StringBuilderWriter.getBuilder", "java.lang.StringBuilder.toString", "org.apache.commons.io.output.StringBuilderWriter.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], ["java.io.Writer"], ["java.io.PrintWriter"], [""], [""], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "916", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/SystemResource.java", "methodName": "io.apicurio.hub.api.rest.impl.SystemResource.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public SystemStatus getStatus() {\n        logger.debug(\"Getting system status.\");\n        \n        metrics.apiCall(\"/system/status\", \"GET\");\n        \n        SystemStatus status = new SystemStatus();\n        String user = null;\n        if (this.security.getCurrentUser() != null) {\n            user = this.security.getCurrentUser().getLogin();\n        }\n        try {\n            status.setBuiltOn(version.getVersionDate());\n            status.setDescription(\"The API to the Apicurio Studio Hub.\");\n            status.setMoreInfo(\"http://www.apicur.io/\");\n            status.setName(\"Apicurio Studio Hub API\");\n            status.setUp(storage != null && storage.listApiDesigns(user).size() >= 0);\n            status.setVersion(version.getVersionString());\n            status.setUser(security.getCurrentUser());\n        } catch (StorageException e) {\n            logger.error(\"Error getting System Status.\", e);\n            status.setUp(false);\n        }\n\n        return status;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.ISystemResource#getStatus()", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.beans.SystemStatus.<init>", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.Version.getVersionDate", "io.apicurio.hub.api.beans.SystemStatus.setBuiltOn", "io.apicurio.hub.api.beans.SystemStatus.setDescription", "io.apicurio.hub.api.beans.SystemStatus.setMoreInfo", "io.apicurio.hub.api.beans.SystemStatus.setName", "io.apicurio.hub.core.storage.IStorage.listApiDesigns", "java.util.Collection.size", "io.apicurio.hub.api.beans.SystemStatus.setUp", "io.apicurio.hub.core.Version.getVersionString", "io.apicurio.hub.api.beans.SystemStatus.setVersion", "io.apicurio.hub.api.beans.SystemStatus.setUser", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.util.Date"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["boolean"], [""], ["java.lang.String"], ["io.apicurio.studio.shared.beans.User"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.Version.getVersionDate": "@return the versionDate"}, {"io.apicurio.hub.api.beans.SystemStatus.setBuiltOn": "@param builtOn the builtOn to set"}, {"io.apicurio.hub.api.beans.SystemStatus.setDescription": "@param description the description to set"}, {"io.apicurio.hub.api.beans.SystemStatus.setMoreInfo": "@param moreInfo the moreInfo to set"}, {"io.apicurio.hub.api.beans.SystemStatus.setName": "@param name the name to set"}, {"io.apicurio.hub.core.storage.IStorage.listApiDesigns": "Returns a collection of API Designs accessible by the currently authenticated user."}, {"io.apicurio.hub.api.beans.SystemStatus.setUp": "@param up the up to set"}, {"io.apicurio.hub.core.Version.getVersionString": "@return the versionString"}, {"io.apicurio.hub.api.beans.SystemStatus.setVersion": "@param version the version to set"}, {"io.apicurio.hub.api.beans.SystemStatus.setUser": "@param user the user to set"}]}, {"index": "917", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/SystemResource.java", "methodName": "io.apicurio.hub.api.rest.impl.SystemResource.getReady", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public SystemReady getReady() {\n        SystemReady ready = new SystemReady();\n        ready.setUp(true);\n        return ready;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.ISystemResource#getReady()", "call_func_name": ["io.apicurio.hub.api.beans.SystemReady.<init>", "io.apicurio.hub.api.beans.SystemReady.setUp"], "call_func_parameter": [[""], ["boolean"]], "passed_comments": [{"io.apicurio.hub.api.beans.SystemReady.setUp": "@param up the up to set"}]}, {"index": "918", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/SystemResource.java", "methodName": "io.apicurio.hub.api.rest.impl.SystemResource.getMetrics", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Response getMetrics() throws ServerError {\n        try {\n            String metricsInfo = metrics.getCurrentMetricsInfo();\n            ResponseBuilder builder = Response.ok().entity(metricsInfo)\n                    .header(\"Content-Type\", TextFormat.CONTENT_TYPE_004)\n                    .header(\"Content-Length\", metricsInfo.length());\n            return builder.build();\n        } catch (IOException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.ISystemResource#getMetrics()", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.getCurrentMetricsInfo", "javax.ws.rs.core.Response.ok", "java.lang.String.length", "java.lang.Integer.valueOf", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], [""], [""], ["int"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.getCurrentMetricsInfo": "Returns the current state of the metrics.  This information is typically presented via a REST API or servlet."}]}, {"index": "919", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/NotFoundExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.NotFoundExceptionMapper.NotFoundExceptionMapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NotFoundExceptionMapper() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "920", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/NotFoundExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.NotFoundExceptionMapper.toResponse", "methodParameterType": "NotFoundException#", "methodParameterName": "data#", "methodBody": "@Override\n    public Response toResponse(NotFoundException data) {\n        ResponseBuilder builder = Response.status(404);\n        return builder.build();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see javax.ws.rs.ext.ExceptionMapper#toResponse(java.lang.Throwable)", "call_func_name": ["javax.ws.rs.core.Response.status"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "921", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/UtilsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.UtilsResource.validation", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "@Override\n    public List<ValidationError> validation(String content) throws IOException {\n        logger.info(\"Validating an API design.\");\n        String jsonContent = content;\n        if (!content.trim().startsWith(\"{\")) {\n            jsonContent = FormatUtils.yamlToJson(jsonContent);\n        }\n\n        Document doc = Library.readDocumentFromJSONString(jsonContent);\n        List<ValidationProblem> problems = Library.validate(doc, new IValidationSeverityRegistry() {\n            @Override\n            public ValidationProblemSeverity lookupSeverity(ValidationRuleMetaData rule) {\n                return ValidationProblemSeverity.high;\n            }\n        });\n        List<ValidationError> errors = new ArrayList<>();\n        for (ValidationProblem problem : problems) {\n            errors.add(new ValidationError(problem.errorCode, problem.nodePath.toString(), problem.property,\n                    problem.message, problem.severity.name()));\n        }\n        return errors;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IUtilsResource#validation(java.lang.String)", "call_func_name": ["org.slf4j.Logger.info", "java.lang.String.trim", "java.lang.String.startsWith", "io.apicurio.hub.core.util.FormatUtils.yamlToJson", "io.apicurio.datamodels.Library.readDocumentFromJSONString", "io.apicurio.datamodels.Library.validate", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.datamodels.core.models.NodePath.toString", "io.apicurio.datamodels.core.models.ValidationProblemSeverity.name", "io.apicurio.hub.api.beans.ValidationError.<init>", "java.util.List.add"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["io.apicurio.datamodels.core.models.Node", "io.apicurio.datamodels.core.validation.IValidationSeverityRegistry"], [""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.core.util.FormatUtils.yamlToJson": "Converts the content from YAML to JSON format."}]}, {"index": "922", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/CurrentUserResource.java", "methodName": "io.apicurio.hub.api.rest.impl.CurrentUserResource.getCurrentUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public User getCurrentUser() {\n        return security.getCurrentUser();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.ICurrentUserResource#getCurrentUser()", "call_func_name": ["io.apicurio.hub.api.security.ISecurityContext.getCurrentUser"], "call_func_parameter": [[""]], "passed_comments": [{"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}]}, {"index": "923", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/CurrentUserResource.java", "methodName": "io.apicurio.hub.api.rest.impl.CurrentUserResource.getActivity", "methodParameterType": "Integer#Integer#", "methodParameterName": "start#end#", "methodBody": "@Override\n    public Collection<ApiDesignChange> getActivity(Integer start, Integer end) throws ServerError, NotFoundException {\n        metrics.apiCall(\"/currentuser\", \"GET\");\n    \tint from = 0;\n        int to = 20;\n        if (start != null) {\n            from = start.intValue();\n        }\n        if (end != null) {\n            to = end.intValue();\n        }\n        \n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            return this.storage.listUserActivity(user, from, to);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.ICurrentUserResource#getActivity(java.lang.Integer,java.lang.Integer)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "java.lang.Integer.intValue", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.listUserActivity", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String", "int", "int"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.listUserActivity": "Returns a collection of API design changes made by a given user."}]}, {"index": "924", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AlreadyExistsExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.AlreadyExistsExceptionMapper.AlreadyExistsExceptionMapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AlreadyExistsExceptionMapper() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "925", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AlreadyExistsExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.AlreadyExistsExceptionMapper.toResponse", "methodParameterType": "AlreadyExistsException#", "methodParameterName": "data#", "methodBody": "@Override\n    public Response toResponse(AlreadyExistsException data) {\n        ResponseBuilder builder = Response.status(409);\n        return builder.build();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see javax.ws.rs.ext.ExceptionMapper#toResponse(java.lang.Throwable)", "call_func_name": ["javax.ws.rs.core.Response.status"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "926", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.listDesigns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Collection<ApiDesign> listDesigns() throws ServerError {\n        metrics.apiCall(\"/designs\", \"GET\");\n        \n        try {\n            logger.debug(\"Listing API Designs\");\n            String user = this.security.getCurrentUser().getLogin();\n            Collection<ApiDesign> designs = this.storage.listApiDesigns(user);\n            return designs;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#listDesigns()", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "org.slf4j.Logger.debug", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.listApiDesigns", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.listApiDesigns": "Returns a collection of API Designs accessible by the currently authenticated user."}]}, {"index": "927", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.importDesign", "methodParameterType": "ImportApiDesign#", "methodParameterName": "info#", "methodBody": "@Override\n    public ApiDesign importDesign(ImportApiDesign info) throws ServerError, NotFoundException, ApiValidationException {\n        metrics.apiCall(\"/designs\", \"PUT\");\n        \n        if (info.getData() != null && !info.getData().trim().isEmpty()) {\n            logger.debug(\"Importing an API Design (from data).\");\n            return importDesignFromData(info);\n        } else {\n            logger.debug(\"Importing an API Design: {}\", info.getUrl());\n            if (info.getUrl() == null) {\n                throw new ApiValidationException(\"No data provided to import.\");\n            }\n            ISourceConnector connector = null;\n            \n            try {\n                connector = this.sourceConnectorFactory.createConnector(info.getUrl());\n            } catch (NotFoundException nfe) {\n                // This means it's not a source control URL.  So we'll treat it as a raw content URL.\n                connector = null;\n            }\n            \n            if (connector != null) {\n                return importDesignFromSource(info, connector);\n            } else {\n                return importDesignFromUrl(info);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#importDesign(io.apicurio.hub.api.beans.ImportApiDesign)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.beans.ImportApiDesign.getData", "java.lang.String.trim", "java.lang.String.isEmpty", "org.slf4j.Logger.debug", "io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromData", "io.apicurio.hub.api.beans.ImportApiDesign.getUrl", "org.slf4j.Logger.debug", "io.apicurio.hub.core.exceptions.ApiValidationException.<init>", "io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector", "io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromSource", "io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromUrl"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String"], ["io.apicurio.hub.api.beans.ImportApiDesign"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["io.apicurio.hub.api.beans.ImportApiDesign", "io.apicurio.hub.api.connectors.ISourceConnector"], ["io.apicurio.hub.api.beans.ImportApiDesign"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.beans.ImportApiDesign.getData": "@return the data"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromData": "Imports an API Design from base64 encoded content included in the request.  This supports the use-case where the UI allows the user to simply copy/paste the full API content."}, {"io.apicurio.hub.api.beans.ImportApiDesign.getUrl": "@return the url"}, {"io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector": "Creates a connector for a particular resource URL.  The factory will determine the type of connector based on the URL pattern."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromSource": "Imports an API Design from one of the source control systems using its API."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromUrl": "Imports an API design from an arbitrary URL.  This simply opens a connection to that  URL and tries to consume its content as an OpenAPI document."}]}, {"index": "928", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromSource", "methodParameterType": "ImportApiDesign#ISourceConnector#", "methodParameterName": "info#connector#", "methodBody": "private ApiDesign importDesignFromSource(ImportApiDesign info, ISourceConnector connector) throws NotFoundException, ServerError, ApiValidationException {\n        try {\n            ApiDesignResourceInfo resourceInfo = connector.validateResourceExists(info.getUrl());\n            ResourceContent initialApiContent = connector.getResourceContent(info.getUrl());\n            \n            ApiDesign design = doImport(resourceInfo, initialApiContent.getContent());\n            \n            metrics.apiImport(connector.getType());\n            \n            return design;\n        } catch (SourceConnectorException | IOException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Imports an API Design from one of the source control systems using its API.", "call_func_name": ["io.apicurio.hub.api.beans.ImportApiDesign.getUrl", "io.apicurio.hub.api.connectors.ISourceConnector.validateResourceExists", "io.apicurio.hub.api.connectors.ISourceConnector.getResourceContent", "io.apicurio.hub.api.beans.ResourceContent.getContent", "io.apicurio.hub.api.rest.impl.DesignsResource.doImport", "io.apicurio.hub.api.connectors.ISourceConnector.getType", "io.apicurio.hub.api.metrics.IApiMetrics.apiImport", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["io.apicurio.hub.core.beans.ApiDesignResourceInfo", "java.lang.String"], [""], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.beans.ImportApiDesign.getUrl": "@return the url"}, {"io.apicurio.hub.api.connectors.ISourceConnector.validateResourceExists": "Validates that the given repository URL can be resolved to a real resource of an appropriate type.  Ensures that the resource is accessible, reads the resource, extracts some basic information from the content."}, {"io.apicurio.hub.api.connectors.ISourceConnector.getResourceContent": "Fetchs the content of a github resource.  Uses the source control API to get access to the actual resource content and returns it as a string.  Should only be used for text resources, for obvious reasons."}, {"io.apicurio.hub.api.beans.ResourceContent.getContent": "@return the content"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.doImport": "Common functionality when importing a design."}, {"io.apicurio.hub.api.connectors.ISourceConnector.getType": "Gets the linked account type that this connector supports."}, {"io.apicurio.hub.api.metrics.IApiMetrics.apiImport": "Indicates that an API was imported."}]}, {"index": "929", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromData", "methodParameterType": "ImportApiDesign#", "methodParameterName": "info#", "methodBody": "private ApiDesign importDesignFromData(ImportApiDesign info) throws ServerError, ApiValidationException {\n        try {\n            String data = info.getData();\n            byte[] decodedData = Base64.decodeBase64(data);\n            \n            try (InputStream is = new ByteArrayInputStream(decodedData)) {\n                String content = IOUtils.toString(is, \"UTF-8\");\n                ApiDesignResourceInfo resourceInfo = ApiDesignResourceInfo.fromContent(content);\n                \n                if (resourceInfo == null) {\n                    throw new ApiValidationException(\"Failed to determine API Design type from content.\");\n                }\n                \n                ApiDesign design = doImport(resourceInfo, content);\n                \n                metrics.apiImport(null);\n                \n                return design;\n            }\n        } catch (ApiValidationException | ServerError e) {\n            throw e;\n        } catch (Exception e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Imports an API Design from base64 encoded content included in the request.  This supports the use-case where the UI allows the user to simply copy/paste the full API content.", "call_func_name": ["io.apicurio.hub.api.beans.ImportApiDesign.getData", "org.apache.commons.codec.binary.Base64.decodeBase64", "java.io.ByteArrayInputStream.<init>", "org.apache.commons.io.IOUtils.toString", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.fromContent", "io.apicurio.hub.core.exceptions.ApiValidationException.<init>", "io.apicurio.hub.api.rest.impl.DesignsResource.doImport", "io.apicurio.hub.api.metrics.IApiMetrics.apiImport", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["byte[]"], ["java.io.InputStream", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["io.apicurio.hub.core.beans.ApiDesignResourceInfo", "java.lang.String"], ["io.apicurio.hub.core.beans.LinkedAccountType"], [""], ["java.lang.Throwable"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.beans.ImportApiDesign.getData": "@return the data"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.doImport": "Common functionality when importing a design."}, {"io.apicurio.hub.api.metrics.IApiMetrics.apiImport": "Indicates that an API was imported."}]}, {"index": "930", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.importDesignFromUrl", "methodParameterType": "ImportApiDesign#", "methodParameterName": "info#", "methodBody": "private ApiDesign importDesignFromUrl(ImportApiDesign info) throws NotFoundException, ServerError, ApiValidationException {\n        try {\n            URL url = new URL(info.getUrl());\n            \n            try (InputStream is = url.openStream()) {\n                String content = IOUtils.toString(is, \"UTF-8\");\n                ApiDesignResourceInfo resourceInfo = ApiDesignResourceInfo.fromContent(content);\n                \n                String name = resourceInfo.getName();\n                if (name == null) {\n                    name = url.getPath();\n                    if (name != null && name.indexOf(\"/\") >= 0) {\n                        name = name.substring(name.indexOf(\"/\") + 1);\n                    }\n                }\n                \n                resourceInfo.setName(name);\n\n                ApiDesign design = doImport(resourceInfo, content);\n                \n                metrics.apiImport(null);\n                \n                return design;\n            }\n        } catch (ApiValidationException | ServerError e) {\n            throw e;\n        } catch (Exception e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Imports an API design from an arbitrary URL.  This simply opens a connection to that  URL and tries to consume its content as an OpenAPI document.", "call_func_name": ["io.apicurio.hub.api.beans.ImportApiDesign.getUrl", "java.net.URL.<init>", "java.net.URL.openStream", "org.apache.commons.io.IOUtils.toString", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.fromContent", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName", "java.net.URL.getPath", "java.lang.String.indexOf", "java.lang.String.substring", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName", "io.apicurio.hub.api.rest.impl.DesignsResource.doImport", "io.apicurio.hub.api.metrics.IApiMetrics.apiImport", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.io.InputStream", "java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["int"], ["java.lang.String"], ["io.apicurio.hub.core.beans.ApiDesignResourceInfo", "java.lang.String"], ["io.apicurio.hub.core.beans.LinkedAccountType"], [""], ["java.lang.Throwable"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.beans.ImportApiDesign.getUrl": "@return the url"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName": "@return the name"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName": "@param name the name to set"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.doImport": "Common functionality when importing a design."}, {"io.apicurio.hub.api.metrics.IApiMetrics.apiImport": "Indicates that an API was imported."}]}, {"index": "931", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.doImport", "methodParameterType": "ApiDesignResourceInfo#String#", "methodParameterName": "info#content#", "methodBody": "private ApiDesign doImport(ApiDesignResourceInfo info, String content) throws ServerError, IOException {\n        Date now = new Date();\n        String user = this.security.getCurrentUser().getLogin();\n        \n        if (info.getName() == null) {\n            info.setName(\"Imported API Design\");\n        }\n        if (info.getDescription() == null) {\n            info.setDescription(\"\");\n        }\n\n        ApiDesign design = new ApiDesign();\n        design.setName(info.getName());\n        design.setDescription(info.getDescription());\n        design.setCreatedBy(user);\n        design.setCreatedOn(now);\n        design.setTags(info.getTags());\n        design.setType(info.getType());\n        \n        try {\n            // Convert from YAML to JSON if the source is YAML (always store as JSON).  Only for non-GraphQL designs.\n            if (info.getType() != ApiDesignType.GraphQL && info.getFormat() == FormatType.YAML) {\n                content = FormatUtils.yamlToJson(content);\n            }\n            String id = this.storage.createApiDesign(user, design, content);\n            design.setId(id);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n        \n        return design;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Common functionality when importing a design.", "call_func_name": ["java.util.Date.<init>", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getDescription", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setDescription", "io.apicurio.hub.core.beans.ApiDesign.<init>", "io.apicurio.hub.core.beans.ApiDesign.setName", "io.apicurio.hub.core.beans.ApiDesign.setDescription", "io.apicurio.hub.core.beans.ApiDesign.setCreatedBy", "io.apicurio.hub.core.beans.ApiDesign.setCreatedOn", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getTags", "io.apicurio.hub.core.beans.ApiDesign.setTags", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getType", "io.apicurio.hub.core.beans.ApiDesign.setType", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getFormat", "io.apicurio.hub.core.util.FormatUtils.yamlToJson", "io.apicurio.hub.core.storage.IStorage.createApiDesign", "io.apicurio.hub.core.beans.ApiDesign.setId", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.util.Date"], [""], ["java.util.Set"], [""], ["io.apicurio.hub.core.beans.ApiDesignType"], [""], ["java.lang.String"], ["java.lang.String", "io.apicurio.hub.core.beans.ApiDesign", "java.lang.String"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName": "@return the name"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName": "@param name the name to set"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getDescription": "@return the description"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.setDescription": "@param description the description to set"}, {"io.apicurio.hub.core.beans.ApiDesign.setName": "@param name the name to set"}, {"io.apicurio.hub.core.beans.ApiDesign.setDescription": "@param description the description to set"}, {"io.apicurio.hub.core.beans.ApiDesign.setCreatedBy": "@param createdBy the createdBy to set"}, {"io.apicurio.hub.core.beans.ApiDesign.setCreatedOn": "@param createdOn the createdOn to set"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getTags": "@return the tags"}, {"io.apicurio.hub.core.beans.ApiDesign.setTags": "@param tags the tags to set"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getType": "@return the type"}, {"io.apicurio.hub.core.beans.ApiDesign.setType": "@param type the type to set"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getFormat": "@return the format"}, {"io.apicurio.hub.core.util.FormatUtils.yamlToJson": "Converts the content from YAML to JSON format."}, {"io.apicurio.hub.core.storage.IStorage.createApiDesign": "Creates a new API Design in the storage layer and returns a new unique Design ID.  This ID should be used in the future to retrieve information about the design (and to delete or update it). Initial content for the API must be provided (in the form of an OAI 2.0 or 3.0.0 document)."}, {"io.apicurio.hub.core.beans.ApiDesign.setId": "@param id the id to set"}]}, {"index": "932", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.createDesign", "methodParameterType": "NewApiDesign#", "methodParameterName": "info#", "methodBody": "@Override\n    public ApiDesign createDesign(NewApiDesign info) throws ServerError {\n        logger.debug(\"Creating an API Design: {}\", info.getName());\n        metrics.apiCall(\"/designs\", \"POST\");\n\n        try {\n            Date now = new Date();\n            String user = this.security.getCurrentUser().getLogin();\n            \n            // The API Design meta-data\n            ApiDesign design = new ApiDesign();\n            design.setName(info.getName());\n            design.setDescription(info.getDescription());\n            design.setCreatedBy(user);\n            design.setCreatedOn(now);\n\n            // The API Design content\n            ApiDesignType type;\n            if (info.getType() != null) {\n                type = info.getType();\n            } else {\n                if (info.getSpecVersion() == null || info.getSpecVersion().equals(\"2.0\")) {\n                    type = ApiDesignType.OpenAPI20;\n                } else {\n                    type = ApiDesignType.OpenAPI30;\n                }\n            }\n            design.setType(type);\n\n            String content = createNewDocument(type, info.getName(), info.getDescription());\n\n            // Create the API Design in the database\n            String designId = storage.createApiDesign(user, design, content);\n            design.setId(designId);\n            \n            metrics.apiCreate(type);\n            \n            return design;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#createDesign(io.apicurio.hub.api.beans.NewApiDesign)", "call_func_name": ["io.apicurio.hub.api.beans.NewApiDesign.getName", "org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "java.util.Date.<init>", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.beans.ApiDesign.<init>", "io.apicurio.hub.core.beans.ApiDesign.setName", "io.apicurio.hub.api.beans.NewApiDesign.getDescription", "io.apicurio.hub.core.beans.ApiDesign.setDescription", "io.apicurio.hub.core.beans.ApiDesign.setCreatedBy", "io.apicurio.hub.core.beans.ApiDesign.setCreatedOn", "io.apicurio.hub.api.beans.NewApiDesign.getType", "io.apicurio.hub.api.beans.NewApiDesign.getSpecVersion", "java.lang.String.equals", "io.apicurio.hub.core.beans.ApiDesign.setType", "io.apicurio.hub.api.rest.impl.DesignsResource.createNewDocument", "io.apicurio.hub.core.storage.IStorage.createApiDesign", "io.apicurio.hub.core.beans.ApiDesign.setId", "io.apicurio.hub.api.metrics.IApiMetrics.apiCreate", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.util.Date"], [""], [""], ["java.lang.Object"], ["io.apicurio.hub.core.beans.ApiDesignType"], ["io.apicurio.hub.core.beans.ApiDesignType", "java.lang.String", "java.lang.String"], ["java.lang.String", "io.apicurio.hub.core.beans.ApiDesign", "java.lang.String"], ["java.lang.String"], ["io.apicurio.hub.core.beans.ApiDesignType"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.beans.NewApiDesign.getName": "@return the name"}, {"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.beans.ApiDesign.setName": "@param name the name to set"}, {"io.apicurio.hub.api.beans.NewApiDesign.getDescription": "@return the description"}, {"io.apicurio.hub.core.beans.ApiDesign.setDescription": "@param description the description to set"}, {"io.apicurio.hub.core.beans.ApiDesign.setCreatedBy": "@param createdBy the createdBy to set"}, {"io.apicurio.hub.core.beans.ApiDesign.setCreatedOn": "@param createdOn the createdOn to set"}, {"io.apicurio.hub.api.beans.NewApiDesign.getType": "@return the type"}, {"io.apicurio.hub.api.beans.NewApiDesign.getSpecVersion": "@return the specVersion"}, {"io.apicurio.hub.core.beans.ApiDesign.setType": "@param type the type to set"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.createNewDocument": "Creates a new document."}, {"io.apicurio.hub.core.storage.IStorage.createApiDesign": "Creates a new API Design in the storage layer and returns a new unique Design ID.  This ID should be used in the future to retrieve information about the design (and to delete or update it). Initial content for the API must be provided (in the form of an OAI 2.0 or 3.0.0 document)."}, {"io.apicurio.hub.core.beans.ApiDesign.setId": "@param id the id to set"}, {"io.apicurio.hub.api.metrics.IApiMetrics.apiCreate": "Indicates that an API was created."}]}, {"index": "933", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.createNewDocument", "methodParameterType": "ApiDesignType#String#String#", "methodParameterName": "type#name#description#", "methodBody": "private String createNewDocument(ApiDesignType type, String name, String description) {\n        Document doc = null;\n        switch (type) {\n            case AsyncAPI20:\n                doc = Library.createDocument(DocumentType.asyncapi2);\n                break;\n            case OpenAPI20:\n                doc = Library.createDocument(DocumentType.openapi2);\n                break;\n            case OpenAPI30:\n                doc = Library.createDocument(DocumentType.openapi3);\n                break;\n            case GraphQL:\n                return \"# GraphQL Schema '\" + name + \"' created \" + new Date();\n        }\n        \n        if (doc != null) {\n            doc.info = doc.createInfo();\n            doc.info.title = name;\n            doc.info.description = description;\n            doc.info.version = \"1.0.0\";\n            return Library.writeDocumentToJSONString(doc);\n        }\n        \n        throw new RuntimeException(\"Unhandled API design type: \" + type);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleType#ClassInstanceCreation#InfixExpression#ReturnStatement#SwitchStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)InfixExpression)ReturnStatement)SwitchStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Creates a new document.", "call_func_name": ["io.apicurio.hub.core.beans.ApiDesignType.ordinal", "io.apicurio.datamodels.Library.createDocument", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.util.Date.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.datamodels.core.models.Document.createInfo", "io.apicurio.datamodels.Library.writeDocumentToJSONString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["io.apicurio.datamodels.core.models.DocumentType"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], ["io.apicurio.datamodels.core.models.Document"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "934", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getDesign", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public ApiDesign getDesign(String designId) throws ServerError, NotFoundException {\n        logger.debug(\"Getting an API design with ID {}\", designId);\n        metrics.apiCall(\"/designs/{designId}\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            ApiDesign design = this.storage.getApiDesign(user, designId);\n            return design;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getDesign(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getApiDesign", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getApiDesign": "Gets a single API Design from the storage layer by its unique ID."}]}, {"index": "935", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.updateDesign", "methodParameterType": "String#InputStream#", "methodParameterName": "designId#content#", "methodBody": "@Override\n    public void updateDesign(String designId, InputStream content)\n            throws ServerError, NotFoundException, ApiValidationException {\n        logger.debug(\"Updating an API design with ID {}\", designId);\n        metrics.apiCall(\"/designs/{designId}\", \"PUT\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            ApiDesign design = this.storage.getApiDesign(user, designId);\n            \n            String encoding = \"UTF8\";\n            if (request != null) {\n                encoding = request.getCharacterEncoding();\n            }\n            String contentStr = IOUtils.toString(content, encoding);\n            \n            try {\n                if (design.getType() == ApiDesignType.GraphQL) {\n                    SchemaParser schemaParser = new SchemaParser();\n                    schemaParser.parse(contentStr);\n                } else {\n                    Document doc = Library.readDocumentFromJSONString(contentStr);\n                    switch (design.getType()) {\n                        case AsyncAPI20:\n                            if (doc.getDocumentType() != DocumentType.asyncapi2) {\n                                throw new Exception(\"Expected AsyncAPI 2 content.\");\n                            }\n                            break;\n                        case OpenAPI20:\n                            if (doc.getDocumentType() != DocumentType.openapi2) {\n                                throw new Exception(\"Expected OpenAPI 2 content.\");\n                            }\n                            break;\n                        case OpenAPI30:\n                            if (doc.getDocumentType() != DocumentType.openapi3) {\n                                throw new Exception(\"Expected OpenAPI 3 content.\");\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            } catch (Exception e) {\n                throw new ApiValidationException(\"Content is invalid.\", e);\n            }\n            \n            storage.addContent(user, designId, ApiContentType.Document, contentStr);\n        } catch (IOException | StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#BreakStatement#SwitchCase#BreakStatement#SwitchStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(BreakStatement)BreakStatement)SwitchStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#updateDesign(java.lang.String,java.io.InputStream)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getApiDesign", "javax.servlet.http.HttpServletRequest.getCharacterEncoding", "org.apache.commons.io.IOUtils.toString", "io.apicurio.hub.core.beans.ApiDesign.getType", "graphql.schema.idl.SchemaParser.<init>", "graphql.schema.idl.SchemaParser.parse", "io.apicurio.datamodels.Library.readDocumentFromJSONString", "io.apicurio.hub.core.beans.ApiDesignType.ordinal", "io.apicurio.datamodels.core.models.Document.getDocumentType", "java.lang.Exception.<init>", "io.apicurio.hub.core.exceptions.ApiValidationException.<init>", "io.apicurio.hub.core.storage.IStorage.addContent", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.io.InputStream", "java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.String", "io.apicurio.hub.core.beans.ApiContentType", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getApiDesign": "Gets a single API Design from the storage layer by its unique ID."}, {"io.apicurio.hub.core.beans.ApiDesign.getType": "@return the type"}, {"io.apicurio.hub.core.storage.IStorage.addContent": "Adds a single content row to the DB and returns a unique content version number  for it."}]}, {"index": "936", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.editDesign", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Response editDesign(String designId) throws ServerError, NotFoundException {\n        logger.debug(\"Editing an API Design with ID {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/session\", \"GET\");\n        \n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            logger.debug(\"\\tUSER: {}\", user);\n\n            ApiDesignContent designContent = this.storage.getLatestContentDocument(user, designId);\n            String content = designContent.getDocument();\n            long contentVersion = designContent.getContentVersion();\n            String secret = this.security.getToken().substring(0, Math.min(64, this.security.getToken().length() - 1));\n            String sessionId = this.editingSessionManager.createSessionUuid(designId, user, secret, contentVersion);\n\n            logger.debug(\"\\tCreated Session ID: {}\", sessionId);\n            logger.debug(\"\\t            Secret: {}\", secret);\n\n            byte[] bytes = content.getBytes(StandardCharsets.UTF_8);\n            String ct = \"application/json; charset=\" + StandardCharsets.UTF_8;\n            String cl = String.valueOf(bytes.length);\n\n            ResponseBuilder builder = Response.ok().entity(content)\n                    .header(\"X-Apicurio-EditingSessionUuid\", sessionId)\n                    .header(\"X-Apicurio-ContentVersion\", contentVersion)\n                    .header(\"Content-Type\", ct)\n                    .header(\"Content-Length\", cl);\n\n            return builder.build();\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#NumberLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#editDesign(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getLatestContentDocument", "io.apicurio.hub.core.beans.ApiDesignContent.getDocument", "io.apicurio.hub.core.beans.ApiDesignContent.getContentVersion", "io.apicurio.hub.api.security.ISecurityContext.getToken", "java.lang.String.length", "java.lang.Math.min", "java.lang.String.substring", "io.apicurio.hub.core.editing.IEditingSessionManager.createSessionUuid", "java.lang.String.getBytes", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.valueOf", "javax.ws.rs.core.Response.ok", "java.lang.Long.valueOf", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["int", "int"], ["int", "int"], ["java.lang.String", "java.lang.String", "java.lang.String", "long"], ["java.nio.charset.Charset"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["int"], [""], ["long"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getLatestContentDocument": "Returns the most recent full content row for the given API Design."}, {"io.apicurio.hub.core.beans.ApiDesignContent.getDocument": "@return the oaiDocument"}, {"io.apicurio.hub.core.beans.ApiDesignContent.getContentVersion": "@return the contentVersion"}, {"io.apicurio.hub.api.security.ISecurityContext.getToken": "Returns the token used to authenticate."}, {"io.apicurio.hub.core.editing.IEditingSessionManager.createSessionUuid": "Called to create a unique one-time-use UUID issued to a client so they can connect to an editing session for an API design."}]}, {"index": "937", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.deleteDesign", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public void deleteDesign(String designId) throws ServerError, NotFoundException {\n        logger.debug(\"Deleting an API Design with ID {}\", designId);\n        metrics.apiCall(\"/designs/{designId}\", \"DELETE\");\n        \n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            this.storage.deleteApiDesign(user, designId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#deleteDesign(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.deleteApiDesign", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.deleteApiDesign": "Deletes a single API Design by its unique ID.  Throws an exception if no design was found."}]}, {"index": "938", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getContributors", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Collection<Contributor> getContributors(String designId) throws ServerError, NotFoundException {\n        logger.debug(\"Retrieving contributors list for design with ID: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/contributors\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            return this.storage.listContributors(user, designId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getContributors(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.listContributors", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.listContributors": "Gets the list of users who have collaborated to edit the given API design."}]}, {"index": "939", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getContent", "methodParameterType": "String#String#", "methodParameterName": "designId#format#", "methodBody": "@Override\n    public Response getContent(String designId, String format) throws ServerError, NotFoundException {\n        logger.debug(\"Getting content for API design with ID: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/content\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            \n            String content = null;\n            String ct = null;\n            \n            ApiDesign apiDesign = this.storage.getApiDesign(user, designId);\n            if (apiDesign.getType() == ApiDesignType.GraphQL) {\n                ApiDesignContent designContent = this.storage.getLatestContentDocument(user, designId);\n                content = designContent.getDocument();\n                ct = \"application/graphql; charset=\" + StandardCharsets.UTF_8;\n                \n                if (\"json\".equals(format)) {\n                    // TODO: Convert from SDL to JSON\n                    throw new ServerError(\"Format 'JSON' not yet supported for GraphQL designs.\");\n                }\n            } else {\n                ApiDesignContent designContent = this.storage.getLatestContentDocument(user, designId);\n    \n                // Load and apply commands if any exist.\n                List<ApiDesignCommand> apiCommands = this.storage.listContentCommands(user, designId, designContent.getContentVersion());\n                List<String> commands = new ArrayList<>(apiCommands.size());\n                for (ApiDesignCommand apiCommand : apiCommands) {\n                    commands.add(apiCommand.getCommand());\n                }\n                content = this.oaiCommandExecutor.executeCommands(designContent.getDocument(), commands);\n                ct = \"application/json; charset=\" + StandardCharsets.UTF_8;\n                \n                // Convert to yaml if necessary\n                if (\"yaml\".equals(format)) {\n                    content = FormatUtils.jsonToYaml(content);\n                    ct = \"application/x-yaml; charset=\" + StandardCharsets.UTF_8;\n                }\n            }\n\n            byte[] bytes = content.getBytes(StandardCharsets.UTF_8);\n            String cl = String.valueOf(bytes.length);\n            ResponseBuilder builder = Response.ok().entity(content)\n                    .header(\"Content-Type\", ct)\n                    .header(\"Content-Length\", cl);\n            return builder.build();\n        } catch (StorageException | OaiCommandException | IOException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#Assignment#ExpressionStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#Assignment#ExpressionStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)Assignment)ExpressionStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)Assignment)ExpressionStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getContent(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getApiDesign", "io.apicurio.hub.core.beans.ApiDesign.getType", "io.apicurio.hub.core.storage.IStorage.getLatestContentDocument", "io.apicurio.hub.core.beans.ApiDesignContent.getDocument", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.equals", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.core.beans.ApiDesignContent.getContentVersion", "io.apicurio.hub.core.storage.IStorage.listContentCommands", "java.util.List.size", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.core.beans.ApiDesignCommand.getCommand", "java.util.List.add", "io.apicurio.hub.core.cmd.OaiCommandExecutor.executeCommands", "io.apicurio.hub.core.util.FormatUtils.jsonToYaml", "java.lang.String.getBytes", "java.lang.String.valueOf", "javax.ws.rs.core.Response.ok", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "long"], [""], ["int"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.String", "java.util.List"], ["java.lang.String"], ["java.nio.charset.Charset"], ["int"], [""], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getApiDesign": "Gets a single API Design from the storage layer by its unique ID."}, {"io.apicurio.hub.core.beans.ApiDesign.getType": "@return the type"}, {"io.apicurio.hub.core.storage.IStorage.getLatestContentDocument": "Returns the most recent full content row for the given API Design."}, {"io.apicurio.hub.core.beans.ApiDesignContent.getDocument": "@return the oaiDocument"}, {"io.apicurio.hub.core.beans.ApiDesignContent.getContentVersion": "@return the contentVersion"}, {"io.apicurio.hub.core.storage.IStorage.listContentCommands": "Returns a list of commands for a given API design that have been executed since  a specific content version (excludes reverted commands)."}, {"io.apicurio.hub.core.beans.ApiDesignCommand.getCommand": "@return the command"}, {"io.apicurio.hub.core.cmd.OaiCommandExecutor.executeCommands": "Executes the given sequence of commands (as serialized JSON) against the given OAI document.  Returns the document after the commands have been executed."}, {"io.apicurio.hub.core.util.FormatUtils.jsonToYaml": "Converts the content from JSON to YAML format."}]}, {"index": "940", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.createInvitation", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Invitation createInvitation(String designId) throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Creating a collaboration invitation for API: {} \", designId);\n        metrics.apiCall(\"/designs/{designId}/invitations\", \"POST\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            String username = this.security.getCurrentUser().getName();\n            String inviteId = UUID.randomUUID().toString();\n            \n            ApiDesign design = this.storage.getApiDesign(user, designId);\n            if (!this.storage.hasOwnerPermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n            \n            this.storage.createCollaborationInvite(inviteId, designId, user, username, \"collaborator\", design.getName());\n            Invitation invite = new Invitation();\n            invite.setCreatedBy(user);\n            invite.setCreatedOn(new Date());\n            invite.setDesignId(designId);\n            invite.setInviteId(inviteId);\n            invite.setStatus(\"pending\");\n            return invite;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#createInvitation(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.studio.shared.beans.User.getName", "java.util.UUID.randomUUID", "java.util.UUID.toString", "io.apicurio.hub.core.storage.IStorage.getApiDesign", "io.apicurio.hub.core.storage.IStorage.hasOwnerPermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.core.beans.ApiDesign.getName", "io.apicurio.hub.core.storage.IStorage.createCollaborationInvite", "io.apicurio.hub.core.beans.Invitation.<init>", "io.apicurio.hub.core.beans.Invitation.setCreatedBy", "java.util.Date.<init>", "io.apicurio.hub.core.beans.Invitation.setCreatedOn", "io.apicurio.hub.core.beans.Invitation.setDesignId", "io.apicurio.hub.core.beans.Invitation.setInviteId", "io.apicurio.hub.core.beans.Invitation.setStatus", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.util.Date"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.studio.shared.beans.User.getName": "@return the name"}, {"io.apicurio.hub.core.storage.IStorage.getApiDesign": "Gets a single API Design from the storage layer by its unique ID."}, {"io.apicurio.hub.core.storage.IStorage.hasOwnerPermission": "Returns true if the given user has ownership permission over the API design."}, {"io.apicurio.hub.core.beans.ApiDesign.getName": "@return the name"}, {"io.apicurio.hub.core.storage.IStorage.createCollaborationInvite": "Creates an invitation to collaborate on an API design."}, {"io.apicurio.hub.core.beans.Invitation.setCreatedBy": "@param createdBy the createdBy to set"}, {"io.apicurio.hub.core.beans.Invitation.setCreatedOn": "@param createdOn the createdOn to set"}, {"io.apicurio.hub.core.beans.Invitation.setDesignId": "@param designId the designId to set"}, {"io.apicurio.hub.core.beans.Invitation.setInviteId": "@param inviteId the inviteId to set"}, {"io.apicurio.hub.core.beans.Invitation.setStatus": "@param status the status to set"}]}, {"index": "941", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getInvitation", "methodParameterType": "String#String#", "methodParameterName": "designId#inviteId#", "methodBody": "@Override\n    public Invitation getInvitation(String designId, String inviteId) throws ServerError, NotFoundException {\n        logger.debug(\"Retrieving a collaboration invitation for API: {}  and inviteID: {}\", designId, inviteId);\n        metrics.apiCall(\"/designs/{designId}/invitations/{inviteId}\", \"GET\");\n\n        try {\n            return this.storage.getCollaborationInvite(designId, inviteId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getInvitation(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.core.storage.IStorage.getCollaborationInvite", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.core.storage.IStorage.getCollaborationInvite": "Returns a single invitation for a given API design.  The invitation ID is required."}]}, {"index": "942", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getInvitations", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Collection<Invitation> getInvitations(String designId) throws ServerError, NotFoundException {\n        logger.debug(\"Retrieving all collaboration invitations for API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/invitations\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            return this.storage.listCollaborationInvites(designId, user);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getInvitations(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.listCollaborationInvites", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.listCollaborationInvites": "Returns all of the invitations for a given API design."}]}, {"index": "943", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.acceptInvitation", "methodParameterType": "String#String#", "methodParameterName": "designId#inviteId#", "methodBody": "@Override\n    public void acceptInvitation(String designId, String inviteId) throws ServerError, NotFoundException {\n        logger.debug(\"Accepting an invitation to collaborate on an API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/invitations\", \"PUT\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            Invitation invite = this.storage.getCollaborationInvite(designId, inviteId);\n            if (this.storage.hasWritePermission(user, designId)) {\n                throw new NotFoundException();\n            }\n            boolean accepted = this.storage.updateCollaborationInviteStatus(inviteId, \"pending\", \"accepted\", user);\n            if (!accepted) {\n                throw new NotFoundException();\n            }\n            this.storage.createPermission(designId, user, invite.getRole());\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#acceptInvitation(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getCollaborationInvite", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.core.storage.IStorage.updateCollaborationInviteStatus", "io.apicurio.hub.core.beans.Invitation.getRole", "io.apicurio.hub.core.storage.IStorage.createPermission", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getCollaborationInvite": "Returns a single invitation for a given API design.  The invitation ID is required."}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.updateCollaborationInviteStatus": "Updates the status of an invitation.  This can be used to accept, reject, or cancel an invite."}, {"io.apicurio.hub.core.beans.Invitation.getRole": "@return the role"}, {"io.apicurio.hub.core.storage.IStorage.createPermission": "Creates a permission for a single user for a given API design."}]}, {"index": "944", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.rejectInvitation", "methodParameterType": "String#String#", "methodParameterName": "designId#inviteId#", "methodBody": "@Override\n    public void rejectInvitation(String designId, String inviteId) throws ServerError, NotFoundException {\n        logger.debug(\"Rejecting an invitation to collaborate on an API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/invitations\", \"DELETE\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            // This will ensure that the invitation exists for this designId.\n            this.storage.getCollaborationInvite(designId, inviteId);\n            boolean accepted = this.storage.updateCollaborationInviteStatus(inviteId, \"pending\", \"rejected\", user);\n            if (!accepted) {\n                throw new NotFoundException();\n            }\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#rejectInvitation(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getCollaborationInvite", "io.apicurio.hub.core.storage.IStorage.updateCollaborationInviteStatus", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getCollaborationInvite": "Returns a single invitation for a given API design.  The invitation ID is required."}, {"io.apicurio.hub.core.storage.IStorage.updateCollaborationInviteStatus": "Updates the status of an invitation.  This can be used to accept, reject, or cancel an invite."}]}, {"index": "945", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getCollaborators", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Collection<ApiDesignCollaborator> getCollaborators(String designId) throws ServerError, NotFoundException {\n        logger.debug(\"Retrieving all collaborators for API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/collaborators\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new NotFoundException();\n            }\n            return this.storage.listPermissions(designId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getCollaborators(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.core.storage.IStorage.listPermissions", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.listPermissions": "Returns a collection of all collaborators for a given API design."}]}, {"index": "946", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.updateCollaborator", "methodParameterType": "String#String#UpdateCollaborator#", "methodParameterName": "designId#userId#update#", "methodBody": "@Override\n    public void updateCollaborator(String designId, String userId,\n            UpdateCollaborator update) throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Updating collaborator for API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/collaborators/{userId}\", \"PUT\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasOwnerPermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n            this.storage.updatePermission(designId, userId, update.getNewRole());\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#updateCollaborator(java.lang.String,java.lang.String,io.apicurio.hub.api.beans.UpdateCollaborator)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasOwnerPermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.api.beans.UpdateCollaborator.getNewRole", "io.apicurio.hub.core.storage.IStorage.updatePermission", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasOwnerPermission": "Returns true if the given user has ownership permission over the API design."}, {"io.apicurio.hub.api.beans.UpdateCollaborator.getNewRole": "@return the newRole"}, {"io.apicurio.hub.core.storage.IStorage.updatePermission": "Changes the permission of a given user.  For example, this might change a user's permission from 'collaborator' to 'owner'."}]}, {"index": "947", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.deleteCollaborator", "methodParameterType": "String#String#", "methodParameterName": "designId#userId#", "methodBody": "@Override\n    public void deleteCollaborator(String designId, String userId)\n            throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Deleting/revoking collaborator for API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/collaborators/{userId}\", \"DELETE\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasOwnerPermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n            this.storage.deletePermission(designId, userId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#deleteCollaborator(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasOwnerPermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.core.storage.IStorage.deletePermission", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasOwnerPermission": "Returns true if the given user has ownership permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.deletePermission": "Deletes a permission.  This will typically revoke a user's access to an API design."}]}, {"index": "948", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getActivity", "methodParameterType": "String#Integer#Integer#", "methodParameterName": "designId#start#end#", "methodBody": "@Override\n    public Collection<ApiDesignChange> getActivity(String designId, Integer start, Integer end)\n            throws ServerError, NotFoundException {\n        int from = 0;\n        int to = 20;\n        if (start != null) {\n            from = start.intValue();\n        }\n        if (end != null) {\n            to = end.intValue();\n        }\n        \n        try {\n        \tif (!config.isShareForEveryone()) {\n\t            String user = this.security.getCurrentUser().getLogin();\n\t            if (!this.storage.hasWritePermission(user, designId)) {\n\t                throw new NotFoundException();\n\t            }\n        \t}\n            return this.storage.listApiDesignActivity(designId, from, to);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getActivity(java.lang.String,java.lang.Integer,java.lang.Integer)", "call_func_name": ["java.lang.Integer.intValue", "io.apicurio.hub.core.config.HubConfiguration.isShareForEveryone", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.core.storage.IStorage.listApiDesignActivity", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "int", "int"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.isShareForEveryone": "@return true if the \"share APIs for everyone\" global option is enabled"}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.listApiDesignActivity": "Returns a collection of API design changes.  Since there can be many of these per API,  it is required to include a FROM and TO parameter to limit the result set."}]}, {"index": "949", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getPublications", "methodParameterType": "String#Integer#Integer#", "methodParameterName": "designId#start#end#", "methodBody": "@Override\n    public Collection<ApiPublication> getPublications(String designId, Integer start, Integer end)\n            throws ServerError, NotFoundException {\n        int from = 0;\n        int to = 20;\n        if (start != null) {\n            from = start.intValue();\n        }\n        if (end != null) {\n            to = end.intValue();\n        }\n        \n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new NotFoundException();\n            }\n            return this.storage.listApiDesignPublicationsBy(designId, user, from, to);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getPublications(java.lang.String,java.lang.Integer,java.lang.Integer)", "call_func_name": ["java.lang.Integer.intValue", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.core.storage.IStorage.listApiDesignPublicationsBy", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "int", "int"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.listApiDesignPublicationsBy": "Returns a collection of API publications done by the given user (recorded whenever a user publishes  an API).  This is a paged method similar to listApiDesignActivity()."}]}, {"index": "950", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.publishApi", "methodParameterType": "String#NewApiPublication#", "methodParameterName": "designId#info#", "methodBody": "@Override\n    public void publishApi(String designId, NewApiPublication info) throws ServerError, NotFoundException {\n        LinkedAccountType type = info.getType();\n        \n        try {\n            // First step - publish the content to the soruce control system\n            ISourceConnector connector = this.sourceConnectorFactory.createConnector(type);\n            String resourceUrl = toResourceUrl(info);\n            String formattedContent = getApiContent(designId, info.getFormat());\n            try {\n                ResourceContent content = connector.getResourceContent(resourceUrl);\n                content.setContent(formattedContent);\n                connector.updateResourceContent(resourceUrl, info.getCommitMessage(), null, content);\n            } catch (NotFoundException nfe) {\n                connector.createResourceContent(resourceUrl, info.getCommitMessage(), formattedContent);\n            }\n            \n            // Followup step - store a row in the api_content table\n            try {\n                String user = this.security.getCurrentUser().getLogin();\n                String publicationData = createPublicationData(info);\n                storage.addContent(user, designId, ApiContentType.Publish, publicationData);\n            } catch (Exception e) {\n                logger.error(\"Failed to record API publication in database.\", e);\n            }\n        } catch (SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#publishApi(java.lang.String,io.apicurio.hub.api.beans.NewApiPublication)", "call_func_name": ["io.apicurio.hub.api.beans.NewApiPublication.getType", "io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector", "io.apicurio.hub.api.rest.impl.DesignsResource.toResourceUrl", "io.apicurio.hub.api.beans.NewApiPublication.getFormat", "io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent", "io.apicurio.hub.api.connectors.ISourceConnector.getResourceContent", "io.apicurio.hub.api.beans.ResourceContent.setContent", "io.apicurio.hub.api.beans.NewApiPublication.getCommitMessage", "io.apicurio.hub.api.connectors.ISourceConnector.updateResourceContent", "io.apicurio.hub.api.connectors.ISourceConnector.createResourceContent", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.api.rest.impl.DesignsResource.createPublicationData", "io.apicurio.hub.core.storage.IStorage.addContent", "org.slf4j.Logger.error", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["io.apicurio.hub.api.beans.NewApiPublication"], [""], ["java.lang.String", "io.apicurio.hub.core.beans.FormatType"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "io.apicurio.hub.api.beans.ResourceContent"], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["io.apicurio.hub.api.beans.NewApiPublication"], ["java.lang.String", "java.lang.String", "io.apicurio.hub.core.beans.ApiContentType", "java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.beans.NewApiPublication.getType": "@return the type"}, {"io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector": "Creates a connector for a particular type of account (e.g. GitHub, GitLab, etc)."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.toResourceUrl": "Uses the information in the bean to create a resource URL."}, {"io.apicurio.hub.api.beans.NewApiPublication.getFormat": "@return the format"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent": "Gets the current content of an API."}, {"io.apicurio.hub.api.connectors.ISourceConnector.getResourceContent": "Fetchs the content of a github resource.  Uses the source control API to get access to the actual resource content and returns it as a string.  Should only be used for text resources, for obvious reasons."}, {"io.apicurio.hub.api.beans.ResourceContent.setContent": "@param content the content to set"}, {"io.apicurio.hub.api.beans.NewApiPublication.getCommitMessage": "@return the commitMessage"}, {"io.apicurio.hub.api.connectors.ISourceConnector.updateResourceContent": "Updates the raw content for a resource in the source control system using its API."}, {"io.apicurio.hub.api.connectors.ISourceConnector.createResourceContent": "Creates a new resource in the source control system with the given content."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.createPublicationData": "Creates the JSON data to be stored in the data row representing a \"publish API\" event (also known as an API publication)."}, {"io.apicurio.hub.core.storage.IStorage.addContent": "Adds a single content row to the DB and returns a unique content version number  for it."}]}, {"index": "951", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.mockApi", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public MockReference mockApi(String designId) throws ServerError, NotFoundException {\n        try {\n            // First step - publish the content to the Microcks server API\n            String content = getApiContent(designId, FormatType.YAML);\n            String serviceRef = this.microcks.uploadResourceContent(content);\n\n            // Build mockURL from microcksURL.\n            String mockURL = null;\n            String microcksURL = config.getMicrocksApiUrl();\n            try {\n                mockURL = microcksURL.substring(0, microcksURL.indexOf(\"/api\")) + \"/#/services/\"\n                      + URLEncoder.encode(serviceRef, \"UTF-8\");\n            } catch (Exception e) {\n                logger.error(\"Failed to produce a valid mockURL\", e);\n            }\n\n            // Followup step - store a row in the api_content table\n            try {\n                String user = this.security.getCurrentUser().getLogin();\n                String mockData = createMockData(serviceRef, mockURL);\n                storage.addContent(user, designId, ApiContentType.Mock, mockData);\n            } catch (Exception e) {\n                logger.error(\"Failed to record API mock publication in database.\", e);\n            }\n\n            // Finally return response.\n            MockReference mockRef = new MockReference();\n            mockRef.setMockType(\"microcks\");\n            mockRef.setServiceRef(serviceRef);\n            mockRef.setMockURL(mockURL);\n            return mockRef;\n        } catch (MicrocksConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#mockApi(java.lang.String)", "call_func_name": ["io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent", "io.apicurio.hub.api.microcks.IMicrocksConnector.uploadResourceContent", "io.apicurio.hub.core.config.HubConfiguration.getMicrocksApiUrl", "java.lang.StringBuilder.<init>", "java.lang.String.indexOf", "java.lang.String.substring", "java.lang.StringBuilder.append", "java.net.URLEncoder.encode", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.api.rest.impl.DesignsResource.createMockData", "io.apicurio.hub.core.storage.IStorage.addContent", "io.apicurio.hub.core.beans.MockReference.<init>", "io.apicurio.hub.core.beans.MockReference.setMockType", "io.apicurio.hub.core.beans.MockReference.setServiceRef", "io.apicurio.hub.core.beans.MockReference.setMockURL", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "io.apicurio.hub.core.beans.FormatType"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["int", "int"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String", "io.apicurio.hub.core.beans.ApiContentType", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent": "Gets the current content of an API."}, {"io.apicurio.hub.api.microcks.IMicrocksConnector.uploadResourceContent": "Upload an OAS v3 specification content to Microcks. This will trigger service discovery and mock endpoint publication on the Microcks side."}, {"io.apicurio.hub.core.config.HubConfiguration.getMicrocksApiUrl": "@return the configured Microcks API URL"}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.createMockData": "Create the JSON data to be stored in the data row representing a \"mock API\" event (also know as an API mock publication)."}, {"io.apicurio.hub.core.storage.IStorage.addContent": "Adds a single content row to the DB and returns a unique content version number  for it."}, {"io.apicurio.hub.core.beans.MockReference.setMockType": "@param mockType the mockType to set"}, {"io.apicurio.hub.core.beans.MockReference.setServiceRef": "@param serviceRef the serviceRef to set"}, {"io.apicurio.hub.core.beans.MockReference.setMockURL": "@param mockURL the mockURL to set"}]}, {"index": "952", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getMocks", "methodParameterType": "String#Integer#Integer#", "methodParameterName": "designId#start#end#", "methodBody": "@Override\n    public Collection<ApiMock> getMocks(String designId, Integer start, Integer end)\n            throws ServerError, NotFoundException {\n        int from = 0;\n        int to = 20;\n        if (start != null) {\n            from = start.intValue();\n        }\n        if (end != null) {\n            to = end.intValue();\n        }\n        \n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new NotFoundException();\n            }\n            return this.storage.listApiDesignMocks(designId, from, to);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getMocks(java.lang.String,java.lang.Integer,java.lang.Integer)", "call_func_name": ["java.lang.Integer.intValue", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.core.storage.IStorage.listApiDesignMocks", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "int", "int"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.listApiDesignMocks": "Returns a collection of API mocks (recorded whenever a user mocks an API).  This is a paged method similar to listApiDesignActivity()."}]}, {"index": "953", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.createPublicationData", "methodParameterType": "NewApiPublication#", "methodParameterName": "info#", "methodBody": "private String createPublicationData(NewApiPublication info) {\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            ObjectNode data = JsonNodeFactory.instance.objectNode();\n            data.set(\"type\", JsonNodeFactory.instance.textNode(info.getType().name()));\n            data.set(\"org\", JsonNodeFactory.instance.textNode(info.getOrg()));\n            data.set(\"repo\", JsonNodeFactory.instance.textNode(info.getRepo()));\n            data.set(\"team\", JsonNodeFactory.instance.textNode(info.getTeam()));\n            data.set(\"group\", JsonNodeFactory.instance.textNode(info.getGroup()));\n            data.set(\"project\", JsonNodeFactory.instance.textNode(info.getProject()));\n            data.set(\"branch\", JsonNodeFactory.instance.textNode(info.getBranch()));\n            data.set(\"resource\", JsonNodeFactory.instance.textNode(info.getResource()));\n            data.set(\"format\", JsonNodeFactory.instance.textNode(info.getFormat().name()));\n            data.set(\"commitMessage\", JsonNodeFactory.instance.textNode(info.getCommitMessage()));\n            return mapper.writeValueAsString(data);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates the JSON data to be stored in the data row representing a \"publish API\" event (also known as an API publication).", "call_func_name": ["com.fasterxml.jackson.databind.ObjectMapper.<init>", "com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode", "io.apicurio.hub.api.beans.NewApiPublication.getType", "io.apicurio.hub.core.beans.LinkedAccountType.name", "com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode", "com.fasterxml.jackson.databind.node.ObjectNode.set", "io.apicurio.hub.api.beans.NewApiPublication.getOrg", "io.apicurio.hub.api.beans.NewApiPublication.getRepo", "io.apicurio.hub.api.beans.NewApiPublication.getTeam", "io.apicurio.hub.api.beans.NewApiPublication.getGroup", "io.apicurio.hub.api.beans.NewApiPublication.getProject", "io.apicurio.hub.api.beans.NewApiPublication.getBranch", "io.apicurio.hub.api.beans.NewApiPublication.getResource", "io.apicurio.hub.api.beans.NewApiPublication.getFormat", "io.apicurio.hub.core.beans.FormatType.name", "io.apicurio.hub.api.beans.NewApiPublication.getCommitMessage", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "com.fasterxml.jackson.databind.JsonNode"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.beans.NewApiPublication.getType": "@return the type"}, {"io.apicurio.hub.api.beans.NewApiPublication.getOrg": "@return the org"}, {"io.apicurio.hub.api.beans.NewApiPublication.getRepo": "@return the repo"}, {"io.apicurio.hub.api.beans.NewApiPublication.getTeam": "@return the team"}, {"io.apicurio.hub.api.beans.NewApiPublication.getGroup": "@return the group"}, {"io.apicurio.hub.api.beans.NewApiPublication.getProject": "@return the project"}, {"io.apicurio.hub.api.beans.NewApiPublication.getBranch": "@return the branch"}, {"io.apicurio.hub.api.beans.NewApiPublication.getResource": "@return the resource"}, {"io.apicurio.hub.api.beans.NewApiPublication.getFormat": "@return the format"}, {"io.apicurio.hub.api.beans.NewApiPublication.getCommitMessage": "@return the commitMessage"}]}, {"index": "954", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.createMockData", "methodParameterType": "String#String#", "methodParameterName": "serviceRef#mockURL#", "methodBody": "private String createMockData(String serviceRef, String mockURL) {\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            ObjectNode data = JsonNodeFactory.instance.objectNode();\n            data.set(\"mockType\", JsonNodeFactory.instance.textNode(\"microcks\"));\n            data.set(\"serviceRef\", JsonNodeFactory.instance.textNode(serviceRef));\n            data.set(\"mockURL\", JsonNodeFactory.instance.textNode(mockURL));\n            return mapper.writeValueAsString(data);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create the JSON data to be stored in the data row representing a \"mock API\" event (also know as an API mock publication).", "call_func_name": ["com.fasterxml.jackson.databind.ObjectMapper.<init>", "com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode", "com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode", "com.fasterxml.jackson.databind.node.ObjectNode.set", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String", "com.fasterxml.jackson.databind.JsonNode"], ["java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "955", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent", "methodParameterType": "String#FormatType#", "methodParameterName": "designId#format#", "methodBody": "private String getApiContent(String designId, FormatType format) throws ServerError, NotFoundException {\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            \n            ApiDesign design = this.storage.getApiDesign(user, designId);\n\n            ApiDesignContent designContent = this.storage.getLatestContentDocument(user, designId);\n            String content = designContent.getDocument();\n\n            if (design.getType() == ApiDesignType.GraphQL) {\n                if (format != null && format != FormatType.SDL) {\n                    throw new ServerError(\"Unsupported format: \" + format);\n                }\n            } else {\n                List<ApiDesignCommand> apiCommands = this.storage.listContentCommands(user, designId, designContent.getContentVersion());\n                if (!apiCommands.isEmpty()) {\n                    List<String> commands = new ArrayList<>(apiCommands.size());\n                    for (ApiDesignCommand apiCommand : apiCommands) {\n                        commands.add(apiCommand.getCommand());\n                    }\n                    content = this.oaiCommandExecutor.executeCommands(designContent.getDocument(), commands);\n                }\n    \n                // Convert to yaml if necessary\n                if (format == FormatType.YAML) {\n                    content = FormatUtils.jsonToYaml(content);\n                } else {\n                    content = FormatUtils.formatJson(content);\n                }\n            }\n            \n            return content;\n        } catch (StorageException | OaiCommandException | IOException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the current content of an API.", "call_func_name": ["io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getApiDesign", "io.apicurio.hub.core.storage.IStorage.getLatestContentDocument", "io.apicurio.hub.core.beans.ApiDesignContent.getDocument", "io.apicurio.hub.core.beans.ApiDesign.getType", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.core.beans.ApiDesignContent.getContentVersion", "io.apicurio.hub.core.storage.IStorage.listContentCommands", "java.util.List.isEmpty", "java.util.List.size", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.core.beans.ApiDesignCommand.getCommand", "java.util.List.add", "io.apicurio.hub.core.cmd.OaiCommandExecutor.executeCommands", "io.apicurio.hub.core.util.FormatUtils.jsonToYaml", "io.apicurio.hub.core.util.FormatUtils.formatJson", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "long"], [""], [""], ["int"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.String", "java.util.List"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getApiDesign": "Gets a single API Design from the storage layer by its unique ID."}, {"io.apicurio.hub.core.storage.IStorage.getLatestContentDocument": "Returns the most recent full content row for the given API Design."}, {"io.apicurio.hub.core.beans.ApiDesignContent.getDocument": "@return the oaiDocument"}, {"io.apicurio.hub.core.beans.ApiDesign.getType": "@return the type"}, {"io.apicurio.hub.core.beans.ApiDesignContent.getContentVersion": "@return the contentVersion"}, {"io.apicurio.hub.core.storage.IStorage.listContentCommands": "Returns a list of commands for a given API design that have been executed since  a specific content version (excludes reverted commands)."}, {"io.apicurio.hub.core.beans.ApiDesignCommand.getCommand": "@return the command"}, {"io.apicurio.hub.core.cmd.OaiCommandExecutor.executeCommands": "Executes the given sequence of commands (as serialized JSON) against the given OAI document.  Returns the document after the commands have been executed."}, {"io.apicurio.hub.core.util.FormatUtils.jsonToYaml": "Converts the content from JSON to YAML format."}, {"io.apicurio.hub.core.util.FormatUtils.formatJson": "Takes JSON content and formats with a standard 2 spaces per indent.  This is used to take (potentially) unformatted JSON and convert it to formatted JSON."}]}, {"index": "956", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getCodegenProjects", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public Collection<CodegenProject> getCodegenProjects(String designId)\n            throws ServerError, NotFoundException {\n        logger.debug(\"Retrieving codegen project list for design with ID: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/codegen/projects\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            ApiDesign design = this.storage.getApiDesign(user, designId);\n            return this.storage.listCodegenProjects(user, design.getId());\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getCodegenProjects(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getApiDesign", "io.apicurio.hub.core.beans.ApiDesign.getId", "io.apicurio.hub.core.storage.IStorage.listCodegenProjects", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getApiDesign": "Gets a single API Design from the storage layer by its unique ID."}, {"io.apicurio.hub.core.beans.ApiDesign.getId": "@return the id"}, {"io.apicurio.hub.core.storage.IStorage.listCodegenProjects": "Returns a collection of codegen projects for the given API design."}]}, {"index": "957", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.createCodegenProject", "methodParameterType": "String#NewCodegenProject#", "methodParameterName": "designId#body#", "methodBody": "@Override\n    public CodegenProject createCodegenProject(String designId, NewCodegenProject body)\n            throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Creating a codegen project for API: {} \", designId);\n        metrics.apiCall(\"/designs/{designId}/codegen/projects\", \"POST\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            \n            ApiDesign design = this.storage.getApiDesign(user, designId);\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n            \n            CodegenProject project = new CodegenProject();\n            Date now = new Date();\n            project.setCreatedBy(user);\n            project.setCreatedOn(now);\n            project.setModifiedBy(user);\n            project.setModifiedOn(now);\n            project.setDesignId(design.getId());\n            project.setType(body.getProjectType());\n            \n            project.setAttributes(new HashMap<String, String>());\n            if (body.getProjectConfig() != null) {\n                project.getAttributes().putAll(body.getProjectConfig());\n            }\n            project.getAttributes().put(\"location\", body.getLocation().toString());\n            project.getAttributes().put(\"update-only\", Boolean.FALSE.toString());\n            if (body.getPublishInfo() != null) {\n                if (body.getPublishInfo().getType() != null) {\n                    project.getAttributes().put(\"publish-type\", body.getPublishInfo().getType().toString());\n                }\n                project.getAttributes().put(\"publish-branch\", body.getPublishInfo().getBranch());\n                project.getAttributes().put(\"publish-commitMessage\", body.getPublishInfo().getCommitMessage());\n                project.getAttributes().put(\"publish-group\", body.getPublishInfo().getGroup());\n                project.getAttributes().put(\"publish-location\", body.getPublishInfo().getLocation());\n                project.getAttributes().put(\"publish-org\", body.getPublishInfo().getOrg());\n                project.getAttributes().put(\"publish-project\", body.getPublishInfo().getProject());\n                project.getAttributes().put(\"publish-repo\", body.getPublishInfo().getRepo());\n                project.getAttributes().put(\"publish-team\", body.getPublishInfo().getTeam());\n            }\n\n            if (body.getLocation() == CodegenLocation.download) {\n                // Nothing extra to do when downloading - that will be handled by a separate call\n            }\n\n            if (body.getLocation() == CodegenLocation.sourceControl) {\n                String prUrl = generateAndPublishProject(project, false);\n                project.getAttributes().put(\"pullRequest-url\", prUrl);\n            }\n\n            String projectId = this.storage.createCodegenProject(user, project);\n            project.setId(projectId);\n\n            return project;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#createCodegenProject(java.lang.String,io.apicurio.hub.api.beans.NewCodegenProject)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.getApiDesign", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.core.beans.CodegenProject.<init>", "java.util.Date.<init>", "io.apicurio.hub.core.beans.CodegenProject.setCreatedBy", "io.apicurio.hub.core.beans.CodegenProject.setCreatedOn", "io.apicurio.hub.core.beans.CodegenProject.setModifiedBy", "io.apicurio.hub.core.beans.CodegenProject.setModifiedOn", "io.apicurio.hub.core.beans.ApiDesign.getId", "io.apicurio.hub.core.beans.CodegenProject.setDesignId", "io.apicurio.hub.api.beans.NewCodegenProject.getProjectType", "io.apicurio.hub.core.beans.CodegenProject.setType", "java.util.HashMap.<init>", "io.apicurio.hub.core.beans.CodegenProject.setAttributes", "io.apicurio.hub.api.beans.NewCodegenProject.getProjectConfig", "io.apicurio.hub.core.beans.CodegenProject.getAttributes", "java.util.Map.putAll", "io.apicurio.hub.api.beans.NewCodegenProject.getLocation", "io.apicurio.hub.api.beans.CodegenLocation.toString", "java.util.Map.put", "java.lang.Boolean.toString", "io.apicurio.hub.api.beans.NewCodegenProject.getPublishInfo", "io.apicurio.hub.api.beans.CodegenPublishInfo.getType", "io.apicurio.hub.core.beans.LinkedAccountType.toString", "io.apicurio.hub.api.beans.CodegenPublishInfo.getBranch", "io.apicurio.hub.api.beans.CodegenPublishInfo.getCommitMessage", "io.apicurio.hub.api.beans.CodegenPublishInfo.getGroup", "io.apicurio.hub.api.beans.CodegenPublishInfo.getLocation", "io.apicurio.hub.api.beans.CodegenPublishInfo.getOrg", "io.apicurio.hub.api.beans.CodegenPublishInfo.getProject", "io.apicurio.hub.api.beans.CodegenPublishInfo.getRepo", "io.apicurio.hub.api.beans.CodegenPublishInfo.getTeam", "io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublishProject", "io.apicurio.hub.core.storage.IStorage.createCodegenProject", "io.apicurio.hub.core.beans.CodegenProject.setId", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.util.Date"], ["java.lang.String"], ["java.util.Date"], [""], ["java.lang.String"], [""], ["io.apicurio.hub.core.beans.CodegenProjectType"], [""], ["java.util.Map"], [""], [""], ["java.util.Map"], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["io.apicurio.hub.core.beans.CodegenProject", "boolean"], ["java.lang.String", "io.apicurio.hub.core.beans.CodegenProject"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.getApiDesign": "Gets a single API Design from the storage layer by its unique ID."}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.beans.CodegenProject.setCreatedBy": "@param createdBy the createdBy to set"}, {"io.apicurio.hub.core.beans.CodegenProject.setCreatedOn": "@param createdOn the createdOn to set"}, {"io.apicurio.hub.core.beans.CodegenProject.setModifiedBy": "@param modifiedBy the modifiedBy to set"}, {"io.apicurio.hub.core.beans.CodegenProject.setModifiedOn": "@param modifiedOn the modifiedOn to set"}, {"io.apicurio.hub.core.beans.ApiDesign.getId": "@return the id"}, {"io.apicurio.hub.core.beans.CodegenProject.setDesignId": "@param designId the designId to set"}, {"io.apicurio.hub.api.beans.NewCodegenProject.getProjectType": "@return the projectType"}, {"io.apicurio.hub.core.beans.CodegenProject.setType": "@param type the type to set"}, {"io.apicurio.hub.core.beans.CodegenProject.setAttributes": "@param attributes the attributes to set"}, {"io.apicurio.hub.api.beans.NewCodegenProject.getProjectConfig": "@return the projectConfig"}, {"io.apicurio.hub.core.beans.CodegenProject.getAttributes": "@return the attributes"}, {"io.apicurio.hub.api.beans.NewCodegenProject.getLocation": "@return the location"}, {"io.apicurio.hub.api.beans.NewCodegenProject.getPublishInfo": "@return the publishInfo"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getType": "@return the type"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getBranch": "@return the branch"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getCommitMessage": "@return the commitMessage"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getGroup": "@return the group"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getLocation": "@return the location"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getOrg": "@return the org"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getProject": "@return the project"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getRepo": "@return the repo"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getTeam": "@return the team"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublishProject": "Generate and publish (to a git/source control system) a project.  This will  generate a project from the OpenAPI document and then publish the result to a soruce control platform."}, {"io.apicurio.hub.core.storage.IStorage.createCodegenProject": "Creates a codegen project."}, {"io.apicurio.hub.core.beans.CodegenProject.setId": "@param id the id to set"}]}, {"index": "958", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getCodegenProjectAsZip", "methodParameterType": "String#String#", "methodParameterName": "designId#projectId#", "methodBody": "@Override\n    public Response getCodegenProjectAsZip(String designId, String projectId)\n            throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Downloading a codegen project for API Design with ID {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/codegen/projects/{projectId}/zip\", \"GET\");\n\n        String user = this.security.getCurrentUser().getLogin();\n\n        try {\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n            CodegenProject project = this.storage.getCodegenProject(user, designId, projectId);\n            String content = this.getApiContent(designId, FormatType.JSON);\n            \n            // TODO support other types besides Thorntail\n            if (project.getType() == CodegenProjectType.thorntail) {\n                JaxRsProjectSettings settings = toJaxRsSettings(project);\n\n                boolean updateOnly = \"true\".equals(project.getAttributes().get(\"update-only\"));\n\n                final OpenApi2Thorntail generator = new OpenApi2Thorntail();\n                generator.setSettings(settings);\n                generator.setOpenApiDocument(content);\n                generator.setUpdateOnly(updateOnly);\n                \n                return asResponse(settings, generator);\n            } else if (project.getType() == CodegenProjectType.jaxrs) {\n                JaxRsProjectSettings settings = toJaxRsSettings(project);\n                \n                boolean updateOnly = \"true\".equals(project.getAttributes().get(\"update-only\"));\n\n                final OpenApi2JaxRs generator = new OpenApi2JaxRs();\n                generator.setSettings(settings);\n                generator.setOpenApiDocument(content);\n                generator.setUpdateOnly(updateOnly);\n                \n                return asResponse(settings, generator);\n            } else if (project.getType() == CodegenProjectType.quarkus) {\n                JaxRsProjectSettings settings = toJaxRsSettings(project);\n                \n                boolean updateOnly = \"true\".equals(project.getAttributes().get(\"update-only\"));\n\n                final OpenApi2Quarkus generator = new OpenApi2Quarkus();\n                generator.setSettings(settings);\n                generator.setOpenApiDocument(content);\n                generator.setUpdateOnly(updateOnly);\n                \n                return asResponse(settings, generator);\n            } else {\n                throw new ServerError(\"Unsupported project type: \" + project.getType());\n            }\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getCodegenProjectAsZip(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.core.storage.IStorage.getCodegenProject", "io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent", "io.apicurio.hub.core.beans.CodegenProject.getType", "io.apicurio.hub.api.rest.impl.DesignsResource.toJaxRsSettings", "io.apicurio.hub.core.beans.CodegenProject.getAttributes", "java.util.Map.get", "java.lang.String.equals", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.<init>", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.setOpenApiDocument", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.setUpdateOnly", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.<init>", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setUpdateOnly", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.<init>", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.setOpenApiDocument", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.setUpdateOnly", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "io.apicurio.hub.core.beans.FormatType"], [""], ["io.apicurio.hub.core.beans.CodegenProject"], [""], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.String"], ["boolean"], [""], ["java.lang.String"], ["boolean"], [""], ["java.lang.String"], ["boolean"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.getCodegenProject": "Returns a single codegen project by its ID."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent": "Gets the current content of an API."}, {"io.apicurio.hub.core.beans.CodegenProject.getType": "@return the type"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.toJaxRsSettings": "Reads JAX-RS project settings from the project."}, {"io.apicurio.hub.core.beans.CodegenProject.getAttributes": "@return the attributes"}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument": "Sets the OpenAPI document."}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.setUpdateOnly": "@param updateOnly the updateOnly to set"}]}, {"index": "959", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.asResponse", "methodParameterType": "JaxRsProjectSettings#OpenApi2JaxRs#", "methodParameterName": "settings#generator#", "methodBody": "private Response asResponse(JaxRsProjectSettings settings, final OpenApi2JaxRs generator) {\n        StreamingOutput stream = new StreamingOutput() {\n            @Override\n            public void write(OutputStream output) throws IOException, WebApplicationException {\n                generator.generate(output);\n            }\n        };\n        \n        String fname = settings.artifactId + \".zip\";\n        ResponseBuilder builder = Response.ok().entity(stream)\n                .header(\"Content-Disposition\", \"attachment; filename=\\\"\" + fname + \"\\\"\")\n                .header(\"Content-Type\", \"application/zip\");\n\n        return builder.build();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the project and returns the result as a streaming response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "960", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.updateCodegenProject", "methodParameterType": "String#String#UpdateCodgenProject#", "methodParameterName": "designId#projectId#body#", "methodBody": "@Override\n    public CodegenProject updateCodegenProject(String designId, String projectId, UpdateCodgenProject body)\n            throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Updating codegen project for API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/codegen/projects/{projectId}\", \"PUT\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n\n            CodegenProject project = this.storage.getCodegenProject(user, designId, projectId);\n            project.setType(body.getProjectType());\n            \n            project.setAttributes(new HashMap<String, String>());\n            if (body.getProjectConfig() != null) {\n                project.getAttributes().putAll(body.getProjectConfig());\n            }\n            project.getAttributes().put(\"location\", body.getLocation().toString());\n            project.getAttributes().put(\"update-only\", Boolean.TRUE.toString());\n            if (body.getPublishInfo() != null) {\n                if (body.getPublishInfo().getType() != null) {\n                    project.getAttributes().put(\"publish-type\", body.getPublishInfo().getType().toString());\n                }\n                project.getAttributes().put(\"publish-branch\", body.getPublishInfo().getBranch());\n                project.getAttributes().put(\"publish-commitMessage\", body.getPublishInfo().getCommitMessage());\n                project.getAttributes().put(\"publish-group\", body.getPublishInfo().getGroup());\n                project.getAttributes().put(\"publish-location\", body.getPublishInfo().getLocation());\n                project.getAttributes().put(\"publish-org\", body.getPublishInfo().getOrg());\n                project.getAttributes().put(\"publish-project\", body.getPublishInfo().getProject());\n                project.getAttributes().put(\"publish-repo\", body.getPublishInfo().getRepo());\n                project.getAttributes().put(\"publish-team\", body.getPublishInfo().getTeam());\n            }\n            \n            if (body.getLocation() == CodegenLocation.download) {\n                // Nothing extra to do when downloading - that will be handled by a separate call\n            }\n            \n            if (body.getLocation() == CodegenLocation.sourceControl) {\n                String prUrl = generateAndPublishProject(project, true);\n                project.getAttributes().put(\"pullRequest-url\", prUrl);\n            }\n\n            this.storage.updateCodegenProject(user, project);\n            \n            return project;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#updateCodegenProject(java.lang.String,java.lang.String,io.apicurio.hub.api.beans.UpdateCodgenProject)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.core.storage.IStorage.getCodegenProject", "io.apicurio.hub.api.beans.UpdateCodgenProject.getProjectType", "io.apicurio.hub.core.beans.CodegenProject.setType", "java.util.HashMap.<init>", "io.apicurio.hub.core.beans.CodegenProject.setAttributes", "io.apicurio.hub.api.beans.UpdateCodgenProject.getProjectConfig", "io.apicurio.hub.core.beans.CodegenProject.getAttributes", "java.util.Map.putAll", "io.apicurio.hub.api.beans.UpdateCodgenProject.getLocation", "io.apicurio.hub.api.beans.CodegenLocation.toString", "java.util.Map.put", "java.lang.Boolean.toString", "io.apicurio.hub.api.beans.UpdateCodgenProject.getPublishInfo", "io.apicurio.hub.api.beans.CodegenPublishInfo.getType", "io.apicurio.hub.core.beans.LinkedAccountType.toString", "io.apicurio.hub.api.beans.CodegenPublishInfo.getBranch", "io.apicurio.hub.api.beans.CodegenPublishInfo.getCommitMessage", "io.apicurio.hub.api.beans.CodegenPublishInfo.getGroup", "io.apicurio.hub.api.beans.CodegenPublishInfo.getLocation", "io.apicurio.hub.api.beans.CodegenPublishInfo.getOrg", "io.apicurio.hub.api.beans.CodegenPublishInfo.getProject", "io.apicurio.hub.api.beans.CodegenPublishInfo.getRepo", "io.apicurio.hub.api.beans.CodegenPublishInfo.getTeam", "io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublishProject", "io.apicurio.hub.core.storage.IStorage.updateCodegenProject", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], ["io.apicurio.hub.core.beans.CodegenProjectType"], [""], ["java.util.Map"], [""], [""], ["java.util.Map"], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["io.apicurio.hub.core.beans.CodegenProject", "boolean"], ["java.lang.String", "io.apicurio.hub.core.beans.CodegenProject"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.getCodegenProject": "Returns a single codegen project by its ID."}, {"io.apicurio.hub.core.beans.CodegenProject.setType": "@param type the type to set"}, {"io.apicurio.hub.core.beans.CodegenProject.setAttributes": "@param attributes the attributes to set"}, {"io.apicurio.hub.core.beans.CodegenProject.getAttributes": "@return the attributes"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getType": "@return the type"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getBranch": "@return the branch"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getCommitMessage": "@return the commitMessage"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getGroup": "@return the group"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getLocation": "@return the location"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getOrg": "@return the org"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getProject": "@return the project"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getRepo": "@return the repo"}, {"io.apicurio.hub.api.beans.CodegenPublishInfo.getTeam": "@return the team"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublishProject": "Generate and publish (to a git/source control system) a project.  This will  generate a project from the OpenAPI document and then publish the result to a soruce control platform."}, {"io.apicurio.hub.core.storage.IStorage.updateCodegenProject": "Updates a codegen project."}]}, {"index": "961", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.deleteCodegenProject", "methodParameterType": "String#String#", "methodParameterName": "designId#projectId#", "methodBody": "@Override\n    public void deleteCodegenProject(String designId, String projectId)\n            throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Deleting codegen project for API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/codegen/projects/{projectId}\", \"DELETE\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n            this.storage.deleteCodegenProject(user, designId, projectId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#deleteCodegenProject(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.core.storage.IStorage.deleteCodegenProject", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.deleteCodegenProject": "Deletes a single codegen project."}]}, {"index": "962", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.deleteCodegenProjects", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public void deleteCodegenProjects(String designId) throws ServerError, NotFoundException, AccessDeniedException {\n        logger.debug(\"Deleting ALL codegen projects for API: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/codegen/projects\", \"DELETE\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            if (!this.storage.hasWritePermission(user, designId)) {\n                throw new AccessDeniedException();\n            }\n            this.storage.deleteCodegenProjects(user, designId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#deleteCodegenProjects(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.storage.IStorage.hasWritePermission", "io.apicurio.hub.core.exceptions.AccessDeniedException.<init>", "io.apicurio.hub.core.storage.IStorage.deleteCodegenProjects", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasWritePermission": "Returns true if the given user has write permission over the API design."}, {"io.apicurio.hub.core.storage.IStorage.deleteCodegenProjects": "Deletes all codegen projects for an API design."}]}, {"index": "963", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublishProject", "methodParameterType": "CodegenProject#boolean#", "methodParameterName": "project#updateOnly#", "methodBody": "private String generateAndPublishProject(CodegenProject project, boolean updateOnly)\n            throws ServerError, NotFoundException {\n        try {\n            String content = this.getApiContent(project.getDesignId(), FormatType.JSON);\n            \n            // TODO support other types besides JAX-RS\n            if (project.getType() == CodegenProjectType.thorntail) {\n                JaxRsProjectSettings settings = toJaxRsSettings(project);\n\n                OpenApi2Thorntail generator = new OpenApi2Thorntail();\n                generator.setSettings(settings);\n                generator.setOpenApiDocument(content);\n                generator.setUpdateOnly(updateOnly);\n                \n                return generateAndPublish(project, generator);\n            } else if (project.getType() == CodegenProjectType.jaxrs) {\n                JaxRsProjectSettings settings = toJaxRsSettings(project);\n\n                OpenApi2JaxRs generator = new OpenApi2JaxRs();\n                generator.setSettings(settings);\n                generator.setOpenApiDocument(content);\n                generator.setUpdateOnly(updateOnly);\n                \n                return generateAndPublish(project, generator);\n            } else if (project.getType() == CodegenProjectType.quarkus) {\n                JaxRsProjectSettings settings = toJaxRsSettings(project);\n\n                OpenApi2Quarkus generator = new OpenApi2Quarkus();\n                generator.setSettings(settings);\n                generator.setOpenApiDocument(content);\n                generator.setUpdateOnly(updateOnly);\n                \n                return generateAndPublish(project, generator);\n            } else {\n                throw new ServerError(\"Unsupported project type: \" + project.getType());\n            }\n        } catch (IOException | SourceConnectorException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Generate and publish (to a git/source control system) a project.  This will  generate a project from the OpenAPI document and then publish the result to a soruce control platform.", "call_func_name": ["io.apicurio.hub.core.beans.CodegenProject.getDesignId", "io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent", "io.apicurio.hub.core.beans.CodegenProject.getType", "io.apicurio.hub.api.rest.impl.DesignsResource.toJaxRsSettings", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.<init>", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.setOpenApiDocument", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.setUpdateOnly", "io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublish", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.<init>", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setUpdateOnly", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.<init>", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.setOpenApiDocument", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.setUpdateOnly", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.core.exceptions.ServerError.<init>", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [[""], ["java.lang.String", "io.apicurio.hub.core.beans.FormatType"], [""], ["io.apicurio.hub.core.beans.CodegenProject"], [""], ["java.lang.String"], ["boolean"], ["io.apicurio.hub.core.beans.CodegenProject", "io.apicurio.hub.api.codegen.OpenApi2JaxRs"], [""], ["java.lang.String"], ["boolean"], [""], ["java.lang.String"], ["boolean"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.core.beans.CodegenProject.getDesignId": "@return the designId"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent": "Gets the current content of an API."}, {"io.apicurio.hub.core.beans.CodegenProject.getType": "@return the type"}, {"io.apicurio.hub.api.rest.impl.DesignsResource.toJaxRsSettings": "Reads JAX-RS project settings from the project."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublish": "Generates the project and publishes the result to e.g. GitHub."}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument": "Sets the OpenAPI document."}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.setUpdateOnly": "@param updateOnly the updateOnly to set"}]}, {"index": "964", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.generateAndPublish", "methodParameterType": "CodegenProject#OpenApi2JaxRs#", "methodParameterName": "project#generator#", "methodBody": "private String generateAndPublish(CodegenProject project, OpenApi2JaxRs generator)\n            throws IOException, NotFoundException, SourceConnectorException {\n        ByteArrayOutputStream generatedContent = generator.generate();\n        LinkedAccountType scsType = LinkedAccountType.valueOf(project.getAttributes().get(\"publish-type\"));\n        \n        ISourceConnector connector = this.sourceConnectorFactory.createConnector(scsType);\n        String url = toSourceResourceUrl(project);\n        String commitMessage = project.getAttributes().get(\"publish-commitMessage\");\n        String pullRequestUrl = connector.createPullRequestFromZipContent(url, commitMessage,\n                new ZipInputStream(new ByteArrayInputStream(generatedContent.toByteArray())));\n        return pullRequestUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the project and publishes the result to e.g. GitHub.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2JaxRs.generate", "io.apicurio.hub.core.beans.CodegenProject.getAttributes", "java.util.Map.get", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector", "io.apicurio.hub.api.rest.impl.DesignsResource.toSourceResourceUrl", "java.io.ByteArrayOutputStream.toByteArray", "java.io.ByteArrayInputStream.<init>", "java.util.zip.ZipInputStream.<init>", "io.apicurio.hub.api.connectors.ISourceConnector.createPullRequestFromZipContent"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.String"], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["io.apicurio.hub.core.beans.CodegenProject"], [""], ["byte[]"], ["java.io.InputStream"], ["java.lang.String", "java.lang.String", "java.util.zip.ZipInputStream"]], "passed_comments": [{"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generate": "Generates a JaxRs project and streams the generated ZIP to the given output stream."}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generate": "Generate the JaxRs project."}, {"io.apicurio.hub.core.beans.CodegenProject.getAttributes": "@return the attributes"}, {"io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector": "Creates a connector for a particular type of account (e.g. GitHub, GitLab, etc)."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.toSourceResourceUrl": "Creates a source control resource URL from the information found in the codegen project."}, {"io.apicurio.hub.api.connectors.ISourceConnector.createPullRequestFromZipContent": "Creates a pull request in GitHub in order to check in all of the content found in the  given ZIP file."}]}, {"index": "965", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.toJaxRsSettings", "methodParameterType": "CodegenProject#", "methodParameterName": "project#", "methodBody": "private JaxRsProjectSettings toJaxRsSettings(CodegenProject project) {\n        boolean codeOnly = \"true\".equals(project.getAttributes().get(\"codeOnly\"));\n        boolean reactive = \"true\".equals(project.getAttributes().get(\"reactive\"));\n        String groupId = project.getAttributes().get(\"groupId\");\n        String artifactId = project.getAttributes().get(\"artifactId\");\n        String javaPackage = project.getAttributes().get(\"javaPackage\");\n\n        JaxRsProjectSettings settings = new JaxRsProjectSettings();\n        settings.codeOnly = codeOnly;\n        settings.reactive = reactive;\n        settings.groupId = groupId != null ? groupId : \"org.example.api\";\n        settings.artifactId = artifactId != null ? artifactId : \"generated-api\";\n        settings.javaPackage = javaPackage != null ? javaPackage : \"org.example.api\";\n\n        return settings;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)ConditionalExpression)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reads JAX-RS project settings from the project.", "call_func_name": ["io.apicurio.hub.core.beans.CodegenProject.getAttributes", "java.util.Map.get", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.core.beans.CodegenProject.getAttributes": "@return the attributes"}]}, {"index": "966", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.toSourceResourceUrl", "methodParameterType": "CodegenProject#", "methodParameterName": "project#", "methodBody": "private String toSourceResourceUrl(CodegenProject project) {\n        LinkedAccountType scsType = LinkedAccountType.valueOf(project.getAttributes().get(\"publish-type\"));\n        String url;\n        switch (scsType) {\n            case Bitbucket: {\n                String team = project.getAttributes().get(\"publish-team\");\n                String repo = project.getAttributes().get(\"publish-repo\");\n                String branch = project.getAttributes().get(\"publish-branch\");\n                String path = project.getAttributes().get(\"publish-location\");\n                url = bitbucketResolver.create(team, repo, branch, path);\n            }\n            break; \n            case GitHub: {\n                String org = project.getAttributes().get(\"publish-org\");\n                String repo = project.getAttributes().get(\"publish-repo\");\n                String branch = project.getAttributes().get(\"publish-branch\");\n                String path = project.getAttributes().get(\"publish-location\");\n                url = gitHubResolver.create(org, repo, branch, path);\n            }\n            break;\n            case GitLab: {\n                String group = project.getAttributes().get(\"publish-group\");\n                String proj = project.getAttributes().get(\"publish-project\");\n                String branch = project.getAttributes().get(\"publish-branch\");\n                String path = project.getAttributes().get(\"publish-location\");\n                url = gitLabResolver.create(group, proj, branch, path);\n            }\n            break;\n            default:\n                throw new RuntimeException(\"Unsupported type: \" + scsType);\n        }\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#BreakStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a source control resource URL from the information found in the codegen project.", "call_func_name": ["io.apicurio.hub.core.beans.CodegenProject.getAttributes", "java.util.Map.get", "io.apicurio.hub.core.beans.LinkedAccountType.valueOf", "io.apicurio.hub.core.beans.LinkedAccountType.ordinal", "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.create", "io.apicurio.hub.api.github.GitHubResourceResolver.create", "io.apicurio.hub.api.gitlab.GitLabResourceResolver.create", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.core.beans.CodegenProject.getAttributes": "@return the attributes"}, {"io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.create": "Creates a resource url from the information provided."}, {"io.apicurio.hub.api.github.GitHubResourceResolver.create": "Creates a resource url from the information provided."}, {"io.apicurio.hub.api.gitlab.GitLabResourceResolver.create": "Creates a resource url from the information provided."}]}, {"index": "967", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.toResourceUrl", "methodParameterType": "NewApiPublication#", "methodParameterName": "info#", "methodBody": "private String toResourceUrl(NewApiPublication info) {\n        if (info.getType() == LinkedAccountType.GitHub) {\n            return gitHubResolver.create(info.getOrg(), info.getRepo(), info.getBranch(), info.getResource());\n        }\n        if (info.getType() == LinkedAccountType.GitLab) {\n            return gitLabResolver.create(info.getGroup(), info.getProject(), info.getBranch(), info.getResource());\n        }\n        if (info.getType() == LinkedAccountType.Bitbucket) {\n            return bitbucketResolver.create(info.getTeam(), info.getRepo(), info.getBranch(), info.getResource());\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Uses the information in the bean to create a resource URL.", "call_func_name": ["io.apicurio.hub.api.beans.NewApiPublication.getType", "io.apicurio.hub.api.beans.NewApiPublication.getOrg", "io.apicurio.hub.api.beans.NewApiPublication.getRepo", "io.apicurio.hub.api.beans.NewApiPublication.getBranch", "io.apicurio.hub.api.beans.NewApiPublication.getResource", "io.apicurio.hub.api.github.GitHubResourceResolver.create", "io.apicurio.hub.api.beans.NewApiPublication.getGroup", "io.apicurio.hub.api.beans.NewApiPublication.getProject", "io.apicurio.hub.api.gitlab.GitLabResourceResolver.create", "io.apicurio.hub.api.beans.NewApiPublication.getTeam", "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.create"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.beans.NewApiPublication.getType": "@return the type"}, {"io.apicurio.hub.api.beans.NewApiPublication.getOrg": "@return the org"}, {"io.apicurio.hub.api.beans.NewApiPublication.getRepo": "@return the repo"}, {"io.apicurio.hub.api.beans.NewApiPublication.getBranch": "@return the branch"}, {"io.apicurio.hub.api.beans.NewApiPublication.getResource": "@return the resource"}, {"io.apicurio.hub.api.github.GitHubResourceResolver.create": "Creates a resource url from the information provided."}, {"io.apicurio.hub.api.beans.NewApiPublication.getGroup": "@return the group"}, {"io.apicurio.hub.api.beans.NewApiPublication.getProject": "@return the project"}, {"io.apicurio.hub.api.gitlab.GitLabResourceResolver.create": "Creates a resource url from the information provided."}, {"io.apicurio.hub.api.beans.NewApiPublication.getTeam": "@return the team"}, {"io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.create": "Creates a resource url from the information provided."}]}, {"index": "968", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.validateDesign", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public List<ValidationError> validateDesign(String designId) throws ServerError, NotFoundException {\n        logger.debug(\"Validating API design with ID: {}\", designId);\n        metrics.apiCall(\"/designs/{designId}/validation\", \"GET\");\n        \n        // TODO support validation of GraphQL APIs.\n        \n        String content = this.getApiContent(designId, FormatType.JSON);\n\n        Document doc = Library.readDocumentFromJSONString(content);\n        List<ValidationProblem> problems = Library.validate(doc, new IValidationSeverityRegistry() {\n            @Override\n            public ValidationProblemSeverity lookupSeverity(ValidationRuleMetaData rule) {\n                return ValidationProblemSeverity.high;\n            }\n        });\n        List<ValidationError> errors = new ArrayList<>();\n        for (ValidationProblem problem : problems) {\n            errors.add(new ValidationError(problem.errorCode, problem.nodePath.toString(), problem.property,\n                    problem.message, problem.severity.name()));\n        }\n        return errors;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#validateDesign(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent", "io.apicurio.datamodels.Library.readDocumentFromJSONString", "io.apicurio.datamodels.Library.validate", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.datamodels.core.models.NodePath.toString", "io.apicurio.datamodels.core.models.ValidationProblemSeverity.name", "io.apicurio.hub.api.beans.ValidationError.<init>", "java.util.List.add"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "io.apicurio.hub.core.beans.FormatType"], ["java.lang.String"], ["io.apicurio.datamodels.core.models.Node", "io.apicurio.datamodels.core.validation.IValidationSeverityRegistry"], [""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.getApiContent": "Gets the current content of an API."}]}, {"index": "969", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.configureSharing", "methodParameterType": "String#UpdateSharingConfiguration#", "methodParameterName": "designId#config#", "methodBody": "@Override\n    public SharingConfiguration configureSharing(String designId, UpdateSharingConfiguration config)\n            throws ServerError, NotFoundException {\n        logger.debug(\"Configuring sharing settings for API: {} \", designId);\n        metrics.apiCall(\"/designs/{designId}/sharing\", \"PUT\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            String uuid = UUID.randomUUID().toString(); // Note: only used if this is the first time\n            \n            if (!this.storage.hasOwnerPermission(user, designId)) {\n                throw new NotFoundException();\n            }\n            \n            this.storage.setSharingConfig(designId, uuid, config.getLevel());\n            \n            return this.storage.getSharingConfig(designId);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n        \n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#configureSharing(java.lang.String,io.apicurio.hub.core.beans.UpdateSharingConfiguration)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "java.util.UUID.randomUUID", "java.util.UUID.toString", "io.apicurio.hub.core.storage.IStorage.hasOwnerPermission", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.core.beans.UpdateSharingConfiguration.getLevel", "io.apicurio.hub.core.storage.IStorage.setSharingConfig", "io.apicurio.hub.core.storage.IStorage.getSharingConfig", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "io.apicurio.hub.core.beans.SharingLevel"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.hasOwnerPermission": "Returns true if the given user has ownership permission over the API design."}, {"io.apicurio.hub.core.beans.UpdateSharingConfiguration.getLevel": "@return the level"}, {"io.apicurio.hub.core.storage.IStorage.setSharingConfig": "Sets the sharing configuration for the given API design."}, {"io.apicurio.hub.core.storage.IStorage.getSharingConfig": "Gets the sharing config for a given API design."}]}, {"index": "970", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/DesignsResource.java", "methodName": "io.apicurio.hub.api.rest.impl.DesignsResource.getSharingConfiguration", "methodParameterType": "String#", "methodParameterName": "designId#", "methodBody": "@Override\n    public SharingConfiguration getSharingConfiguration(String designId)\n            throws ServerError, NotFoundException {\n        logger.debug(\"Getting sharing settings for API: {} \", designId);\n        metrics.apiCall(\"/designs/{designId}/sharing\", \"GET\");\n        \n        // Make sure we have access to the design.\n        this.getDesign(designId);\n\n        try {\n            SharingConfiguration sharingConfig = this.storage.getSharingConfig(designId);\n            if (sharingConfig == null) {\n                sharingConfig = new SharingConfiguration();\n                sharingConfig.setLevel(SharingLevel.NONE);\n            }\n            return sharingConfig;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IDesignsResource#getSharingConfiguration(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.rest.impl.DesignsResource.getDesign", "io.apicurio.hub.core.storage.IStorage.getSharingConfig", "io.apicurio.hub.core.beans.SharingConfiguration.<init>", "io.apicurio.hub.core.beans.SharingConfiguration.setLevel", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["io.apicurio.hub.core.beans.SharingLevel"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.rest.impl.DesignsResource.getDesign": "@see io.apicurio.hub.api.rest.IDesignsResource#getDesign(java.lang.String)"}, {"io.apicurio.hub.core.storage.IStorage.getSharingConfig": "Gets the sharing config for a given API design."}, {"io.apicurio.hub.core.beans.SharingConfiguration.setLevel": "@param level the level to set"}]}, {"index": "971", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ValidationProfilesResource.java", "methodName": "io.apicurio.hub.api.rest.impl.ValidationProfilesResource.listValidationProfiles", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Collection<ValidationProfile> listValidationProfiles() throws ServerError {\n        metrics.apiCall(\"/validationProfiles\", \"GET\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            logger.debug(\"Listing Validation Profiles for {}\", user);\n            return this.storage.listValidationProfiles(user);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IValidationProfilesResource#listValidationProfiles()", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "org.slf4j.Logger.debug", "io.apicurio.hub.core.storage.IStorage.listValidationProfiles", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.listValidationProfiles": "Returns a collection of validation profiles for the given user."}]}, {"index": "972", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ValidationProfilesResource.java", "methodName": "io.apicurio.hub.api.rest.impl.ValidationProfilesResource.createValidationProfile", "methodParameterType": "CreateValidationProfile#", "methodParameterName": "info#", "methodBody": "@Override\n    public ValidationProfile createValidationProfile(CreateValidationProfile info) throws ServerError {\n        metrics.apiCall(\"/validationProfiles\", \"POST\");\n        \n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            logger.debug(\"Creating a new validaton profile for {} named: {}\", user, info.getName());\n            ValidationProfile profile = new ValidationProfile();\n            profile.setName(info.getName());\n            profile.setDescription(info.getDescription());\n            if (info.getSeverities() != null) {\n                profile.setSeverities(info.getSeverities());\n            }\n            long pid = storage.createValidationProfile(user, profile);\n            profile.setId(pid);\n            return profile;\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IValidationProfilesResource#createValidationProfile(io.apicurio.hub.core.beans.CreateValidationProfile)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.beans.CreateValidationProfile.getName", "org.slf4j.Logger.debug", "io.apicurio.hub.core.beans.ValidationProfile.<init>", "io.apicurio.hub.core.beans.ValidationProfile.setName", "io.apicurio.hub.core.beans.CreateValidationProfile.getDescription", "io.apicurio.hub.core.beans.ValidationProfile.setDescription", "io.apicurio.hub.core.beans.CreateValidationProfile.getSeverities", "io.apicurio.hub.core.beans.ValidationProfile.setSeverities", "io.apicurio.hub.core.storage.IStorage.createValidationProfile", "io.apicurio.hub.core.beans.ValidationProfile.setId", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.util.Map"], ["java.lang.String", "io.apicurio.hub.core.beans.ValidationProfile"], ["long"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.beans.CreateValidationProfile.getName": "@return the name"}, {"io.apicurio.hub.core.beans.ValidationProfile.setName": "@param name the name to set"}, {"io.apicurio.hub.core.beans.CreateValidationProfile.getDescription": "@return the description"}, {"io.apicurio.hub.core.beans.ValidationProfile.setDescription": "@param description the description to set"}, {"io.apicurio.hub.core.beans.CreateValidationProfile.getSeverities": "@return the severities"}, {"io.apicurio.hub.core.beans.ValidationProfile.setSeverities": "@param severities the severities to set"}, {"io.apicurio.hub.core.storage.IStorage.createValidationProfile": "Creates a single new validation profile for the given user."}, {"io.apicurio.hub.core.beans.ValidationProfile.setId": "@param id the id to set"}]}, {"index": "973", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ValidationProfilesResource.java", "methodName": "io.apicurio.hub.api.rest.impl.ValidationProfilesResource.updateValidationProfile", "methodParameterType": "String#UpdateValidationProfile#", "methodParameterName": "profileId#update#", "methodBody": "@Override\n    public void updateValidationProfile(String profileId, UpdateValidationProfile update)\n            throws ServerError, NotFoundException {\n        metrics.apiCall(\"/validationProfiles/{profileId}\", \"PUT\");\n        \n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            logger.debug(\"Updating an existing validaton profile for {} named: {}\", user, update.getName());\n            ValidationProfile profile = new ValidationProfile();\n            profile.setId(new Long(profileId));\n            profile.setName(update.getName());\n            profile.setDescription(update.getDescription());\n            if (update.getSeverities() != null) {\n                profile.setSeverities(update.getSeverities());\n            }\n            storage.updateValidationProfile(user, profile);\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IValidationProfilesResource#updateValidationProfile(java.lang.String,io.apicurio.hub.core.beans.UpdateValidationProfile)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "io.apicurio.hub.core.beans.UpdateValidationProfile.getName", "org.slf4j.Logger.debug", "io.apicurio.hub.core.beans.ValidationProfile.<init>", "java.lang.Long.<init>", "java.lang.Long.longValue", "io.apicurio.hub.core.beans.ValidationProfile.setId", "io.apicurio.hub.core.beans.ValidationProfile.setName", "io.apicurio.hub.core.beans.UpdateValidationProfile.getDescription", "io.apicurio.hub.core.beans.ValidationProfile.setDescription", "io.apicurio.hub.core.beans.UpdateValidationProfile.getSeverities", "io.apicurio.hub.core.beans.ValidationProfile.setSeverities", "io.apicurio.hub.core.storage.IStorage.updateValidationProfile", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], [""], ["long"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.util.Map"], ["java.lang.String", "io.apicurio.hub.core.beans.ValidationProfile"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.beans.ValidationProfile.setId": "@param id the id to set"}, {"io.apicurio.hub.core.beans.ValidationProfile.setName": "@param name the name to set"}, {"io.apicurio.hub.core.beans.ValidationProfile.setDescription": "@param description the description to set"}, {"io.apicurio.hub.core.beans.ValidationProfile.setSeverities": "@param severities the severities to set"}, {"io.apicurio.hub.core.storage.IStorage.updateValidationProfile": "Updates a single new validation profile for the given user."}]}, {"index": "974", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ValidationProfilesResource.java", "methodName": "io.apicurio.hub.api.rest.impl.ValidationProfilesResource.deleteValidationProfile", "methodParameterType": "String#", "methodParameterName": "profileId#", "methodBody": "@Override\n    public void deleteValidationProfile(String profileId) throws ServerError, NotFoundException {\n        metrics.apiCall(\"/validationProfiles/{profileId}\", \"DELETE\");\n\n        try {\n            String user = this.security.getCurrentUser().getLogin();\n            logger.debug(\"Deleting validation profile for {} with ID: \", user, profileId);\n            this.storage.deleteValidationProfile(user, new Long(profileId));\n        } catch (StorageException e) {\n            throw new ServerError(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.rest.IValidationProfilesResource#deleteValidationProfile(java.lang.String)", "call_func_name": ["io.apicurio.hub.api.metrics.IApiMetrics.apiCall", "io.apicurio.hub.api.security.ISecurityContext.getCurrentUser", "io.apicurio.studio.shared.beans.User.getLogin", "org.slf4j.Logger.debug", "java.lang.Long.<init>", "java.lang.Long.longValue", "io.apicurio.hub.core.storage.IStorage.deleteValidationProfile", "io.apicurio.hub.core.exceptions.ServerError.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String", "long"], ["java.lang.Exception"]], "passed_comments": [{"io.apicurio.hub.api.metrics.IApiMetrics.apiCall": "Indicates an API call was made."}, {"io.apicurio.hub.api.security.ISecurityContext.getCurrentUser": "Returns the User information for the currently authenticated user."}, {"io.apicurio.studio.shared.beans.User.getLogin": "@return the login"}, {"io.apicurio.hub.core.storage.IStorage.deleteValidationProfile": "Deletes a single validation profile."}]}, {"index": "975", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccessDeniedExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.AccessDeniedExceptionMapper.AccessDeniedExceptionMapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccessDeniedExceptionMapper() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "976", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/AccessDeniedExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.AccessDeniedExceptionMapper.toResponse", "methodParameterType": "AccessDeniedException#", "methodParameterName": "data#", "methodBody": "@Override\n    public Response toResponse(AccessDeniedException data) {\n        ResponseBuilder builder = Response.status(403);\n        return builder.build();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see javax.ws.rs.ext.ExceptionMapper#toResponse(java.lang.Throwable)", "call_func_name": ["javax.ws.rs.core.Response.status"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "977", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ApiValidationExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.ApiValidationExceptionMapper.ApiValidationExceptionMapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ApiValidationExceptionMapper() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "978", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ApiValidationExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.ApiValidationExceptionMapper.toResponse", "methodParameterType": "ApiValidationException#", "methodParameterName": "data#", "methodBody": "@Override\n    public Response toResponse(ApiValidationException data) {\n        ApiError error = new ApiError();\n        error.setErrorType(data.getClass().getSimpleName());\n        error.setMessage(data.getMessage());\n        error.setTrace(getStackTrace(data));\n        ResponseBuilder builder = Response.status(400).header(\"X-API-Error\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n        builder.type(MediaType.APPLICATION_JSON_TYPE);\n        return builder.entity(error).build();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see javax.ws.rs.ext.ExceptionMapper#toResponse(java.lang.Throwable)", "call_func_name": ["io.apicurio.hub.api.beans.ApiError.<init>", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "io.apicurio.hub.api.beans.ApiError.setErrorType", "io.apicurio.hub.core.exceptions.ApiValidationException.getMessage", "io.apicurio.hub.api.beans.ApiError.setMessage", "io.apicurio.hub.api.rest.impl.ApiValidationExceptionMapper.getStackTrace", "io.apicurio.hub.api.beans.ApiError.setTrace", "javax.ws.rs.core.Response.status"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["io.apicurio.hub.core.exceptions.ApiValidationException"], ["java.lang.String"], ["int"]], "passed_comments": [{"io.apicurio.hub.api.beans.ApiError.setErrorType": "@param errorType the errorType to set"}, {"io.apicurio.hub.api.beans.ApiError.setMessage": "@param message the message to set"}, {"io.apicurio.hub.api.rest.impl.ApiValidationExceptionMapper.getStackTrace": "Gets the full stack trace for the given exception and returns it as a string."}, {"io.apicurio.hub.api.beans.ApiError.setTrace": "@param trace the trace to set"}]}, {"index": "979", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/rest/impl/ApiValidationExceptionMapper.java", "methodName": "io.apicurio.hub.api.rest.impl.ApiValidationExceptionMapper.getStackTrace", "methodParameterType": "ApiValidationException#", "methodParameterName": "data#", "methodBody": "private String getStackTrace(ApiValidationException data) {\n        try (StringBuilderWriter writer = new StringBuilderWriter()) {\n            data.printStackTrace(new PrintWriter(writer));\n            return writer.getBuilder().toString();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the full stack trace for the given exception and returns it as a string.", "call_func_name": ["org.apache.commons.io.output.StringBuilderWriter.<init>", "java.io.PrintWriter.<init>", "io.apicurio.hub.core.exceptions.ApiValidationException.printStackTrace", "org.apache.commons.io.output.StringBuilderWriter.getBuilder", "java.lang.StringBuilder.toString", "org.apache.commons.io.output.StringBuilderWriter.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], ["java.io.Writer"], ["java.io.PrintWriter"], [""], [""], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "980", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.GitHubTreeItem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubTreeItem() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "981", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "982", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "983", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.getMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMode() {\n        return mode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the mode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "984", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.setMode", "methodParameterType": "String#", "methodParameterName": "mode#", "methodBody": "public void setMode(String mode) {\n        this.mode = mode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param mode the mode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "985", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "986", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.setType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public void setType(String type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "987", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.getSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getSize() {\n        return size;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the size", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "988", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.setSize", "methodParameterType": "long#", "methodParameterName": "size#", "methodBody": "public void setSize(long size) {\n        this.size = size;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param size the size to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "989", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "990", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "991", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "992", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubTreeItem.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "993", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTree.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTree.GitHubCreateTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreateTree() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "994", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTree.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTree.getBase_tree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBase_tree() {\n        return base_tree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the base_tree", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "995", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTree.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTree.setBase_tree", "methodParameterType": "String#", "methodParameterName": "base_tree#", "methodBody": "public void setBase_tree(String base_tree) {\n        this.base_tree = base_tree;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param base_tree the base_tree to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "996", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTree.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTree.getTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<GitHubCreateTreeItem> getTree() {\n        return tree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tree", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "997", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTree.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTree.setTree", "methodParameterType": "List<GitHubCreateTreeItem>#", "methodParameterName": "tree#", "methodBody": "public void setTree(List<GitHubCreateTreeItem> tree) {\n        this.tree = tree;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tree the tree to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "998", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTree.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTree.addItem", "methodParameterType": "GitHubCreateTreeItem#", "methodParameterName": "item#", "methodBody": "public void addItem(GitHubCreateTreeItem item) {\n        this.tree.add(item);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds an item.", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "999", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubBlob.GitHubBlob", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubBlob() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1000", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubBlob.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1001", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubBlob.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1002", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.GitHubPullRequestCreator", "methodParameterType": "ZipInputStream#String#String#String#String#String#", "methodParameterName": "contents#organization#repository#branch#path#commitMessage#", "methodBody": "public GitHubPullRequestCreator(ZipInputStream contents, String organization, String repository,\n            String branch, String path, String commitMessage) {\n        this.contents = contents;\n        this.organization = organization;\n        this.repository = repository;\n        this.branch = branch;\n        this.path = path;\n        this.commitMessage = commitMessage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1003", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.getApiUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getApiUrl() {\n        return apiUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the apiUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1004", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.setApiUrl", "methodParameterType": "String#", "methodParameterName": "apiUrl#", "methodBody": "public void setApiUrl(String apiUrl) {\n        this.apiUrl = apiUrl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param apiUrl the apiUrl to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1005", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.getToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getToken() {\n        return token;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1006", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.setToken", "methodParameterType": "String#", "methodParameterName": "token#", "methodBody": "public void setToken(String token) {\n        this.token = token;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param token the token to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1007", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "protected Endpoint endpoint(String path) {\n        return new Endpoint(this.apiUrl + path);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#InfixExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a github API endpoint from the api path.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1008", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "methodParameterType": "HttpRequestBase#", "methodParameterName": "request#", "methodBody": "protected void addSecurityTo(HttpRequestBase request) {\n        String idpToken = this.token;\n        request.addHeader(\"Authorization\", \"Bearer \" + idpToken);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds security to the request.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.http.client.methods.HttpRequestBase.addHeader"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1009", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubPullRequest create() throws GitHubException {\n        GitHubReference targetBranchRef = getTargetBranchRef();\n        GitHubBranchReference prBranchRef = createPullRequestBranch(targetBranchRef);\n        List<GitHubBlob> blobs = addFilesAsBlobs();\n        GitHubTree parentTree = getParentTree(prBranchRef);\n        GitHubTree commitTree = createTree(blobs, parentTree);\n        GitHubCommit commit = createCommit(commitTree, prBranchRef);\n        GitHubBranchReference updatedPrBranchRef = updateBranchRef(prBranchRef, commit);\n        GitHubPullRequest pullRequest = createPullRequest(updatedPrBranchRef);\n        return pullRequest;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create the pull request.  To accomplish this goal using the GitHub API, the following steps must be taken: 1. Get the \"ref\" for the target branch (need the ref's sha hash) https://developer.github.com/v3/git/refs/#get-a-reference 2. Create a new \"ref\" for the branch we're creating (using the sha hash from step 1) https://developer.github.com/v3/git/refs/#create-a-reference 3. Store all files as Blobs https://developer.github.com/v3/git/blobs/#create-a-blob 4. Fetch the tree for our new branch \"ref\" https://developer.github.com/v3/git/trees/#get-a-tree 5. Create a new tree for our files https://developer.github.com/v3/git/trees/#create-a-tree 6. Create a new commit for our tree https://developer.github.com/v3/git/commits/#create-a-commit 7. Update the new branch ref to point to the new commit SHA https://developer.github.com/v3/git/refs/#update-a-reference 8. Create a pull request https://developer.github.com/v3/pulls/#create-a-pull-request", "call_func_name": ["io.apicurio.hub.api.github.GitHubPullRequestCreator.getTargetBranchRef", "io.apicurio.hub.api.github.GitHubPullRequestCreator.createPullRequestBranch", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addFilesAsBlobs", "io.apicurio.hub.api.github.GitHubPullRequestCreator.getParentTree", "io.apicurio.hub.api.github.GitHubPullRequestCreator.createTree", "io.apicurio.hub.api.github.GitHubPullRequestCreator.createCommit", "io.apicurio.hub.api.github.GitHubPullRequestCreator.updateBranchRef", "io.apicurio.hub.api.github.GitHubPullRequestCreator.createPullRequest"], "call_func_parameter": [[""], ["io.apicurio.hub.api.github.GitHubReference"], [""], ["io.apicurio.hub.api.github.GitHubReference"], ["java.util.List", "io.apicurio.hub.api.github.GitHubTree"], ["io.apicurio.hub.api.github.GitHubTree", "io.apicurio.hub.api.github.GitHubReference"], ["io.apicurio.hub.api.github.GitHubBranchReference", "io.apicurio.hub.api.github.GitHubCommit"], ["io.apicurio.hub.api.github.GitHubBranchReference"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.getTargetBranchRef": "Gets the ref for the target branch (the branch where we ultimately want the content to be committed via pull request)."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.createPullRequestBranch": "Creates a new branch that will eventually be used when creating committing the  resources and creating the pull request."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addFilesAsBlobs": "Store all of the files as blobs."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.getParentTree": "Gets a tree given the SHA of a given branch ref."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.createTree": "Creates a new tree with all the blobs we uploaded earlier."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.createCommit": "Creates a new commit for the given tree."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.updateBranchRef": "Updates a branch reference to point it at the new commit."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.createPullRequest": "Creates a pull request for the branch."}]}, {"index": "1010", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.getTargetBranchRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private GitHubReference getTargetBranchRef() throws GitHubException {\n        String ref = \"heads/\" + this.branch;\n        String url = this.endpoint(\"/repos/:owner/:repo/git/refs/:ref\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .bind(\"ref\", ref)\n                .toString();\n\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpGet request = new HttpGet(url);\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubReference ghRef = mapper.readValue(contentStream, GitHubReference.class);\n                    return ghRef;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error getting GitHub target branch ref.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the ref for the target branch (the branch where we ultimately want the content to be committed via pull request).", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpGet.<init>", "org.apache.http.client.methods.HttpGet.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], ["int"], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}]}, {"index": "1011", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.createPullRequestBranch", "methodParameterType": "GitHubReference#", "methodParameterName": "targetBranchRef#", "methodBody": "private GitHubBranchReference createPullRequestBranch(GitHubReference targetBranchRef) throws GitHubException {\n        String url = this.endpoint(\"/repos/:owner/:repo/git/refs\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .toString();\n        \n        String branchName = \"_apicurio-\" + (System.currentTimeMillis() % 10000);\n        String newRefName = \"refs/heads/\" + branchName;\n        GitHubCreateReference requestBody = new GitHubCreateReference();\n        requestBody.setRef(newRefName);\n        requestBody.setSha(targetBranchRef.getObject().getSha());\n\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpPost request = new HttpPost(url);\n            request.setEntity(new StringEntity(mapper.writeValueAsString(requestBody)));\n            request.addHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 201) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubBranchReference ghRef = mapper.readValue(contentStream, GitHubBranchReference.class);\n                    ghRef.setName(branchName);\n                    return ghRef;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error getting GitHub target branch ref.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new branch that will eventually be used when creating committing the  resources and creating the pull request.", "call_func_name": ["io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.System.currentTimeMillis", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.github.GitHubCreateReference.<init>", "io.apicurio.hub.api.github.GitHubCreateReference.setRef", "io.apicurio.hub.api.github.GitHubReference.getObject", "io.apicurio.hub.api.github.GitHubObject.getSha", "io.apicurio.hub.api.github.GitHubCreateReference.setSha", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpPost.<init>", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.client.methods.HttpPost.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "io.apicurio.hub.api.github.GitHubBranchReference.setName", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["long"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["org.apache.http.HttpEntity"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], ["int"], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], ["java.lang.String"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubCreateReference.setRef": "@param ref the ref to set"}, {"io.apicurio.hub.api.github.GitHubReference.getObject": "@return the object"}, {"io.apicurio.hub.api.github.GitHubObject.getSha": "@return the sha"}, {"io.apicurio.hub.api.github.GitHubCreateReference.setSha": "@param sha the sha to set"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}, {"io.apicurio.hub.api.github.GitHubBranchReference.setName": "@param name the name to set"}]}, {"index": "1012", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.addFilesAsBlobs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private List<GitHubBlob> addFilesAsBlobs() throws GitHubException {\n        try {\n            List<GitHubBlob> rval = new ArrayList<>();\n            ZipEntry entry = this.contents.getNextEntry();\n            while (entry != null) {\n                String filename = entry.getName();\n                byte[] data = IOUtils.toByteArray(contents);\n                rval.add(this.addFileAsBlob(filename, data));\n                this.contents.closeEntry();\n                entry = this.contents.getNextEntry();\n            }\n            \n            return rval;\n        } catch (IOException e) {\n            throw new GitHubException(\"Error creating blobs.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Store all of the files as blobs.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.zip.ZipInputStream.getNextEntry", "java.util.zip.ZipEntry.getName", "org.apache.commons.io.IOUtils.toByteArray", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addFileAsBlob", "java.util.List.add", "java.util.zip.ZipInputStream.closeEntry", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [[""], [""], [""], ["java.io.InputStream"], ["java.lang.String", "byte[]"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.addFileAsBlob": "Stores a single file as a blob."}]}, {"index": "1013", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.addFileAsBlob", "methodParameterType": "String#byte[]#", "methodParameterName": "name#content#", "methodBody": "private GitHubBlob addFileAsBlob(String name, byte [] content) throws GitHubException {\n        String url = this.endpoint(\"/repos/:owner/:repo/git/blobs\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .toString();\n        \n        GitHubCreateBlob requestBody = new GitHubCreateBlob();\n        requestBody.setContent(content);\n        \n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpPost request = new HttpPost(url);\n            request.setEntity(new StringEntity(mapper.writeValueAsString(requestBody)));\n            request.addHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 201) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubBlob so = mapper.readValue(contentStream, GitHubBlob.class);\n                    so.setName(name);\n                    return so;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error creating a GH blob.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Stores a single file as a blob.", "call_func_name": ["io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "io.apicurio.hub.api.github.GitHubCreateBlob.<init>", "io.apicurio.hub.api.github.GitHubCreateBlob.setContent", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpPost.<init>", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.client.methods.HttpPost.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "io.apicurio.hub.api.github.GitHubBlob.setName", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["byte[]"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["org.apache.http.HttpEntity"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], ["java.lang.String"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubCreateBlob.setContent": "@param content the content to set"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}, {"io.apicurio.hub.api.github.GitHubBlob.setName": "@param name the name to set"}]}, {"index": "1014", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.getParentTree", "methodParameterType": "GitHubReference#", "methodParameterName": "branchRef#", "methodBody": "private GitHubTree getParentTree(GitHubReference branchRef) throws GitHubException {\n        String url = this.endpoint(\"/repos/:owner/:repo/git/trees/:tree_sha?recursive=1\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .bind(\"tree_sha\", branchRef.getObject().getSha())\n                .toString();\n\n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpGet request = new HttpGet(url);\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubTree ghTree = mapper.readValue(contentStream, GitHubTree.class);\n                    return ghTree;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error getting GitHub target branch ref.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets a tree given the SHA of a given branch ref.", "call_func_name": ["io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "io.apicurio.hub.api.github.GitHubReference.getObject", "io.apicurio.hub.api.github.GitHubObject.getSha", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpGet.<init>", "org.apache.http.client.methods.HttpGet.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubReference.getObject": "@return the object"}, {"io.apicurio.hub.api.github.GitHubObject.getSha": "@return the sha"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}]}, {"index": "1015", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.createTree", "methodParameterType": "List<GitHubBlob>#GitHubTree#", "methodParameterName": "blobs#parentTree#", "methodBody": "private GitHubTree createTree(List<GitHubBlob> blobs, GitHubTree parentTree) throws GitHubException {\n        String url = this.endpoint(\"/repos/:owner/:repo/git/trees\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .toString();\n        \n        GitHubCreateTree requestBody = new GitHubCreateTree();\n        requestBody.setBase_tree(parentTree.getSha());\n        for (GitHubBlob blob : blobs) {\n            String itemPath = this.itemPath(blob.getName());\n            GitHubCreateTreeItem item = new GitHubCreateTreeItem();\n            item.setMode(\"100644\");\n            item.setPath(itemPath);\n            item.setSha(blob.getSha());\n            item.setType(\"blob\");\n            requestBody.addItem(item);\n        }\n        \n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpPost request = new HttpPost(url);\n            request.setEntity(new StringEntity(mapper.writeValueAsString(requestBody)));\n            request.addHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 201) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubTree tree = mapper.readValue(contentStream, GitHubTree.class);\n                    return tree;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error creating a GH tree.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new tree with all the blobs we uploaded earlier.", "call_func_name": ["io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "io.apicurio.hub.api.github.GitHubCreateTree.<init>", "io.apicurio.hub.api.github.GitHubTree.getSha", "io.apicurio.hub.api.github.GitHubCreateTree.setBase_tree", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.api.github.GitHubBlob.getName", "io.apicurio.hub.api.github.GitHubPullRequestCreator.itemPath", "io.apicurio.hub.api.github.GitHubCreateTreeItem.<init>", "io.apicurio.hub.api.github.GitHubCreateTreeItem.setMode", "io.apicurio.hub.api.github.GitHubCreateTreeItem.setPath", "io.apicurio.hub.api.github.GitHubBlob.getSha", "io.apicurio.hub.api.github.GitHubCreateTreeItem.setSha", "io.apicurio.hub.api.github.GitHubCreateTreeItem.setType", "io.apicurio.hub.api.github.GitHubCreateTree.addItem", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpPost.<init>", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.client.methods.HttpPost.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["io.apicurio.hub.api.github.GitHubCreateTreeItem"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["org.apache.http.HttpEntity"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubTree.getSha": "@return the sha"}, {"io.apicurio.hub.api.github.GitHubCreateTree.setBase_tree": "@param base_tree the base_tree to set"}, {"io.apicurio.hub.api.github.GitHubBlob.getName": "@return the name"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.itemPath": "Creates a tree item path for a given file resource path."}, {"io.apicurio.hub.api.github.GitHubCreateTreeItem.setMode": "@param mode the mode to set"}, {"io.apicurio.hub.api.github.GitHubCreateTreeItem.setPath": "@param path the path to set"}, {"io.apicurio.hub.api.github.GitHubCreateTreeItem.setSha": "@param sha the sha to set"}, {"io.apicurio.hub.api.github.GitHubCreateTreeItem.setType": "@param type the type to set"}, {"io.apicurio.hub.api.github.GitHubCreateTree.addItem": "Adds an item."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}]}, {"index": "1016", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.createCommit", "methodParameterType": "GitHubTree#GitHubReference#", "methodParameterName": "commitTree#branchRef#", "methodBody": "private GitHubCommit createCommit(GitHubTree commitTree, GitHubReference branchRef) throws GitHubException {\n        String url = this.endpoint(\"/repos/:owner/:repo/git/commits\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .toString();\n        \n        GitHubCreateCommit requestBody = new GitHubCreateCommit();\n        requestBody.setMessage(this.commitMessage);\n        requestBody.setTree(commitTree.getSha());\n        requestBody.setParents(branchRef.getObject().getSha());\n        \n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpPost request = new HttpPost(url);\n            request.setEntity(new StringEntity(mapper.writeValueAsString(requestBody)));\n            request.addHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 201) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubCommit commit = mapper.readValue(contentStream, GitHubCommit.class);\n                    return commit;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error creating a GH commit.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new commit for the given tree.", "call_func_name": ["io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "io.apicurio.hub.api.github.GitHubCreateCommit.<init>", "io.apicurio.hub.api.github.GitHubCreateCommit.setMessage", "io.apicurio.hub.api.github.GitHubTree.getSha", "io.apicurio.hub.api.github.GitHubCreateCommit.setTree", "io.apicurio.hub.api.github.GitHubReference.getObject", "io.apicurio.hub.api.github.GitHubObject.getSha", "io.apicurio.hub.api.github.GitHubCreateCommit.setParents", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpPost.<init>", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.client.methods.HttpPost.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["org.apache.http.HttpEntity"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubCreateCommit.setMessage": "@param message the message to set"}, {"io.apicurio.hub.api.github.GitHubTree.getSha": "@return the sha"}, {"io.apicurio.hub.api.github.GitHubCreateCommit.setTree": "@param tree the tree to set"}, {"io.apicurio.hub.api.github.GitHubReference.getObject": "@return the object"}, {"io.apicurio.hub.api.github.GitHubObject.getSha": "@return the sha"}, {"io.apicurio.hub.api.github.GitHubCreateCommit.setParents": "@param parents the parents to set"}, {"io.apicurio.hub.api.github.GitHubCreateCommit.setParents": "Sets the parent sha."}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}]}, {"index": "1017", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.updateBranchRef", "methodParameterType": "GitHubBranchReference#GitHubCommit#", "methodParameterName": "branchRef#commit#", "methodBody": "private GitHubBranchReference updateBranchRef(GitHubBranchReference branchRef, GitHubCommit commit) throws GitHubException {\n        String bref = branchRef.getRef();\n        if (bref.startsWith(\"refs/\")) {\n            bref = bref.substring(5);\n        }\n        String url = this.endpoint(\"/repos/:owner/:repo/git/refs/:ref\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .bind(\"ref\", bref)\n                .toString();\n        \n        GitHubUpdateReference requestBody = new GitHubUpdateReference();\n        requestBody.setSha(commit.getSha());\n        \n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpPatch request = new HttpPatch(url);\n            request.setEntity(new StringEntity(mapper.writeValueAsString(requestBody)));\n            request.addHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubBranchReference ref = mapper.readValue(contentStream, GitHubBranchReference.class);\n                    ref.setName(branchRef.getName());\n                    return ref;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error creating a GH commit.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Updates a branch reference to point it at the new commit.", "call_func_name": ["io.apicurio.hub.api.github.GitHubBranchReference.getRef", "java.lang.String.startsWith", "java.lang.String.substring", "io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "io.apicurio.hub.api.github.GitHubUpdateReference.<init>", "io.apicurio.hub.api.github.GitHubCommit.getSha", "io.apicurio.hub.api.github.GitHubUpdateReference.setSha", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpPatch.<init>", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPatch.setEntity", "org.apache.http.client.methods.HttpPatch.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "io.apicurio.hub.api.github.GitHubBranchReference.getName", "io.apicurio.hub.api.github.GitHubBranchReference.setName", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["org.apache.http.HttpEntity"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], [""], ["java.lang.String"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubCommit.getSha": "@return the sha"}, {"io.apicurio.hub.api.github.GitHubUpdateReference.setSha": "@param sha the sha to set"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}, {"io.apicurio.hub.api.github.GitHubBranchReference.getName": "@return the name"}, {"io.apicurio.hub.api.github.GitHubBranchReference.setName": "@param name the name to set"}]}, {"index": "1018", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.createPullRequest", "methodParameterType": "GitHubBranchReference#", "methodParameterName": "branchRef#", "methodBody": "private GitHubPullRequest createPullRequest(GitHubBranchReference branchRef) throws GitHubException {\n        String url = this.endpoint(\"/repos/:owner/:repo/pulls\")\n                .bind(\"owner\", this.organization)\n                .bind(\"repo\", this.repository)\n                .toString();\n        \n        GitHubCreatePullRequest requestBody = new GitHubCreatePullRequest();\n        requestBody.setTitle(\"[Apicurio] Please merge generated API project\");\n        requestBody.setBody(\"The Apicurio tool was used to generate an API project from an OpenAPI definition.  Please review this pull request, modify as necessary, and merge!\");\n        requestBody.setHead(branchRef.getName());\n        requestBody.setBase(this.branch);\n        \n        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n            HttpPost request = new HttpPost(url);\n            request.setEntity(new StringEntity(mapper.writeValueAsString(requestBody)));\n            request.addHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Accept\", \"application/json\");\n            addSecurityTo(request);\n\n            try (CloseableHttpResponse response = httpClient.execute(request)) {\n                if (response.getStatusLine().getStatusCode() != 201) {\n                    throw new IOException(\"Invalid response code: \" + response.getStatusLine().getStatusCode() + \" :: \" + response.getStatusLine().getReasonPhrase());\n                }\n                try (InputStream contentStream = response.getEntity().getContent()) {\n                    GitHubPullRequest pullRequest = mapper.readValue(contentStream, GitHubPullRequest.class);\n                    return pullRequest;\n                }\n            }\n        } catch (IOException e) {\n            throw new GitHubException(\"Error creating a GH commit.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a pull request for the branch.", "call_func_name": ["io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint", "io.apicurio.hub.api.github.GitHubCreatePullRequest.<init>", "io.apicurio.hub.api.github.GitHubCreatePullRequest.setTitle", "io.apicurio.hub.api.github.GitHubCreatePullRequest.setBody", "io.apicurio.hub.api.github.GitHubBranchReference.getName", "io.apicurio.hub.api.github.GitHubCreatePullRequest.setHead", "io.apicurio.hub.api.github.GitHubCreatePullRequest.setBase", "org.apache.http.impl.client.HttpClients.createDefault", "org.apache.http.client.methods.HttpPost.<init>", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.client.methods.HttpPost.addHeader", "io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo", "org.apache.http.impl.client.CloseableHttpClient.execute", "org.apache.http.client.methods.CloseableHttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.apache.http.StatusLine.getReasonPhrase", "java.lang.StringBuilder.toString", "java.io.IOException.<init>", "org.apache.http.client.methods.CloseableHttpResponse.getEntity", "org.apache.http.HttpEntity.getContent", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.http.client.methods.CloseableHttpResponse.close", "org.apache.http.impl.client.CloseableHttpClient.close", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["org.apache.http.HttpEntity"], ["java.lang.String", "java.lang.String"], ["org.apache.http.client.methods.HttpRequestBase"], ["org.apache.http.client.methods.HttpUriRequest"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.InputStream", "java.lang.Class"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubPullRequestCreator.endpoint": "Creates a github API endpoint from the api path."}, {"io.apicurio.hub.api.github.GitHubCreatePullRequest.setTitle": "@param title the title to set"}, {"io.apicurio.hub.api.github.GitHubCreatePullRequest.setBody": "@param body the body to set"}, {"io.apicurio.hub.api.github.GitHubBranchReference.getName": "@return the name"}, {"io.apicurio.hub.api.github.GitHubCreatePullRequest.setHead": "@param head the head to set"}, {"io.apicurio.hub.api.github.GitHubCreatePullRequest.setBase": "@param base the base to set"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.addSecurityTo": "Adds security to the request."}]}, {"index": "1019", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequestCreator.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequestCreator.itemPath", "methodParameterType": "String#", "methodParameterName": "resource#", "methodBody": "private String itemPath(String resource) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(this.path);\n        if (!this.path.endsWith(\"/\") && !this.path.equals(\"\") && !resource.startsWith(\"/\")) {\n            builder.append(\"/\");\n        }\n        if (resource.startsWith(\"/\")) {\n            builder.append(resource.substring(1));\n        } else {\n            builder.append(resource);\n        }\n        return builder.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a tree item path for a given file resource path.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.String.endsWith", "java.lang.String.equals", "java.lang.String.startsWith", "java.lang.String.substring", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["int"], [""]], "passed_comments": "/"}, {"index": "1020", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubException.java", "methodName": "io.apicurio.hub.api.github.GitHubException.GitHubException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public GitHubException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1021", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubException.java", "methodName": "io.apicurio.hub.api.github.GitHubException.GitHubException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public GitHubException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1022", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/AbstractResourceResolver.java", "methodName": "io.apicurio.hub.api.github.AbstractResourceResolver.decode", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public static String decode(String value) {\n        if (value == null) {\n            return value;\n        }\n        try {\n            return URLDecoder.decode(value, StandardCharsets.UTF_8.name());\n        } catch (UnsupportedEncodingException e) {\n            return value;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Decodes a value (in case the value is URL encoded).", "call_func_name": ["java.nio.charset.Charset.name", "java.net.URLDecoder.decode"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1023", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubObject.java", "methodName": "io.apicurio.hub.api.github.GitHubObject.GitHubObject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubObject() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1024", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubObject.java", "methodName": "io.apicurio.hub.api.github.GitHubObject.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1025", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubObject.java", "methodName": "io.apicurio.hub.api.github.GitHubObject.setType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public void setType(String type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1026", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubObject.java", "methodName": "io.apicurio.hub.api.github.GitHubObject.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1027", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubObject.java", "methodName": "io.apicurio.hub.api.github.GitHubObject.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1028", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubObject.java", "methodName": "io.apicurio.hub.api.github.GitHubObject.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1029", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubObject.java", "methodName": "io.apicurio.hub.api.github.GitHubObject.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1030", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubUpdateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubUpdateReference.GitHubUpdateReference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubUpdateReference() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1031", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubUpdateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubUpdateReference.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1032", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubUpdateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubUpdateReference.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1033", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubUpdateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubUpdateReference.isForce", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isForce() {\n        return force;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the force", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1034", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubUpdateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubUpdateReference.setForce", "methodParameterType": "boolean#", "methodParameterName": "force#", "methodBody": "public void setForce(boolean force) {\n        this.force = force;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param force the force to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1035", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.GitHubPullRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubPullRequest() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1036", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1037", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.setId", "methodParameterType": "int#", "methodParameterName": "id#", "methodBody": "public void setId(int id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1038", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.getNode_id", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNode_id() {\n        return node_id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the node_id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1039", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.setNode_id", "methodParameterType": "String#", "methodParameterName": "node_id#", "methodBody": "public void setNode_id(String node_id) {\n        this.node_id = node_id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param node_id the node_id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1040", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1041", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1042", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.getHtml_url", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHtml_url() {\n        return html_url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the html_url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1043", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubPullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubPullRequest.setHtml_url", "methodParameterType": "String#", "methodParameterName": "html_url#", "methodBody": "public void setHtml_url(String html_url) {\n        this.html_url = html_url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param html_url the html_url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1044", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSimpleObject.java", "methodName": "io.apicurio.hub.api.github.GitHubSimpleObject.GitHubSimpleObject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubSimpleObject() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1045", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSimpleObject.java", "methodName": "io.apicurio.hub.api.github.GitHubSimpleObject.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1046", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSimpleObject.java", "methodName": "io.apicurio.hub.api.github.GitHubSimpleObject.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1047", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSimpleObject.java", "methodName": "io.apicurio.hub.api.github.GitHubSimpleObject.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1048", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSimpleObject.java", "methodName": "io.apicurio.hub.api.github.GitHubSimpleObject.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1049", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.GitHubReference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubReference() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1050", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.getRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRef() {\n        return ref;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ref", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1051", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.setRef", "methodParameterType": "String#", "methodParameterName": "ref#", "methodBody": "public void setRef(String ref) {\n        this.ref = ref;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param ref the ref to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1052", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.getNode_id", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNode_id() {\n        return node_id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the node_id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1053", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.setNode_id", "methodParameterType": "String#", "methodParameterName": "node_id#", "methodBody": "public void setNode_id(String node_id) {\n        this.node_id = node_id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param node_id the node_id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1054", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1055", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1056", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.getObject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubObject getObject() {\n        return object;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1057", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubReference.java", "methodName": "io.apicurio.hub.api.github.GitHubReference.setObject", "methodParameterType": "GitHubObject#", "methodParameterName": "object#", "methodBody": "public void setObject(GitHubObject object) {\n        this.object = object;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param object the object to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1058", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.GitHubCreateTreeItem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreateTreeItem() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1059", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1060", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1061", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.getMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMode() {\n        return mode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the mode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1062", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.setMode", "methodParameterType": "String#", "methodParameterName": "mode#", "methodBody": "public void setMode(String mode) {\n        this.mode = mode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param mode the mode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1063", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1064", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.setType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public void setType(String type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1065", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1066", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateTreeItem.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateTreeItem.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1067", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.GitHubCommit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCommit() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1068", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1069", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1070", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.getNode_id", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNode_id() {\n        return node_id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the node_id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1071", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.setNode_id", "methodParameterType": "String#", "methodParameterName": "node_id#", "methodBody": "public void setNode_id(String node_id) {\n        this.node_id = node_id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param node_id the node_id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1072", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1073", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1074", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage() {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1075", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message) {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param message the message to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1076", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.getTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubSimpleObject getTree() {\n        return tree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tree", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1077", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.setTree", "methodParameterType": "GitHubSimpleObject#", "methodParameterName": "tree#", "methodBody": "public void setTree(GitHubSimpleObject tree) {\n        this.tree = tree;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tree the tree to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1078", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.getParents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<GitHubSimpleObject> getParents() {\n        return parents;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the parents", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1079", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCommit.setParents", "methodParameterType": "List<GitHubSimpleObject>#", "methodParameterName": "parents#", "methodBody": "public void setParents(List<GitHubSimpleObject> parents) {\n        this.parents = parents;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param parents the parents to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1080", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.GitHubCreateCommit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreateCommit() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1081", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage() {\n        return message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1082", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void setMessage(String message) {\n        this.message = message;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param message the message to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1083", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.getTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTree() {\n        return tree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tree", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1084", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.setTree", "methodParameterType": "String#", "methodParameterName": "tree#", "methodBody": "public void setTree(String tree) {\n        this.tree = tree;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tree the tree to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1085", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.getParents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getParents() {\n        return parents;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the parents", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1086", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.setParents", "methodParameterType": "Set<String>#", "methodParameterName": "parents#", "methodBody": "public void setParents(Set<String> parents) {\n        this.parents = parents;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param parents the parents to set", "call_func_name": ["java.util.Collections.singleton"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1087", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateCommit.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateCommit.setParents", "methodParameterType": "String#", "methodParameterName": "parentSha#", "methodBody": "public void setParents(String parentSha) {\n        this.parents = Collections.singleton(parentSha);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the parent sha.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1088", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/IGitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.IGitHubSourceConnector.getOrganizations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<GitHubOrganization> getOrganizations() throws GitHubException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the GitHub organizations for the current user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1089", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/IGitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.IGitHubSourceConnector.getRepositories", "methodParameterType": "String#", "methodParameterName": "org#", "methodBody": "public Collection<GitHubRepository> getRepositories(String org) throws GitHubException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the GitHub repositories for the current user within the given organization.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1090", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/IGitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.IGitHubSourceConnector.getBranches", "methodParameterType": "String#String#", "methodParameterName": "org#repo#", "methodBody": "public Collection<SourceCodeBranch> getBranches(String org, String repo) throws GitHubException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Lists all of the branches available on the given GitHub repository in the given org.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1091", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.githubClient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private GitHubClient githubClient() throws SourceConnectorException {\n        try {\n            String ghUrl = config.getGitHubApiUrl();\n\n            URI url = new URI(ghUrl);\n            String host = url.getHost();\n            int port = url.getPort();\n            String scheme = url.getScheme();\n            \n            GitHubClient client = new GitHubClient(host, port, scheme);\n            String idpToken = getExternalToken();\n            client.setOAuth2Token(idpToken);\n            return client;\n        } catch (URISyntaxException e) {\n            throw new SourceConnectorException(\"Error creating the GitHub client.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@throws SourceConnectorException", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getGitHubApiUrl", "java.net.URI.<init>", "java.net.URI.getHost", "java.net.URI.getPort", "java.net.URI.getScheme", "org.eclipse.egit.github.core.client.GitHubClient.<init>", "io.apicurio.hub.api.github.GitHubSourceConnector.getExternalToken", "org.eclipse.egit.github.core.client.GitHubClient.setOAuth2Token", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "int", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.getGitHubApiUrl": "@return the configured GitHub API URL"}]}, {"index": "1092", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public LinkedAccountType getType() {\n        return LinkedAccountType.GitHub;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#getType()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1093", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.getBaseApiEndpointUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected String getBaseApiEndpointUrl() {\n        if (apiUrl == null) {\n            apiUrl = this.config.getGitHubApiUrl();\n        }\n        return apiUrl;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see AbstractSourceConnector#getBaseApiEndpointUrl()", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getGitHubApiUrl"], "call_func_parameter": [[""]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.getGitHubApiUrl": "@return the configured GitHub API URL"}]}, {"index": "1094", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.parseExternalTokenResponse", "methodParameterType": "String#", "methodParameterName": "body#", "methodBody": "protected Map<String, String> parseExternalTokenResponse(String body) {\n        Map<String, String> rval = new HashMap<>();\n        String[] split1 = body.split(\"&\");\n        for (String item : split1) {\n            String[] split2 = item.split(\"=\");\n            String encodedKey = split2[0];\n            String encodedVal = split2[1];\n            String key = Encode.decode(encodedKey);\n            String val = Encode.decode(encodedVal);\n            rval.put(key, val);\n        }\n        \n        return rval;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.AbstractSourceConnector#parseExternalTokenResponse(java.lang.String)", "call_func_name": ["java.util.HashMap.<init>", "java.lang.String.split", "org.keycloak.common.util.Encode.decode", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1095", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.validateResourceExists", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "@Override\n    public ApiDesignResourceInfo validateResourceExists(String repositoryUrl) throws NotFoundException, SourceConnectorException, ApiValidationException {\n        logger.debug(\"Validating the existence of resource {}\", repositoryUrl);\n        try {\n            GitHubResource resource = resolver.resolve(repositoryUrl);\n            if (resource == null) {\n                throw new NotFoundException();\n            }\n            ResourceContent ctobj = getResourceContent(repositoryUrl);\n            String content = ctobj.getContent();\n            ApiDesignResourceInfo info = ApiDesignResourceInfo.fromContent(content);\n            if (info.getName() == null) {\n                info.setName(resource.getResourcePath());\n            }\n            return info;\n        } catch (NotFoundException nfe) {\n            throw nfe;\n        } catch (ApiValidationException ave) {\n            throw ave;\n        } catch (Exception e) {\n            logger.error(\"Error checking that a GitHub resource exists.\", e);\n            throw new SourceConnectorException(\"Error checking that a GitHub resource exists.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#validateResourceExists(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "io.apicurio.hub.api.github.GitHubSourceConnector.getResourceContent", "io.apicurio.hub.api.beans.ResourceContent.getContent", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.fromContent", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName", "io.apicurio.hub.api.github.GitHubResource.getResourcePath", "io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName", "org.slf4j.Logger.error", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubResourceResolver.resolve": "Resolves a github URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.github.GitHubSourceConnector.getResourceContent": "@see io.apicurio.hub.api.connectors.ISourceConnector#getResourceContent(java.lang.String)"}, {"io.apicurio.hub.api.beans.ResourceContent.getContent": "@return the content"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.getName": "@return the name"}, {"io.apicurio.hub.api.github.GitHubResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.core.beans.ApiDesignResourceInfo.setName": "@param name the name to set"}]}, {"index": "1096", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.getResourceContent", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "@Override\n    public ResourceContent getResourceContent(String repositoryUrl) throws NotFoundException, SourceConnectorException {\n        try {\n            GitHubResource resource = resolver.resolve(repositoryUrl);\n            String getContentUrl = this.endpoint(\"/repos/:org/:repo/contents/:path\")\n                    .bind(\"org\", resource.getOrganization())\n                    .bind(\"repo\", resource.getRepository())\n                    .bind(\"path\", resource.getResourcePath())\n                    .queryParam(\"ref\", resource.getBranch())\n                    .toString();\n            HttpRequest request = Unirest.get(getContentUrl).header(\"Accept\", \"application/json\");\n            try {\n                addSecurityTo(request);\n            } catch (Exception e) {\n                // If adding security fails, just go ahead and try without security.  If it's a public\n                // repository then this will work.  If not, then it will fail with a 404.\n            }\n            HttpResponse<GitHubGetContentsResponse> response = request.asObject(GitHubGetContentsResponse.class);\n            if (response.getStatus() == 404) {\n            \tthrow new NotFoundException();\n            }\n            if (response.getStatus() != 200) {\n                throw new UnirestException(\"Unexpected response from GitHub: \" + response.getStatus() + \"::\" + response.getStatusText());\n            }\n            \n            GitHubGetContentsResponse body = response.getBody();\n            String b64Content = body.getContent();\n            String content = new String(Base64.decodeBase64(b64Content), StandardCharsets.UTF_8);\n            ResourceContent rval = new ResourceContent();\n            rval.setContent(content);\n            rval.setSha(body.getSha());\n            return rval;\n        } catch (UnirestException e) {\n            logger.error(\"Error getting Github resource content.\", e);\n            throw new SourceConnectorException(\"Error getting Github resource content.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#getResourceContent(java.lang.String)", "call_func_name": ["io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "io.apicurio.hub.api.github.GitHubSourceConnector.endpoint", "io.apicurio.hub.api.github.GitHubResource.getOrganization", "io.apicurio.hub.api.github.GitHubResource.getRepository", "io.apicurio.hub.api.github.GitHubResource.getResourcePath", "io.apicurio.hub.api.github.GitHubResource.getBranch", "com.mashape.unirest.http.Unirest.get", "com.mashape.unirest.request.GetRequest.header", "io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo", "com.mashape.unirest.request.HttpRequest.asObject", "com.mashape.unirest.http.HttpResponse.getStatus", "io.apicurio.hub.core.exceptions.NotFoundException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.mashape.unirest.http.HttpResponse.getStatusText", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.exceptions.UnirestException.<init>", "com.mashape.unirest.http.HttpResponse.getBody", "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getContent", "org.apache.commons.codec.binary.Base64.decodeBase64", "java.lang.String.<init>", "io.apicurio.hub.api.beans.ResourceContent.<init>", "io.apicurio.hub.api.beans.ResourceContent.setContent", "io.apicurio.hub.api.beans.GitHubGetContentsResponse.getSha", "io.apicurio.hub.api.beans.ResourceContent.setSha", "org.slf4j.Logger.error", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["com.mashape.unirest.request.HttpRequest"], ["java.lang.Class"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["byte[]", "java.nio.charset.Charset"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubResourceResolver.resolve": "Resolves a github URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.github.GitHubResource.getOrganization": "@return the organization"}, {"io.apicurio.hub.api.github.GitHubResource.getRepository": "@return the repository"}, {"io.apicurio.hub.api.github.GitHubResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.api.github.GitHubResource.getBranch": "@return the branch"}, {"io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo": "@see io.apicurio.hub.api.connectors.AbstractSourceConnector#addSecurityTo(com.mashape.unirest.request.HttpRequest)"}, {"io.apicurio.hub.api.beans.GitHubGetContentsResponse.getContent": "@return the content"}, {"io.apicurio.hub.api.beans.ResourceContent.setContent": "@param content the content to set"}, {"io.apicurio.hub.api.beans.GitHubGetContentsResponse.getSha": "@return the sha"}, {"io.apicurio.hub.api.beans.ResourceContent.setSha": "@param sha the sha to set"}]}, {"index": "1097", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.updateResourceContent", "methodParameterType": "String#String#String#ResourceContent#", "methodParameterName": "repositoryUrl#commitMessage#commitComment#content#", "methodBody": "@Override\n    public String updateResourceContent(String repositoryUrl, String commitMessage, String commitComment,\n            ResourceContent content) throws SourceConnectorException {\n        try {\n            String b64Content = Base64.encodeBase64String(content.getContent().getBytes(StandardCharsets.UTF_8));\n\n            GitHubResource resource = resolver.resolve(repositoryUrl);\n\n            GitHubUpdateFileRequest requestBody = new GitHubUpdateFileRequest();\n            requestBody.setMessage(commitMessage);\n            requestBody.setContent(b64Content);\n            requestBody.setSha(content.getSha());\n            requestBody.setBranch(resource.getBranch());\n\n            String createContentUrl = this.endpoint(\"/repos/:org/:repo/contents/:path\")\n                .bind(\"org\", resource.getOrganization())\n                .bind(\"repo\", resource.getRepository())\n                .bind(\"path\", resource.getResourcePath())\n                .toString();\n\n            HttpRequestWithBody request = Unirest.put(createContentUrl).header(\"Content-Type\", \"application/json; charset=utf-8\");\n            addSecurityTo(request);\n            HttpResponse<JsonNode> response = request.body(requestBody).asJson();\n            if (response.getStatus() != 200) {\n                throw new UnirestException(\"Unexpected response from GitHub: \" + response.getStatus() + \"::\" + response.getStatusText());\n            }\n            JsonNode node = response.getBody();\n            String newSha = node.getObject().getJSONObject(\"content\").getString(\"sha\");\n            \n            if (commitComment != null && !commitComment.trim().isEmpty()) {\n                String commitSha = node.getObject().getJSONObject(\"commit\").getString(\"sha\");\n                this.addCommitComment(repositoryUrl, commitSha, commitComment);\n            }\n            \n            return newSha;\n        } catch (UnirestException e) {\n            logger.error(\"Error updating Github resource content.\", e);\n            throw new SourceConnectorException(\"Error updating Github resource content.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#updateResourceContent(java.lang.String,java.lang.String,java.lang.String,io.apicurio.hub.api.beans.ResourceContent)", "call_func_name": ["io.apicurio.hub.api.beans.ResourceContent.getContent", "java.lang.String.getBytes", "org.apache.commons.codec.binary.Base64.encodeBase64String", "io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.<init>", "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setMessage", "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setContent", "io.apicurio.hub.api.beans.ResourceContent.getSha", "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setSha", "io.apicurio.hub.api.github.GitHubResource.getBranch", "io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setBranch", "io.apicurio.hub.api.github.GitHubSourceConnector.endpoint", "io.apicurio.hub.api.github.GitHubResource.getOrganization", "io.apicurio.hub.api.github.GitHubResource.getRepository", "io.apicurio.hub.api.github.GitHubResource.getResourcePath", "com.mashape.unirest.http.Unirest.put", "com.mashape.unirest.request.HttpRequestWithBody.header", "io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo", "com.mashape.unirest.request.HttpRequestWithBody.body", "com.mashape.unirest.request.body.RequestBodyEntity.asJson", "com.mashape.unirest.http.HttpResponse.getStatus", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.mashape.unirest.http.HttpResponse.getStatusText", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.exceptions.UnirestException.<init>", "com.mashape.unirest.http.HttpResponse.getBody", "com.mashape.unirest.http.JsonNode.getObject", "org.json.JSONObject.getJSONObject", "org.json.JSONObject.getString", "java.lang.String.trim", "java.lang.String.isEmpty", "io.apicurio.hub.api.github.GitHubSourceConnector.addCommitComment", "org.slf4j.Logger.error", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [[""], ["java.nio.charset.Charset"], ["byte[]"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["com.mashape.unirest.request.HttpRequest"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.beans.ResourceContent.getContent": "@return the content"}, {"io.apicurio.hub.api.github.GitHubResourceResolver.resolve": "Resolves a github URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setMessage": "@param message the message to set"}, {"io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setContent": "@param content the content to set"}, {"io.apicurio.hub.api.beans.ResourceContent.getSha": "@return the sha"}, {"io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setSha": "@param sha the sha to set"}, {"io.apicurio.hub.api.github.GitHubResource.getBranch": "@return the branch"}, {"io.apicurio.hub.api.beans.GitHubUpdateFileRequest.setBranch": "@param branch the branch to set"}, {"io.apicurio.hub.api.github.GitHubResource.getOrganization": "@return the organization"}, {"io.apicurio.hub.api.github.GitHubResource.getRepository": "@return the repository"}, {"io.apicurio.hub.api.github.GitHubResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo": "@see io.apicurio.hub.api.connectors.AbstractSourceConnector#addSecurityTo(com.mashape.unirest.request.HttpRequest)"}, {"io.apicurio.hub.api.github.GitHubSourceConnector.addCommitComment": "Uses the GH API to add a commit comment."}]}, {"index": "1098", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.addCommitComment", "methodParameterType": "String#String#String#", "methodParameterName": "repositoryUrl#commitSha#commitComment#", "methodBody": "private void addCommitComment(String repositoryUrl, String commitSha, String commitComment)\n            throws UnirestException, SourceConnectorException {\n        GitHubCreateCommitCommentRequest body = new GitHubCreateCommitCommentRequest();\n        body.setBody(commitComment);\n\n        GitHubResource resource = resolver.resolve(repositoryUrl);\n        String addCommentUrl = this.endpoint(\"/repos/:org/:repo/commits/:sha/comments\")\n            .bind(\"org\", resource.getOrganization())\n            .bind(\"repo\", resource.getRepository())\n            .bind(\"path\", resource.getResourcePath())\n            .bind(\"sha\", commitSha)\n            .toString();\n\n        HttpRequestWithBody request = Unirest.post(addCommentUrl).header(\"Content-Type\", \"application/json; charset=utf-8\");\n        addSecurityTo(request);\n        HttpResponse<JsonNode> response = request.body(body).asJson();\n        if (response.getStatus() != 201) {\n            throw new UnirestException(\"Unexpected response from GitHub: \" + response.getStatus() + \"::\" + response.getStatusText());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Uses the GH API to add a commit comment.", "call_func_name": ["io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.<init>", "io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.setBody", "io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "io.apicurio.hub.api.github.GitHubSourceConnector.endpoint", "io.apicurio.hub.api.github.GitHubResource.getOrganization", "io.apicurio.hub.api.github.GitHubResource.getRepository", "io.apicurio.hub.api.github.GitHubResource.getResourcePath", "com.mashape.unirest.http.Unirest.post", "com.mashape.unirest.request.HttpRequestWithBody.header", "io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo", "com.mashape.unirest.request.HttpRequestWithBody.body", "com.mashape.unirest.request.body.RequestBodyEntity.asJson", "com.mashape.unirest.http.HttpResponse.getStatus", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.mashape.unirest.http.HttpResponse.getStatusText", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.exceptions.UnirestException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["com.mashape.unirest.request.HttpRequest"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.beans.GitHubCreateCommitCommentRequest.setBody": "@param body the body to set"}, {"io.apicurio.hub.api.github.GitHubResourceResolver.resolve": "Resolves a github URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.github.GitHubResource.getOrganization": "@return the organization"}, {"io.apicurio.hub.api.github.GitHubResource.getRepository": "@return the repository"}, {"io.apicurio.hub.api.github.GitHubResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo": "@see io.apicurio.hub.api.connectors.AbstractSourceConnector#addSecurityTo(com.mashape.unirest.request.HttpRequest)"}]}, {"index": "1099", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.createResourceContent", "methodParameterType": "String#String#String#", "methodParameterName": "repositoryUrl#commitMessage#content#", "methodBody": "@Override\n    public void createResourceContent(String repositoryUrl, String commitMessage, String content) throws SourceConnectorException {\n        try {\n            String b64Content = Base64.encodeBase64String(content.getBytes(StandardCharsets.UTF_8));\n\n            GitHubResource resource = resolver.resolve(repositoryUrl);\n\n            GitHubCreateFileRequest requestBody = new GitHubCreateFileRequest();\n            requestBody.setMessage(commitMessage);\n            requestBody.setContent(b64Content);\n            requestBody.setBranch(resource.getBranch());\n\n            String createContentUrl = this.endpoint(\"/repos/:org/:repo/contents/:path\")\n                .bind(\"org\", resource.getOrganization())\n                .bind(\"repo\", resource.getRepository())\n                .bind(\"path\", resource.getResourcePath())\n                .toString();\n\n            HttpRequestWithBody request = Unirest.put(createContentUrl).header(\"Content-Type\", \"application/json; charset=utf-8\");\n            addSecurityTo(request);\n            HttpResponse<InputStream> response = request.body(requestBody).asBinary();\n            if (response.getStatus() != 201) {\n                throw new UnirestException(\"Unexpected response from GitHub: \" + response.getStatus() + \"::\" + response.getStatusText());\n            }\n        } catch (UnirestException e) {\n            logger.error(\"Error creating Github resource content.\", e);\n            throw new SourceConnectorException(\"Error creating Github resource content.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#createResourceContent(java.lang.String,java.lang.String,java.lang.String)", "call_func_name": ["java.lang.String.getBytes", "org.apache.commons.codec.binary.Base64.encodeBase64String", "io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "io.apicurio.hub.api.beans.GitHubCreateFileRequest.<init>", "io.apicurio.hub.api.beans.GitHubCreateFileRequest.setMessage", "io.apicurio.hub.api.beans.GitHubCreateFileRequest.setContent", "io.apicurio.hub.api.github.GitHubResource.getBranch", "io.apicurio.hub.api.beans.GitHubCreateFileRequest.setBranch", "io.apicurio.hub.api.github.GitHubSourceConnector.endpoint", "io.apicurio.hub.api.github.GitHubResource.getOrganization", "io.apicurio.hub.api.github.GitHubResource.getRepository", "io.apicurio.hub.api.github.GitHubResource.getResourcePath", "com.mashape.unirest.http.Unirest.put", "com.mashape.unirest.request.HttpRequestWithBody.header", "io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo", "com.mashape.unirest.request.HttpRequestWithBody.body", "com.mashape.unirest.request.body.RequestBodyEntity.asBinary", "com.mashape.unirest.http.HttpResponse.getStatus", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.mashape.unirest.http.HttpResponse.getStatusText", "java.lang.StringBuilder.toString", "com.mashape.unirest.http.exceptions.UnirestException.<init>", "org.slf4j.Logger.error", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.nio.charset.Charset"], ["byte[]"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["com.mashape.unirest.request.HttpRequest"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubResourceResolver.resolve": "Resolves a github URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.beans.GitHubCreateFileRequest.setMessage": "@param message the message to set"}, {"io.apicurio.hub.api.beans.GitHubCreateFileRequest.setContent": "@param content the content to set"}, {"io.apicurio.hub.api.github.GitHubResource.getBranch": "@return the branch"}, {"io.apicurio.hub.api.beans.GitHubCreateFileRequest.setBranch": "@param branch the branch to set"}, {"io.apicurio.hub.api.github.GitHubResource.getOrganization": "@return the organization"}, {"io.apicurio.hub.api.github.GitHubResource.getRepository": "@return the repository"}, {"io.apicurio.hub.api.github.GitHubResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo": "@see io.apicurio.hub.api.connectors.AbstractSourceConnector#addSecurityTo(com.mashape.unirest.request.HttpRequest)"}]}, {"index": "1100", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.getOrganizations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Collection<GitHubOrganization> getOrganizations() throws GitHubException, SourceConnectorException {\n        logger.debug(\"Getting organizations for current user.\");\n        Collection<GitHubOrganization> rval = new HashSet<>();\n        try {\n            GitHubClient client = githubClient();\n            \n            // Add the user's personal org\n            UserService userService = new UserService(client);\n            User user = userService.getUser();\n            GitHubOrganization gho = new GitHubOrganization();\n            gho.setUserOrg(true);\n            gho.setId(user.getLogin());\n            rval.add(gho);\n            \n            // Now all the user's orgs\n            OrganizationService orgService = new OrganizationService(client);\n            List<User> organizations = orgService.getOrganizations();\n            for (User org : organizations) {\n                gho = new GitHubOrganization();\n                gho.setUserOrg(false);\n                gho.setId(org.getLogin());\n                rval.add(gho);\n            }\n        } catch (IOException e) {\n            logger.error(\"Error getting GitHub organizations.\", e);\n            throw new GitHubException(\"Error getting GitHub organizations.\", e);\n        }\n        return rval;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.github.IGitHubSourceConnector#getOrganizations()", "call_func_name": ["org.slf4j.Logger.debug", "java.util.HashSet.<init>", "io.apicurio.hub.api.github.GitHubSourceConnector.githubClient", "org.eclipse.egit.github.core.service.UserService.<init>", "org.eclipse.egit.github.core.service.UserService.getUser", "io.apicurio.hub.api.beans.GitHubOrganization.<init>", "io.apicurio.hub.api.beans.GitHubOrganization.setUserOrg", "org.eclipse.egit.github.core.User.getLogin", "io.apicurio.hub.api.beans.GitHubOrganization.setId", "java.util.Collection.add", "org.eclipse.egit.github.core.service.OrganizationService.<init>", "org.eclipse.egit.github.core.service.OrganizationService.getOrganizations", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.slf4j.Logger.error", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String"], [""], [""], ["org.eclipse.egit.github.core.client.GitHubClient"], [""], [""], ["boolean"], [""], ["java.lang.String"], ["java.lang.Object"], ["org.eclipse.egit.github.core.client.GitHubClient"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubSourceConnector.githubClient": "@throws SourceConnectorException"}, {"io.apicurio.hub.api.beans.GitHubOrganization.setUserOrg": "@param userOrg the userOrg to set"}, {"io.apicurio.hub.api.beans.GitHubOrganization.setId": "@param id the id to set"}]}, {"index": "1101", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.getRepositories", "methodParameterType": "String#", "methodParameterName": "org#", "methodBody": "@Override\n    public Collection<GitHubRepository> getRepositories(String org) throws GitHubException, SourceConnectorException {\n        logger.debug(\"Getting the repositories from organization {}\", org);\n        Collection<GitHubRepository> rval = new HashSet<>();\n        try {\n            GitHubClient client = githubClient();\n\n            // First get the user's login id\n            UserService userService = new UserService(client);\n            User user = userService.getUser();\n            String userLogin = user.getLogin();\n\n            // Get the Org/User repositories\n            RepositoryService repoService = new RepositoryService(client);\n            List<Repository> repositories = null;\n            if (org.equals(userLogin)) {\n                Map<String, String> filters = new HashMap<String, String>();\n                filters.put(\"affiliation\", \"owner\");\n                filters.put(\"visibility\", \"all\");\n                repositories = repoService.getRepositories(filters);\n            } else {\n                repositories = repoService.getOrgRepositories(org);\n            }\n            \n            for (Repository repository : repositories) {\n                GitHubRepository ghrepo = new GitHubRepository();\n                ghrepo.setName(repository.getName());\n                ghrepo.setPriv(repository.isPrivate());\n                rval.add(ghrepo);\n            }\n        } catch (IOException e) {\n            logger.error(\"Error getting GitHub repositories.\", e);\n            throw new GitHubException(\"Error getting GitHub repositories.\", e);\n        }\n        return rval;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.github.IGitHubSourceConnector#getRepositories(java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "java.util.HashSet.<init>", "io.apicurio.hub.api.github.GitHubSourceConnector.githubClient", "org.eclipse.egit.github.core.service.UserService.<init>", "org.eclipse.egit.github.core.service.UserService.getUser", "org.eclipse.egit.github.core.User.getLogin", "org.eclipse.egit.github.core.service.RepositoryService.<init>", "java.lang.String.equals", "java.util.HashMap.<init>", "java.util.Map.put", "org.eclipse.egit.github.core.service.RepositoryService.getRepositories", "org.eclipse.egit.github.core.service.RepositoryService.getOrgRepositories", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.api.beans.GitHubRepository.<init>", "org.eclipse.egit.github.core.Repository.getName", "io.apicurio.hub.api.beans.GitHubRepository.setName", "org.eclipse.egit.github.core.Repository.isPrivate", "io.apicurio.hub.api.beans.GitHubRepository.setPriv", "java.util.Collection.add", "org.slf4j.Logger.error", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], [""], ["org.eclipse.egit.github.core.client.GitHubClient"], [""], [""], ["org.eclipse.egit.github.core.client.GitHubClient"], ["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"], ["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["boolean"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubSourceConnector.githubClient": "@throws SourceConnectorException"}, {"io.apicurio.hub.api.beans.GitHubRepository.setName": "@param name the name to set"}, {"io.apicurio.hub.api.beans.GitHubRepository.setPriv": "@param priv the priv to set"}]}, {"index": "1102", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.getBranches", "methodParameterType": "String#String#", "methodParameterName": "org#repo#", "methodBody": "@Override\n    public Collection<SourceCodeBranch> getBranches(String org, String repo)\n            throws GitHubException, SourceConnectorException {\n        logger.debug(\"Getting the branches from {} / {}\", org, repo);\n        Collection<SourceCodeBranch> rval = new HashSet<>();\n        try {\n            GitHubClient client = githubClient();\n            \n            RepositoryService repoService = new RepositoryService(client);\n            Repository repository = repoService.getRepository(org, repo);\n            List<RepositoryBranch> branches = repoService.getBranches(repository);\n            for (RepositoryBranch branch : branches) {\n                SourceCodeBranch ghBranch = new SourceCodeBranch();\n                ghBranch.setName(branch.getName());\n                ghBranch.setCommitId(branch.getCommit().getSha());\n                rval.add(ghBranch);\n            }\n        } catch (IOException e) {\n            logger.error(\"Error getting GitHub branches.\", e);\n            throw new GitHubException(\"Error getting GitHub branches.\", e);\n        }\n        return rval;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.github.IGitHubSourceConnector#getBranches(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.debug", "java.util.HashSet.<init>", "io.apicurio.hub.api.github.GitHubSourceConnector.githubClient", "org.eclipse.egit.github.core.service.RepositoryService.<init>", "org.eclipse.egit.github.core.service.RepositoryService.getRepository", "org.eclipse.egit.github.core.service.RepositoryService.getBranches", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.api.beans.SourceCodeBranch.<init>", "org.eclipse.egit.github.core.RepositoryBranch.getName", "io.apicurio.hub.api.beans.SourceCodeBranch.setName", "org.eclipse.egit.github.core.RepositoryBranch.getCommit", "org.eclipse.egit.github.core.TypedResource.getSha", "io.apicurio.hub.api.beans.SourceCodeBranch.setCommitId", "java.util.Collection.add", "org.slf4j.Logger.error", "io.apicurio.hub.api.github.GitHubException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], ["org.eclipse.egit.github.core.client.GitHubClient"], ["java.lang.String", "java.lang.String"], ["org.eclipse.egit.github.core.IRepositoryIdProvider"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubSourceConnector.githubClient": "@throws SourceConnectorException"}, {"io.apicurio.hub.api.beans.SourceCodeBranch.setName": "@param name the name to set"}, {"io.apicurio.hub.api.beans.SourceCodeBranch.setCommitId": "@param commitId the commitId to set"}]}, {"index": "1103", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.createPullRequestFromZipContent", "methodParameterType": "String#String#ZipInputStream#", "methodParameterName": "repositoryUrl#commitMessage#generatedContent#", "methodBody": "@Override\n    public String createPullRequestFromZipContent(String repositoryUrl, String commitMessage, ZipInputStream generatedContent) throws SourceConnectorException {\n        logger.debug(\"Creating new pull request from Zip content.\");\n        try {\n            GitHubResource resource = resolver.resolve(repositoryUrl);\n\n            String org = resource.getOrganization();\n            String repo = resource.getRepository();\n            String branch = resource.getBranch();\n            String path = resource.getResourcePath();\n            \n            GitHubPullRequestCreator creator = new GitHubPullRequestCreator(generatedContent, org, repo,\n                    branch, path, commitMessage);\n            creator.setApiUrl(this.getBaseApiEndpointUrl());\n            creator.setToken(getExternalToken());\n            GitHubPullRequest pullRequest = creator.create();\n            return pullRequest.getHtml_url();\n        } catch (Exception e) {\n            logger.error(\"Error creating pull request.\", e);\n            throw new SourceConnectorException(\"Error creating pull request.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.ISourceConnector#createPullRequestFromZipContent(java.lang.String,java.lang.String,java.util.zip.ZipInputStream)", "call_func_name": ["org.slf4j.Logger.debug", "io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "io.apicurio.hub.api.github.GitHubResource.getOrganization", "io.apicurio.hub.api.github.GitHubResource.getRepository", "io.apicurio.hub.api.github.GitHubResource.getBranch", "io.apicurio.hub.api.github.GitHubResource.getResourcePath", "io.apicurio.hub.api.github.GitHubPullRequestCreator.<init>", "io.apicurio.hub.api.github.GitHubSourceConnector.getBaseApiEndpointUrl", "io.apicurio.hub.api.github.GitHubPullRequestCreator.setApiUrl", "io.apicurio.hub.api.github.GitHubSourceConnector.getExternalToken", "io.apicurio.hub.api.github.GitHubPullRequestCreator.setToken", "io.apicurio.hub.api.github.GitHubPullRequestCreator.create", "io.apicurio.hub.api.github.GitHubPullRequest.getHtml_url", "org.slf4j.Logger.error", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.util.zip.ZipInputStream", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubResourceResolver.resolve": "Resolves a github URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.github.GitHubResource.getOrganization": "@return the organization"}, {"io.apicurio.hub.api.github.GitHubResource.getRepository": "@return the repository"}, {"io.apicurio.hub.api.github.GitHubResource.getBranch": "@return the branch"}, {"io.apicurio.hub.api.github.GitHubResource.getResourcePath": "@return the resourcePath"}, {"io.apicurio.hub.api.github.GitHubSourceConnector.getBaseApiEndpointUrl": "@see AbstractSourceConnector#getBaseApiEndpointUrl()"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.setApiUrl": "@param apiUrl the apiUrl to set"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.setToken": "@param token the token to set"}, {"io.apicurio.hub.api.github.GitHubPullRequestCreator.create": "Called to create the pull request.  To accomplish this goal using the GitHub API, the following steps must be taken: 1. Get the \"ref\" for the target branch (need the ref's sha hash) https://developer.github.com/v3/git/refs/#get-a-reference 2. Create a new \"ref\" for the branch we're creating (using the sha hash from step 1) https://developer.github.com/v3/git/refs/#create-a-reference 3. Store all files as Blobs https://developer.github.com/v3/git/blobs/#create-a-blob 4. Fetch the tree for our new branch \"ref\" https://developer.github.com/v3/git/trees/#get-a-tree 5. Create a new tree for our files https://developer.github.com/v3/git/trees/#create-a-tree 6. Create a new commit for our tree https://developer.github.com/v3/git/commits/#create-a-commit 7. Update the new branch ref to point to the new commit SHA https://developer.github.com/v3/git/refs/#update-a-reference 8. Create a pull request https://developer.github.com/v3/pulls/#create-a-pull-request"}, {"io.apicurio.hub.api.github.GitHubPullRequest.getHtml_url": "@return the html_url"}]}, {"index": "1104", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubSourceConnector.java", "methodName": "io.apicurio.hub.api.github.GitHubSourceConnector.addSecurityTo", "methodParameterType": "HttpRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    protected void addSecurityTo(HttpRequest request) throws SourceConnectorException {\n        String idpToken = getExternalToken();\n        request.header(\"Authorization\", \"Bearer \" + idpToken);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.connectors.AbstractSourceConnector#addSecurityTo(com.mashape.unirest.request.HttpRequest)", "call_func_name": ["io.apicurio.hub.api.github.GitHubSourceConnector.getExternalToken", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.mashape.unirest.request.HttpRequest.header"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1105", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateReference.GitHubCreateReference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreateReference() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1106", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateReference.getRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRef() {\n        return ref;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ref", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1107", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateReference.setRef", "methodParameterType": "String#", "methodParameterName": "ref#", "methodBody": "public void setRef(String ref) {\n        this.ref = ref;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param ref the ref to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1108", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateReference.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1109", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateReference.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateReference.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1110", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResourceResolver.java", "methodName": "io.apicurio.hub.api.github.GitHubResourceResolver.GitHubResourceResolver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubResourceResolver() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1111", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResourceResolver.java", "methodName": "io.apicurio.hub.api.github.GitHubResourceResolver.createPatternOrTemplate", "methodParameterType": "String#", "methodParameterName": "suffix#", "methodBody": "private String createPatternOrTemplate(String suffix) {\n        String github = config.getGitHubUrl();\n        if (github == null || github.trim().isEmpty()) {\n            github = \"https://github.com\";\n        }\n        if (github.endsWith(\"/\")) {\n            github = github.substring(0, github.length() - 1);\n        }\n        return github + suffix;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a pattern with the configured GitLab URL as the prefix and the given suffix at the end.", "call_func_name": ["io.apicurio.hub.core.config.HubConfiguration.getGitHubUrl", "java.lang.String.trim", "java.lang.String.isEmpty", "java.lang.String.endsWith", "java.lang.String.length", "java.lang.String.substring", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["int", "int"], [""], ["java.lang.String"], [""]], "passed_comments": [{"io.apicurio.hub.core.config.HubConfiguration.getGitHubUrl": "@return the configured GitHub URL"}]}, {"index": "1112", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResourceResolver.java", "methodName": "io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "methodParameterType": "String#", "methodParameterName": "ghUrl#", "methodBody": "public GitHubResource resolve(String ghUrl) {\n        Matcher matcher = pattern1.matcher(ghUrl);\n        if (!matcher.matches()) {\n            matcher = pattern2.matcher(ghUrl);\n        }\n        \n        if (matcher.matches()) {\n            GitHubResource resource = new GitHubResource();\n            String org = AbstractResourceResolver.decode(matcher.group(1));\n            String repo = AbstractResourceResolver.decode(matcher.group(2));\n            String branch = AbstractResourceResolver.decode(matcher.group(3));\n            String path = AbstractResourceResolver.decode(matcher.group(4));\n            resource.setOrganization(org);\n            resource.setRepository(repo);\n            resource.setBranch(branch);\n            resource.setResourcePath(path);\n            return resource;\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves a github URL into a resource object.  The URL must be of the proper format.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "io.apicurio.hub.api.github.GitHubResource.<init>", "java.util.regex.Matcher.group", "io.apicurio.hub.api.github.AbstractResourceResolver.decode", "io.apicurio.hub.api.github.GitHubResource.setOrganization", "io.apicurio.hub.api.github.GitHubResource.setRepository", "io.apicurio.hub.api.github.GitHubResource.setBranch", "io.apicurio.hub.api.github.GitHubResource.setResourcePath"], "call_func_parameter": [["java.lang.CharSequence"], [""], [""], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.github.AbstractResourceResolver.decode": "Decodes a value (in case the value is URL encoded)."}, {"io.apicurio.hub.api.github.GitHubResource.setOrganization": "@param organization the organization to set"}, {"io.apicurio.hub.api.github.GitHubResource.setRepository": "@param repository the repository to set"}, {"io.apicurio.hub.api.github.GitHubResource.setBranch": "@param branch the branch to set"}, {"io.apicurio.hub.api.github.GitHubResource.setResourcePath": "@param resourcePath the resourcePath to set"}]}, {"index": "1113", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResourceResolver.java", "methodName": "io.apicurio.hub.api.github.GitHubResourceResolver.create", "methodParameterType": "String#String#String#String#", "methodParameterName": "org#repo#branch#resourcePath#", "methodBody": "public String create(String org, String repo, String branch, String resourcePath) {\n        String resource = resourcePath;\n        if (resource == null) {\n            resource = \"\";\n        }\n        if (resource.startsWith(\"/\")) {\n            resource = resource.substring(1);\n        }\n        return template.replace(\":org\", AbstractResourceResolver.encode(org))\n                .replace(\":repo\", AbstractResourceResolver.encode(repo))\n                .replace(\":branch\", AbstractResourceResolver.encode(branch))\n                .replace(\":resource\", resource);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a resource url from the information provided.", "call_func_name": ["java.lang.String.startsWith", "java.lang.String.substring", "io.apicurio.hub.api.github.AbstractResourceResolver.encode", "java.lang.String.replace"], "call_func_parameter": [["java.lang.String"], ["int"], ["java.lang.String"], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "1114", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateBlob.GitHubCreateBlob", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreateBlob() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1115", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateBlob.getContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContent() {\n        return content;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the content", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1116", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateBlob.setContent", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public void setContent(String content) {\n        this.content = content;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param content the content to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1117", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateBlob.setContent", "methodParameterType": "byte[]#", "methodParameterName": "content#", "methodBody": "public void setContent(byte [] content) {\n        this.content = Base64.encodeBase64String(content);\n        this.encoding = \"base64\";\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param content the content to set", "call_func_name": ["org.apache.commons.codec.binary.Base64.encodeBase64String"], "call_func_parameter": [["byte[]"]], "passed_comments": "/"}, {"index": "1118", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateBlob.setContent", "methodParameterType": "InputStream#", "methodParameterName": "content#", "methodBody": "public void setContent(InputStream content) throws IOException {\n        this.content = Base64.encodeBase64String(IOUtils.toByteArray(content));\n        this.encoding = \"base64\";\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param content the content to set", "call_func_name": ["org.apache.commons.io.IOUtils.toByteArray", "org.apache.commons.codec.binary.Base64.encodeBase64String"], "call_func_parameter": [["java.io.InputStream"], ["byte[]"]], "passed_comments": "/"}, {"index": "1119", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateBlob.getEncoding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEncoding() {\n        return encoding;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the encoding", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1120", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreateBlob.java", "methodName": "io.apicurio.hub.api.github.GitHubCreateBlob.setEncoding", "methodParameterType": "String#", "methodParameterName": "encoding#", "methodBody": "public void setEncoding(String encoding) {\n        this.encoding = encoding;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param encoding the encoding to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1121", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.GitHubCreatePullRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubCreatePullRequest() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1122", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.getTitle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTitle() {\n        return title;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the title", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1123", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.setTitle", "methodParameterType": "String#", "methodParameterName": "title#", "methodBody": "public void setTitle(String title) {\n        this.title = title;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param title the title to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1124", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.getHead", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHead() {\n        return head;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the head", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1125", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.setHead", "methodParameterType": "String#", "methodParameterName": "head#", "methodBody": "public void setHead(String head) {\n        this.head = head;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param head the head to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1126", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.getBase", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBase() {\n        return base;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the base", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1127", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.setBase", "methodParameterType": "String#", "methodParameterName": "base#", "methodBody": "public void setBase(String base) {\n        this.base = base;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param base the base to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1128", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.getBody", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBody() {\n        return body;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the body", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1129", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.setBody", "methodParameterType": "String#", "methodParameterName": "body#", "methodBody": "public void setBody(String body) {\n        this.body = body;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param body the body to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1130", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.isMaintainer_can_modify", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMaintainer_can_modify() {\n        return maintainer_can_modify;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the maintainer_can_modify", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1131", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubCreatePullRequest.java", "methodName": "io.apicurio.hub.api.github.GitHubCreatePullRequest.setMaintainer_can_modify", "methodParameterType": "boolean#", "methodParameterName": "maintainer_can_modify#", "methodBody": "public void setMaintainer_can_modify(boolean maintainer_can_modify) {\n        this.maintainer_can_modify = maintainer_can_modify;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param maintainer_can_modify the maintainer_can_modify to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1132", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.GitHubResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubResource() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1133", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.getOrganization", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOrganization() {\n        return organization;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the organization", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1134", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.setOrganization", "methodParameterType": "String#", "methodParameterName": "organization#", "methodBody": "public void setOrganization(String organization) {\n        this.organization = organization;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param organization the organization to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1135", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.getRepository", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRepository() {\n        return repository;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the repository", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1136", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.setRepository", "methodParameterType": "String#", "methodParameterName": "repository#", "methodBody": "public void setRepository(String repository) {\n        this.repository = repository;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param repository the repository to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1137", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.getResourcePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResourcePath() {\n        return resourcePath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resourcePath", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1138", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.setResourcePath", "methodParameterType": "String#", "methodParameterName": "resourcePath#", "methodBody": "public void setResourcePath(String resourcePath) {\n        this.resourcePath = resourcePath;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resourcePath the resourcePath to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1139", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.getBranch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBranch() {\n        return branch;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the branch", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1140", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubResource.java", "methodName": "io.apicurio.hub.api.github.GitHubResource.setBranch", "methodParameterType": "String#", "methodParameterName": "branch#", "methodBody": "public void setBranch(String branch) {\n        this.branch = branch;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param branch the branch to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1141", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubBranchReference.java", "methodName": "io.apicurio.hub.api.github.GitHubBranchReference.GitHubBranchReference", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubBranchReference() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1142", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubBranchReference.java", "methodName": "io.apicurio.hub.api.github.GitHubBranchReference.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1143", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubBranchReference.java", "methodName": "io.apicurio.hub.api.github.GitHubBranchReference.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1144", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTree.java", "methodName": "io.apicurio.hub.api.github.GitHubTree.GitHubTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GitHubTree() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1145", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTree.java", "methodName": "io.apicurio.hub.api.github.GitHubTree.getSha", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSha() {\n        return sha;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sha", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1146", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTree.java", "methodName": "io.apicurio.hub.api.github.GitHubTree.setSha", "methodParameterType": "String#", "methodParameterName": "sha#", "methodBody": "public void setSha(String sha) {\n        this.sha = sha;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sha the sha to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1147", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTree.java", "methodName": "io.apicurio.hub.api.github.GitHubTree.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1148", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTree.java", "methodName": "io.apicurio.hub.api.github.GitHubTree.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1149", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTree.java", "methodName": "io.apicurio.hub.api.github.GitHubTree.getTree", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<GitHubTreeItem> getTree() {\n        return tree;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tree", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1150", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/github/GitHubTree.java", "methodName": "io.apicurio.hub.api.github.GitHubTree.setTree", "methodParameterType": "List<GitHubTreeItem>#", "methodParameterName": "tree#", "methodBody": "public void setTree(List<GitHubTreeItem> tree) {\n        this.tree = tree;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tree the tree to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1151", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/ISourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.ISourceConnector.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedAccountType getType();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the linked account type that this connector supports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1152", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/ISourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.ISourceConnector.validateResourceExists", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "public ApiDesignResourceInfo validateResourceExists(String repositoryUrl) throws NotFoundException, SourceConnectorException, ApiValidationException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Validates that the given repository URL can be resolved to a real resource of an appropriate type.  Ensures that the resource is accessible, reads the resource, extracts some basic information from the content.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1153", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/ISourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.ISourceConnector.getResourceContent", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "public ResourceContent getResourceContent(String repositoryUrl) throws NotFoundException, SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Fetchs the content of a github resource.  Uses the source control API to get access to the actual resource content and returns it as a string.  Should only be used for text resources, for obvious reasons.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1154", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/ISourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.ISourceConnector.updateResourceContent", "methodParameterType": "String#String#String#ResourceContent#", "methodParameterName": "repositoryUrl#commitMessage#commitComment#content#", "methodBody": "public String updateResourceContent(String repositoryUrl, String commitMessage, String commitComment, ResourceContent content) throws SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Updates the raw content for a resource in the source control system using its API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1155", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/ISourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.ISourceConnector.createResourceContent", "methodParameterType": "String#String#String#", "methodParameterName": "repositoryUrl#commitMessage#content#", "methodBody": "public void createResourceContent(String repositoryUrl, String commitMessage, String content) throws SourceConnectorException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a new resource in the source control system with the given content.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1156", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/ISourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.ISourceConnector.createPullRequestFromZipContent", "methodParameterType": "String#String#ZipInputStream#", "methodParameterName": "repositoryUrl#commitMessage#generatedContent#", "methodBody": "public String createPullRequestFromZipContent(String repositoryUrl, String commitMessage,\n            ZipInputStream generatedContent) throws SourceConnectorException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a pull request in GitHub in order to check in all of the content found in the  given ZIP file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1157", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/SourceConnectorFactory.java", "methodName": "io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector", "methodParameterType": "LinkedAccountType#", "methodParameterName": "accountType#", "methodBody": "public ISourceConnector createConnector(LinkedAccountType accountType) throws NotFoundException {\n        if (accountType == LinkedAccountType.GitHub) {\n            return gitHub;\n        }\n\n        if (accountType == LinkedAccountType.GitLab) {\n            return gitLab;\n        }\n\n        if (accountType == LinkedAccountType.Bitbucket) {\n            return bitbucket;\n        }\n\n        throw new NotFoundException();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Creates a connector for a particular type of account (e.g. GitHub, GitLab, etc).", "call_func_name": ["io.apicurio.hub.core.exceptions.NotFoundException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1158", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/SourceConnectorFactory.java", "methodName": "io.apicurio.hub.api.connectors.SourceConnectorFactory.createConnector", "methodParameterType": "String#", "methodParameterName": "repositoryUrl#", "methodBody": "public ISourceConnector createConnector(String repositoryUrl) throws NotFoundException {\n        if (gitHubResolver.resolve(repositoryUrl) != null) {\n            return gitHub;\n        }\n\n        if (gitLabResolver.resolve(repositoryUrl) != null) {\n            return gitLab;\n        }\n\n        if (bitbucketResolver.resolve(repositoryUrl) != null) {\n            return bitbucket;\n        }\n\n        throw new NotFoundException();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Creates a connector for a particular resource URL.  The factory will determine the type of connector based on the URL pattern.", "call_func_name": ["io.apicurio.hub.api.github.GitHubResourceResolver.resolve", "io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve", "io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve", "io.apicurio.hub.core.exceptions.NotFoundException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"io.apicurio.hub.api.github.GitHubResourceResolver.resolve": "Resolves a github URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.gitlab.GitLabResourceResolver.resolve": "Resolves a GitLab URL into a resource object.  The URL must be of the proper format."}, {"io.apicurio.hub.api.bitbucket.BitbucketResourceResolver.resolve": "Resolves a bitbucket URL into a resource object.  The URL must be of the proper format."}]}, {"index": "1159", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/AbstractSourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.AbstractSourceConnector.getBaseApiEndpointUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String getBaseApiEndpointUrl();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the base URL for the source connector's API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1160", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/AbstractSourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.AbstractSourceConnector.addSecurityTo", "methodParameterType": "HttpRequest#", "methodParameterName": "request#", "methodBody": "protected abstract void addSecurityTo(HttpRequest request) throws SourceConnectorException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Adds the appropriate security credentials into the request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1161", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/AbstractSourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.AbstractSourceConnector.getExternalToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected String getExternalToken() throws SourceConnectorException {\n        try {\n            String externalAccessToken = linkedAccountsProvider.getLinkedAccountToken(getType());\n            if (externalAccessToken == null) {\n                return null;\n            }\n            \n            Map<String, String> data = parseExternalTokenResponse(externalAccessToken);\n            return data.get(\"access_token\");\n        } catch (IOException e) {\n            throw new SourceConnectorException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Fetches the external IDP token from Keycloak.  For this to work, the user must have established a linked account with the provider in question (e.g. GitHub).", "call_func_name": ["io.apicurio.hub.api.connectors.AbstractSourceConnector.getType", "io.apicurio.hub.api.security.ILinkedAccountsProvider.getLinkedAccountToken", "io.apicurio.hub.api.connectors.AbstractSourceConnector.parseExternalTokenResponse", "java.util.Map.get", "io.apicurio.hub.api.connectors.SourceConnectorException.<init>"], "call_func_parameter": [[""], ["io.apicurio.hub.core.beans.LinkedAccountType"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.security.ILinkedAccountsProvider.getLinkedAccountToken": "Gets the linked account's access token.  This access token is what is provided by the external system (e.g. GitHub) to be used for secure access to its API.  The returned value is platform-specific but is typically a JSON formatted string."}, {"io.apicurio.hub.api.connectors.AbstractSourceConnector.parseExternalTokenResponse": "Parses the response from the Keycloak \"get external IDP token\" endpoint into a simple  map of values.  A typical response body might be: <pre> access_token=298cc1f917075a955a7bbbff23f67a72e5d6cba7&scope=repo%2Cuser%3Aemail&token_type=bearer </pre>"}]}, {"index": "1162", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/AbstractSourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.AbstractSourceConnector.parseExternalTokenResponse", "methodParameterType": "String#", "methodParameterName": "body#", "methodBody": "protected abstract Map<String, String> parseExternalTokenResponse(String body);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parses the response from the Keycloak \"get external IDP token\" endpoint into a simple  map of values.  A typical response body might be: <pre> access_token=298cc1f917075a955a7bbbff23f67a72e5d6cba7&scope=repo%2Cuser%3Aemail&token_type=bearer </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1163", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/AbstractSourceConnector.java", "methodName": "io.apicurio.hub.api.connectors.AbstractSourceConnector.endpoint", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "protected Endpoint endpoint(String path) {\n        return new Endpoint(getBaseApiEndpointUrl() + path);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#InfixExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a github API endpoint from the api path.", "call_func_name": ["java.lang.StringBuilder.<init>", "io.apicurio.hub.api.connectors.AbstractSourceConnector.getBaseApiEndpointUrl", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""]], "passed_comments": [{"io.apicurio.hub.api.connectors.AbstractSourceConnector.getBaseApiEndpointUrl": "Returns the base URL for the source connector's API."}]}, {"index": "1164", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/SourceConnectorException.java", "methodName": "io.apicurio.hub.api.connectors.SourceConnectorException.SourceConnectorException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public SourceConnectorException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1165", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/SourceConnectorException.java", "methodName": "io.apicurio.hub.api.connectors.SourceConnectorException.SourceConnectorException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public SourceConnectorException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1166", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-api/src/main/java/io/apicurio/hub/api/connectors/SourceConnectorException.java", "methodName": "io.apicurio.hub.api.connectors.SourceConnectorException.SourceConnectorException", "methodParameterType": "Throwable#", "methodParameterName": "cause#", "methodBody": "public SourceConnectorException(Throwable cause) {\n        super(cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1167", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/metrics/MetricsServlet.java", "methodName": "io.apicurio.hub.editing.metrics.MetricsServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#resp#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setStatus(HttpServletResponse.SC_OK);\n        resp.setContentType(TextFormat.CONTENT_TYPE_004);\n        \n        Writer writer = resp.getWriter();\n        try {\n            writer.write(metrics.getCurrentMetricsInfo());\n            writer.flush();\n        } finally {\n            writer.close();\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": ["javax.servlet.http.HttpServletResponse.setStatus", "javax.servlet.http.HttpServletResponse.setContentType", "javax.servlet.http.HttpServletResponse.getWriter", "io.apicurio.hub.core.editing.IEditingMetrics.getCurrentMetricsInfo", "java.io.Writer.write", "java.io.Writer.flush", "java.io.Writer.close"], "call_func_parameter": [["int"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""]], "passed_comments": [{"io.apicurio.hub.core.editing.IEditingMetrics.getCurrentMetricsInfo": "Returns the current state of the metrics.  This information is typically presented via a REST API or servlet."}]}, {"index": "1168", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/EditApiDesignEndpoint.java", "methodName": "io.apicurio.hub.editing.EditApiDesignEndpoint.onOpenSession", "methodParameterType": "Session#", "methodParameterName": "wsSession#", "methodBody": "@OnOpen\n    public void onOpenSession(Session wsSession) {\n        WebsocketSessionContext context = new WebsocketSessionContext(wsSession);\n\n        String designId = context.getPathParameters().get(\"designId\");\n        logger.debug(\"WebSocket opened: {}\", context.getId());\n        logger.debug(\"\\tdesignId: {}\", designId);\n\n        String uuid = context.getQueryParam(\"uuid\");\n        String userId = context.getQueryParam(\"user\");\n        String secret = context.getQueryParam(\"secret\");\n        \n        this.metrics.socketConnected(designId, userId);\n\n        logger.debug(\"\\tdesignId: {}\", designId);\n        logger.debug(\"\\tuuid: {}\", uuid);\n        logger.debug(\"\\tuser: {}\", userId);\n        logger.debug(\"\\tsecret: {}\", secret);\n        \n        IEditingSession editingSession = null;\n\n        try {\n            /*\n                Content version will be the latest FULL document (i.e. rolled up).\n\n                This is determined by the REST API side of the application before WS is invoked.\n\n                See DesignsResource#editDesign in hub-api.\n\n                We must ensure that any subsequent commands that have not been rolled up are applied by the\n                joining client, otherwise we may be unwittingly behind other live participants.\n            */\n            long contentVersion = editingSessionManager.validateSessionUuid(uuid, designId, userId, secret);\n\n            // Join the editing session (or create a new one) for the API Design\n            editingSession = this.editingSessionManager.getOrCreateEditingSession(designId);\n\n            // If no existing sessions, emit metrics event for creating session\n            if (editingSession.isEmpty()) {\n                this.metrics.editingSessionCreated(designId);\n            }\n\n            // Send \"join\" messages for each user already in the session\n            for (ISessionContext otherContext : editingSession.getUserContexts()) {\n                String otherUser = editingSession.getUser(otherContext);\n                editingSession.sendTo(OperationFactory.join(otherUser, otherContext.getId()), context);\n            }\n\n            // Add websocket context to the editing session\n            editingSession.join(context, userId);\n            \n            // Send any commands that have been created since the user asked to join the editing session.\n            List<ApiDesignCommand> commands = this.storage.listAllContentCommands(userId, designId, contentVersion);\n            for (ApiDesignCommand command : commands) {\n                FullCommandOperation operation = OperationFactory.fullCommand(command);\n\n                logger.debug(\"Sending command to client (onOpenSession): {}\", command.getCommand()); // todo tostring instead?\n                \n                editingSession.sendTo(operation, context);\n            }\n            \n            // Send \"join\" message to each user already in the session\n            editingSession.sendToOthers(OperationFactory.join(userId, context.getId()), context);\n        } catch (ServerError | StorageException e) {\n            if (editingSession != null) {\n                editingSession.leave(context);\n            }\n            logger.error(\"Error validating editing session UUID for API Design ID: \" + designId, e);\n            try {\n                context.close(new CloseReason(CloseCodes.CANNOT_ACCEPT, \"Error opening editing session: \" + e.getMessage()));\n            } catch (IOException e1) {\n                logger.error(\"Error closing web socket session (attempted to close due to error validating editing session UUID).\", e1);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Called when a web socket connection is made.  The format for the web socket URL endpoint is: /designs/{designId}?uuid={uuid}&user={user}&secret={secret} The uuid, user, and secret query parameters must be present for a connection to be  successfully made.", "call_func_name": ["io.apicurio.hub.editing.WebsocketSessionContext.<init>", "io.apicurio.hub.editing.WebsocketSessionContext.getPathParameters", "java.util.Map.get", "io.apicurio.hub.editing.WebsocketSessionContext.getId", "org.slf4j.Logger.debug", "io.apicurio.hub.editing.WebsocketSessionContext.getQueryParam", "io.apicurio.hub.core.editing.IEditingMetrics.socketConnected", "io.apicurio.hub.core.editing.IEditingSessionManager.validateSessionUuid", "io.apicurio.hub.core.editing.IEditingSessionManager.getOrCreateEditingSession", "io.apicurio.hub.core.editing.IEditingSession.isEmpty", "io.apicurio.hub.core.editing.IEditingMetrics.editingSessionCreated", "io.apicurio.hub.core.editing.IEditingSession.getUserContexts", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.core.editing.IEditingSession.getUser", "io.apicurio.hub.core.editing.ISessionContext.getId", "io.apicurio.hub.core.editing.ops.OperationFactory.join", "io.apicurio.hub.core.editing.IEditingSession.sendTo", "io.apicurio.hub.core.editing.IEditingSession.join", "io.apicurio.hub.core.storage.IStorage.listAllContentCommands", "java.util.List.iterator", "io.apicurio.hub.core.editing.ops.OperationFactory.fullCommand", "io.apicurio.hub.core.beans.ApiDesignCommand.getCommand", "io.apicurio.hub.core.editing.IEditingSession.sendToOthers", "io.apicurio.hub.core.editing.IEditingSession.leave", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error", "java.lang.Exception.getMessage", "io.apicurio.hub.editing.WebsocketSessionContext.close"], "call_func_parameter": [["javax.websocket.Session"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], [""], [""], ["io.apicurio.hub.core.editing.ISessionContext"], [""], ["java.lang.String", "java.lang.String"], ["io.apicurio.hub.core.editing.ops.BaseOperation", "io.apicurio.hub.core.editing.ISessionContext"], ["io.apicurio.hub.core.editing.ISessionContext", "java.lang.String"], ["java.lang.String", "java.lang.String", "long"], [""], ["io.apicurio.hub.core.beans.ApiDesignCommand"], [""], ["io.apicurio.hub.core.editing.ops.BaseOperation", "io.apicurio.hub.core.editing.ISessionContext"], ["io.apicurio.hub.core.editing.ISessionContext"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], [""], ["javax.websocket.CloseReason"]], "passed_comments": [{"io.apicurio.hub.editing.WebsocketSessionContext.getPathParameters": "@see io.apicurio.hub.core.editing.ISessionContext#getPathParameters()"}, {"io.apicurio.hub.editing.WebsocketSessionContext.getId": "@see io.apicurio.hub.core.editing.ISessionContext#getId()"}, {"io.apicurio.hub.editing.WebsocketSessionContext.getQueryParam": "@see io.apicurio.hub.core.editing.ISessionContext#getQueryParam(java.lang.String)"}, {"io.apicurio.hub.core.editing.IEditingMetrics.socketConnected": "Indicates that a web socket was connected."}, {"io.apicurio.hub.core.editing.IEditingSessionManager.validateSessionUuid": "Called to validate a session UUID.  This confirms that an appropriate entry for the  session exists and then consumes it, ensuring only one client can consume any given UUID."}, {"io.apicurio.hub.core.editing.IEditingSessionManager.getOrCreateEditingSession": "Called to get or create an editing session for a given API Design.  This will either return an existing session or create a new one if one doesn't exist."}, {"io.apicurio.hub.core.editing.IEditingSession.isEmpty": "@return true if the editing session has no more users"}, {"io.apicurio.hub.core.editing.IEditingMetrics.editingSessionCreated": "Indicates that an editing session was created."}, {"io.apicurio.hub.core.editing.IEditingSession.getUserContexts": "Returns the current set of user session contexts."}, {"io.apicurio.hub.core.editing.IEditingSession.getUser": "Resolves the given session context to a user name."}, {"io.apicurio.hub.core.editing.ISessionContext.getId": "@see Session#getId()"}, {"io.apicurio.hub.core.editing.IEditingSession.sendTo": "Sends an operation/message to just the given collaborator."}, {"io.apicurio.hub.core.editing.IEditingSession.join": "Join the session context to this editing session."}, {"io.apicurio.hub.core.storage.IStorage.listAllContentCommands": "Returns a list of commands for a given API design that have been executed since  a specific content version, including reverted commands."}, {"io.apicurio.hub.core.beans.ApiDesignCommand.getCommand": "@return the command"}, {"io.apicurio.hub.core.editing.IEditingSession.sendToOthers": "Sends an operation/message to all collaborators except the one represented by 'exclude'."}, {"io.apicurio.hub.core.editing.IEditingSession.leave": "Removes a session context from this editing session."}, {"io.apicurio.hub.editing.WebsocketSessionContext.close": "@see io.apicurio.hub.core.editing.ISessionContext#close(javax.websocket.CloseReason)"}]}, {"index": "1169", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/EditApiDesignEndpoint.java", "methodName": "io.apicurio.hub.editing.EditApiDesignEndpoint.onMessage", "methodParameterType": "Session#JsonNode#", "methodParameterName": "wsSession#message#", "methodBody": "@OnMessage\n    public void onMessage(Session wsSession, JsonNode message) {\n        WebsocketSessionContext context = new WebsocketSessionContext(wsSession);\n\n        String designId = context.getPathParameters().get(\"designId\");\n        IEditingSession editingSession = editingSessionManager.getEditingSession(designId);\n\n        // Route the call to an appropriate operation handler\n        try {\n            operationProcessor.process(editingSession, context, message);\n        } catch (OperationProcessorException e) {\n            logger.error(e.getLocalizedMessage(), e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Called when a message is received on a web socket connection.  All messages must be of the following (JSON) format: <pre> { \"type\": \"command|...\", \"command\": { &lt;marshalled OAI command goes here> } } </pre>", "call_func_name": ["io.apicurio.hub.editing.WebsocketSessionContext.<init>", "io.apicurio.hub.editing.WebsocketSessionContext.getPathParameters", "java.util.Map.get", "io.apicurio.hub.core.editing.IEditingSessionManager.getEditingSession", "io.apicurio.hub.core.editing.ops.processors.OperationProcessorDispatcher.process", "io.apicurio.hub.core.editing.ops.OperationProcessorException.getLocalizedMessage", "org.slf4j.Logger.error"], "call_func_parameter": [["javax.websocket.Session"], [""], ["java.lang.Object"], ["java.lang.String"], ["io.apicurio.hub.core.editing.IEditingSession", "io.apicurio.hub.core.editing.ISessionContext", "com.fasterxml.jackson.databind.JsonNode"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.editing.WebsocketSessionContext.getPathParameters": "@see io.apicurio.hub.core.editing.ISessionContext#getPathParameters()"}, {"io.apicurio.hub.core.editing.IEditingSessionManager.getEditingSession": "Called to get an editing session for a given API Design.  If no editing session exists for the given design, then null is returned."}, {"io.apicurio.hub.core.editing.ops.processors.OperationProcessorDispatcher.process": "Process a given JSON payload (obtained from the inbound websocket).  This is done by figuring out the type of the payload and then unmarshalling it into a  {@link BaseOperation}."}]}, {"index": "1170", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/EditApiDesignEndpoint.java", "methodName": "io.apicurio.hub.editing.EditApiDesignEndpoint.onCloseSession", "methodParameterType": "Session#CloseReason#", "methodParameterName": "wsSession#reason#", "methodBody": "@OnClose\n    public void onCloseSession(Session wsSession, CloseReason reason) {\n        WebsocketSessionContext context = new WebsocketSessionContext(wsSession);\n\n        String designId = context.getPathParameters().get(\"designId\");\n        logger.debug(\"Closing a WebSocket due to: {}\", reason.getReasonPhrase());\n        logger.debug(\"\\tdesignId: {}\", designId);\n\n        // Call 'leave' on the concurrent editing session for this user\n        IEditingSession editingSession = editingSessionManager.getEditingSession(designId);\n        String userId = editingSession.getUser(context);\n        editingSession.leave(context);\n\n        // Send the 'leave' message to everyone who might still be in the editing session\n        editingSession.sendToOthers(OperationFactory.leave(userId, context.getId()), context);\n\n        // If there are no more websockets connected to the editing session, close it.\n        if (editingSession.isEmpty()) {\n            // TODO race condition - the session may no longer be empty here!\n            editingSessionManager.closeEditingSession(editingSession);\n        }\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called when the websocket session closes.  Used to remove the user from the editing session and to send a \"leave\" message to any active collaborators still connected to the session.", "call_func_name": ["io.apicurio.hub.editing.WebsocketSessionContext.<init>", "io.apicurio.hub.editing.WebsocketSessionContext.getPathParameters", "java.util.Map.get", "javax.websocket.CloseReason.getReasonPhrase", "org.slf4j.Logger.debug", "io.apicurio.hub.core.editing.IEditingSessionManager.getEditingSession", "io.apicurio.hub.core.editing.IEditingSession.getUser", "io.apicurio.hub.core.editing.IEditingSession.leave", "io.apicurio.hub.editing.WebsocketSessionContext.getId", "io.apicurio.hub.core.editing.ops.OperationFactory.leave", "io.apicurio.hub.core.editing.IEditingSession.sendToOthers", "io.apicurio.hub.core.editing.IEditingSession.isEmpty", "io.apicurio.hub.core.editing.IEditingSessionManager.closeEditingSession"], "call_func_parameter": [["javax.websocket.Session"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["io.apicurio.hub.core.editing.ISessionContext"], ["io.apicurio.hub.core.editing.ISessionContext"], [""], ["java.lang.String", "java.lang.String"], ["io.apicurio.hub.core.editing.ops.BaseOperation", "io.apicurio.hub.core.editing.ISessionContext"], [""], ["io.apicurio.hub.core.editing.IEditingSession"]], "passed_comments": [{"io.apicurio.hub.editing.WebsocketSessionContext.getPathParameters": "@see io.apicurio.hub.core.editing.ISessionContext#getPathParameters()"}, {"io.apicurio.hub.core.editing.IEditingSessionManager.getEditingSession": "Called to get an editing session for a given API Design.  If no editing session exists for the given design, then null is returned."}, {"io.apicurio.hub.core.editing.IEditingSession.getUser": "Resolves the given session context to a user name."}, {"io.apicurio.hub.core.editing.IEditingSession.leave": "Removes a session context from this editing session."}, {"io.apicurio.hub.editing.WebsocketSessionContext.getId": "@see io.apicurio.hub.core.editing.ISessionContext#getId()"}, {"io.apicurio.hub.core.editing.IEditingSession.sendToOthers": "Sends an operation/message to all collaborators except the one represented by 'exclude'."}, {"io.apicurio.hub.core.editing.IEditingSession.isEmpty": "@return true if the editing session has no more users"}, {"io.apicurio.hub.core.editing.IEditingSessionManager.closeEditingSession": "Called to close an editing session.  This should be called only when the editing session is empty (has no more participants)."}]}, {"index": "1171", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.WebsocketSessionContext", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "public WebsocketSessionContext(Session session) {\n        this.session = session;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1172", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.getPathParameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Map<String, String> getPathParameters() {\n        return session.getPathParameters();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ISessionContext#getPathParameters()", "call_func_name": ["javax.websocket.Session.getPathParameters"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1173", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.getQueryParam", "methodParameterType": "String#", "methodParameterName": "paramName#", "methodBody": "@Override\n    public String getQueryParam(String paramName) {\n        return this.getQueryParams().get(paramName);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ISessionContext#getQueryParam(java.lang.String)", "call_func_name": ["io.apicurio.hub.editing.WebsocketSessionContext.getQueryParams", "java.util.Map.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.editing.WebsocketSessionContext.getQueryParams": "Parse and return the session's query parameters."}]}, {"index": "1174", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getId() {\n        return session.getId();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ISessionContext#getId()", "call_func_name": ["javax.websocket.Session.getId"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1175", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.getQueryParams", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Map<String, String> getQueryParams() {\n        if (this.queryParams == null) {\n            this.queryParams = parseQueryString(session.getQueryString());\n        }\n        return this.queryParams;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parse and return the session's query parameters.", "call_func_name": ["javax.websocket.Session.getQueryString", "io.apicurio.hub.editing.WebsocketSessionContext.parseQueryString"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.editing.WebsocketSessionContext.parseQueryString": "Parses the query string into a map of params."}]}, {"index": "1176", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.parseQueryString", "methodParameterType": "String#", "methodParameterName": "queryString#", "methodBody": "protected static Map<String, String> parseQueryString(String queryString) {\n        Map<String, String> parsed = new HashMap<>();\n        List<NameValuePair> list = URLEncodedUtils.parse(queryString, StandardCharsets.UTF_8);\n        for (NameValuePair nameValuePair : list) {\n            parsed.put(nameValuePair.getName(), nameValuePair.getValue());\n        }\n        return parsed;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses the query string into a map of params.", "call_func_name": ["java.util.HashMap.<init>", "org.apache.http.client.utils.URLEncodedUtils.parse", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.http.NameValuePair.getName", "org.apache.http.NameValuePair.getValue", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.String", "java.nio.charset.Charset"], [""], [""], [""], [""], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1177", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.sendAsText", "methodParameterType": "String#", "methodParameterName": "serialized#", "methodBody": "@Override\n    public void sendAsText(String serialized) throws IOException {\n        session.getBasicRemote().sendText(serialized);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ISessionContext#sendAsText(java.lang.String)", "call_func_name": ["javax.websocket.Session.getBasicRemote"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1178", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.sendAsText", "methodParameterType": "T#", "methodParameterName": "obj#", "methodBody": "@Override\n    public <T> void sendAsText(T obj) throws IOException {\n        session.getBasicRemote().sendText(JsonUtil.toJson(obj));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ISessionContext#sendAsText(java.lang.Object)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1179", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/WebsocketSessionContext.java", "methodName": "io.apicurio.hub.editing.WebsocketSessionContext.close", "methodParameterType": "CloseReason#", "methodParameterName": "closeReason#", "methodBody": "@Override\n    public void close(CloseReason closeReason) throws IOException {\n        session.close();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.core.editing.ISessionContext#close(javax.websocket.CloseReason)", "call_func_name": ["javax.websocket.Session.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1180", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/sharing/SharingServlet.java", "methodName": "io.apicurio.hub.editing.sharing.SharingServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#resp#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String path = req.getPathInfo();\n        if (path == null) {\n            // TODO respond with an error and a response payload in JSON\n            throw new ServletException(\"Missing path parameter: UUID\");\n        }\n        \n        String uuid = path.replaceAll(\"/\", \"\");\n\n        boolean content = \"true\".equals(req.getParameter(\"content\"));\n        if (content) {\n            doGetContent(resp, uuid);\n        } else {\n            doGetTemplate(resp, uuid);\n        }\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": ["javax.servlet.http.HttpServletRequest.getPathInfo", "javax.servlet.ServletException.<init>", "java.lang.String.replaceAll", "javax.servlet.http.HttpServletRequest.getParameter", "java.lang.String.equals", "io.apicurio.hub.editing.sharing.SharingServlet.doGetContent", "io.apicurio.hub.editing.sharing.SharingServlet.doGetTemplate"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["javax.servlet.http.HttpServletResponse", "java.lang.String"], ["javax.servlet.http.HttpServletResponse", "java.lang.String"]], "passed_comments": [{"io.apicurio.hub.editing.sharing.SharingServlet.doGetContent": "Gets the content for the given sharing UUID."}]}, {"index": "1181", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-editing/src/main/java/io/apicurio/hub/editing/sharing/SharingServlet.java", "methodName": "io.apicurio.hub.editing.sharing.SharingServlet.doGetContent", "methodParameterType": "HttpServletResponse#String#", "methodParameterName": "resp#uuid#", "methodBody": "private void doGetContent(HttpServletResponse resp, String uuid) throws ServletException, IOException {\n        try {\n            ApiDesignContent adc = storage.getLatestContentDocumentForSharing(uuid);\n            if (adc == null) {\n                // TODO respond with an error and a response payload in JSON\n                throw new ServletException(\"Unknown sharing UUID: \" + uuid);\n            }\n            String content = adc.getDocument();\n            \n            resp.setStatus(HttpServletResponse.SC_OK);\n            resp.setContentType(\"application/json\");\n            resp.setCharacterEncoding(StandardCharsets.UTF_8.name());\n\n            try (Writer writer = resp.getWriter()) {\n                writer.write(content);\n                writer.flush();\n            }\n        } catch (StorageException | NotFoundException e) {\n            logger.error(\"Error detected getting content.\", e);\n            throw new ServletException(\"Unknown sharing UUID: \" + uuid);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the content for the given sharing UUID.", "call_func_name": ["io.apicurio.hub.core.storage.IStorage.getLatestContentDocumentForSharing", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "javax.servlet.ServletException.<init>", "io.apicurio.hub.core.beans.ApiDesignContent.getDocument", "javax.servlet.http.HttpServletResponse.setStatus", "javax.servlet.http.HttpServletResponse.setContentType", "java.nio.charset.Charset.name", "javax.servlet.http.HttpServletResponse.setCharacterEncoding", "javax.servlet.http.HttpServletResponse.getWriter", "java.io.Writer.write", "java.io.Writer.flush", "java.io.Writer.close", "java.lang.Throwable.addSuppressed", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["int"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.core.storage.IStorage.getLatestContentDocumentForSharing": "Returns the most recent full content row for the given API Design."}, {"io.apicurio.hub.core.beans.ApiDesignContent.getDocument": "@return the oaiDocument"}]}, {"index": "1182", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Thorntail.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Thorntail.OpenApi2Thorntail", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OpenApi2Thorntail() {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1183", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Thorntail.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateAll", "methodParameterType": "CodegenInfo#StringBuilder#ZipOutputStream#", "methodParameterName": "info#log#zipOutput#", "methodBody": "@Override\n    protected void generateAll(CodegenInfo info, StringBuilder log, ZipOutputStream zipOutput)\n            throws IOException {\n        super.generateAll(info, log, zipOutput);\n        if (!this.isUpdateOnly()) {\n            log.append(\"Generating Dockerfile\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(\"Dockerfile\"));\n            zipOutput.write(generateDockerfile().getBytes());\n            zipOutput.closeEntry();\n\n            log.append(\"Generating openshift-template.yml\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(\"openshift-template.yml\"));\n            zipOutput.write(generateOpenshiftTemplate().getBytes());\n            zipOutput.closeEntry();\n\n            log.append(\"Generating src/main/resources/META-INF/microprofile-config.properties\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(\"src/main/resources/META-INF/microprofile-config.properties\"));\n            zipOutput.write(generateMicroprofileConfigProperties().getBytes());\n            zipOutput.closeEntry();\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.codegen.OpenApi2JaxRs#generateAll(io.apicurio.hub.api.codegen.beans.CodegenInfo,java.lang.StringBuilder,java.util.zip.ZipOutputStream)", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateAll", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.isUpdateOnly", "java.lang.StringBuilder.append", "java.util.zip.ZipEntry.<init>", "java.util.zip.ZipOutputStream.putNextEntry", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateDockerfile", "java.lang.String.getBytes", "java.util.zip.ZipOutputStream.write", "java.util.zip.ZipOutputStream.closeEntry", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateOpenshiftTemplate", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateMicroprofileConfigProperties"], "call_func_parameter": [["io.apicurio.hub.api.codegen.beans.CodegenInfo", "java.lang.StringBuilder", "java.util.zip.ZipOutputStream"], [""], ["java.lang.String"], ["java.lang.String"], ["java.util.zip.ZipEntry"], [""], [""], ["byte[]"], [""], [""], [""]], "passed_comments": [{"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateAll": "Generates all of the content for storage in the ZIP.  Responsible for generating all classes and other resources that make up the generated project."}, {"io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateDockerfile": "Generates the Dockerfile."}, {"io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateOpenshiftTemplate": "Generates the openshift-template.yml file."}, {"io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateMicroprofileConfigProperties": "Generates the microprofile-config.properties file to include in the generated project."}]}, {"index": "1184", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Thorntail.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateDockerfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String generateDockerfile() throws IOException {\n        String template = IOUtils.toString(getResource(\"Dockerfile\"), Charset.forName(\"UTF-8\"));\n        return template.replace(\"$ARTIFACT_ID$\", this.getSettings().artifactId);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#MethodInvocation#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the Dockerfile.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2Thorntail.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.getSettings", "java.lang.String.replace"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"], [""], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "1185", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Thorntail.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateOpenshiftTemplate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String generateOpenshiftTemplate() throws IOException {\n        String template = IOUtils.toString(getResource(\"openshift-template.yml\"), Charset.forName(\"UTF-8\"));\n        return template.replace(\"$ARTIFACT_ID$\", this.getSettings().artifactId);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#MethodInvocation#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the openshift-template.yml file.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2Thorntail.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString", "io.apicurio.hub.api.codegen.OpenApi2Thorntail.getSettings", "java.lang.String.replace"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"], [""], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "1186", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Thorntail.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Thorntail.generateMicroprofileConfigProperties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String generateMicroprofileConfigProperties() throws IOException {\n        String template = IOUtils.toString(getResource(\"microprofile-config.properties\"), Charset.forName(\"UTF-8\"));\n        return template;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the microprofile-config.properties file to include in the generated project.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2Thorntail.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "1187", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/PathItemDetectionVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.PathItemDetectionVisitor.visitPathItem", "methodParameterType": "OasPathItem#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitPathItem(OasPathItem node) {\n        this.isPathItem = true;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitPathItem(io.apicurio.datamodels.openapi.models.OasPathItem)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1188", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/InterfacesVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.InterfacesVisitor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InterfacesVisitor() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1189", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/InterfacesVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.visitPathItem", "methodParameterType": "OasPathItem#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitPathItem(OasPathItem node) {\n        String p = node.getPath();\n        if (!p.startsWith(\"/\")) {\n            p = \"/\" + p;\n        }\n        String[] split = p.split(\"/\");\n        if (ModelUtils.isDefined(split) && split.length > 1) {\n            String firstSegment = split[1];\n            if (ModelUtils.isDefined(firstSegment) && !NodeCompat.equals(firstSegment, \"\") && firstSegment.indexOf(\"{\") == -1) {\n                String iname = this.capitalize(firstSegment) + \"Resource\";\n                this.addPathTo(p, iname);\n                return;\n            }\n        }\n    \n        // Default.\n        this.addPathTo(p, \"RootResource\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitPathItem(io.apicurio.datamodels.openapi.models.OasPathItem)", "call_func_name": ["io.apicurio.datamodels.openapi.models.OasPathItem.getPath", "java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.split", "io.apicurio.datamodels.cmd.util.ModelUtils.isDefined", "io.apicurio.datamodels.compat.NodeCompat.equals", "java.lang.String.indexOf", "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.capitalize", "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.addPathTo"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.capitalize": "Capitalizes a word."}, {"io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.addPathTo": "Adds a path to an interface.  Creates the interface mapping if it doesn't exist yet."}]}, {"index": "1190", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/InterfacesVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.addPathTo", "methodParameterType": "String#String#", "methodParameterName": "path#interfaceName#", "methodBody": "private void addPathTo(String path, String interfaceName) {\n        InterfaceInfo info = this.interfaces.get(interfaceName);\n        if (info == null) {\n            info = new InterfaceInfo();\n            info.name = interfaceName;\n            info.paths = new ArrayList<>();\n            this.interfaces.put(interfaceName, info);\n        }\n\n        info.paths.add(path);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a path to an interface.  Creates the interface mapping if it doesn't exist yet.", "call_func_name": ["java.util.Map.get", "io.apicurio.hub.api.codegen.jaxrs.InterfaceInfo.<init>", "java.util.ArrayList.<init>", "java.util.Map.put", "java.util.List.add"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1191", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/InterfacesVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.capitalize", "methodParameterType": "String#", "methodParameterName": "word#", "methodBody": "private String capitalize(String word) {\n        String cap = word.substring(0, 1).toUpperCase() + word.substring(1);\n        return cap;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Capitalizes a word.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.String.substring", "java.lang.String.toUpperCase", "java.lang.StringBuilder.append", "java.lang.String.substring", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["int", "int"], [""], ["java.lang.String"], ["int"], [""]], "passed_comments": "/"}, {"index": "1192", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.OpenApi2CodegenVisitor", "methodParameterType": "String#List<InterfaceInfo>#", "methodParameterName": "packageName#interfaces#", "methodBody": "public OpenApi2CodegenVisitor(String packageName, List<InterfaceInfo> interfaces) {\n        this.codegenInfo.setName(\"Thorntail API\");\n        this.codegenInfo.setVersion(\"1.0.0\");\n        this.codegenInfo.setInterfaces(new ArrayList<>());\n        this.codegenInfo.setBeans(new ArrayList<>());\n        \n        this.packageName = packageName;\n        for (InterfaceInfo iface : interfaces) {\n            for (String path : iface.paths) {\n                this.interfacesIndex.put(path, iface.name);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1193", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.getCodegenInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenInfo getCodegenInfo() {\n        return this.codegenInfo;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the CodegenInfo object that was created by the visitor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1194", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.createSignature", "methodParameterType": "OasSchema#", "methodParameterName": "node#", "methodBody": "private static String createSignature(OasSchema node) {\n        SchemaSigner signer = new SchemaSigner();\n        Library.visitNode(node, signer);\n        return signer.getSignature();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a unique signature for the given schema.  The signature is used to determine whether two schemas are the same.", "call_func_name": ["io.apicurio.hub.api.codegen.util.SchemaSigner.<init>", "io.apicurio.datamodels.Library.visitNode", "io.apicurio.hub.api.codegen.util.SchemaSigner.getSignature"], "call_func_parameter": [[""], ["io.apicurio.datamodels.core.models.Node", "io.apicurio.datamodels.core.visitors.IVisitor"], [""]], "passed_comments": "/"}, {"index": "1195", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visitInfo", "methodParameterType": "Info#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitInfo(Info node) {\n        this.codegenInfo.setName(node.title);\n        if (node.description != null) {\n            this.codegenInfo.setDescription(node.description);\n        }\n        this.codegenInfo.setVersion(node.version);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitInfo(io.apicurio.datamodels.core.models.common.Info)", "call_func_name": ["io.apicurio.hub.api.codegen.beans.CodegenInfo.setName", "io.apicurio.hub.api.codegen.beans.CodegenInfo.setDescription", "io.apicurio.hub.api.codegen.beans.CodegenInfo.setVersion"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenInfo.setName": "@param name the name to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.setDescription": "@param description the description to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.setVersion": "@param version the version to set"}]}, {"index": "1196", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visitPathItem", "methodParameterType": "OasPathItem#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitPathItem(OasPathItem node) {\n        String p = node.getPath();\n        CodegenJavaInterface cgInterface = this.getOrCreateInterface(p);\n        this._currentInterface = cgInterface;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitPathItem(io.apicurio.datamodels.openapi.models.OasPathItem)", "call_func_name": ["io.apicurio.datamodels.openapi.models.OasPathItem.getPath", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.getOrCreateInterface"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1197", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visitOperation", "methodParameterType": "Operation#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitOperation(Operation node) {\n        OasOperation op = (OasOperation) node;\n        CodegenJavaMethod method = new CodegenJavaMethod();\n        method.setName(this.methodName(op));\n        method.setPath(this.methodPath(op));\n        method.setMethod(node.getType());\n        method.setProduces(new HashSet<>());\n        method.setConsumes(new HashSet<>());\n        method.setArguments(new ArrayList<>());\n        if (node.description != null) { method.setDescription(node.description); }\n\n        // Handle 2.0 \"produces\" and \"consumes\"\n        if (node.ownerDocument().getDocumentType() == DocumentType.openapi2) {\n            List<String> produces = ((Oas20Operation) node).produces;\n            if (produces == null) {\n                produces = ((Oas20Document) node.ownerDocument()).produces;\n            }\n            if (produces != null) {\n                method.setProduces(new HashSet<>(produces));\n            }\n\n            List<String> consumes = ((Oas20Operation) node).consumes;\n            if (consumes == null) {\n                consumes = ((Oas20Document) node.ownerDocument()).consumes;\n            }\n            if (consumes != null) {\n                method.setConsumes(new HashSet<>(consumes));\n            }\n        }\n        \n        boolean async = false;\n        Extension asyncExt = node.getExtension(\"x-codegen-async\");\n        if (asyncExt != null && asyncExt.value != null) {\n            async = Boolean.valueOf(asyncExt.value.toString());\n        }\n        method.setAsync(async);\n\n        this._currentMethod = method;\n        this._currentInterface.getMethods().add(method);\n\n        // Be sure to process path and query parameters found on the parent!\n        this._processPathItemParams = true;\n        List<OasParameter> parentParams = ((OasPathItem) node.parent()).parameters;\n        if (parentParams != null && parentParams.size() > 0) {\n            for (OasParameter parentParam : parentParams) {\n                VisitorUtil.visitNode(parentParam, this);\n            }\n        }\n        this._processPathItemParams = false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitOperation(io.apicurio.datamodels.core.models.common.Operation)", "call_func_name": ["io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.<init>", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.methodName", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setName", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.methodPath", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setPath", "io.apicurio.datamodels.core.models.common.Operation.getType", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setMethod", "java.util.HashSet.<init>", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setProduces", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setConsumes", "java.util.ArrayList.<init>", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setArguments", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setDescription", "io.apicurio.datamodels.core.models.common.Operation.ownerDocument", "io.apicurio.datamodels.core.models.Document.getDocumentType", "java.util.HashSet.<init>", "io.apicurio.datamodels.core.models.common.Operation.getExtension", "java.lang.Object.toString", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setAsync", "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getMethods", "java.util.List.add", "io.apicurio.datamodels.core.models.common.Operation.parent", "java.util.List.size", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.datamodels.core.util.VisitorUtil.visitNode"], "call_func_parameter": [[""], ["io.apicurio.datamodels.openapi.models.OasOperation"], ["java.lang.String"], ["io.apicurio.datamodels.openapi.models.OasOperation"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.util.Set"], ["java.util.Set"], [""], ["java.util.List"], ["java.lang.String"], [""], [""], ["java.util.Collection"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["boolean"], [""], ["java.lang.Object"], [""], [""], [""], [""], [""], ["io.apicurio.datamodels.core.models.Node", "io.apicurio.datamodels.core.visitors.IVisitor"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setName": "@param name the name to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setPath": "@param path the path to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setMethod": "@param method the method to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setProduces": "@param produces the produces to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setConsumes": "@param consumes the consumes to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setArguments": "@param arguments the arguments to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setDescription": "@param description the description to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setAsync": "@param async the async to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getMethods": "@return the methods"}]}, {"index": "1198", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visitParameter", "methodParameterType": "Parameter#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitParameter(Parameter node) {\n        // Skip processing of the parameter if it is defined at the path level.\n        if (!this._processPathItemParams && this.isPathItem(node.parent())) {\n            return;\n        }\n        \n        OasParameter param = (OasParameter) node;\n\n        CodegenJavaArgument cgArgument = new CodegenJavaArgument();\n        cgArgument.setName(param.name);\n        cgArgument.setIn(param.in);\n        cgArgument.setRequired(true);\n        \n        this._currentMethod.getArguments().add(cgArgument);\n        this._currentArgument = cgArgument;\n\n        if (param.required != null) {\n            cgArgument.setRequired(param.required);\n        }\n\n        if (param.ownerDocument().getDocumentType() == DocumentType.openapi2) {\n            this.visit20Parameter((Oas20Parameter) param);\n        }\n        if (param.ownerDocument().getDocumentType() == DocumentType.openapi3) {\n            this.visit30Parameter((Oas30Parameter) param);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#PrefixExpression#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PrefixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitParameter(io.apicurio.datamodels.core.models.common.Parameter)", "call_func_name": ["io.apicurio.datamodels.core.models.common.Parameter.parent", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.isPathItem", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.<init>", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setName", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setIn", "java.lang.Boolean.valueOf", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setRequired", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getArguments", "java.util.List.add", "io.apicurio.datamodels.openapi.models.OasParameter.ownerDocument", "io.apicurio.datamodels.core.models.Document.getDocumentType", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visit20Parameter", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visit30Parameter"], "call_func_parameter": [[""], ["io.apicurio.datamodels.core.models.Node"], [""], ["java.lang.String"], ["java.lang.String"], ["boolean"], ["java.lang.Boolean"], [""], ["java.lang.Object"], [""], [""], ["io.apicurio.datamodels.openapi.v2.models.Oas20Parameter"], ["io.apicurio.datamodels.openapi.v3.models.Oas30Parameter"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setName": "@param name the name to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setIn": "@param in the in to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setRequired": "@param required the required to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getArguments": "@return the arguments"}]}, {"index": "1199", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visitRequestBody", "methodParameterType": "Oas30RequestBody#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitRequestBody(Oas30RequestBody node) {\n        List<Oas30MediaType> mediaTypes = node.getMediaTypes();\n        if (mediaTypes != null && mediaTypes.size() > 0) {\n            Oas30MediaType mediaType = mediaTypes.get(0);\n            CodegenJavaArgument cgArgument = new CodegenJavaArgument();\n            cgArgument.setName(\"data\");\n            cgArgument.setIn(\"body\");\n            cgArgument.setRequired(true);\n            CodegenJavaReturn cgReturn = this.returnFromSchema(mediaType.schema);\n            if (cgReturn != null) {\n                if (cgReturn.getCollection() != null) { cgArgument.setCollection(cgReturn.getCollection()); }\n                if (cgReturn.getType() != null) { cgArgument.setType(cgReturn.getType()); }\n                if (cgReturn.getFormat() != null) { cgArgument.setFormat(cgReturn.getFormat()); }\n            }\n            this._currentArgument = cgArgument;\n            this._currentMethod.getArguments().add(cgArgument);\n        }\n        // Push all of the media types onto the \"consumes\" array for the method.\n        for (Oas30MediaType mt : mediaTypes) {\n            this._currentMethod.getConsumes().add(mt.getName());\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitRequestBody(io.apicurio.datamodels.openapi.v3.models.Oas30RequestBody)", "call_func_name": ["io.apicurio.datamodels.openapi.v3.models.Oas30RequestBody.getMediaTypes", "java.util.List.size", "java.util.List.get", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.<init>", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setName", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setIn", "java.lang.Boolean.valueOf", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setRequired", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.returnFromSchema", "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getCollection", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setCollection", "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getType", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setType", "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getFormat", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setFormat", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getArguments", "java.util.List.add", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getConsumes", "io.apicurio.datamodels.openapi.v3.models.Oas30MediaType.getName", "java.util.Set.add"], "call_func_parameter": [[""], [""], ["int"], [""], ["java.lang.String"], ["java.lang.String"], ["boolean"], ["java.lang.Boolean"], ["io.apicurio.datamodels.openapi.models.OasSchema"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setName": "@param name the name to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setIn": "@param in the in to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setRequired": "@param required the required to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getCollection": "@return the collection"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setCollection": "@param collection the collection to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getType": "@return the type"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setType": "@param type the type to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getFormat": "@return the format"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setFormat": "@param format the format to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getArguments": "@return the arguments"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getConsumes": "@return the consumes"}]}, {"index": "1200", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visitResponse", "methodParameterType": "OasResponse#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitResponse(OasResponse node) {\n        // Note: if there are multiple 2xx responses, only the first one will\n        // become the method return value.\n        if (node.getStatusCode() != null && node.getStatusCode().indexOf(\"2\") == 0 && this._currentMethod.getReturn() == null) {\n            if (node.ownerDocument().getDocumentType() == DocumentType.openapi2) {\n                this.visit20Response((Oas20Response) node);\n            }\n            if (node.ownerDocument().getDocumentType() == DocumentType.openapi3) {\n                this.visit30Response((Oas30Response) node);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitResponse(io.apicurio.datamodels.openapi.models.OasResponse)", "call_func_name": ["io.apicurio.datamodels.openapi.models.OasResponse.getStatusCode", "java.lang.String.indexOf", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getReturn", "io.apicurio.datamodels.openapi.models.OasResponse.ownerDocument", "io.apicurio.datamodels.core.models.Document.getDocumentType", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visit20Response", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visit30Response"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["io.apicurio.datamodels.openapi.v2.models.Oas20Response"], ["io.apicurio.datamodels.openapi.v3.models.Oas30Response"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getReturn": "@return the _return"}]}, {"index": "1201", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.visitSchemaDefinition", "methodParameterType": "IDefinition#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitSchemaDefinition(IDefinition node) {\n        String name = node.getName();\n        OasSchema schema = (OasSchema) node;\n        \n        CodegenJavaBean bean = new CodegenJavaBean();\n        bean.setName(name);\n        bean.setPackage(CodegenUtil.schemaToPackageName(schema, this.packageName + \".beans\"));\n        bean.set$schema((JsonNode) Library.writeNode((Node) schema));\n        bean.setSignature(createSignature(schema));\n\n        this.codegenInfo.getBeans().add(bean);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#StringLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedVisitorAdapter#visitSchemaDefinition(io.apicurio.datamodels.core.models.common.IDefinition)", "call_func_name": ["io.apicurio.datamodels.core.models.common.IDefinition.getName", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.<init>", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.codegen.util.CodegenUtil.schemaToPackageName", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setPackage", "io.apicurio.datamodels.Library.writeNode", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.createSignature", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setSignature", "io.apicurio.hub.api.codegen.beans.CodegenInfo.getBeans", "java.util.List.add"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["io.apicurio.datamodels.openapi.models.OasSchema", "java.lang.String"], ["java.lang.String"], ["io.apicurio.datamodels.core.models.Node"], ["io.apicurio.datamodels.openapi.models.OasSchema"], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setName": "@param name the name to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setPackage": "@param _package the _package to set"}, {"io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.createSignature": "Creates a unique signature for the given schema.  The signature is used to determine whether two schemas are the same."}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setSignature": "@param signature the signature to set"}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.getBeans": "@return the beans"}]}, {"index": "1202", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.capitalize", "methodParameterType": "String#", "methodParameterName": "word#", "methodBody": "private String capitalize(String word) {\n        if (word == null || word.trim().length() == 0) {\n            return \"\";\n        }\n        return word.substring(0, 1).toUpperCase() + word.substring(1);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Capitalizes a word.", "call_func_name": ["java.lang.String.trim", "java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.String.substring", "java.lang.String.toUpperCase", "java.lang.StringBuilder.append", "java.lang.String.substring", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["int", "int"], [""], ["java.lang.String"], ["int"], [""]], "passed_comments": "/"}, {"index": "1203", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/jaxrs/OpenApi2CodegenVisitor.java", "methodName": "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.decapitalize", "methodParameterType": "String#", "methodParameterName": "word#", "methodBody": "private String decapitalize(String word) {\n        if (word == null || word.trim().length() == 0) {\n            return \"\";\n        }\n        return word.substring(0, 1).toLowerCase() + word.substring(1);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "De-capitalizes a word.", "call_func_name": ["java.lang.String.trim", "java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.String.substring", "java.lang.String.toLowerCase", "java.lang.StringBuilder.append", "java.lang.String.substring", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["int", "int"], [""], ["java.lang.String"], ["int"], [""]], "passed_comments": "/"}, {"index": "1204", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.CodegenJavaMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenJavaMethod() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1205", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1206", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1207", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1208", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1209", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMethod() {\n        return method;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the method", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1210", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setMethod", "methodParameterType": "String#", "methodParameterName": "method#", "methodBody": "public void setMethod(String method) {\n        this.method = method;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param method the method to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1211", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getProduces", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getProduces() {\n        return produces;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the produces", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1212", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setProduces", "methodParameterType": "Set<String>#", "methodParameterName": "produces#", "methodBody": "public void setProduces(Set<String> produces) {\n        this.produces = produces;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param produces the produces to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1213", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getConsumes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getConsumes() {\n        return consumes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the consumes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1214", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setConsumes", "methodParameterType": "Set<String>#", "methodParameterName": "consumes#", "methodBody": "public void setConsumes(Set<String> consumes) {\n        this.consumes = consumes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param consumes the consumes to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1215", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getArguments", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<CodegenJavaArgument> getArguments() {\n        return arguments;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the arguments", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1216", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setArguments", "methodParameterType": "List<CodegenJavaArgument>#", "methodParameterName": "arguments#", "methodBody": "public void setArguments(List<CodegenJavaArgument> arguments) {\n        this.arguments = arguments;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param arguments the arguments to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1217", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getReturn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenJavaReturn getReturn() {\n        return _return;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the _return", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1218", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setReturn", "methodParameterType": "CodegenJavaReturn#", "methodParameterName": "_return#", "methodBody": "public void setReturn(CodegenJavaReturn _return) {\n        this._return = _return;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param _return the _return to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1219", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1220", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1221", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.isAsync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAsync() {\n        return async;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the async", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1222", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaMethod.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.setAsync", "methodParameterType": "boolean#", "methodParameterName": "async#", "methodBody": "public void setAsync(boolean async) {\n        this.async = async;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param async the async to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1223", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaReturn.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.CodegenJavaReturn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenJavaReturn() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1224", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaReturn.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getCollection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCollection() {\n        return collection;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the collection", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1225", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaReturn.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.setCollection", "methodParameterType": "String#", "methodParameterName": "collection#", "methodBody": "public void setCollection(String collection) {\n        this.collection = collection;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param collection the collection to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1226", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaReturn.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1227", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaReturn.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.setType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public void setType(String type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1228", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaReturn.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormat() {\n        return format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1229", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaReturn.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.setFormat", "methodParameterType": "String#", "methodParameterName": "format#", "methodBody": "public void setFormat(String format) {\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param format the format to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1230", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.CodegenJavaBean", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenJavaBean() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1231", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getPackage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPackage() {\n        return _package;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the _package", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1232", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setPackage", "methodParameterType": "String#", "methodParameterName": "_package#", "methodBody": "public void setPackage(String _package) {\n        this._package = _package;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param _package the _package to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1233", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1234", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1235", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.get$schema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JsonNode get$schema() {\n        return $schema;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the $schema", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1236", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.set$schema", "methodParameterType": "JsonNode#", "methodParameterName": "$schema#", "methodBody": "public void set$schema(JsonNode $schema) {\n        this.$schema = $schema;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param $schema the $schema to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1237", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getSignature", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSignature() {\n        return signature;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the signature", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1238", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaBean.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.setSignature", "methodParameterType": "String#", "methodParameterName": "signature#", "methodBody": "public void setSignature(String signature) {\n        this.signature = signature;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param signature the signature to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1239", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.CodegenJavaArgument", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenJavaArgument() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1240", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1241", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1242", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getIn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getIn() {\n        return in;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the in", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1243", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setIn", "methodParameterType": "String#", "methodParameterName": "in#", "methodBody": "public void setIn(String in) {\n        this.in = in;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param in the in to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1244", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getCollection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCollection() {\n        return collection;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the collection", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1245", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setCollection", "methodParameterType": "String#", "methodParameterName": "collection#", "methodBody": "public void setCollection(String collection) {\n        this.collection = collection;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param collection the collection to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1246", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1247", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public void setType(String type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1248", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormat() {\n        return format;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1249", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setFormat", "methodParameterType": "String#", "methodParameterName": "format#", "methodBody": "public void setFormat(String format) {\n        this.format = format;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param format the format to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1250", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getRequired", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Boolean getRequired() {\n        return required;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the required", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1251", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setRequired", "methodParameterType": "Boolean#", "methodParameterName": "required#", "methodBody": "public void setRequired(Boolean required) {\n        this.required = required;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param required the required to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1252", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getTypeSignature", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTypeSignature() {\n        return typeSignature;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the typeSignature", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1253", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaArgument.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.setTypeSignature", "methodParameterType": "String#", "methodParameterName": "typeSignature#", "methodBody": "public void setTypeSignature(String typeSignature) {\n        this.typeSignature = typeSignature;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param typeSignature the typeSignature to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1254", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.CodegenJavaInterface", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenJavaInterface() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1255", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPackage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPackage() {\n        return _package;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the _package", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1256", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.setPackage", "methodParameterType": "String#", "methodParameterName": "_package#", "methodBody": "public void setPackage(String _package) {\n        this._package = _package;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param _package the _package to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1257", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1258", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1259", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1260", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.setPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public void setPath(String path) {\n        this.path = path;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the path to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1261", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getMethods", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<CodegenJavaMethod> getMethods() {\n        return methods;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the methods", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1262", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenJavaInterface.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.setMethods", "methodParameterType": "List<CodegenJavaMethod>#", "methodParameterName": "methods#", "methodBody": "public void setMethods(List<CodegenJavaMethod> methods) {\n        this.methods = methods;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param methods the methods to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1263", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.CodegenInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CodegenInfo() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1264", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.getInterfaces", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<CodegenJavaInterface> getInterfaces() {\n        return interfaces;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the interfaces", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1265", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.setInterfaces", "methodParameterType": "List<CodegenJavaInterface>#", "methodParameterName": "interfaces#", "methodBody": "public void setInterfaces(List<CodegenJavaInterface> interfaces) {\n        this.interfaces = interfaces;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param interfaces the interfaces to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1266", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.getBeans", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<CodegenJavaBean> getBeans() {\n        return beans;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the beans", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1267", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.setBeans", "methodParameterType": "List<CodegenJavaBean>#", "methodParameterName": "beans#", "methodBody": "public void setBeans(List<CodegenJavaBean> beans) {\n        this.beans = beans;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param beans the beans to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1268", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1269", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1270", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1271", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1272", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.getVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVersion() {\n        return version;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the version", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1273", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/beans/CodegenInfo.java", "methodName": "io.apicurio.hub.api.codegen.beans.CodegenInfo.setVersion", "methodParameterType": "String#", "methodParameterName": "version#", "methodBody": "public void setVersion(String version) {\n        this.version = version;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param version the version to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1274", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.SchemaSigner", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SchemaSigner() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1275", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema", "methodParameterType": "Schema#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitSchema(Schema node) {\n        OasSchema schema = (OasSchema) node;\n        // Right now we only support simple types.\n        if (schema.type != null && !schema.type.equals(\"object\") && !schema.type.equals(\"array\") && schema.$ref == null) {\n            // Type\n            this.sigSource.append(\"TYPE:\");\n            this.sigSource.append(schema.type);\n            // Format\n            if (schema.format != null) {\n                this.sigSource.append(\"|FORMAT:\");\n                this.sigSource.append(schema.format);\n            }\n            // Enum\n            if (schema.enum_ != null && schema.enum_.size() > 0) {\n                this.sigSource.append(\"|ENUM:\");\n                String[] options = schema.enum_.toArray(new String[schema.enum_.size()]);\n                Arrays.sort(options);\n                for (String option : options) {\n                    this.sigSource.append(option);\n                    this.sigSource.append(\",\");\n                }\n            }\n            \n\n            // Max\n            if (schema.maximum != null) {\n                this.sigSource.append(\"|MAX:\");\n                this.sigSource.append(schema.maximum);\n            }\n            // Max Items\n            if (schema.maxItems != null) {\n                this.sigSource.append(\"|MAXITEMS:\");\n                this.sigSource.append(schema.maxItems);\n            }\n            // Max Length\n            if (schema.maxLength != null) {\n                this.sigSource.append(\"|MAXLENGTH:\");\n                this.sigSource.append(schema.maxLength);\n            }\n            // Min\n            if (schema.minimum != null) {\n                this.sigSource.append(\"|MIN:\");\n                this.sigSource.append(schema.minimum);\n            }\n            // Min Items\n            if (schema.minItems != null) {\n                this.sigSource.append(\"|MINITEMS:\");\n                this.sigSource.append(schema.minItems);\n            }\n            // Min Length\n            if (schema.minLength != null) {\n                this.sigSource.append(\"|MINLENGTH:\");\n                this.sigSource.append(schema.minLength);\n            }\n            // Min Properties\n            if (schema.minProperties != null) {\n                this.sigSource.append(\"|MINPROPS:\");\n                this.sigSource.append(schema.minProperties);\n            }\n            // Multiple Of\n            if (schema.multipleOf != null) {\n                this.sigSource.append(\"|MULTIPLEOF:\");\n                this.sigSource.append(schema.multipleOf);\n            }\n            // Pattern\n            if (schema.pattern != null) {\n                this.sigSource.append(\"|PATTERN:\");\n                this.sigSource.append(schema.pattern);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitSchema(io.apicurio.datamodels.core.models.common.Schema)", "call_func_name": ["java.lang.String.equals", "java.lang.StringBuilder.append", "java.util.List.size", "java.util.List.toArray", "java.util.Arrays.sort", "java.lang.StringBuilder.append"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.Object[]"], ["java.lang.Object[]"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1276", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitAdditionalPropertiesSchema", "methodParameterType": "OasSchema#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitAdditionalPropertiesSchema(OasSchema node) {\n        this.visitSchema(node);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitAdditionalPropertiesSchema(io.apicurio.datamodels.openapi.models.OasSchema)", "call_func_name": ["io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema"], "call_func_parameter": [["io.apicurio.datamodels.core.models.common.Schema"]], "passed_comments": [{"io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitSchema(io.apicurio.datamodels.core.models.common.Schema)"}]}, {"index": "1277", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitAllOfSchema", "methodParameterType": "OasSchema#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitAllOfSchema(OasSchema node) {\n        this.visitSchema(node);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitAllOfSchema(io.apicurio.datamodels.openapi.models.OasSchema)", "call_func_name": ["io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema"], "call_func_parameter": [["io.apicurio.datamodels.core.models.common.Schema"]], "passed_comments": [{"io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitSchema(io.apicurio.datamodels.core.models.common.Schema)"}]}, {"index": "1278", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitAnyOfSchema", "methodParameterType": "Oas30AnyOfSchema#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitAnyOfSchema(Oas30AnyOfSchema node) {\n        this.visitSchema(node);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitAnyOfSchema(io.apicurio.datamodels.openapi.v3.models.Oas30Schema.Oas30AnyOfSchema)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1279", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitItemsSchema", "methodParameterType": "OasSchema#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitItemsSchema(OasSchema node) {\n        this.visitSchema(node);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitItemsSchema(io.apicurio.datamodels.openapi.models.OasSchema)", "call_func_name": ["io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema"], "call_func_parameter": [["io.apicurio.datamodels.core.models.common.Schema"]], "passed_comments": [{"io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitSchema(io.apicurio.datamodels.core.models.common.Schema)"}]}, {"index": "1280", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchemaDefinition", "methodParameterType": "IDefinition#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitSchemaDefinition(IDefinition node) {\n        this.visitSchema((OasSchema) node);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitSchemaDefinition(io.apicurio.datamodels.core.models.common.IDefinition)", "call_func_name": ["io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema"], "call_func_parameter": [["io.apicurio.datamodels.core.models.common.Schema"]], "passed_comments": [{"io.apicurio.hub.api.codegen.util.SchemaSigner.visitSchema": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitSchema(io.apicurio.datamodels.core.models.common.Schema)"}]}, {"index": "1281", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitNotSchema", "methodParameterType": "Oas30NotSchema#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitNotSchema(Oas30NotSchema node) {\n        this.visitSchema(node);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitNotSchema(io.apicurio.datamodels.openapi.v3.models.Oas30Schema.Oas30NotSchema)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1282", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/SchemaSigner.java", "methodName": "io.apicurio.hub.api.codegen.util.SchemaSigner.visitOneOfSchema", "methodParameterType": "Oas30OneOfSchema#", "methodParameterName": "node#", "methodBody": "@Override\n    public void visitOneOfSchema(Oas30OneOfSchema node) {\n        this.visitSchema(node);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.datamodels.combined.visitors.CombinedAllNodeVisitor#visitOneOfSchema(io.apicurio.datamodels.openapi.v3.models.Oas30Schema.Oas30OneOfSchema)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1283", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/IndexedCodeWriter.java", "methodName": "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.IndexedCodeWriter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public IndexedCodeWriter() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1284", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/IndexedCodeWriter.java", "methodName": "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.openBinary", "methodParameterType": "JPackage#String#", "methodParameterName": "pkg#fileName#", "methodBody": "@Override\n    public OutputStream openBinary(JPackage pkg, String fileName) throws IOException {\n        String fullname = pkg.name() + \".\" + fileName;\n        fullname = fullname.replace(\".java\", \"\");\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        this.index.put(fullname, stream);\n        return stream;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see com.sun.codemodel.CodeWriter#openBinary(com.sun.codemodel.JPackage,java.lang.String)", "call_func_name": ["java.lang.StringBuilder.<init>", "com.sun.codemodel.JPackage.name", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.replace", "java.io.ByteArrayOutputStream.<init>", "java.util.Map.put"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.CharSequence", "java.lang.CharSequence"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1285", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/IndexedCodeWriter.java", "methodName": "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void close() throws IOException {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see com.sun.codemodel.CodeWriter#close()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1286", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/IndexedCodeWriter.java", "methodName": "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.get", "methodParameterType": "String#", "methodParameterName": "className#", "methodBody": "public String get(String className) throws IOException {\n        if (this.index.containsKey(className)) {\n            return this.index.get(className).toString(\"UTF-8\");\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the content produced for a given filename.", "call_func_name": ["java.util.Map.containsKey", "java.util.Map.get", "java.io.ByteArrayOutputStream.toString"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1287", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/util/IndexedCodeWriter.java", "methodName": "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.getKeys", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getKeys() {\n        return this.index.keySet();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the keys.", "call_func_name": ["java.util.Map.keySet"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1288", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/JaxRsEnumRule.java", "methodName": "io.apicurio.hub.api.codegen.JaxRsEnumRule.apply", "methodParameterType": "String#JsonNode#JsonNode#JClassContainer#Schema#", "methodParameterName": "nodeName#node#parent#container#schema#", "methodBody": "@Override\n    public JType apply(String nodeName, JsonNode node, JsonNode parent, JClassContainer container,\n            Schema schema) {\n\n        JDefinedClass _enum;\n        try {\n            _enum = createEnum(node, nodeName, container);\n        } catch (ClassAlreadyExistsException e) {\n            return e.getExistingClass();\n        }\n\n        schema.setJavaTypeIfEmpty(_enum);\n\n        if (node.has(\"javaInterfaces\")) {\n            addInterfaces(_enum, node.get(\"javaInterfaces\"));\n        }\n        \n        // copy our node; remove the javaType as it will throw off the TypeRule for our case\n        ObjectNode typeNode = (ObjectNode)node.deepCopy();\n        typeNode.remove(\"javaType\");\n\n        // If type is specified on the enum, get a type rule for it.  Otherwise, we're a string.\n        // (This is different from the default of Object, which is why we don't do this for every case.)\n        JType backingType = node.has(\"type\") ? \n                ruleFactory.getTypeRule().apply(nodeName, typeNode, parent, container, schema) :\n                container.owner().ref(String.class);\n        \n        JFieldVar valueField = addValueField(_enum, backingType);\n        \n        // override toString only if we have a sensible string to return\n        if(isString(backingType)){\n            addToString(_enum, valueField);\n        }\n        \n        addValueMethod(_enum, valueField);\n        \n        addEnumConstants(node.path(\"enum\"), _enum, node.path(\"javaEnumNames\"), backingType);\n        addFactoryMethod(_enum, backingType);\n\n        return _enum;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Applies this schema rule to take the required code generation steps. <p> A Java  {@link Enum} is created, with constants for each of the enumvalues present in the schema. The enum name is derived from the nodeName, and the enum type itself is created as an inner class of the owning type. In the rare case that no owning type exists (the enum is the root of the schema), then the enum becomes a public class in its own right. <p> The actual JSON value for each enum constant is held in a property called \"value\" in the generated type. A static factory method <code>fromValue(String)</code> is added to the generated enum, and the methods are annotated to allow Jackson to marshal/unmarshal values correctly.", "call_func_name": ["io.apicurio.hub.api.codegen.JaxRsEnumRule.createEnum", "org.jsonschema2pojo.exception.ClassAlreadyExistsException.getExistingClass", "org.jsonschema2pojo.Schema.setJavaTypeIfEmpty", "com.fasterxml.jackson.databind.JsonNode.has", "com.fasterxml.jackson.databind.JsonNode.get", "io.apicurio.hub.api.codegen.JaxRsEnumRule.addInterfaces", "com.fasterxml.jackson.databind.JsonNode.deepCopy", "com.fasterxml.jackson.databind.node.ObjectNode.remove", "org.jsonschema2pojo.rules.RuleFactory.getTypeRule", "org.jsonschema2pojo.rules.Rule.apply", "com.sun.codemodel.JClassContainer.owner", "com.sun.codemodel.JCodeModel.ref", "io.apicurio.hub.api.codegen.JaxRsEnumRule.addValueField", "io.apicurio.hub.api.codegen.JaxRsEnumRule.isString", "io.apicurio.hub.api.codegen.JaxRsEnumRule.addToString", "io.apicurio.hub.api.codegen.JaxRsEnumRule.addValueMethod", "com.fasterxml.jackson.databind.JsonNode.path", "io.apicurio.hub.api.codegen.JaxRsEnumRule.addEnumConstants", "io.apicurio.hub.api.codegen.JaxRsEnumRule.addFactoryMethod"], "call_func_parameter": [["com.fasterxml.jackson.databind.JsonNode", "java.lang.String", "com.sun.codemodel.JClassContainer"], [""], ["com.sun.codemodel.JType"], ["java.lang.String"], ["java.lang.String"], ["com.sun.codemodel.JDefinedClass", "com.fasterxml.jackson.databind.JsonNode"], [""], ["java.lang.String"], [""], ["java.lang.String", "com.fasterxml.jackson.databind.JsonNode", "com.fasterxml.jackson.databind.JsonNode", "java.lang.Object", "org.jsonschema2pojo.Schema"], [""], ["java.lang.Class"], ["com.sun.codemodel.JDefinedClass", "com.sun.codemodel.JType"], ["com.sun.codemodel.JType"], ["com.sun.codemodel.JDefinedClass", "com.sun.codemodel.JFieldVar"], ["com.sun.codemodel.JDefinedClass", "com.sun.codemodel.JFieldVar"], ["java.lang.String"], ["com.fasterxml.jackson.databind.JsonNode", "com.sun.codemodel.JDefinedClass", "com.fasterxml.jackson.databind.JsonNode", "com.sun.codemodel.JType"], ["com.sun.codemodel.JDefinedClass", "com.sun.codemodel.JType"]], "passed_comments": "/"}, {"index": "1289", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Quarkus.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Quarkus.OpenApi2Quarkus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OpenApi2Quarkus() {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1290", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Quarkus.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateAll", "methodParameterType": "CodegenInfo#StringBuilder#ZipOutputStream#", "methodParameterName": "info#log#zipOutput#", "methodBody": "@Override\n    protected void generateAll(CodegenInfo info, StringBuilder log, ZipOutputStream zipOutput)\n            throws IOException {\n        super.generateAll(info, log, zipOutput);\n        if (!this.isUpdateOnly() && !this.settings.codeOnly) {\n            log.append(\"Generating Dockerfiles\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(\"src/main/docker/Dockerfile.jvm\"));\n            zipOutput.write(generateDockerfileJvm().getBytes());\n            zipOutput.closeEntry();\n            zipOutput.putNextEntry(new ZipEntry(\"src/main/docker/Dockerfile.native\"));\n            zipOutput.write(generateDockerfileNative().getBytes());\n            zipOutput.closeEntry();\n\n            log.append(\"Generating application.properties\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(\"src/main/resources/application.properties\"));\n            zipOutput.write(generateApplicationProperties().getBytes());\n            zipOutput.closeEntry();\n\n            log.append(\"Generating src/main/resources/META-INF/microprofile-config.properties\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(\"src/main/resources/META-INF/microprofile-config.properties\"));\n            zipOutput.write(generateMicroprofileConfigProperties().getBytes());\n            zipOutput.closeEntry();\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.codegen.OpenApi2JaxRs#generateAll(io.apicurio.hub.api.codegen.beans.CodegenInfo,java.lang.StringBuilder,java.util.zip.ZipOutputStream)", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateAll", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.isUpdateOnly", "java.lang.StringBuilder.append", "java.util.zip.ZipEntry.<init>", "java.util.zip.ZipOutputStream.putNextEntry", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateDockerfileJvm", "java.lang.String.getBytes", "java.util.zip.ZipOutputStream.write", "java.util.zip.ZipOutputStream.closeEntry", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateDockerfileNative", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateApplicationProperties", "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateMicroprofileConfigProperties"], "call_func_parameter": [["io.apicurio.hub.api.codegen.beans.CodegenInfo", "java.lang.StringBuilder", "java.util.zip.ZipOutputStream"], [""], ["java.lang.String"], ["java.lang.String"], ["java.util.zip.ZipEntry"], [""], [""], ["byte[]"], [""], [""], [""], [""]], "passed_comments": [{"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateAll": "Generates all of the content for storage in the ZIP.  Responsible for generating all classes and other resources that make up the generated project."}, {"io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateDockerfileJvm": "Generates Dockerfile.jvm."}, {"io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateDockerfileNative": "Generates Dockerfile.native."}, {"io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateApplicationProperties": "Generates the openshift-template.yml file."}, {"io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateMicroprofileConfigProperties": "Generates the microprofile-config.properties file to include in the generated project."}]}, {"index": "1291", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Quarkus.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateJaxRsApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    protected String generateJaxRsApplication() throws IOException {\n        // Don't need one of these for Quarkus.\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see io.apicurio.hub.api.codegen.OpenApi2JaxRs#generateJaxRsApplication()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1292", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Quarkus.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateDockerfileJvm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String generateDockerfileJvm() throws IOException {\n        String template = IOUtils.toString(getResource(\"src/main/docker/Dockerfile.jvm\"), Charset.forName(\"UTF-8\"));\n        return template;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates Dockerfile.jvm.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2Quarkus.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "1293", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Quarkus.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateDockerfileNative", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String generateDockerfileNative() throws IOException {\n        String template = IOUtils.toString(getResource(\"src/main/docker/Dockerfile.native\"), Charset.forName(\"UTF-8\"));\n        return template;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates Dockerfile.native.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2Quarkus.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "1294", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Quarkus.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateApplicationProperties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String generateApplicationProperties() throws IOException {\n        String template = IOUtils.toString(getResource(\"src/main/resources/application.properties\"), Charset.forName(\"UTF-8\"));\n        return template;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the openshift-template.yml file.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2Quarkus.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "1295", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2Quarkus.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2Quarkus.generateMicroprofileConfigProperties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String generateMicroprofileConfigProperties() throws IOException {\n        String template = IOUtils.toString(getResource(\"src/main/resources/META-INF/microprofile-config.properties\"), Charset.forName(\"UTF-8\"));\n        return template;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the microprofile-config.properties file to include in the generated project.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2Quarkus.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "1296", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.OpenApi2JaxRs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OpenApi2JaxRs() {\n        this.settings = new JaxRsProjectSettings();\n        this.settings.artifactId = \"generated-api\";\n        this.settings.groupId = \"org.example.api\";\n        this.settings.javaPackage = \"org.example.api\";\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1297", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setSettings", "methodParameterType": "JaxRsProjectSettings#", "methodParameterName": "settings#", "methodBody": "public void setSettings(JaxRsProjectSettings settings) {\n        this.settings = settings;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure the settings.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1298", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public void setOpenApiDocument(String content) {\n        this.openApiDoc = content;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the OpenAPI document.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1299", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument", "methodParameterType": "URL#", "methodParameterName": "url#", "methodBody": "public void setOpenApiDocument(URL url) throws IOException {\n        try (InputStream is = url.openStream()) {\n            this.setOpenApiDocument(is);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Sets the OpenAPI document via a URL to the content.", "call_func_name": ["java.net.URL.openStream", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], ["java.io.InputStream"], [""], ["java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument": "Sets the OpenAPI document via an input stream.  The stream must be closed by the caller."}]}, {"index": "1300", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setOpenApiDocument", "methodParameterType": "InputStream#", "methodParameterName": "stream#", "methodBody": "public void setOpenApiDocument(InputStream stream) throws IOException {\n        this.openApiDoc = IOUtils.toString(stream, Charset.forName(\"UTF-8\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the OpenAPI document via an input stream.  The stream must be closed by the caller.", "call_func_name": ["java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString"], "call_func_parameter": [["java.lang.String"], ["java.io.InputStream", "java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "1301", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generate", "methodParameterType": "OutputStream#", "methodParameterName": "output#", "methodBody": "public final void generate(OutputStream output) throws IOException {\n        StringBuilder log = new StringBuilder();\n\n        try (ZipOutputStream zos = new ZipOutputStream(output)) {\n            try {\n                CodegenInfo info = getInfoFromApiDoc();\n                generateAll(info, log, zos);\n            } catch (Exception e) {\n                // If we get an error, put an PROJECT_GENERATION_ERROR file into the ZIP.\n                zos.putNextEntry(new ZipEntry(\"PROJECT_GENERATION_FAILED.txt\"));\n                zos.write(\"An unexpected server error was encountered while generating the project.  See\\r\\n\".getBytes());\n                zos.write(\"the details of the error below.\\r\\n\\r\\n\".getBytes());\n                zos.write(\"Generation Log:\\r\\n\\r\\n\".getBytes());\n                zos.write(log.toString().getBytes(utf8));\n                zos.write(\"\\r\\n\\r\\nServer Stack Trace:\\r\\n\".getBytes());\n                \n                PrintWriter writer = new PrintWriter(zos);\n                e.printStackTrace(writer);\n                writer.flush();\n                zos.closeEntry();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Generates a JaxRs project and streams the generated ZIP to the given output stream.", "call_func_name": ["java.io.ByteArrayOutputStream.<init>", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generate", "java.io.ByteArrayOutputStream.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], ["java.io.OutputStream"], [""], ["java.lang.Throwable"]], "passed_comments": [{"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generate": "Generates a JaxRs project and streams the generated ZIP to the given output stream."}]}, {"index": "1302", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateAll", "methodParameterType": "CodegenInfo#StringBuilder#ZipOutputStream#", "methodParameterName": "info#log#zipOutput#", "methodBody": "protected void generateAll(CodegenInfo info, StringBuilder log, ZipOutputStream zipOutput) throws IOException {\n        if (!this.updateOnly && !this.settings.codeOnly) {\n            log.append(\"Generating pom.xml\\r\\n\");\n            String pomXml = generatePomXml(info);\n            if (pomXml != null) {\n                zipOutput.putNextEntry(new ZipEntry(\"pom.xml\"));\n                zipOutput.write(pomXml.getBytes(utf8));\n                zipOutput.closeEntry();\n            }\n        }\n\n        log.append(\"Generating src/main/resources/META-INF/openapi.json\\r\\n\");\n        zipOutput.putNextEntry(new ZipEntry(\"src/main/resources/META-INF/openapi.json\"));\n        zipOutput.write(this.openApiDoc.getBytes(utf8));\n        zipOutput.closeEntry();\n        \n        if (!this.updateOnly) {\n            String appFileName = javaPackageToZipPath(this.settings.javaPackage) + \"JaxRsApplication.java\";\n            String jaxRsApp = generateJaxRsApplication();\n            if (jaxRsApp != null) {\n                log.append(\"Generating \" + appFileName + \"\\r\\n\");\n                zipOutput.putNextEntry(new ZipEntry(appFileName));\n                zipOutput.write(jaxRsApp.getBytes(utf8));\n                zipOutput.closeEntry();\n            }\n        }\n        \n        // Generate the java beans from data types\n        IndexedCodeWriter codeWriter = new IndexedCodeWriter();\n        for (CodegenJavaBean bean : info.getBeans()) {\n            log.append(\"Generating Bean: \" + bean.getPackage() + \".\" + bean.getName() + \"\\r\\n\");\n            generateJavaBean(bean, info, codeWriter);\n        }\n        for (String key : codeWriter.getKeys()) {\n            String javaClassFileName = javaClassToZipPath(key);\n            log.append(\"Adding to zip: \" + javaClassFileName + \"\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(javaClassFileName));\n            zipOutput.write(codeWriter.get(key).getBytes(utf8));\n            zipOutput.closeEntry();\n        }\n        \n        // Generate the JAX-RS interfaces\n        for (CodegenJavaInterface iface : info.getInterfaces()) {\n            log.append(\"Generating Interface: \" + iface.getPackage() + \".\" + iface.getName() + \"\\r\\n\");\n            String javaInterface = generateJavaInterface(iface);\n            String javaInterfaceFileName = javaPackageToZipPath(iface.getPackage()) + iface.getName() + \".java\";\n            log.append(\"Adding to zip: \" + javaInterfaceFileName + \"\\r\\n\");\n            zipOutput.putNextEntry(new ZipEntry(javaInterfaceFileName));\n            zipOutput.write(javaInterface.getBytes(utf8));\n            zipOutput.closeEntry();\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PrefixExpression(PrefixExpression(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Generates all of the content for storage in the ZIP.  Responsible for generating all classes and other resources that make up the generated project.", "call_func_name": ["java.lang.StringBuilder.append", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generatePomXml", "java.util.zip.ZipEntry.<init>", "java.util.zip.ZipOutputStream.putNextEntry", "java.lang.String.getBytes", "java.util.zip.ZipOutputStream.write", "java.util.zip.ZipOutputStream.closeEntry", "java.lang.StringBuilder.<init>", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.javaPackageToZipPath", "java.lang.StringBuilder.toString", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJaxRsApplication", "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.<init>", "io.apicurio.hub.api.codegen.beans.CodegenInfo.getBeans", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getPackage", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getName", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJavaBean", "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.getKeys", "java.util.Set.iterator", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.javaClassToZipPath", "io.apicurio.hub.api.codegen.util.IndexedCodeWriter.get", "io.apicurio.hub.api.codegen.beans.CodegenInfo.getInterfaces", "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPackage", "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getName", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJavaInterface"], "call_func_parameter": [["java.lang.String"], ["io.apicurio.hub.api.codegen.beans.CodegenInfo"], ["java.lang.String"], ["java.util.zip.ZipEntry"], ["java.nio.charset.Charset"], ["byte[]"], [""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["io.apicurio.hub.api.codegen.beans.CodegenJavaBean", "io.apicurio.hub.api.codegen.beans.CodegenInfo", "io.apicurio.hub.api.codegen.util.IndexedCodeWriter"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], ["io.apicurio.hub.api.codegen.beans.CodegenJavaInterface"]], "passed_comments": [{"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generatePomXml": "Generates the pom.xml file."}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJaxRsApplication": "Generates the JaxRsApplication java class."}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.getBeans": "@return the beans"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getPackage": "@return the _package"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getName": "@return the name"}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJavaBean": "Generates a Java Bean class for the given bean info.  The bean info should have a name, package, and JSON Schema.  This information will be used to  generate a POJO."}, {"io.apicurio.hub.api.codegen.util.IndexedCodeWriter.getKeys": "Gets the keys."}, {"io.apicurio.hub.api.codegen.util.IndexedCodeWriter.get": "Gets the content produced for a given filename."}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.getInterfaces": "@return the interfaces"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPackage": "@return the _package"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getName": "@return the name"}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJavaInterface": "Generates a Jax-rs interface from the given codegen information."}]}, {"index": "1303", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ByteArrayOutputStream generate() throws IOException {\n        try (ByteArrayOutputStream output = new ByteArrayOutputStream()) {\n            this.generate(output);\n            return output;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Generate the JaxRs project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1304", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.getInfoFromApiDoc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected CodegenInfo getInfoFromApiDoc() throws IOException {\n        document = Library.readDocumentFromJSONString(openApiDoc);\n        \n        // First, figure out the breakdown of the interfaces.\n        InterfacesVisitor iVisitor = new InterfacesVisitor();\n        VisitorUtil.visitTree(document, iVisitor, TraverserDirection.down);\n        \n        // Then generate the CodegenInfo object.\n        OpenApi2CodegenVisitor cgVisitor = new OpenApi2CodegenVisitor(this.settings.javaPackage, iVisitor.getInterfaces());\n        VisitorUtil.visitTree(document, cgVisitor, TraverserDirection.down);\n        \n        // Now resolve any inline schemas/types\n        CodegenInfo info = cgVisitor.getCodegenInfo();\n        info.getInterfaces().forEach( iface -> {\n            iface.getMethods().forEach( method -> {\n                method.getArguments().forEach( arg -> {\n                    String argTypeSig = arg.getTypeSignature();\n                    CodegenJavaBean matchingBean = findMatchingBean(info, argTypeSig);\n                    if (matchingBean != null) {\n                        arg.setType(matchingBean.getPackage() + \".\" + StringUtils.capitalize(matchingBean.getName()));\n                    }\n                });\n            });\n        });\n        \n        return info;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Processes the OpenAPI document to produce a CodegenInfo object that contains everything needed to generate appropriate Java class(es).", "call_func_name": ["io.apicurio.datamodels.Library.readDocumentFromJSONString", "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.<init>", "io.apicurio.datamodels.core.util.VisitorUtil.visitTree", "io.apicurio.hub.api.codegen.jaxrs.InterfacesVisitor.getInterfaces", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.<init>", "io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.getCodegenInfo", "io.apicurio.hub.api.codegen.beans.CodegenInfo.getInterfaces", "java.util.function.Consumer.accept", "java.util.List.forEach"], "call_func_parameter": [["java.lang.String"], [""], ["io.apicurio.datamodels.core.models.Node", "io.apicurio.datamodels.core.visitors.IVisitor", "io.apicurio.datamodels.core.visitors.TraverserDirection"], [""], ["java.lang.String", "java.util.List"], [""], [""], ["io.apicurio.hub.api.codegen.beans.CodegenInfo"], ["java.util.function.Consumer"]], "passed_comments": [{"io.apicurio.hub.api.codegen.jaxrs.OpenApi2CodegenVisitor.getCodegenInfo": "Gets the CodegenInfo object that was created by the visitor."}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.getInterfaces": "@return the interfaces"}]}, {"index": "1305", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.findMatchingBean", "methodParameterType": "CodegenInfo#String#", "methodParameterName": "info#typeSignature#", "methodBody": "private static CodegenJavaBean findMatchingBean(CodegenInfo info, String typeSignature) {\n        if (typeSignature == null) {\n            return null;\n        }\n        for (CodegenJavaBean bean : info.getBeans()) {\n            if (typeSignature.equals(bean.getSignature())) {\n                return bean;\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find a bean that matches the schema signature.", "call_func_name": ["io.apicurio.hub.api.codegen.beans.CodegenInfo.getBeans", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getSignature", "java.lang.String.equals"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenInfo.getBeans": "@return the beans"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getSignature": "@return the signature"}]}, {"index": "1306", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generatePomXml", "methodParameterType": "CodegenInfo#", "methodParameterName": "info#", "methodBody": "protected String generatePomXml(CodegenInfo info) throws IOException {\n        String template = IOUtils.toString(getResource(\"pom.xml\"), Charset.forName(\"UTF-8\"));\n        return template.replace(\"$GROUP_ID$\", this.settings.groupId)\n                .replace(\"$ARTIFACT_ID$\", this.settings.artifactId)\n                .replace(\"$VERSION$\", info.getVersion())\n                .replace(\"$NAME$\", info.getName())\n                .replace(\"$DESCRIPTION$\", info.getDescription());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the pom.xml file.", "call_func_name": ["io.apicurio.hub.api.codegen.OpenApi2JaxRs.getResource", "java.nio.charset.Charset.forName", "org.apache.commons.io.IOUtils.toString", "java.lang.String.replace", "io.apicurio.hub.api.codegen.beans.CodegenInfo.getVersion", "io.apicurio.hub.api.codegen.beans.CodegenInfo.getName", "io.apicurio.hub.api.codegen.beans.CodegenInfo.getDescription"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL", "java.nio.charset.Charset"], ["java.lang.CharSequence", "java.lang.CharSequence"], [""], [""], [""]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenInfo.getVersion": "@return the version"}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.getName": "@return the name"}, {"io.apicurio.hub.api.codegen.beans.CodegenInfo.getDescription": "@return the description"}]}, {"index": "1307", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJaxRsApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected String generateJaxRsApplication() throws IOException {\n        TypeSpec jaxRsApp = TypeSpec.classBuilder(ClassName.get(this.settings.javaPackage, \"JaxRsApplication\"))\n                .addModifiers(Modifier.PUBLIC)\n                .superclass(ClassName.get(\"javax.ws.rs.core\", \"Application\"))\n                .addAnnotation(ClassName.get(\"javax.enterprise.context\", \"ApplicationScoped\"))\n                .addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"ApplicationPath\"))\n                        .addMember(\"value\", \"$S\", \"/\")\n                        .build())\n                .addJavadoc(\"The JAX-RS application.\\n\")\n                .build();\n        JavaFile javaFile = JavaFile.builder(this.settings.javaPackage, jaxRsApp).build();\n        return javaFile.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the JaxRsApplication java class.", "call_func_name": ["com.squareup.javapoet.ClassName.get", "com.squareup.javapoet.TypeSpec.classBuilder", "com.squareup.javapoet.AnnotationSpec.builder", "com.squareup.javapoet.JavaFile.builder", "com.squareup.javapoet.JavaFile.toString"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String[]"], ["com.squareup.javapoet.ClassName"], ["com.squareup.javapoet.ClassName"], ["java.lang.String", "com.squareup.javapoet.TypeSpec"], [""]], "passed_comments": "/"}, {"index": "1308", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJavaInterface", "methodParameterType": "CodegenJavaInterface#", "methodParameterName": "_interface#", "methodBody": "protected String generateJavaInterface(CodegenJavaInterface _interface) {\n        // Create the JAX-RS interface spec itself.\n        Builder interfaceBuilder = TypeSpec\n                .interfaceBuilder(ClassName.get(_interface.getPackage(), _interface.getName()));\n        interfaceBuilder.addModifiers(Modifier.PUBLIC)\n                .addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"Path\"))\n                        .addMember(\"value\", \"$S\", _interface.getPath()).build())\n                .addJavadoc(\"A JAX-RS interface.  An implementation of this interface must be provided.\\n\");\n\n        // Add specs for all the methods.\n        for (CodegenJavaMethod cgMethod : _interface.getMethods()) {\n            com.squareup.javapoet.MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(cgMethod.getName());\n            methodBuilder.addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT);\n            // The @Path annotation.\n            if (cgMethod.getPath() != null) {\n                methodBuilder.addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"Path\"))\n                        .addMember(\"value\", \"$S\", cgMethod.getPath()).build());\n            }\n            // The @GET, @PUT, @POST, etc annotation\n            methodBuilder.addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", cgMethod.getMethod().toUpperCase())).build());\n            // The @Produces annotation\n            if (cgMethod.getProduces() != null && !cgMethod.getProduces().isEmpty()) {\n                methodBuilder.addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"Produces\"))\n                        .addMember(\"value\", \"$L\", toStringArrayLiteral(cgMethod.getProduces())).build());\n            }\n            // The @Consumes annotation\n            if (cgMethod.getConsumes() != null && !cgMethod.getConsumes().isEmpty()) {\n                methodBuilder.addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"Consumes\"))\n                        .addMember(\"value\", \"$L\", toStringArrayLiteral(cgMethod.getConsumes())).build());\n            }\n            // The method return type.\n            if (cgMethod.getReturn() != null) {\n                TypeName returnType = generateTypeName(cgMethod.getReturn().getCollection(),\n                        cgMethod.getReturn().getType(), cgMethod.getReturn().getFormat(), true,\n                        ClassName.get(\"javax.ws.rs.core\", \"Response\"));\n                if (getSettings().reactive || cgMethod.isAsync()) {\n                    returnType = generateReactiveTypeName(returnType);\n                }\n                methodBuilder.returns(returnType);\n            }\n            \n            // The method arguments.\n            if (cgMethod.getArguments() != null && !cgMethod.getArguments().isEmpty()) {\n                for (CodegenJavaArgument cgArgument : cgMethod.getArguments()) {\n                    TypeName defaultParamType = ClassName.OBJECT;\n                    if (cgArgument.getIn().equals(\"body\")) {\n                        defaultParamType = ClassName.get(\"java.io\", \"InputStream\");\n                    }\n                    TypeName paramType = generateTypeName(cgArgument.getCollection(), cgArgument.getType(),\n                            cgArgument.getFormat(), cgArgument.getRequired(), defaultParamType);\n                    if (cgArgument.getTypeSignature() != null) {\n                        // TODO try to find a re-usable data type that matches the type signature\n                    }\n                    com.squareup.javapoet.ParameterSpec.Builder paramBuilder = ParameterSpec.builder(paramType,\n                            paramNameToJavaArgName(cgArgument.getName()));\n                    if (cgArgument.getIn().equals(\"path\")) {\n                        paramBuilder.addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"PathParam\"))\n                                .addMember(\"value\", \"$S\", cgArgument.getName()).build());\n                    }\n                    if (cgArgument.getIn().equals(\"query\")) {\n                        paramBuilder.addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"QueryParam\"))\n                                .addMember(\"value\", \"$S\", cgArgument.getName()).build());\n                    }\n                    if (cgArgument.getIn().equals(\"header\")) {\n                        paramBuilder.addAnnotation(AnnotationSpec.builder(ClassName.get(\"javax.ws.rs\", \"HeaderParam\"))\n                                .addMember(\"value\", \"$S\", cgArgument.getName()).build());\n                    }\n                    methodBuilder.addParameter(paramBuilder.build());\n                }\n            }\n            \n            // TODO:: error responses (4xx and 5xx)\n            // Should errors be modeled in some way?  JAX-RS has a few ways to handle them.  I'm inclined to \n            // not generate anything in the interface for error responses.\n            \n            // Javadoc\n            if (cgMethod.getDescription() != null) {\n                methodBuilder.addJavadoc(cgMethod.getDescription());\n                methodBuilder.addJavadoc(\"\\n\");\n            }\n            \n            interfaceBuilder.addMethod(methodBuilder.build());\n        }\n        \n        TypeSpec jaxRsInterface = interfaceBuilder.build();\n        \n        JavaFile javaFile = JavaFile.builder(_interface.getPackage(), jaxRsInterface).build();\n        return javaFile.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block)Block)IfStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates a Jax-rs interface from the given codegen information.", "call_func_name": ["io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPackage", "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getName", "com.squareup.javapoet.ClassName.get", "com.squareup.javapoet.TypeSpec.interfaceBuilder", "com.squareup.javapoet.AnnotationSpec.builder", "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPath", "io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getMethods", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getName", "com.squareup.javapoet.MethodSpec.methodBuilder", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getPath", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getMethod", "java.lang.String.toUpperCase", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getProduces", "java.util.Set.isEmpty", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.toStringArrayLiteral", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getConsumes", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getReturn", "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getCollection", "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getType", "io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getFormat", "java.lang.Boolean.valueOf", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateTypeName", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.getSettings", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.isAsync", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateReactiveTypeName", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getArguments", "java.util.List.isEmpty", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getIn", "java.lang.String.equals", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getCollection", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getType", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getFormat", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getRequired", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getTypeSignature", "io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getName", "io.apicurio.hub.api.codegen.OpenApi2JaxRs.paramNameToJavaArgName", "com.squareup.javapoet.ParameterSpec.builder", "io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getDescription", "com.squareup.javapoet.JavaFile.builder", "com.squareup.javapoet.JavaFile.toString"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String", "java.lang.String[]"], ["com.squareup.javapoet.ClassName"], ["com.squareup.javapoet.ClassName"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], ["java.util.Set"], [""], [""], [""], [""], [""], ["boolean"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Boolean", "com.squareup.javapoet.TypeName"], [""], [""], ["com.squareup.javapoet.TypeName"], [""], [""], [""], ["java.lang.Object"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["com.squareup.javapoet.TypeName", "java.lang.String", "javax.lang.model.element.Modifier[]"], [""], ["java.lang.String", "com.squareup.javapoet.TypeSpec"], [""]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPackage": "@return the _package"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getName": "@return the name"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getPath": "@return the path"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaInterface.getMethods": "@return the methods"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getName": "@return the name"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getPath": "@return the path"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getMethod": "@return the method"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getProduces": "@return the produces"}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.toStringArrayLiteral": "Converts a set of strings into an array literal format."}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getConsumes": "@return the consumes"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getReturn": "@return the _return"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getCollection": "@return the collection"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getType": "@return the type"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaReturn.getFormat": "@return the format"}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateTypeName": "Generates the java type name for a collection (optional) and type.  Examples include list/string,  null/org.example.Bean, list/org.example.OtherBean, etc."}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.getSettings": "@return the settings"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.isAsync": "@return the async"}, {"io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateReactiveTypeName": "Generates the reactive java type name for a collection (optional) and type.  Examples include list/string,  null/org.example.Bean, list/org.example.OtherBean, etc."}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getArguments": "@return the arguments"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getIn": "@return the in"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getCollection": "@return the collection"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getType": "@return the type"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getFormat": "@return the format"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getRequired": "@return the required"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getTypeSignature": "@return the typeSignature"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaArgument.getName": "@return the name"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaMethod.getDescription": "@return the description"}]}, {"index": "1309", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateTypeName", "methodParameterType": "String#String#String#Boolean#TypeName#", "methodParameterName": "collection#type#format#required#defaultType#", "methodBody": "private TypeName generateTypeName(String collection, String type, String format, Boolean required, TypeName defaultType) {\n        if (type == null) {\n            return defaultType;\n        }\n        if (required == null) {\n            required = Boolean.FALSE;\n        }\n        \n        boolean isList = \"list\".equals(collection);\n\n        TypeName coreType = null;\n        if (type.equals(\"string\")) {\n            coreType = ClassName.get(String.class);\n            if (format != null) {\n                if (format.equals(\"date\") || format.equals(\"date-time\")) {\n                    coreType = ClassName.get(Date.class);\n                }\n                // TODO handle byte, binary\n            }\n        } else if (type.equals(\"integer\")) {\n            coreType = ClassName.get(Integer.class);\n            if (format != null) {\n                if (format.equals(\"int32\")) {\n                    coreType = required && !isList ? TypeName.INT : ClassName.get(Integer.class);\n                } else if (format.equals(\"int64\")) {\n                    coreType = required && !isList ? TypeName.LONG : ClassName.get(Long.class);\n                }\n            }\n        } else if (type.equals(\"number\")) {\n            coreType = ClassName.get(Number.class);\n            if (format != null) {\n                if (format.equals(\"float\")) {\n                    coreType = required && !isList ? TypeName.FLOAT : ClassName.get(Float.class);\n                } else if (format.equals(\"double\")) {\n                    coreType = required && !isList ? TypeName.DOUBLE : ClassName.get(Double.class);\n                }\n            }\n        } else if (type.equals(\"boolean\")) {\n            coreType = ClassName.get(Boolean.class);\n        } else {\n            try {\n                coreType = ClassName.bestGuess(type);\n            } catch (Exception e) {\n                return defaultType;\n            }\n        }\n        \n        if (collection == null) {\n            return coreType;\n        }\n        \n        if (\"list\".equals(collection)) {\n            return ParameterizedTypeName.get(ClassName.get(List.class), coreType);\n        }\n\n        return defaultType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the java type name for a collection (optional) and type.  Examples include list/string,  null/org.example.Bean, list/org.example.OtherBean, etc.", "call_func_name": ["java.lang.String.equals", "com.squareup.javapoet.ClassName.get", "java.lang.Boolean.booleanValue", "com.squareup.javapoet.ClassName.bestGuess", "com.squareup.javapoet.ParameterizedTypeName.get"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Class"], [""], ["java.lang.String"], ["com.squareup.javapoet.ClassName", "com.squareup.javapoet.TypeName[]"]], "passed_comments": "/"}, {"index": "1310", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateReactiveTypeName", "methodParameterType": "TypeName#", "methodParameterName": "coreType#", "methodBody": "private TypeName generateReactiveTypeName(TypeName coreType) {\n        return ParameterizedTypeName.get(ClassName.get(CompletionStage.class), coreType);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the reactive java type name for a collection (optional) and type.  Examples include list/string,  null/org.example.Bean, list/org.example.OtherBean, etc.", "call_func_name": ["com.squareup.javapoet.ClassName.get", "com.squareup.javapoet.ParameterizedTypeName.get"], "call_func_parameter": [["java.lang.Class"], ["com.squareup.javapoet.ClassName", "com.squareup.javapoet.TypeName[]"]], "passed_comments": "/"}, {"index": "1311", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.toStringArrayLiteral", "methodParameterType": "Set<String>#", "methodParameterName": "values#", "methodBody": "private static String toStringArrayLiteral(Set<String> values) {\n        StringBuilder builder = new StringBuilder();\n\n        if (values.size() == 1) {\n            builder.append(\"\\\"\");\n            builder.append(values.iterator().next().replace(\"\\\"\", \"\\\\\\\"\"));\n            builder.append(\"\\\"\");\n        } else {\n            builder.append(\"{\");\n            boolean first = true;\n            for (String value : values) {\n                if (!first) {\n                    builder.append(\", \");\n                }\n                builder.append(\"\\\"\");\n                builder.append(value.replace(\"\\\"\", \"\\\\\\\"\"));\n                builder.append(\"\\\"\");\n                first = false;\n            }\n            builder.append(\"}\");\n        }\n        return builder.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a set of strings into an array literal format.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.util.Set.size", "java.lang.StringBuilder.append", "java.util.Set.iterator", "java.util.Iterator.next", "java.lang.String.replace", "java.util.Iterator.hasNext", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["java.lang.CharSequence", "java.lang.CharSequence"], [""], [""]], "passed_comments": "/"}, {"index": "1312", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.generateJavaBean", "methodParameterType": "CodegenJavaBean#CodegenInfo#IndexedCodeWriter#", "methodParameterName": "bean#info#codeWriter#", "methodBody": "private void generateJavaBean(CodegenJavaBean bean, CodegenInfo info, IndexedCodeWriter codeWriter) throws IOException {\n        JCodeModel codeModel = new JCodeModel();\n        GenerationConfig config = new DefaultGenerationConfig() {\n            @Override\n            public boolean isUsePrimitives() {\n                return false;\n            }\n            @Override\n            public boolean isIncludeHashcodeAndEquals() {\n                return false;\n            }\n            @Override\n            public boolean isIncludeAdditionalProperties() {\n                return false;\n            }\n            @Override\n            public boolean isIncludeToString() {\n                return false;\n            }\n        };\n\n        SchemaMapper schemaMapper = new SchemaMapper(\n                new JaxRsRuleFactory(config, new Jackson2Annotator(config), new SchemaStore() {\n                    @Override\n                    public Schema create(Schema parent, String path, String refFragmentPathDelimiters) {\n                        String beanClassname = schemaRefToFQCN(path);\n                        for (CodegenJavaBean cgBean : info.getBeans()) {\n                            String cgBeanFQCN = cgBean.getPackage() + \".\" + StringUtils.capitalize(cgBean.getName());\n                            if (beanClassname.equals(cgBeanFQCN)) {\n                                Schema schema = new Schema(classnameToUri(beanClassname), cgBean.get$schema(), null);\n                                JType jclass = codeModel._getClass(beanClassname);\n                                if (jclass == null) {\n                                    jclass = codeModel.directClass(beanClassname);\n                                }\n                                schema.setJavaType(jclass);\n                                return schema;\n                            }\n                        }\n                        System.out.println(\"!!!!! :: \" + beanClassname);\n                        // TODO if we get here, we probably want to return an empty schema\n                        return super.create(parent, path, refFragmentPathDelimiters);\n                    }\n                }),\n                new SchemaGenerator());\n        String source = mapper.writeValueAsString(bean.get$schema());\n        schemaMapper.generate(codeModel, bean.getName(), bean.getPackage(), source);\n        codeModel.build(codeWriter);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generates a Java Bean class for the given bean info.  The bean info should have a name, package, and JSON Schema.  This information will be used to  generate a POJO.", "call_func_name": ["com.sun.codemodel.JCodeModel.<init>", "org.jsonschema2pojo.Jackson2Annotator.<init>", "org.jsonschema2pojo.SchemaGenerator.<init>", "org.jsonschema2pojo.SchemaMapper.<init>", "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getName", "io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getPackage", "org.jsonschema2pojo.SchemaMapper.generate", "com.sun.codemodel.JCodeModel.build"], "call_func_parameter": [[""], ["org.jsonschema2pojo.GenerationConfig"], [""], ["org.jsonschema2pojo.rules.RuleFactory", "org.jsonschema2pojo.SchemaGenerator"], ["java.lang.Object"], [""], [""], ["com.sun.codemodel.JCodeModel", "java.lang.String", "java.lang.String", "java.lang.String"], ["com.sun.codemodel.CodeWriter"]], "passed_comments": [{"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getName": "@return the name"}, {"io.apicurio.hub.api.codegen.beans.CodegenJavaBean.getPackage": "@return the _package"}]}, {"index": "1313", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.isUpdateOnly", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUpdateOnly() {\n        return updateOnly;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the updateOnly", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1314", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.getSettings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JaxRsProjectSettings getSettings() {\n        return this.settings;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the settings", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1315", "file": "/root/repos/repos23/apicurio-studio/back-end/hub-codegen/src/main/java/io/apicurio/hub/api/codegen/OpenApi2JaxRs.java", "methodName": "io.apicurio.hub.api.codegen.OpenApi2JaxRs.setUpdateOnly", "methodParameterType": "boolean#", "methodParameterName": "updateOnly#", "methodBody": "public void setUpdateOnly(boolean updateOnly) {\n        this.updateOnly = updateOnly;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param updateOnly the updateOnly to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1316", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.User", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public User() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1317", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getId() {\n        return id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1318", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.setId", "methodParameterType": "int#", "methodParameterName": "id#", "methodBody": "public void setId(int id) {\n        this.id = id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param id the id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1319", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1320", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1321", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.getEmail", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEmail() {\n        return email;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the email", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1322", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.setEmail", "methodParameterType": "String#", "methodParameterName": "email#", "methodBody": "public void setEmail(String email) {\n        this.email = email;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param email the email to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1323", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.getAvatar", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAvatar() {\n        return avatar;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the avatar", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1324", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.setAvatar", "methodParameterType": "String#", "methodParameterName": "avatar#", "methodBody": "public void setAvatar(String avatar) {\n        this.avatar = avatar;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param avatar the avatar to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1325", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.getLogin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLogin() {\n        return login;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the login", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1326", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/User.java", "methodName": "io.apicurio.studio.shared.beans.User.setLogin", "methodParameterType": "String#", "methodParameterName": "login#", "methodBody": "public void setLogin(String login) {\n        this.login = login;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param login the login to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1327", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.StudioConfigFeatures", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigFeatures() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1328", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.isMicrocks", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMicrocks() {\n        return microcks;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the microcks", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1329", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.setMicrocks", "methodParameterType": "boolean#", "methodParameterName": "microcks#", "methodBody": "public void setMicrocks(boolean microcks) {\n        this.microcks = microcks;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param microcks the microcks to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1330", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.isShareWithEveryone", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isShareWithEveryone() {\n        return shareWithEveryone;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the shareWithEveryone", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1331", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.setShareWithEveryone", "methodParameterType": "boolean#", "methodParameterName": "shareWithEveryone#", "methodBody": "public void setShareWithEveryone(boolean shareWithEveryone) {\n        this.shareWithEveryone = shareWithEveryone;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param shareWithEveryone the shareWithEveryone to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1332", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.isAsyncapi", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAsyncapi() {\n        return asyncapi;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the asyncapi", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1333", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.setAsyncapi", "methodParameterType": "boolean#", "methodParameterName": "asyncapi#", "methodBody": "public void setAsyncapi(boolean asyncapi) {\n        this.asyncapi = asyncapi;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param asyncapi the asyncapi to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1334", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.isGraphql", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isGraphql() {\n        return graphql;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the graphql", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1335", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigFeatures.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigFeatures.setGraphql", "methodParameterType": "boolean#", "methodParameterName": "graphql#", "methodBody": "public void setGraphql(boolean graphql) {\n        this.graphql = graphql;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param graphql the graphql to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1336", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigUi.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigUi.StudioConfigUi", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigUi() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1337", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigUi.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigUi.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1338", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigUi.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigUi.setUrl", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public void setUrl(String url) {\n        this.url = url;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param url the url to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1339", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.StudioConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfig() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1340", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.getAuth", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigAuth getAuth() {\n        return auth;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the auth", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1341", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.setAuth", "methodParameterType": "StudioConfigAuth#", "methodParameterName": "auth#", "methodBody": "public void setAuth(StudioConfigAuth auth) {\n        this.auth = auth;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param auth the auth to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1342", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.getUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public User getUser() {\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the user", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1343", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.setUser", "methodParameterType": "User#", "methodParameterName": "user#", "methodBody": "public void setUser(User user) {\n        this.user = user;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param user the user to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1344", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.getApis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigApis getApis() {\n\t\treturn apis;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the api config", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1345", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.setApis", "methodParameterType": "StudioConfigApis#", "methodParameterName": "apis#", "methodBody": "public void setApis(StudioConfigApis apis) {\n\t\tthis.apis = apis;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param apis the api config", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1346", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.getMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigMode getMode() {\n        return mode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the mode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1347", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.setMode", "methodParameterType": "StudioConfigMode#", "methodParameterName": "mode#", "methodBody": "public void setMode(StudioConfigMode mode) {\n        this.mode = mode;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param mode the mode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1348", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.getFeatures", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigFeatures getFeatures() {\n        return features;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the features", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1349", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.setFeatures", "methodParameterType": "StudioConfigFeatures#", "methodParameterName": "features#", "methodBody": "public void setFeatures(StudioConfigFeatures features) {\n        this.features = features;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param features the features to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1350", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.getUi", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigUi getUi() {\n        return ui;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ui", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1351", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfig.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfig.setUi", "methodParameterType": "StudioConfigUi#", "methodParameterName": "ui#", "methodBody": "public void setUi(StudioConfigUi ui) {\n        this.ui = ui;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param ui the ui to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1352", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigApis.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigApis.StudioConfigApis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigApis() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1353", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigApis.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigApis.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigApisType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1354", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigApis.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigApis.setType", "methodParameterType": "StudioConfigApisType#", "methodParameterName": "type#", "methodBody": "public void setType(StudioConfigApisType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1355", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigApis.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigApis.getHubUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHubUrl() {\n        return hubUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the hubUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1356", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigApis.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigApis.setHubUrl", "methodParameterType": "String#", "methodParameterName": "hubUrl#", "methodBody": "public void setHubUrl(String hubUrl) {\n        this.hubUrl = hubUrl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param hubUrl the hubUrl to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1357", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigApis.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigApis.getEditingUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEditingUrl() {\n        return editingUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the editingUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1358", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigApis.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigApis.setEditingUrl", "methodParameterType": "String#", "methodParameterName": "editingUrl#", "methodBody": "public void setEditingUrl(String editingUrl) {\n        this.editingUrl = editingUrl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param editingUrl the editingUrl to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1359", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.StudioConfigAuth", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigAuth() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1360", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StudioConfigAuthType getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1361", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.setType", "methodParameterType": "StudioConfigAuthType#", "methodParameterName": "type#", "methodBody": "public void setType(StudioConfigAuthType type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1362", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.getToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getToken() {\n        return token;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1363", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.setToken", "methodParameterType": "String#", "methodParameterName": "token#", "methodBody": "public void setToken(String token) {\n        this.token = token;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param token the token to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1364", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.getLogoutUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLogoutUrl() {\n        return logoutUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the logoutUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1365", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.setLogoutUrl", "methodParameterType": "String#", "methodParameterName": "logoutUrl#", "methodBody": "public void setLogoutUrl(String logoutUrl) {\n        this.logoutUrl = logoutUrl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param logoutUrl the logoutUrl to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1366", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.getTokenRefreshPeriod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getTokenRefreshPeriod() {\n        return tokenRefreshPeriod;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tokenRefreshPeriod", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1367", "file": "/root/repos/repos23/apicurio-studio/shared/beans/src/main/java/io/apicurio/studio/shared/beans/StudioConfigAuth.java", "methodName": "io.apicurio.studio.shared.beans.StudioConfigAuth.setTokenRefreshPeriod", "methodParameterType": "int#", "methodParameterName": "tokenRefreshPeriod#", "methodBody": "public void setTokenRefreshPeriod(int tokenRefreshPeriod) {\n        this.tokenRefreshPeriod = tokenRefreshPeriod;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tokenRefreshPeriod the tokenRefreshPeriod to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1368", "file": "/root/repos/repos23/apicurio-studio/shared/config/src/main/java/io/apicurio/studio/shared/config/Configuration.java", "methodName": "io.apicurio.studio.shared.config.Configuration.getKeycloakAuthUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKeycloakAuthUrl() {\n        return getConfigurationProperty(KC_AUTH_URL_ENV, KC_AUTH_URL_SYSPROP, \"https://localhost:8443/auth\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Keycloak auth URL", "call_func_name": ["io.apicurio.studio.shared.config.Configuration.getConfigurationProperty"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"io.apicurio.studio.shared.config.Configuration.getConfigurationProperty": "Looks for the given key in the following places (in order): 1) Environment variables 2) System Properties"}]}, {"index": "1369", "file": "/root/repos/repos23/apicurio-studio/shared/config/src/main/java/io/apicurio/studio/shared/config/Configuration.java", "methodName": "io.apicurio.studio.shared.config.Configuration.getKeycloakRealm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getKeycloakRealm() {\n        return getConfigurationProperty(KC_AUTH_REALM_ENV, KC_AUTH_REALM_SYSPROP, \"apicurio\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the configured Keycloak realm", "call_func_name": ["io.apicurio.studio.shared.config.Configuration.getConfigurationProperty"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"io.apicurio.studio.shared.config.Configuration.getConfigurationProperty": "Looks for the given key in the following places (in order): 1) Environment variables 2) System Properties"}]}, {"index": "1370", "file": "/root/repos/repos23/apicurio-studio/shared/config/src/main/java/io/apicurio/studio/shared/config/Configuration.java", "methodName": "io.apicurio.studio.shared.config.Configuration.getConfigurationProperty", "methodParameterType": "String#String#String#", "methodParameterName": "envKey#sysPropKey#defaultValue#", "methodBody": "protected static String getConfigurationProperty(String envKey, String sysPropKey, String defaultValue) {\n        String rval = System.getenv(envKey);\n        if (rval == null || rval.trim().isEmpty()) {\n            rval = System.getProperty(sysPropKey);\n        }\n        if (rval == null || rval.trim().isEmpty()) {\n            rval = defaultValue;\n        }\n        logger.debug(\"Config Property: {}/{} = {}\", envKey, sysPropKey, rval);\n\n        return rval;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Looks for the given key in the following places (in order): 1) Environment variables 2) System Properties", "call_func_name": ["java.lang.System.getenv", "java.lang.String.trim", "java.lang.String.isEmpty", "java.lang.System.getProperty", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "1371", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/KeycloakNoopServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.KeycloakNoopServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/javascript\");\n        response.setContentLength(0);\n        response.setStatus(204);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1372", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/DownloadServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.DownloadServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#resp#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String type = req.getParameter(\"type\");\n        if (\"api\".equals(type)) {\n            String format = req.getParameter(\"format\");\n            String designId = req.getParameter(\"id\");\n            \n            String url = generateHubApiUrl(req);\n            if (url.endsWith(\"/\")) {\n                url = url.substring(0, url.length() - 1);\n            }\n            url += \"/designs/{designId}/content?format={format}\"\n                    .replace(\"{designId}\", designId)\n                    .replace(\"{format}\", format);\n            \n            disableHttpCaching(resp);\n            proxyUrlTo(url, req, resp);\n        } else if (\"codegen\".equals(type)) {\n            String designId = req.getParameter(\"designId\");\n            String projectId = req.getParameter(\"projectId\");\n            \n            String url = generateHubApiUrl(req);\n            if (url.endsWith(\"/\")) {\n                url = url.substring(0, url.length() - 1);\n            }\n            url += \"/designs/{designId}/codegen/projects/{projectId}/zip\"\n                    .replace(\"{designId}\", designId)\n                    .replace(\"{projectId}\", projectId);\n            \n            disableHttpCaching(resp);\n            proxyUrlTo(url, req, resp);\n        } else {\n            resp.sendError(404);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1373", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/DownloadServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.DownloadServlet.proxyUrlTo", "methodParameterType": "String#HttpServletRequest#HttpServletResponse#", "methodParameterName": "url#request#response#", "methodBody": "private void proxyUrlTo(String url, HttpServletRequest request, HttpServletResponse response) {\n        try {\n            HttpGet get = new HttpGet(url);\n            KeycloakSecurityContext session = (KeycloakSecurityContext) request.getAttribute(KeycloakSecurityContext.class.getName());\n            get.addHeader(\"Authorization\", \"Bearer \" + session.getTokenString());\n\n            try (CloseableHttpResponse apiResponse = httpClient.execute(get)) {\n                Header ct = apiResponse.getFirstHeader(\"Content-Type\");\n                Header cl = apiResponse.getFirstHeader(\"Content-Length\");\n                Header cd = apiResponse.getFirstHeader(\"Content-Disposition\");\n                if (ct != null)\n                    response.setHeader(\"Content-Type\", ct.getValue());\n                if (cl != null)\n                    response.setHeader(\"Content-Length\", cl.getValue());\n                if (cd != null)\n                    response.setHeader(\"Content-Disposition\", cd.getValue());\n                InputStream stream = apiResponse.getEntity().getContent();\n                IOUtils.copy(stream, response.getOutputStream());\n                response.getOutputStream().flush();\n            }            \n        } catch (IOException e) {\n            logger.error(\"Error proxying URL: \" + url, e);\n            try { response.sendError(500); } catch (IOException e1) {}\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Makes an HTTP connect to the given url and then proxies the response to the given HTTP response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1374", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/DownloadServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.DownloadServlet.generateHubApiUrl", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "private String generateHubApiUrl(HttpServletRequest request) {\n        try {\n            String url = this.uiConfig.getHubApiUrl();\n            if (url == null) {\n                url = request.getRequestURL().toString();\n                url = new URI(url).resolve(\"/api-hub\").toString();\n            }\n            return url;\n        } catch (URISyntaxException e) {\n            logger.error(\"Error generating hub API URL.\", e);\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Generates a URL that the caller can use to access the Hub API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1375", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/DownloadServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.DownloadServlet.disableHttpCaching", "methodParameterType": "HttpServletResponse#", "methodParameterName": "httpResponse#", "methodBody": "private static void disableHttpCaching(HttpServletResponse httpResponse) {\n        Date now = new Date();\n        httpResponse.setDateHeader(\"Date\", now.getTime()); //$NON-NLS-1$\n        httpResponse.setDateHeader(\"Expires\", expiredSinceYesterday(now)); //$NON-NLS-1$\n        httpResponse.setHeader(\"Pragma\", \"no-cache\"); //$NON-NLS-1$ //$NON-NLS-2$\n        httpResponse.setHeader(\"Cache-control\", \"no-cache, no-store, must-revalidate\"); //$NON-NLS-1$ //$NON-NLS-2$\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Disable caching.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1376", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/AngularServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.AngularServlet.service", "methodParameterType": "ServletRequest#ServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n        req.getRequestDispatcher(\"/index.html\").forward(req, res); //$NON-NLS-1$\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.GenericServlet#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1377", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/TokenRefreshServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.TokenRefreshServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        logger.debug(\"Refreshing authentication token.\"); //$NON-NLS-1$\n\n        HttpSession session = request.getSession();\n        StudioConfigAuth auth = (StudioConfigAuth) session.getAttribute(RequestAttributeKeys.AUTH_KEY);\n\n        if (auth == null) {\n            logger.error(\"Authentication 'token' is null (not authenticated?)\");\n            response.sendError(403);\n            return;\n        }\n        \n        ObjectMapper mapper = new ObjectMapper();\n        response.setContentType(\"application/json\"); //$NON-NLS-1$\n        response.setDateHeader(\"Date\", System.currentTimeMillis()); //$NON-NLS-1$\n        response.setDateHeader(\"Expires\", System.currentTimeMillis() - 86400000L); //$NON-NLS-1$\n        response.setHeader(\"Pragma\", \"no-cache\"); //$NON-NLS-1$ //$NON-NLS-2$\n        response.setHeader(\"Cache-control\", \"no-cache, no-store, must-revalidate\"); //$NON-NLS-1$ //$NON-NLS-2$\n        mapper.writer().writeValue(response.getOutputStream(), auth);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1378", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/ReadyServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.ReadyServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#resp#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setHeader(\"Content-Type\", \"application/json\");\n        IOUtils.copy(new StringReader(\"{ \\\"up\\\": true }\"), resp.getOutputStream(), Charset.forName(\"UTF-8\"));\n        resp.getOutputStream().flush();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1379", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/PreviewServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.PreviewServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#resp#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        String apiId = req.getParameter(\"aid\");\n        String rid = req.getParameter(\"rid\");\n        \n        logger.debug(\"Rendering document preview for API: {}\", apiId);\n        \n        String specURL = \"download?type=api&format=json&id=\" + apiId;\n        logger.debug(\"Spec URL: {}\", specURL);\n        \n        String content;\n        if (rid != null && rid.equals(\"rapidoc\")) {\n        \tcontent = TEMPLATE_RAPIDOC.replace(\"SPEC_URL\", specURL);\n        } else {\n        \tcontent = TEMPLATE_REDOC.replace(\"SPEC_URL\", specURL);\n        }\n        resp.setStatus(200);\n        resp.setContentLength(content.length());\n        resp.setContentType(\"text/html\");\n        resp.setCharacterEncoding(\"UTF-8\");\n        PrintWriter writer = resp.getWriter();\n        writer.print(content);\n        writer.flush();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1380", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/KeycloakLogoutServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.KeycloakLogoutServlet.KeycloakLogoutServlet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public KeycloakLogoutServlet() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1381", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/KeycloakLogoutServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.KeycloakLogoutServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#resp#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        req.logout();\n        String logoutRedirect = config.getLogoutRedirectUri();\n        resp.sendRedirect(logoutRedirect);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1382", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/StudioConfigServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.StudioConfigServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        String ct = \"application/json; charset=\" + StandardCharsets.UTF_8;\n        response.setContentType(ct);\n        JsonFactory f = new JsonFactory();\n        try (JsonGenerator g = f.createGenerator(response.getOutputStream(), JsonEncoding.UTF8)) {\n            response.getOutputStream().write(\"var ApicurioStudioConfig = \".getBytes(\"UTF-8\")); //$NON-NLS-1$ //$NON-NLS-2$\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.setSerializationInclusion(Include.NON_NULL);\n            g.setCodec(mapper);\n            g.useDefaultPrettyPrinter();\n\n            HttpSession session = request.getSession();\n            StudioConfigAuth auth = (StudioConfigAuth) session.getAttribute(RequestAttributeKeys.AUTH_KEY);\n            User user = (User) session.getAttribute(RequestAttributeKeys.USER_KEY);\n            \n            if (auth == null) {\n                logger.error(\"Authentication 'token' is null (not authenticated?)\");\n                response.sendError(403);\n                return;\n            }\n            if (user == null) {\n                logger.error(\"Authentication 'user' is null (not authenticated?)\");\n                response.sendError(401);\n                return;\n            }\n\n            StudioConfig config = new StudioConfig();\n            \n            config.setMode(StudioConfigMode.prod);\n            \n            config.setAuth(auth);\n            \n            config.setApis(new StudioConfigApis());\n            config.getApis().setType(StudioConfigApisType.hub);\n            config.getApis().setHubUrl(generateHubApiUrl(request));\n            config.getApis().setEditingUrl(generateEditingUrl(request));\n            \n            config.setUser(user);\n            \n            config.setUi(new StudioConfigUi());\n            config.getUi().setUrl(this.uiConfig.getUiUrl());\n            \n            config.setFeatures(new StudioConfigFeatures());\n            config.getFeatures().setMicrocks(uiConfig.isMicrocksEnabled());\n            config.getFeatures().setGraphql(uiConfig.isGraphQLEnabled());\n            config.getFeatures().setAsyncapi(uiConfig.isAsyncAPIEnabled());\n            config.getFeatures().setShareWithEveryone(uiConfig.isShareWithEveryoneEnabled());\n            \n            g.writeObject(config);\n\n            g.flush();\n            response.getOutputStream().write(\";\".getBytes(\"UTF-8\")); //$NON-NLS-1$ //$NON-NLS-2$\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1383", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/StudioConfigServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.StudioConfigServlet.generateHubApiUrl", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "private String generateHubApiUrl(HttpServletRequest request) {\n        try {\n            String url = this.uiConfig.getHubApiUrl();\n            if (url == null) {\n                url = request.getRequestURL().toString();\n                url = new URI(url).resolve(\"/api-hub\").toString();\n            }\n            return url;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Generates a URL that the caller can use to access the Hub API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1384", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/servlets/StudioConfigServlet.java", "methodName": "io.apicurio.studio.fe.servlet.servlets.StudioConfigServlet.generateEditingUrl", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "private String generateEditingUrl(HttpServletRequest request) {\n        try {\n            String url = this.uiConfig.getEditingUrl();\n            if (url == null) {\n                url = request.getRequestURL().toString().replaceFirst(\"http\", \"ws\");\n                url = new URI(url).resolve(\"/api-editing\").toString();\n            }\n            return url;\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Generates a URL that the caller can use to access the editing API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1385", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "filterConfig#", "methodBody": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        this.clientId = lookupClientId();\n        this.clientSecret = lookupClientSecret();\n        if (this.clientId == null || this.clientSecret == null) {\n            throw new ServletException(\"Missing clientId or clientSecret for GitHub OAuth authentication.  Please configure both of these as system properties or environment variables:  apicurio.github.auth.clientId|GITHUB_AUTH_CLIENT_ID and apicurio.github.auth.clientSecret|GITHUB_AUTH_CLIENT_SECRET\");\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1386", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        HttpServletRequest httpReq = (HttpServletRequest) request;\n        HttpServletResponse httpResp = (HttpServletResponse) response;\n        HttpSession session = httpReq.getSession();\n\n        if (httpReq.getServletPath().endsWith(\"/callback\")) {\n            String code = httpReq.getParameter(\"code\");\n            String state = (String) session.getAttribute(STATE_KEY);\n\n            AccessTokenRequest tokenReq = new AccessTokenRequest();\n            tokenReq.setClient_id(clientId);\n            tokenReq.setClient_secret(clientSecret);\n            tokenReq.setCode(code);\n            tokenReq.setState(state);\n\n            try {\n                HttpResponse<AccessTokenResponse> tokenResp = Unirest.post(ACCESS_TOKEN_URL)\n                        .header(\"Content-Type\", \"application/json\")\n                        .header(\"Accept\", \"application/json\")\n                        .body(tokenReq)\n                        .asObject(AccessTokenResponse.class);\n                \n                AccessTokenResponse token = tokenResp.getBody();\n                session.setAttribute(RequestAttributeKeys.AUTH_KEY, token);\n                User user = authenticateUser(token.getAccess_token());\n                session.setAttribute(RequestAttributeKeys.USER_KEY, user);\n\n                String redirectUrl = (String) session.getAttribute(REDIRECT_KEY);\n                httpResp.sendRedirect(redirectUrl);\n            } catch (UnirestException e) {\n                throw new ServletException(e);\n            }\n        } else if (httpReq.getServletPath().endsWith(\"/logout\")) {\n            session.removeAttribute(RequestAttributeKeys.AUTH_KEY);\n            session.removeAttribute(RequestAttributeKeys.USER_KEY);\n            \n            String logoutPageHtml = createLogoutPage();\n            httpResp.setContentType(\"text/html\");\n            httpResp.setContentLength(logoutPageHtml.length());\n            httpResp.getWriter().print(logoutPageHtml);\n            httpResp.getWriter().flush();\n        } else {\n            AccessTokenResponse token = (AccessTokenResponse) session.getAttribute(RequestAttributeKeys.AUTH_KEY);\n            if (token == null) {\n                StringBuffer originalAppUrl = httpReq.getRequestURL();\n                String qs = httpReq.getQueryString();\n                if (qs != null && !qs.isEmpty()) {\n                    originalAppUrl.append(\"?\").append(qs);\n                }\n                session.setAttribute(REDIRECT_KEY, originalAppUrl.toString());\n                String state = String.valueOf(random.nextInt());\n                session.setAttribute(STATE_KEY, state);\n                String authUrl = AUTH_URL + clientId + \"&state=\" + state;\n                \n                String loginPageHtml = createLoginPage(authUrl);\n                httpResp.setContentType(\"text/html\");\n                httpResp.setContentLength(loginPageHtml.length());\n                httpResp.getWriter().print(loginPageHtml);\n                httpResp.getWriter().flush();\n            } else {\n                chain.doFilter(request, response);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1387", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.createLoginPage", "methodParameterType": "String#", "methodParameterName": "authUrl#", "methodBody": "private String createLoginPage(String authUrl) throws ServletException {\n        try (InputStream in = getClass().getClassLoader().getResourceAsStream(\"login.html\")) {\n            String content = IOUtils.toString(in, Charset.forName(\"UTF-8\"));\n            return content.replaceAll(\"XXX\", authUrl);\n        } catch (IOException e) {\n            throw new ServletException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Uses the included 'auth.html' template to create a login page and show it to the user.  This login page is only shown if the user hasn't yet authenticated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1388", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.createLogoutPage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String createLogoutPage() throws ServletException {\n        try (InputStream in = getClass().getClassLoader().getResourceAsStream(\"logout.html\")) {\n            String content = IOUtils.toString(in, Charset.forName(\"UTF-8\"));\n            return content;\n        } catch (IOException e) {\n            throw new ServletException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Uses the included 'auth.html' template to create a login page and show it to the user.  This login page is only shown if the user hasn't yet authenticated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1389", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.lookupClientId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String lookupClientId() {\n        String clientId = System.getProperty(\"apicurio.github.auth.clientId\", null);\n        if (clientId == null) {\n            clientId = System.getenv(\"GITHUB_AUTH_CLIENT_ID\");\n        }\n        return clientId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the GitHub OAuth client-id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1390", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.lookupClientSecret", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String lookupClientSecret() {\n        String clientSecret = System.getProperty(\"apicurio.github.auth.clientSecret\", null);\n        if (clientSecret == null) {\n            clientSecret = System.getenv(\"GITHUB_AUTH_CLIENT_SECRET\");\n        }\n        return clientSecret;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the GitHub OAuth client-secret.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1391", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.authenticateUser", "methodParameterType": "String#", "methodParameterName": "token#", "methodBody": "private static User authenticateUser(String token) {\n        try {\n            HttpResponse<String> userResp = Unirest.get(\"https://api.github.com/user\")\n                    .header(\"Accept\", \"application/json\")\n                    .header(\"Authorization\", \"Bearer \" + token)\n                    .asString();\n            if (userResp.getStatus() != 200) {\n                return null;\n            } else {\n                String json = userResp.getBody();\n                User user = jacksonObjectMapper.readerFor(User.class).readValue(json);\n                return user;\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Fetches information about the authenticated user.  Uses the github access token to make an authenticated call to the GitHub API to fetch the user info.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1392", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/GitHubAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.GitHubAuthenticationFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1393", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/ResourceCacheControlFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.ResourceCacheControlFilter.ResourceCacheControlFilter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResourceCacheControlFilter() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "C'tor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1394", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/ResourceCacheControlFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.ResourceCacheControlFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "config#", "methodBody": "@Override\n    public void init(FilterConfig config) throws ServletException {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1395", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/ResourceCacheControlFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.ResourceCacheControlFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        String requestURI = ((HttpServletRequest) request).getRequestURI();\n        Date now = new Date();\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        httpResponse.setDateHeader(\"Date\", now.getTime()); //$NON-NLS-1$\n\n        if (requestURI == null || !requestURI.contains(\".\") || requestURI.contains(\"version.js\") || \n                requestURI.contains(\"config.js\") || requestURI.contains(\"keycloak.json\")) {\n            disableHttpCaching(httpResponse);\n        } else {\n            httpResponse.setDateHeader(\"Expires\", expiresInOneYear(now)); //$NON-NLS-1$\n            // Cache for one year\n            httpResponse.setHeader(\"Cache-control\", \"public, max-age=31536000\"); //$NON-NLS-1$ //$NON-NLS-2$\n        }\n\n        chain.doFilter(request, response);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1396", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/ResourceCacheControlFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.ResourceCacheControlFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1397", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.KeycloakAuthenticationFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "filterConfig#", "methodBody": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1398", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.KeycloakAuthenticationFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        HttpServletRequest httpReq = (HttpServletRequest) request;\n        KeycloakSecurityContext session = getSession(httpReq);\n        if (session != null) {\n            HttpSession httpSession = httpReq.getSession();\n            \n            // Set the token as a string in the request (as an attribute) for later use.\n            StudioConfigAuth auth = new StudioConfigAuth();\n            auth.setType(StudioConfigAuthType.token);\n            auth.setLogoutUrl(((HttpServletRequest) request).getContextPath() + \"/logout\");\n            auth.setToken(session.getTokenString());\n            auth.setTokenRefreshPeriod(expirationToRefreshPeriod(session.getToken().getExpiration()));\n            httpSession.setAttribute(RequestAttributeKeys.AUTH_KEY, auth);\n            \n            // Fabricate a User object from information in the access token and store it in the request.\n            AccessToken token = session.getToken();\n            if (token != null) {\n                User user = new User();\n                user.setEmail(token.getEmail());\n                user.setLogin(token.getPreferredUsername());\n                user.setName(token.getName());\n                httpSession.setAttribute(RequestAttributeKeys.USER_KEY, user);\n            }\n        }\n        chain.doFilter(request, response);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1399", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.KeycloakAuthenticationFilter.expirationToRefreshPeriod", "methodParameterType": "int#", "methodParameterName": "expiration#", "methodBody": "private int expirationToRefreshPeriod(int expiration) {\n        int nowInSeconds = org.keycloak.common.util.Time.currentTime();\n        int expiresInSeconds = expiration;\n\n        if (expiresInSeconds <= nowInSeconds) {\n            return 1;\n        } else {\n            return expiresInSeconds - nowInSeconds;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#NumberLiteral#ReturnStatement#Block#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Converts the token expiration time (in seconds) into a refresh period.  The refresh period is simply the # of seconds to wait until a refresh is needed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1400", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.KeycloakAuthenticationFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1401", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/KeycloakAuthenticationFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.KeycloakAuthenticationFilter.getSession", "methodParameterType": "HttpServletRequest#", "methodParameterName": "req#", "methodBody": "private KeycloakSecurityContext getSession(HttpServletRequest req) {\n        return (KeycloakSecurityContext) req.getAttribute(KeycloakSecurityContext.class.getName());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the KC session from the request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1402", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/BaseHrefFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.BaseHrefFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "filterConfig#", "methodBody": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"Init.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#init(javax.servlet.FilterConfig)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1403", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/BaseHrefFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.BaseHrefFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        CharResponseWrapper wrappedResponse = new CharResponseWrapper((HttpServletResponse) response);\n        chain.doFilter(request, wrappedResponse);\n        \n        byte[] bytes = wrappedResponse.getByteArray();\n        if (bytes != null && response.getContentType().contains(\"text/html\")) {\n            String out = new String(bytes, StandardCharsets.UTF_8);\n            out = out.replace(\"<base href=\\\"/\\\">\", \"<base href=\\\"/studio/\\\">\");\n            byte[] newBytes = out.getBytes(StandardCharsets.UTF_8);\n            response.setContentLength(newBytes.length);\n            response.getOutputStream().write(newBytes);\n        } else if (bytes != null && bytes.length > 0) {\n            response.getOutputStream().write(bytes);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#CastExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1404", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/filters/BaseHrefFilter.java", "methodName": "io.apicurio.studio.fe.servlet.filters.BaseHrefFilter.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void destroy() {\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "@see javax.servlet.Filter#destroy()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1405", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.AccessTokenRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccessTokenRequest() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1406", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.getClient_id", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getClient_id() {\n        return client_id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the client_id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1407", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.setClient_id", "methodParameterType": "String#", "methodParameterName": "client_id#", "methodBody": "public void setClient_id(String client_id) {\n        this.client_id = client_id;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param client_id the client_id to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1408", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.getClient_secret", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getClient_secret() {\n        return client_secret;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the client_secret", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1409", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.setClient_secret", "methodParameterType": "String#", "methodParameterName": "client_secret#", "methodBody": "public void setClient_secret(String client_secret) {\n        this.client_secret = client_secret;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param client_secret the client_secret to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1410", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.getCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCode() {\n        return code;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the code", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1411", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.setCode", "methodParameterType": "String#", "methodParameterName": "code#", "methodBody": "public void setCode(String code) {\n        this.code = code;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param code the code to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1412", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.getRedirect_uri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRedirect_uri() {\n        return redirect_uri;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the redirect_uri", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1413", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.setRedirect_uri", "methodParameterType": "String#", "methodParameterName": "redirect_uri#", "methodBody": "public void setRedirect_uri(String redirect_uri) {\n        this.redirect_uri = redirect_uri;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param redirect_uri the redirect_uri to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1414", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getState() {\n        return state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the state", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1415", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenRequest.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenRequest.setState", "methodParameterType": "String#", "methodParameterName": "state#", "methodBody": "public void setState(String state) {\n        this.state = state;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param state the state to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1416", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenResponse.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenResponse.AccessTokenResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccessTokenResponse() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1417", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenResponse.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenResponse.getToken_type", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getToken_type() {\n        return token_type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the token_type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1418", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenResponse.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenResponse.setToken_type", "methodParameterType": "String#", "methodParameterName": "token_type#", "methodBody": "public void setToken_type(String token_type) {\n        this.token_type = token_type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param token_type the token_type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1419", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenResponse.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenResponse.getScope", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getScope() {\n        return scope;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the scope", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1420", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenResponse.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenResponse.setScope", "methodParameterType": "String#", "methodParameterName": "scope#", "methodBody": "public void setScope(String scope) {\n        this.scope = scope;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param scope the scope to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1421", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenResponse.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenResponse.getAccess_token", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAccess_token() {\n        return access_token;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the access_token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1422", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/AccessTokenResponse.java", "methodName": "io.apicurio.studio.fe.servlet.beans.AccessTokenResponse.setAccess_token", "methodParameterType": "String#", "methodParameterName": "access_token#", "methodBody": "public void setAccess_token(String access_token) {\n        this.access_token = access_token;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param access_token the access_token to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1423", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.KeycloakConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public KeycloakConfig() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1424", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.getRealm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRealm() {\n        return realm;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the realm", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1425", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.setRealm", "methodParameterType": "String#", "methodParameterName": "realm#", "methodBody": "public void setRealm(String realm) {\n        this.realm = realm;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param realm the realm to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1426", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.getAuthServerUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAuthServerUrl() {\n        return authServerUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the authServerUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1427", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.setAuthServerUrl", "methodParameterType": "String#", "methodParameterName": "authServerUrl#", "methodBody": "public void setAuthServerUrl(String authServerUrl) {\n        this.authServerUrl = authServerUrl;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param authServerUrl the authServerUrl to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1428", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.getSslRequired", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSslRequired() {\n        return sslRequired;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sslRequired", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1429", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.setSslRequired", "methodParameterType": "String#", "methodParameterName": "sslRequired#", "methodBody": "public void setSslRequired(String sslRequired) {\n        this.sslRequired = sslRequired;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sslRequired the sslRequired to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1430", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.getResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getResource() {\n        return resource;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1431", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.setResource", "methodParameterType": "String#", "methodParameterName": "resource#", "methodBody": "public void setResource(String resource) {\n        this.resource = resource;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resource the resource to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1432", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.isPublicClient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPublicClient() {\n        return publicClient;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the publicClient", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1433", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/beans/KeycloakConfig.java", "methodName": "io.apicurio.studio.fe.servlet.beans.KeycloakConfig.setPublicClient", "methodParameterType": "boolean#", "methodParameterName": "publicClient#", "methodBody": "public void setPublicClient(boolean publicClient) {\n        this.publicClient = publicClient;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param publicClient the publicClient to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1434", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.getHubApiUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHubApiUrl() {\n        return getConfigurationProperty(HUB_API_URL_ENV, HUB_API_URL_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the URL of the Apicurio Hub API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1435", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.getEditingUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEditingUrl() {\n        return getConfigurationProperty(EDITING_URL_ENV, EDITING_URL_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the URL of the Apicurio Editing API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1436", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.getLogoutRedirectUri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLogoutRedirectUri() {\n        return getConfigurationProperty(LOGOUT_REDIRECT_URI_ENV, LOGOUT_REDIRECT_URI_SYSPROP, \"/studio\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the URI of where to redirect after the user logs out of the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1437", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.isDisableHubApiTrustManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDisableHubApiTrustManager() {\n        return \"true\".equals(getConfigurationProperty(HUB_API_DISABLE_API_TRUST_ENV, HUB_API_DISABLE_API_TRUST_SYSPROP, \"true\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the trust manager should be disabled when making server-server API calls to the Hub API.  This happens, for example, in the  {@link DownloadServlet}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1438", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.isMicrocksEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMicrocksEnabled() {\n        return \"true\".equals(getConfigurationProperty(FEATURE_MICROCKS_ENV, FEATURE_MICROCKS_SYSPROP, \"false\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the integration with Microcks should be enabled in the UI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1439", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.isGraphQLEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isGraphQLEnabled() {\n        return \"true\".equals(getConfigurationProperty(FEATURE_GRAPHQL_ENV, FEATURE_GRAPHQL_SYSPROP, \"false\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if GraphQL support is enabled in the UI", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1440", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.isAsyncAPIEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAsyncAPIEnabled() {\n        return \"true\".equals(getConfigurationProperty(FEATURE_ASYNCAPI_ENV, FEATURE_ASYNCAPI_SYSPROP, \"false\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if AsyncAPI support is enabled in the UI", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1441", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.isShareWithEveryoneEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isShareWithEveryoneEnabled() {\n        return \"true\".equals(getConfigurationProperty(FEATURE_SHARE_WITH_EVERYONE_ENV, FEATURE_SHARE_WITH_EVERYONE_SYSPROP, \"false\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the \"share with everyone\" feature is enabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1442", "file": "/root/repos/repos23/apicurio-studio/front-end/servlet/src/main/java/io/apicurio/studio/fe/servlet/config/StudioUiConfiguration.java", "methodName": "io.apicurio.studio.fe.servlet.config.StudioUiConfiguration.getUiUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUiUrl() {\n        return getConfigurationProperty(HUB_UI_URL_ENV, HUB_UI_URL_SYSPROP, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the URL of the Apicurio UI.  This is typically blank, but in some strange cases it can  be useful when creating certain links in the UI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1443", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/ReleaseTool.java", "methodName": "io.apicurio.studio.tools.release.ReleaseTool.main", "methodParameterType": "String[]#", "methodParameterName": "args#", "methodBody": "public static void main(String[] args) throws Exception {\n        Options options = new Options();\n        options.addOption(\"n\", \"release-name\", true, \"The name of the new release.\");\n        options.addOption(\"p\", \"prerelease\", false, \"Indicate that this is a pre-release.\");\n        options.addOption(\"t\", \"release-tag\", true, \"The tag name of the new release.\");\n        options.addOption(\"o\", \"previous-tag\", true, \"The tag name of the previous release.\");\n        options.addOption(\"g\", \"github-pat\", true, \"The GitHub PAT (for authentication/authorization).\");\n        options.addOption(\"a\", \"artifact\", true, \"The binary release artifact (full path).\");\n        options.addOption(\"d\", \"output-directory\", true, \"Where to store output file(s).\");\n\n        CommandLineParser parser = new DefaultParser();\n        CommandLine cmd = parser.parse(options, args);\n\n        if (    !cmd.hasOption(\"n\") ||\n                !cmd.hasOption(\"t\") ||\n                !cmd.hasOption(\"o\") ||\n                !cmd.hasOption(\"g\") ||\n                !cmd.hasOption(\"a\")    )\n        {\n            HelpFormatter formatter = new HelpFormatter();\n            formatter.printHelp( \"release-studio\", options );\n            System.exit(1);\n        }\n\n        // Arguments (command line)\n        String releaseName = cmd.getOptionValue(\"n\");\n        boolean isPrerelease = cmd.hasOption(\"p\");\n        String releaseTag = cmd.getOptionValue(\"t\");\n        String oldReleaseTag = cmd.getOptionValue(\"o\");\n        String githubPAT = cmd.getOptionValue(\"g\");\n        String artifact = cmd.getOptionValue(\"a\");\n        File outputDir = new File(\"\");\n        if (cmd.hasOption(\"d\")) {\n            outputDir = new File(cmd.getOptionValue(\"d\"));\n            if (!outputDir.exists()) {\n                outputDir.mkdirs();\n            }\n        }\n\n        File releaseArtifactFile = new File(artifact);\n        File releaseArtifactSigFile = new File(artifact + \".asc\");\n\n        String releaseArtifact = releaseArtifactFile.getName();\n        String releaseArtifactSig = releaseArtifactSigFile.getName();\n\n        if (!releaseArtifactFile.isFile()) {\n            System.err.println(\"Missing file: \" + releaseArtifactFile.getAbsolutePath());\n            System.exit(1);\n        }\n        if (!releaseArtifactSigFile.isFile()) {\n            System.err.println(\"Missing file: \" + releaseArtifactSigFile.getAbsolutePath());\n            System.exit(1);\n        }\n\n        System.out.println(\"=========================================\");\n        System.out.println(\"Creating Release: \" + releaseTag);\n        System.out.println(\"Previous Release: \" + oldReleaseTag);\n        System.out.println(\"            Name: \" + releaseName);\n        System.out.println(\"        Artifact: \" + releaseArtifact);\n        System.out.println(\"     Pre-Release: \" + isPrerelease);\n        System.out.println(\"=========================================\");\n\n        String releaseNotes = \"\";\n\n        // Step #1 - Generate Release Notes\n        //   * Grab info about the previous release (extract publish date)\n        //   * Query all Issues for ones closed since that date\n        //   * Generate Release Notes from the resulting Issues\n        try {\n            System.out.println(\"Getting info about release \" + oldReleaseTag);\n            HttpResponse<JsonNode> response = Unirest.get(\"https://api.github.com/repos/apicurio/apicurio-studio/releases/tags/v\" + oldReleaseTag)\n                    .header(\"Accept\", \"application/json\").header(\"Authorization\", \"token \" + githubPAT).asJson();\n            if (response.getStatus() != 200) {\n                throw new Exception(\"Failed to get old release info: \" + response.getStatusText());\n            }\n            JsonNode body = response.getBody();\n            String publishedDate = body.getObject().getString(\"published_at\");\n            if (publishedDate == null) {\n                throw new Exception(\"Could not find Published Date for previous release \" + oldReleaseTag);\n            }\n            System.out.println(\"Release \" + oldReleaseTag + \" was published on \" + publishedDate);\n\n            List<JSONObject> issues = getIssuesForRelease(publishedDate, githubPAT);\n            System.out.println(\"Found \" + issues.size() + \" issues closed in release \" + releaseTag);\n            System.out.println(\"Generating Release Notes\");\n\n            releaseNotes = generateReleaseNotes(releaseName, releaseTag, issues);\n            System.out.println(\"------------ Release Notes --------------\");\n            System.out.println(releaseNotes);\n            System.out.println(\"-----------------------------------------\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        String assetUploadUrl = null;\n\n        // Step #2 - Create a GitHub Release\n        try {\n            System.out.println(\"\\nCreating GitHub Release \" + releaseTag);\n            JSONObject body = new JSONObject();\n            body.put(\"tag_name\", \"v\" + releaseTag);\n            body.put(\"name\", releaseName);\n            body.put(\"body\", releaseNotes);\n            body.put(\"prerelease\", isPrerelease);\n\n            HttpResponse<JsonNode> response = Unirest.post(\"https://api.github.com/repos/apicurio/apicurio-studio/releases\")\n                    .header(\"Accept\", \"application/json\")\n                    .header(\"Content-Type\", \"application/json\")\n                    .header(\"Authorization\", \"token \" + githubPAT)\n                    .body(body).asJson();\n            if (response.getStatus() != 201) {\n                throw new Exception(\"Failed to create release in GitHub: \" + response.getStatusText());\n            }\n\n            assetUploadUrl = response.getBody().getObject().getString(\"upload_url\");\n            if (assetUploadUrl == null || assetUploadUrl.trim().isEmpty()) {\n                throw new Exception(\"Failed to get Asset Upload URL for newly created release!\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        // Step #3 - Upload Release Artifact (zip file)\n        System.out.println(\"\\nUploading Quickstart Artifact: \" + releaseArtifact);\n        try {\n            String artifactUploadUrl = createUploadUrl(assetUploadUrl, releaseArtifact);\n            byte [] artifactData = loadArtifactData(releaseArtifactFile);\n            System.out.println(\"Uploading artifact asset: \" + artifactUploadUrl);\n            HttpResponse<JsonNode> response = Unirest.post(artifactUploadUrl)\n                    .header(\"Accept\", \"application/json\")\n                    .header(\"Content-Type\", \"application/zip\")\n                    .header(\"Authorization\", \"token \" + githubPAT)\n                    .body(artifactData)\n                    .asJson();\n            if (response.getStatus() != 201) {\n                throw new Exception(\"Failed to upload asset: \" + releaseArtifact, new Exception(response.getStatus() + \"::\" + response.getStatusText()));\n            }\n\n            Thread.sleep(1000);\n\n            artifactUploadUrl = createUploadUrl(assetUploadUrl, releaseArtifactSig);\n            artifactData = loadArtifactData(releaseArtifactSigFile);\n            System.out.println(\"Uploading artifact asset: \" + artifactUploadUrl);\n            response = Unirest.post(artifactUploadUrl)\n                    .header(\"Accept\", \"application/json\")\n                    .header(\"Content-Type\", \"text/plain\")\n                    .header(\"Authorization\", \"token \" + githubPAT)\n                    .body(artifactData)\n                    .asJson();\n            if (response.getStatus() != 201) {\n                throw new Exception(\"Failed to upload asset: \" + releaseArtifactSig, new Exception(response.getStatus() + \"::\" + response.getStatusText()));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        \n        Thread.sleep(1000);\n\n        // Step #4 - Download Latest Release JSON for inclusion in the project web site\n        try {\n            System.out.println(\"Getting info about the release.\");\n            HttpResponse<JsonNode> response = Unirest.get(\"https://api.github.com/repos/apicurio/apicurio-studio/releases/latest\")\n                    .header(\"Accept\", \"application/json\").asJson();\n            if (response.getStatus() != 200) {\n                throw new Exception(\"Failed to get release info: \" + response.getStatusText());\n            }\n            JsonNode body = response.getBody();\n            String publishedDate = body.getObject().getString(\"published_at\");\n            if (publishedDate == null) {\n                throw new Exception(\"Could not find Published Date for release.\");\n            }\n            String fname = publishedDate.replace(':', '-');\n            File outFile = new File(outputDir, fname + \".json\");\n            \n            System.out.println(\"Writing latest release info to: \" + outFile.getAbsolutePath());\n            \n            String output = body.getObject().toString(4);\n            try (FileOutputStream fos = new FileOutputStream(outFile)) {\n                fos.write(output.getBytes(\"UTF-8\"));\n                fos.flush();\n            }\n\n            System.out.println(\"Release info successfully written.\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        \n        System.out.println(\"=========================================\");\n        System.out.println(\"All Done!\");\n        System.out.println(\"=========================================\");\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Main method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1444", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/ReleaseTool.java", "methodName": "io.apicurio.studio.tools.release.ReleaseTool.generateReleaseNotes", "methodParameterType": "String#String#List<JSONObject>#", "methodParameterName": "releaseName#releaseTag#issues#", "methodBody": "private static String generateReleaseNotes(String releaseName, String releaseTag,\n            List<JSONObject> issues) {\n        StringBuilder builder = new StringBuilder();\n\n        builder.append(\"This represents the official release of Apicurio Studio, version \");\n        builder.append(releaseTag);\n        builder.append(\".\\n\\n\");\n        builder.append(\"The following issues have been resolved in this release:\\n\\n\");\n\n        issues.forEach(issue -> {\n            builder.append(String.format(\"* [#%d](%s) %s\", issue.getInt(\"number\"), issue.getString(\"html_url\"), issue.getString(\"title\")));\n            builder.append(\"\\n\");\n        });\n\n        builder.append(\"\\n\\n\");\n\n        builder.append(\"For more information, please see the Apicurio Studio's official project site:\\n\\n\");\n        builder.append(\"* [General Information](http://www.apicur.io/)\\n\");\n        builder.append(\"* [Download/Quickstart](http://www.apicur.io/download)\\n\");\n        builder.append(\"* [Blog](http://www.apicur.io/blog)\\n\");\n\n        return builder.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the release notes for a release.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1445", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/ReleaseTool.java", "methodName": "io.apicurio.studio.tools.release.ReleaseTool.getIssuesForRelease", "methodParameterType": "String#String#", "methodParameterName": "since#githubPAT#", "methodBody": "private static List<JSONObject> getIssuesForRelease(String since, String githubPAT) throws Exception {\n        List<JSONObject> rval = new ArrayList<>();\n\n        String currentPageUrl = \"https://api.github.com/repos/apicurio/apicurio-studio/issues\";\n        int pageNum = 1;\n        while (currentPageUrl != null) {\n            System.out.println(\"Querying page \" + pageNum + \" of issues.\");\n            HttpResponse<JsonNode> response = Unirest.get(currentPageUrl)\n                    .queryString(\"since\", since)\n                    .queryString(\"state\", \"closed\")\n                    .header(\"Accept\", \"application/json\")\n                    .header(\"Authorization\", \"token \" + githubPAT).asJson();\n            if (response.getStatus() != 200) {\n                throw new Exception(\"Failed to list Issues: \" + response.getStatusText());\n            }\n            JSONArray issueNodes = response.getBody().getArray();\n            issueNodes.forEach(issueNode -> {\n                JSONObject issue = (JSONObject) issueNode;\n                String closedOn = issue.getString(\"closed_at\");\n                if (since.compareTo(closedOn) < 0) {\n                    if (!isIssueExcluded(issue)) {\n                        rval.add(issue);\n                    } else {\n                        System.out.println(\"Skipping issue (excluded): \" + issue.getString(\"title\"));\n                    }\n                } else {\n                    System.out.println(\"Skipping issue (old release): \" + issue.getString(\"title\"));\n                }\n            });\n\n            System.out.println(\"Processing page \" + pageNum + \" of issues.\");\n            System.out.println(\"    Found \" + issueNodes.length() + \" issues on page.\");\n            String allLinks = response.getHeaders().getFirst(\"Link\");\n            Map<String, Link> links = Link.parseAll(allLinks);\n            if (links.containsKey(\"next\")) {\n                currentPageUrl = links.get(\"next\").getUrl();\n            } else {\n                currentPageUrl = null;\n            }\n            pageNum++;\n        }\n\n        return rval;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all issues (as JSON nodes) that were closed since the given date.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1446", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/ReleaseTool.java", "methodName": "io.apicurio.studio.tools.release.ReleaseTool.isIssueExcluded", "methodParameterType": "JSONObject#", "methodParameterName": "issueNode#", "methodBody": "private static boolean isIssueExcluded(JSONObject issueNode) {\n        JSONArray labelsArray = issueNode.getJSONArray(\"labels\");\n        if (labelsArray != null) {\n            Set<String> labels = labelsArray.toList().stream().map( label -> {\n                return ((Map<?,?>) label).get(\"name\").toString();\n            }).collect(Collectors.toSet());\n            return labels.contains(\"dependencies\") || labels.contains(\"question\") || labels.contains(\"invalid\")  \n                    || labels.contains(\"wontfix\")|| labels.contains(\"duplicate\");\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#WildcardType#WildcardType#ParameterizedType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ReturnStatement(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests whether an issue should be excluded from the release notes based on  certain labels the issue might have (e.g. dependabot issues).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1447", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/ReleaseTool.java", "methodName": "io.apicurio.studio.tools.release.ReleaseTool.createUploadUrl", "methodParameterType": "String#String#", "methodParameterName": "assetUploadUrl#assetName#", "methodBody": "private static String createUploadUrl(String assetUploadUrl, String assetName) throws Exception {\n        int idx = assetUploadUrl.indexOf(\"{?name\");\n        if (idx < 0) {\n            throw new Exception(\"Invalid Asset Upload URL Pattern: \" + assetUploadUrl);\n        }\n        return String.format(\"%s?name=%s\", assetUploadUrl.substring(0, idx), assetName);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param assetUploadUrl", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1448", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/ReleaseTool.java", "methodName": "io.apicurio.studio.tools.release.ReleaseTool.loadArtifactData", "methodParameterType": "File#", "methodParameterName": "releaseArtifactFile#", "methodBody": "private static byte[] loadArtifactData(File releaseArtifactFile) throws Exception {\n        System.out.println(\"Loading artifact content: \" + releaseArtifactFile.getName());\n        byte [] buffer = new byte[(int) releaseArtifactFile.length()];\n        try (InputStream is = new FileInputStream(releaseArtifactFile)) {\n            IOUtils.readFully(is, buffer);\n            return buffer;\n        } catch (IOException e) {\n            throw new Exception(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@param releaseArtifactFile", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1449", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/Link.java", "methodName": "io.apicurio.studio.tools.release.Link.Link", "methodParameterType": "String#String#", "methodParameterName": "url#type#", "methodBody": "public Link(String url, String type) {\n        this.url = url;\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1450", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/Link.java", "methodName": "io.apicurio.studio.tools.release.Link.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUrl() {\n        return url;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the url", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1451", "file": "/root/repos/repos23/apicurio-studio/tools/release/src/main/java/io/apicurio/studio/tools/release/Link.java", "methodName": "io.apicurio.studio.tools.release.Link.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1452", "file": "/root/repos/repos23/apicurio-studio/tools/httpmon/src/main/java/io/apicurio/studio/tools/httpmon/ConnectionHandler.java", "methodName": "io.apicurio.studio.tools.httpmon.ConnectionHandler.ConnectionHandler", "methodParameterType": "Socket#", "methodParameterName": "socket#", "methodBody": "public ConnectionHandler(Socket socket) {\n        this.socket = socket;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1453", "file": "/root/repos/repos23/apicurio-studio/tools/httpmon/src/main/java/io/apicurio/studio/tools/httpmon/ConnectionHandler.java", "methodName": "io.apicurio.studio.tools.httpmon.ConnectionHandler.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void run() {\n        try {\n            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n            SSLSocket clientSocket = (SSLSocket) factory.createSocket(\"35.231.145.151\", 443); // gitlab.com\n            clientSocket.startHandshake();\n            \n            OutputStream clientOS = clientSocket.getOutputStream();\n            \n            // Proxy the request\n            BufferedReader inFromClient = new BufferedReader(\n                    new InputStreamReader(this.socket.getInputStream()));\n            String sentence;\n            do {\n                sentence = inFromClient.readLine();\n                System.out.println(\"REQUEST: \" + sentence);\n                clientOS.write((sentence + \"\\r\\n\").getBytes());\n            } while (!\"\".equals(sentence));\n            \n            System.out.println(\"---\");\n            \n            // Proxy the response\n            BufferedReader outFromServer = new BufferedReader(\n                    new InputStreamReader(clientSocket.getInputStream()));\n            OutputStream originOS = this.socket.getOutputStream();\n            do {\n                sentence = outFromServer.readLine();\n                System.out.println(\"RESPONSE: \" + sentence);\n                originOS.write((sentence + \"\\r\\n\").getBytes());\n            } while (sentence != null);\n        } catch (Throwable t) {\n            t.printStackTrace();\n        } finally {\n            System.out.println(\"(Closing socket)\");\n            try { this.socket.close(); } catch (IOException e) { }\n        }\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#StringLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#DoStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#DoStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)DoStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)DoStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "@see java.lang.Runnable#run()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]