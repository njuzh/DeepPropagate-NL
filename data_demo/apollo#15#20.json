[{"index": "0", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Serializer.java", "methodName": "com.spotify.apollo.Serializer.serialize", "methodParameterType": "Request#Object#", "methodParameterName": "request#t#", "methodBody": "Payload serialize(Request request, Object t);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Produce a  {@link Payload} from the incoming request {@link Request}and the endpoint returned object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#", "methodParameterName": "uri#", "methodBody": "public QueryStringDecoder(String uri) {\n    this(uri, DEFAULT_CHARSET);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI. The decoder will assume that the query string is encoded in UTF-8.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#boolean#", "methodParameterName": "uri#hasPath#", "methodBody": "public QueryStringDecoder(String uri, boolean hasPath) {\n    this(uri, DEFAULT_CHARSET, hasPath);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#Charset#", "methodParameterName": "uri#charset#", "methodBody": "public QueryStringDecoder(String uri, Charset charset) {\n    this(uri, charset, true);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#Charset#boolean#", "methodParameterName": "uri#charset#hasPath#", "methodBody": "public QueryStringDecoder(String uri, Charset charset, boolean hasPath) {\n    this(uri, charset, hasPath, DEFAULT_MAX_PARAMS);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#Charset#boolean#int#", "methodParameterName": "uri#charset#hasPath#maxParams#", "methodBody": "public QueryStringDecoder(String uri, Charset charset, boolean hasPath, int maxParams) {\n    if (uri == null) {\n      throw new NullPointerException(\"getUri\");\n    }\n    if (charset == null) {\n      throw new NullPointerException(\"charset\");\n    }\n    if (maxParams <= 0) {\n      throw new IllegalArgumentException(\n          \"maxParams: \" + maxParams + \" (expected: a positive integer)\");\n    }\n\n    this.uri = uri;\n    this.charset = charset;\n    this.maxParams = maxParams;\n    this.hasPath = hasPath;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "URI#", "methodParameterName": "uri#", "methodBody": "public QueryStringDecoder(URI uri) {\n    this(uri, DEFAULT_CHARSET);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI. The decoder will assume that the query string is encoded in UTF-8.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "URI#Charset#", "methodParameterName": "uri#charset#", "methodBody": "public QueryStringDecoder(URI uri, Charset charset) {\n    this(uri, charset, DEFAULT_MAX_PARAMS);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "URI#Charset#int#", "methodParameterName": "uri#charset#maxParams#", "methodBody": "public QueryStringDecoder(URI uri, Charset charset, int maxParams) {\n    if (uri == null) {\n      throw new NullPointerException(\"getUri\");\n    }\n    if (charset == null) {\n      throw new NullPointerException(\"charset\");\n    }\n    if (maxParams <= 0) {\n      throw new IllegalArgumentException(\n          \"maxParams: \" + maxParams + \" (expected: a positive integer)\");\n    }\n\n    String rawPath = uri.getRawPath();\n    if (rawPath != null) {\n      hasPath = true;\n    } else {\n      rawPath = \"\";\n      hasPath = false;\n    }\n    // Also take care of cut of things like \"http://localhost\"\n    this.uri = rawPath + (uri.getRawQuery() == null? \"\" : '?' + uri.getRawQuery());\n\n    this.charset = charset;\n    this.maxParams = maxParams;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#StringLiteral#CharacterLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ConditionalExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(InfixExpression(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ConditionalExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.uri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String uri() {\n    return uri;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the uri used to initialize this  {@link QueryStringDecoder}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.path", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String path() {\n    if (path == null) {\n      if (!hasPath) {\n        return path = \"\";\n      }\n\n      int pathEndPos = uri.indexOf('?');\n      if (pathEndPos < 0) {\n        path = uri;\n      } else {\n        return path = uri.substring(0, pathEndPos);\n      }\n    }\n    return path;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#SimpleName#StringLiteral#Assignment#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ReturnStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the decoded path string of the URI.", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.substring"], "call_func_parameter": [["int"], ["int", "int"]], "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.parameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, List<String>> parameters() {\n    if (params == null) {\n      if (hasPath) {\n        int pathLength = path().length();\n        if (uri.length() == pathLength) {\n          return Collections.emptyMap();\n        }\n        decodeParams(uri.substring(pathLength + 1));\n      } else {\n        if (uri.isEmpty()) {\n          return Collections.emptyMap();\n        }\n        decodeParams(uri);\n      }\n    }\n    return params;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the decoded key-value parameter pairs of the URI.", "call_func_name": ["com.spotify.apollo.QueryStringDecoder.path", "java.lang.String.length", "java.util.Collections.emptyMap", "java.lang.String.substring", "com.spotify.apollo.QueryStringDecoder.decodeParams", "java.lang.String.isEmpty"], "call_func_parameter": [[""], [""], [""], ["int"], ["java.lang.String"], [""]], "passed_comments": [{"com.spotify.apollo.QueryStringDecoder.path": "Returns the decoded path string of the URI."}]}, {"index": "12", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.decodeComponent", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static String decodeComponent(final String s) {\n    return decodeComponent(s, DEFAULT_CHARSET);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes a bit of an URL encoded by a browser. <p> This is equivalent to calling  {@link #decodeComponent(String,Charset)}with the UTF-8 charset (recommended to comply with RFC 3986, Section 2).", "call_func_name": ["com.spotify.apollo.QueryStringDecoder.decodeComponent"], "call_func_parameter": [["java.lang.String", "java.nio.charset.Charset"]], "passed_comments": [{"com.spotify.apollo.QueryStringDecoder.decodeComponent": "Decodes a bit of an URL encoded by a browser. <p> The string is expected to be encoded as per RFC 3986, Section 2. This is the encoding used by JavaScript functions  {@code encodeURI}and  {@code encodeURIComponent}, but not  {@code escape}.  For example in this encoding, &eacute; (in Unicode  {@code U+00E9} or in UTF-8{@code 0xC3 0xA9}) is encoded as  {@code %C3%A9} or {@code %c3%a9}. <p> This is essentially equivalent to calling {@link URLDecoder#decode(String,String) URLDecoder.decode(s, charset.name())}except that it's over 2x faster and generates less garbage for the GC. Actually this function doesn't allocate any memory if there's nothing to decode, the argument itself is returned."}]}, {"index": "13", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.decodeComponent", "methodParameterType": "String#Charset#", "methodParameterName": "s#charset#", "methodBody": "public static String decodeComponent(final String s, final Charset charset) {\n    if (s == null) {\n      return \"\";\n    }\n    final int size = s.length();\n    boolean modified = false;\n    for (int i = 0; i < size; i++) {\n      final char c = s.charAt(i);\n      if (c == '%' || c == '+') {\n        modified = true;\n        break;\n      }\n    }\n    if (!modified) {\n      return s;\n    }\n    final byte[] buf = new byte[size];\n    int pos = 0;  // position in `buf'.\n    for (int i = 0; i < size; i++) {\n      char c = s.charAt(i);\n      switch (c) {\n        case '+':\n          buf[pos++] = ' ';  // \"+\" -> \" \"\n          break;\n        case '%':\n          if (i == size - 1) {\n            throw new IllegalArgumentException(\"unterminated escape\"\n                                               + \" sequence at end of string: \" + s);\n          }\n          c = s.charAt(++i);\n          if (c == '%') {\n            buf[pos++] = '%';  // \"%%\" -> \"%\"\n            break;\n          }\n          if (i == size - 1) {\n            throw new IllegalArgumentException(\"partial escape\"\n                                               + \" sequence at end of string: \" + s);\n          }\n          c = decodeHexNibble(c);\n          final char c2 = decodeHexNibble(s.charAt(++i));\n          if (c == Character.MAX_VALUE || c2 == Character.MAX_VALUE) {\n            throw new IllegalArgumentException(\n                \"invalid escape sequence `%\" + s.charAt(i - 1)\n                + s.charAt(i) + \"' at index \" + (i - 2)\n                + \" of: \" + s);\n          }\n          c = (char) (c * 16 + c2);\n          // Fall through.\n        default:\n          buf[pos++] = (byte) c;\n          break;\n      }\n    }\n    return new String(buf, 0, pos, charset);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#SimpleName#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#PrefixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#PrefixExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#SimpleName#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SwitchCase#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#CastExpression#Assignment#ExpressionStatement#BreakStatement#SwitchStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes a bit of an URL encoded by a browser. <p> The string is expected to be encoded as per RFC 3986, Section 2. This is the encoding used by JavaScript functions  {@code encodeURI}and  {@code encodeURIComponent}, but not  {@code escape}.  For example in this encoding, &eacute; (in Unicode  {@code U+00E9} or in UTF-8{@code 0xC3 0xA9}) is encoded as  {@code %C3%A9} or {@code %c3%a9}. <p> This is essentially equivalent to calling {@link URLDecoder#decode(String,String) URLDecoder.decode(s, charset.name())}except that it's over 2x faster and generates less garbage for the GC. Actually this function doesn't allocate any memory if there's nothing to decode, the argument itself is returned.", "call_func_name": ["java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "com.spotify.apollo.QueryStringDecoder.decodeHexNibble", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.String.<init>"], "call_func_parameter": [[""], ["int"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["char"], ["char"], ["int"], ["byte[]", "int", "int", "java.nio.charset.Charset"]], "passed_comments": [{"com.spotify.apollo.QueryStringDecoder.decodeHexNibble": "Helper to decode half of a hexadecimal number from a string."}]}, {"index": "14", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/QueryStringDecoder.java", "methodName": "com.spotify.apollo.QueryStringDecoder.decodeHexNibble", "methodParameterType": "char#", "methodParameterName": "c#", "methodBody": "private static char decodeHexNibble(final char c) {\n    if ('0' <= c && c <= '9') {\n      return (char) (c - '0');\n    } else if ('a' <= c && c <= 'f') {\n      return (char) (c - 'a' + 10);\n    } else if ('A' <= c && c <= 'F') {\n      return (char) (c - 'A' + 10);\n    } else {\n      return Character.MAX_VALUE;\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#CharacterLiteral#SimpleName#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#CastExpression#ReturnStatement#Block#CharacterLiteral#SimpleName#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#CharacterLiteral#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#ReturnStatement#Block#CharacterLiteral#SimpleName#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#CharacterLiteral#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)CastExpression)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)ReturnStatement)Block(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Helper to decode half of a hexadecimal number from a string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.status", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "StatusType status();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The status of the response message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.headers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  Map<String, String> headers();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The response headers. Deprecated in favor of  {@link Response#headerEntries()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.headerEntries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Map.Entry<String, String>> headerEntries();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The response headers", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.header", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "default Optional<String> header(String name) {\n    Objects.requireNonNull(name, \"Header names cannot be null\");\n\n    for (Map.Entry<String, String> headerEntry : headerEntries()) {\n      if (name.equalsIgnoreCase(headerEntry.getKey())) {\n        return Optional.ofNullable(headerEntry.getValue());\n      }\n    }\n\n    return Optional.empty();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A header of the request message, looked up in a case insensitive way, or empty if no header with that name is found.", "call_func_name": ["java.util.Objects.requireNonNull", "com.spotify.apollo.Response.headerEntries", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.equalsIgnoreCase", "java.util.Optional.ofNullable", "java.util.Optional.empty"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""]], "passed_comments": [{"com.spotify.apollo.Response.headerEntries": "The response headers"}]}, {"index": "19", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.payload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Optional<T> payload();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The single payload of the response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.withHeader", "methodParameterType": "String#String#", "methodParameterName": "header#value#", "methodBody": "Response<T> withHeader(String header, String value);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Response} based on this, but with an additional header.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.withHeaders", "methodParameterType": "Map<String,String>#", "methodParameterName": "headers#", "methodBody": "Response<T> withHeaders(Map<String, String> headers);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Response} based on this, but with additional headers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.withPayload", "methodParameterType": "P#", "methodParameterName": "newPayload#", "methodBody": "<P> Response<P> withPayload(@Nullable P newPayload);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Response} based on this, but with a different payload. Status code,headers, etc., are copied over. To clear out the payload, one can pass in  {@code null}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.ok", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "static <T> Response<T> ok() {\n    //noinspection unchecked\n    return (Response<T>) ResponseImpl.OK;\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a typed 200 OK  {@link Response}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.forStatus", "methodParameterType": "StatusType#", "methodParameterName": "statusCode#", "methodBody": "static <T> Response<T> forStatus(StatusType statusCode) {\n    return ResponseImpl.create(statusCode);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link Response} with the given status code.If  {@code code} is OK, this function will be equivalent to {@link #ok()}.", "call_func_name": ["com.spotify.apollo.ResponseImpl.create"], "call_func_parameter": [["com.spotify.apollo.StatusType"]], "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.forPayload", "methodParameterType": "T#", "methodParameterName": "payload#", "methodBody": "static <T> Response<T> forPayload(T payload) {\n    return ResponseImpl.create(payload);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a 200 OK  {@link Response} with the given payload of type {@link T} .", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Response.java", "methodName": "com.spotify.apollo.Response.of", "methodParameterType": "StatusType#T#", "methodParameterName": "statusCode#payload#", "methodBody": "static <T> Response<T> of(StatusType statusCode, T payload) {\n    return ResponseImpl.create(statusCode, payload);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link Response} with the given status code and a payload with type {@link T}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/StatusType.java", "methodName": "com.spotify.apollo.StatusType.withReasonPhrase", "methodParameterType": "String#", "methodParameterName": "reasonPhrase#", "methodBody": "StatusType withReasonPhrase(String reasonPhrase);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a StatusType instance with the same code value as the current instance, but using the supplied reasonPhrase. The returned instance may be the same as object the method is invoked on, or different.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestMetadata.java", "methodName": "com.spotify.apollo.RequestMetadata.arrivalTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Instant arrivalTime();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the arrival time of the incoming request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestMetadata.java", "methodName": "com.spotify.apollo.RequestMetadata.localAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Optional<HostAndPort> localAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Indicates the local address of the connection which the request was received on, if available", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestMetadata.java", "methodName": "com.spotify.apollo.RequestMetadata.remoteAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Optional<HostAndPort> remoteAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Indicates the remote address of the connection which the request was received on, if available. This may be the address of a proxy address or a direct connection to the caller, depending on the network setup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Payloads.java", "methodName": "com.spotify.apollo.Payloads.create", "methodParameterType": "ByteString#", "methodParameterName": "byteString#", "methodBody": "public static Payload create(ByteString byteString) {\n    return new PayloadImpl(byteString, Optional.empty());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Payload} from ByteString without contentType", "call_func_name": ["java.util.Optional.empty"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Payloads.java", "methodName": "com.spotify.apollo.Payloads.create", "methodParameterType": "ByteString#String#", "methodParameterName": "byteString#contentType#", "methodBody": "public static Payload create(ByteString byteString, String contentType) {\n    return new PayloadImpl(byteString, Optional.ofNullable(contentType));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Payload} from ByteString with thespecified contentType", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Payloads.java", "methodName": "com.spotify.apollo.Payloads.create", "methodParameterType": "ByteString#Optional<String>#", "methodParameterName": "byteString#contentType#", "methodBody": "public static Payload create(ByteString byteString, Optional<String> contentType) {\n    return new PayloadImpl(byteString, contentType);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Payload} from ByteString with anoptional contentType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestContext.java", "methodName": "com.spotify.apollo.RequestContext.request", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Request request();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the incoming request message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestContext.java", "methodName": "com.spotify.apollo.RequestContext.requestScopedClient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Client requestScopedClient();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get an Apollo client that can be used to make backend service requests. The requests will have the auth context of the incoming request applied. For a non-scoped Client, see  {@link Environment#client()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestContext.java", "methodName": "com.spotify.apollo.RequestContext.pathArgs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> pathArgs();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets a map of parsed path arguments. If Route is defined as having the path \"/somewhere/<param>/<param2:path>\", and it gets invoked with a URI with the path \"/somewhere/over/the%32rainbow\", then the map will be { \"param\" : \"over\", \"param2\": \"the%32rainbow\" }.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestContext.java", "methodName": "com.spotify.apollo.RequestContext.arrivalTimeNanos", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  default long arrivalTimeNanos() {\n    // This is not a good default for real implementations. It is simply a catch-all\n    // default to not break existing implementations.\n    return System.nanoTime();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the arrival time of the incoming request in nanoseconds. Note that this is not unix epoch as the time is provided by  {@link System#nanoTime()}. To get unix epoch time, do something like: <pre> {@code long processingTimeNanos = System.nanoTime() - requestContext.arrivalTimeNanos(); long arrivalTimeUnixEpochMillis = System.currentTimeMillis() + TimeUnit.NANOSECONDS.toMillis(processingTimeNanos);}</pre>", "call_func_name": ["java.lang.System.nanoTime"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/RequestContext.java", "methodName": "com.spotify.apollo.RequestContext.metadata", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default RequestMetadata metadata() {\n    throw new UnsupportedOperationException(\"If you implement a RequestContext, you must override this method\");\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Returns the metadata available for this request.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.method", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String method();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The method of the request message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.uri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String uri();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The uri of the request message. Uri query parameters are available via  {@link #parameter(String)} and {@link #parameters()}. Uri pathArgs are available in  {@link RequestContext}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.parameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, List<String>> parameters();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The uri query parameters of the request message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.parameter", "methodParameterType": "String#", "methodParameterName": "parameter#", "methodBody": "default Optional<String> parameter(String parameter) {\n    List<String> values = parameters().get(parameter);\n    if (values != null) {\n      return Optional.ofNullable(values.get(0));\n    } else {\n      return Optional.empty();\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "A uri query parameter of the request message, or empty if no parameter with that name is found. Returns the first query parameter value if it is repeated. Use  {@link #parameters()} to getall repeated values.", "call_func_name": ["com.spotify.apollo.Request.parameters", "java.util.Map.get", "java.util.List.get", "java.util.Optional.ofNullable", "java.util.Optional.empty"], "call_func_parameter": [[""], ["java.lang.Object"], ["int"], ["java.lang.Object"], [""]], "passed_comments": [{"com.spotify.apollo.Request.parameters": "The uri query parameters of the request message."}]}, {"index": "43", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.headers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  Map<String, String> headers();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The headers of the request message. Deprecated in favor of  {@link Request#headerEntries()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.headerEntries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Map.Entry<String, String>> headerEntries();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "All the headers of the request message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.header", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "default Optional<String> header(String name) {\n    Objects.requireNonNull(name, \"Header names cannot be null\");\n\n    for (Map.Entry<String, String> headerEntry : headerEntries()) {\n      if (name.equalsIgnoreCase(headerEntry.getKey())) {\n        return Optional.ofNullable(headerEntry.getValue());\n      }\n    }\n\n    return Optional.empty();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A header of the request message, looked up in a case insensitive way, or empty if no header with that name is found.", "call_func_name": ["java.util.Objects.requireNonNull", "com.spotify.apollo.Request.headerEntries", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.equalsIgnoreCase", "java.util.Optional.ofNullable", "java.util.Optional.empty"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""]], "passed_comments": [{"com.spotify.apollo.Request.headerEntries": "All the headers of the request message."}]}, {"index": "46", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.service", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Optional<String> service();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The calling service of the request, if known.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.payload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Optional<ByteString> payload();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The request message payload, or empty if there is no payload.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.ttl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default Optional<Duration> ttl() {\n    return Optional.empty();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The request ttl.", "call_func_name": ["java.util.Optional.empty"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.withUri", "methodParameterType": "String#", "methodParameterName": "uri#", "methodBody": "Request withUri(String uri);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Request} based on this, but with a different URI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.withService", "methodParameterType": "String#", "methodParameterName": "service#", "methodBody": "Request withService(String service);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Request} based on this, but with a different calling service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.withHeader", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "Request withHeader(String name, String value);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Request} based on this, but with an additional header.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.withHeaders", "methodParameterType": "Map<String,String>#", "methodParameterName": "additionalHeaders#", "methodBody": "Request withHeaders(Map<String, String> additionalHeaders);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Request} based on this, but with additional headers. If the currentrequest has a header whose key is also included in the  {@code additionalHeaders} map,then the new request will have the header value defined in the map.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.clearHeaders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Request clearHeaders();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Creates a new  {@link Request} based on this, but with no header information.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.withPayload", "methodParameterType": "ByteString#", "methodParameterName": "payload#", "methodBody": "Request withPayload(ByteString payload);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a new  {@link Request} based on this, but with a different payload.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.withTtl", "methodParameterType": "Duration#", "methodParameterName": "ttl#", "methodBody": "default Request withTtl(Duration ttl) {\n    throw new UnsupportedOperationException();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Request} based on this, but with a different ttl.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.forUri", "methodParameterType": "String#String#", "methodParameterName": "uri#method#", "methodBody": "static Request forUri(String uri, String method) {\n    return RequestValue.create(uri, method);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link Request} for the given uri and method.", "call_func_name": ["com.spotify.apollo.RequestValue.create"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Request.java", "methodName": "com.spotify.apollo.Request.forUri", "methodParameterType": "String#", "methodParameterName": "uri#", "methodBody": "static Request forUri(String uri) {\n    return RequestValue.create(uri);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link Request} for the given uri.", "call_func_name": ["com.spotify.apollo.RequestValue.create"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/route/SyncHandler.java", "methodName": "com.spotify.apollo.route.SyncHandler.map", "methodParameterType": "Function<? super T,? extends V>#", "methodParameterName": "mapFunction#", "methodBody": "default <V> SyncHandler<V> map(Function<? super T, ? extends V> mapFunction) {\n    return requestContext -> mapFunction.apply(invoke(requestContext));\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link SyncHandler} that will map the return value of{@link #invoke(RequestContext)} through the given map function.", "call_func_name": ["com.spotify.apollo.route.SyncHandler.invoke"], "call_func_parameter": [["com.spotify.apollo.route.SyncHandler", "java.util.function.Function"]], "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/route/SyncHandler.java", "methodName": "com.spotify.apollo.route.SyncHandler.flatMap", "methodParameterType": "Function<? super T,? extends SyncHandler<? extends V>>#", "methodParameterName": "mapFunction#", "methodBody": "default <V> SyncHandler<V> flatMap(Function<? super T, ? extends SyncHandler<? extends V>> mapFunction) {\n    return requestContext -> mapFunction.apply(invoke(requestContext)).invoke(requestContext);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link SyncHandler} that will map the return value of{@link #invoke(RequestContext)} through the given map function.The returned  {@link SyncHandler} of the map function will execute withthe same  {@link RequestContext} as the current handler.", "call_func_name": ["com.spotify.apollo.route.SyncHandler.invoke"], "call_func_parameter": [["com.spotify.apollo.route.SyncHandler", "java.util.function.Function"]], "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/route/AsyncHandler.java", "methodName": "com.spotify.apollo.route.AsyncHandler.map", "methodParameterType": "Function<? super T,? extends V>#", "methodParameterName": "mapFunction#", "methodBody": "default <V> AsyncHandler<V> map(Function<? super T, ? extends V> mapFunction) {\n    return requestContext -> invoke(requestContext).thenApply(mapFunction);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link AsyncHandler} that will map the return value of{@link #invoke(RequestContext)} through the given map function.", "call_func_name": ["com.spotify.apollo.route.AsyncHandler.invoke"], "call_func_parameter": [["com.spotify.apollo.route.AsyncHandler", "java.util.function.Function"]], "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/route/AsyncHandler.java", "methodName": "com.spotify.apollo.route.AsyncHandler.flatMap", "methodParameterType": "Function<? super T,? extends AsyncHandler<? extends V>>#", "methodParameterName": "mapFunction#", "methodBody": "default <V> AsyncHandler<V> flatMap(Function<? super T, ? extends AsyncHandler<? extends V>> mapFunction) {\n    //noinspection unchecked\n    return requestContext -> invoke(requestContext)\n        .thenCompose(t -> (CompletionStage<V>) mapFunction.apply(t).invoke(requestContext));\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#LambdaExpression#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)LambdaExpression)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link AsyncHandler} that will map the return value of{@link #invoke(RequestContext)} through the given map function.The returned  {@link AsyncHandler} of the map function will execute withthe same  {@link RequestContext} as the current handler.", "call_func_name": ["com.spotify.apollo.route.AsyncHandler.invoke"], "call_func_parameter": [["com.spotify.apollo.route.AsyncHandler", "java.util.function.Function"]], "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/route/AsyncHandler.java", "methodName": "com.spotify.apollo.route.AsyncHandler.flatMapSync", "methodParameterType": "Function<? super T,? extends SyncHandler<? extends V>>#", "methodParameterName": "mapFunction#", "methodBody": "default <V> AsyncHandler<V> flatMapSync(Function<? super T, ? extends SyncHandler<? extends V>> mapFunction) {\n    return requestContext -> invoke(requestContext)\n        .thenApply(t -> mapFunction.apply(t).invoke(requestContext));\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Synchronous version of  {@link #flatMap(Function)}. Use this when you want to do synchronous maps of the handler return value.", "call_func_name": ["com.spotify.apollo.route.AsyncHandler.invoke"], "call_func_parameter": [["com.spotify.apollo.route.AsyncHandler", "java.util.function.Function"]], "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/route/Route.java", "methodName": "com.spotify.apollo.route.Route.with", "methodParameterType": "Middleware<? super H,? extends K>#String#String#H#", "methodParameterName": "m#method#uri#handler#", "methodBody": "static <H, K> Route<K> with(Middleware<? super H, ? extends K> m, String method, String uri, H handler) {\n    return create(method, uri, m.apply(handler));\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Allows creating routes with middleware and lambdas in a type-inference-proof way. This is functionally equivalent to  {@code Route.create(method, uri, handler).withMiddleware(m)}, but if the handler type isn't concrete, then Java's type inference cannot handle that option.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Client.java", "methodName": "com.spotify.apollo.Client.send", "methodParameterType": "Request#", "methodParameterName": "request#", "methodBody": "CompletionStage<Response<ByteString>> send(Request request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Send a Request and get an asynchronous Response as a CompletionStage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Environment.java", "methodName": "com.spotify.apollo.Environment.domain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String domain();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The domain that the application is running in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Environment.java", "methodName": "com.spotify.apollo.Environment.client", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Client client();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get an Apollo client for communicating with a backend service. Within request handling, use  {@link RequestContext#requestScopedClient()}for Apollo to be able to connect outgoing requests with incoming ones, and to set the auth context of outgoing requests based on the incoming one.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Environment.java", "methodName": "com.spotify.apollo.Environment.config", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Config config();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns configuration loaded by the framework on an application behalf.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Environment.java", "methodName": "com.spotify.apollo.Environment.routingEngine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "RoutingEngine routingEngine();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the  {@link RoutingEngine} of this application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Environment.java", "methodName": "com.spotify.apollo.Environment.closer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Closer closer();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a  {@link Closer} which can be used to register resources that need to be closed onapplication shutdown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/Environment.java", "methodName": "com.spotify.apollo.Environment.resolve", "methodParameterType": "Class<T>#", "methodParameterName": "clazz#", "methodBody": "<T> T resolve(Class<T> clazz);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Resolves an instance of a class out of the underlying apollo-core module system.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos7/apollo/apollo-api/src/main/java/com/spotify/apollo/AppInit.java", "methodName": "com.spotify.apollo.AppInit.create", "methodParameterType": "Environment#", "methodParameterName": "environment#", "methodBody": "void create(Environment environment);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets up an application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/logging/extra/RequestLoggingDecorator.java", "methodName": "com.spotify.apollo.logging.extra.RequestLoggingDecorator.setLogger", "methodParameterType": "RequestOutcomeConsumer#", "methodParameterName": "logger#", "methodBody": "@Inject(optional = true)\n  public void setLogger(RequestOutcomeConsumer logger) {\n    this.logger = requireNonNull(logger);\n  }", "AST": "Javadoc#SimpleName#SimpleName#BooleanLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Optionally override how logging is done. See https://github.com/google/guice/wiki/Injections#optional-injections for detailed information about how to override. You will probably want a Guice module with a method similar to: <pre> {@code}protected void configure()  bind(RequestOutcomeConsumer.class).toInstance(new MyLogger()); } } </pre>", "call_func_name": ["java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/VersionedRoute.java", "methodName": "com.spotify.apollo.route.VersionedRoute.route", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Route<AsyncHandler<Response<ByteString>>> route();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Base route that should be mapped to some versions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/VersionedRoute.java", "methodName": "com.spotify.apollo.route.VersionedRoute.validFrom", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int validFrom();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The first version in which this route is valid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/VersionedRoute.java", "methodName": "com.spotify.apollo.route.VersionedRoute.removedIn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Optional<Integer> removedIn();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The first version in which this route is no longer valid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/VersionedRoute.java", "methodName": "com.spotify.apollo.route.VersionedRoute.validFrom", "methodParameterType": "int#", "methodParameterName": "validFrom#", "methodBody": "VersionedRoute validFrom(int validFrom);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return a com.spotify.apollo.route.VersionedRoute based on the current one, but valid from the specified version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/VersionedRoute.java", "methodName": "com.spotify.apollo.route.VersionedRoute.removedIn", "methodParameterType": "int#", "methodParameterName": "removedIn#", "methodBody": "VersionedRoute removedIn(int removedIn);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return a com.spotify.apollo.route.VersionedRoute based on the current one, but removed in the specified version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/VersionedRoute.java", "methodName": "com.spotify.apollo.route.VersionedRoute.of", "methodParameterType": "Route<AsyncHandler<Response<ByteString>>>#", "methodParameterName": "route#", "methodBody": "static VersionedRoute of(Route<AsyncHandler<Response<ByteString>>> route) {\n    return new AutoValue_VersionedRouteImpl(route, 0, Optional.empty());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new com.spotify.apollo.route.VersionedRoute, which is valid from version 0.", "call_func_name": ["java.util.Optional.empty", "com.spotify.apollo.route.AutoValue_VersionedRouteImpl.<init>"], "call_func_parameter": [[""], ["com.spotify.apollo.route.Route", "int", "java.util.Optional"]], "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "methodName": "com.spotify.apollo.route.HtmlSerializerMiddlewares.serialize", "methodParameterType": "String#T#", "methodParameterName": "templateName#object#", "methodBody": "public static <T> ByteString serialize(final String templateName, T object) {\n    StringWriter templateResults = new StringWriter();\n    try {\n      final Template template = configuration.getTemplate(templateName);\n      template.process(object, templateResults);\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    return ByteString.encodeUtf8(templateResults.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Call the template engine and return the result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "methodName": "com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerialize", "methodParameterType": "String#", "methodParameterName": "templateName#", "methodBody": "public static <T> Middleware<AsyncHandler<T>, AsyncHandler<Response<ByteString>>> htmlSerialize(\n      final String templateName) {\n    return handler ->\n        requestContext -> handler.invoke(requestContext)\n            .thenApply(result -> Response\n                .forPayload(serialize(templateName, result))\n                .withHeader(CONTENT_TYPE, HTML));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#LambdaExpression#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)LambdaExpression)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Async middleware for POJO.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "methodName": "com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerializeResponse", "methodParameterType": "String#", "methodParameterName": "templateName#", "methodBody": "public static <T> Middleware<AsyncHandler<Response<T>>, AsyncHandler<Response<ByteString>>>\n  htmlSerializeResponse(final String templateName) {\n    return handler ->\n        requestContext -> handler.invoke(requestContext)\n            .thenApply(response -> response\n                .withPayload(serialize(templateName, response.payload().orElse(null)))\n                .withHeader(CONTENT_TYPE, HTML));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#LambdaExpression#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)LambdaExpression)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Async middleware for a Response object.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "methodName": "com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerializeSync", "methodParameterType": "String#", "methodParameterName": "templateName#", "methodBody": "public static <T> Middleware<SyncHandler<T>, AsyncHandler<Response<ByteString>>> htmlSerializeSync(\n      final String templateName) {\n    Middleware<SyncHandler<T>, AsyncHandler<T>> syncToAsync = Middleware::syncToAsync;\n    return syncToAsync.and(htmlSerialize(templateName));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sync middleware for POJO.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply", "com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerialize", "com.spotify.apollo.route.Middleware.and"], "call_func_parameter": [[""], ["java.lang.String"], ["com.spotify.apollo.route.Middleware"]], "passed_comments": [{"com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerialize": "Async middleware for POJO."}]}, {"index": "83", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "methodName": "com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerializeResponseSync", "methodParameterType": "String#", "methodParameterName": "templateName#", "methodBody": "public static <T> Middleware<SyncHandler<Response<T>>, AsyncHandler<Response<ByteString>>> htmlSerializeResponseSync(\n      final String templateName) {\n    Middleware<SyncHandler<Response<T>>, AsyncHandler<Response<T>>> syncToAsync = Middleware::syncToAsync;\n    return syncToAsync.and(htmlSerializeResponse(templateName));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sync middleware for a Response object.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply", "com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerializeResponse", "com.spotify.apollo.route.Middleware.and"], "call_func_parameter": [[""], ["java.lang.String"], ["com.spotify.apollo.route.Middleware"]], "passed_comments": [{"com.spotify.apollo.route.HtmlSerializerMiddlewares.htmlSerializeResponse": "Async middleware for a Response object."}]}, {"index": "84", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/JsonSerializerMiddlewares.java", "methodName": "com.spotify.apollo.route.JsonSerializerMiddlewares.jsonSerialize", "methodParameterType": "ObjectWriter#", "methodParameterName": "objectWriter#", "methodBody": "public static <T> Middleware<AsyncHandler<T>, AsyncHandler<Response<ByteString>>>\n  jsonSerialize(ObjectWriter objectWriter) {\n   return handler ->\n       requestContext -> handler.invoke(requestContext)\n           .thenApply(result -> Response\n               .forPayload(serialize(objectWriter, result))\n               .withHeader(CONTENT_TYPE, JSON));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#LambdaExpression#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)LambdaExpression)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Middleware that serializes the result of the inner handler using the supplied {@link ObjectWriter}, and sets the Content-Type header to application/json.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply"], "call_func_parameter": [["com.fasterxml.jackson.databind.ObjectWriter"]], "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos7/apollo/apollo-extra/src/main/java/com/spotify/apollo/route/JsonSerializerMiddlewares.java", "methodName": "com.spotify.apollo.route.JsonSerializerMiddlewares.jsonSerializeResponse", "methodParameterType": "ObjectWriter#", "methodParameterName": "objectWriter#", "methodBody": "public static <T> Middleware<AsyncHandler<Response<T>>, AsyncHandler<Response<ByteString>>>\n  jsonSerializeResponse(ObjectWriter objectWriter) {\n   return handler ->\n       requestContext -> handler.invoke(requestContext)\n           .thenApply(response -> serialize(objectWriter, response)\n               .withHeader(CONTENT_TYPE, JSON));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#LambdaExpression#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)LambdaExpression)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Middleware that serializes the payload of the result response of the inner handler using the supplied  {@link ObjectWriter}, and sets the Content-Type header to application/json.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply"], "call_func_parameter": [["com.fasterxml.jackson.databind.ObjectWriter"]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos7/apollo/apollo-core/src/main/java/com/spotify/apollo/module/ApolloModule.java", "methodName": "com.spotify.apollo.module.ApolloModule.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the id for this module.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos7/apollo/apollo-core/src/main/java/com/spotify/apollo/module/ApolloModule.java", "methodName": "com.spotify.apollo.module.ApolloModule.getPriority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "double getPriority();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the priority of this module relative to other modules.  A higher priority means that initialization will happen earlier for this module.  This only matters for independent components of module dependencies; dependencies will always be initialized before the dependees.  The default (\"don't care\") priority is  {@code 0.0}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos7/apollo/apollo-core/src/main/java/com/spotify/apollo/module/ApolloModule.java", "methodName": "com.spotify.apollo.module.ApolloModule.getLifecycleManaged", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<? extends Key<?>> getLifecycleManaged();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#WildcardType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)WildcardType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the immutable, idempotently determined and stable set of injection keys that should be bound to the service lifecycle; i.e. created on service start-up and destroyed on shutdown. All the instances for the keys returned by this method that implement  {@link java.io.Closeable}will be closed on shutdown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos7/apollo/apollo-core/src/main/java/com/spotify/apollo/core/Service.java", "methodName": "com.spotify.apollo.core.Service.getServiceName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getServiceName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of this service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos7/apollo/apollo-core/src/main/java/com/spotify/apollo/core/Service.java", "methodName": "com.spotify.apollo.core.Service.start", "methodParameterType": "String#", "methodParameterName": "args#", "methodBody": "Instance start(String... args) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts a new instance of this service that is fully initialized.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos7/apollo/apollo-core/src/main/java/com/spotify/apollo/core/Service.java", "methodName": "com.spotify.apollo.core.Service.start", "methodParameterType": "String[]#Map<String,String>#", "methodParameterName": "args#env#", "methodBody": "@VisibleForTesting\n  Instance start(String[] args, Map<String, String> env) throws IOException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts a new instance of this service that is fully initialized. It will pick up the configuration from the", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos7/apollo/apollo-core/src/main/java/com/spotify/apollo/core/Service.java", "methodName": "com.spotify.apollo.core.Service.start", "methodParameterType": "String[]#Config#", "methodParameterName": "args#config#", "methodBody": "@VisibleForTesting\n  Instance start(String[] args, Config config) throws IOException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts a new instance of this service that is fully initialized. It will initialize the service using the  {@code config} passed as an argument and the environment variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/RequestMetrics.java", "methodName": "com.spotify.apollo.metrics.RequestMetrics.incoming", "methodParameterType": "Request#", "methodParameterName": "request#", "methodBody": "void incoming(Request request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register the incoming request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/RequestMetrics.java", "methodName": "com.spotify.apollo.metrics.RequestMetrics.fanout", "methodParameterType": "int#", "methodParameterName": "requestsMade#", "methodBody": "void fanout(int requestsMade);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register the fanout factor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/RequestMetrics.java", "methodName": "com.spotify.apollo.metrics.RequestMetrics.response", "methodParameterType": "Response<ByteString>#", "methodParameterName": "response#", "methodBody": "void response(Response<ByteString> response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register the response for this request - should be invoked once a reply is available.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/RequestMetrics.java", "methodName": "com.spotify.apollo.metrics.RequestMetrics.drop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void drop();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "No response was sent; the request was dropped on the floor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/MetricsTrackingOngoingRequest.java", "methodName": "com.spotify.apollo.metrics.MetricsTrackingOngoingRequest.incrementDownstreamRequests", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void incrementDownstreamRequests() {\n    requestCounter.incrementAndGet();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increment number of downstream calls associated with this request.", "call_func_name": ["java.util.concurrent.atomic.AtomicInteger.incrementAndGet"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/ServiceMetrics.java", "methodName": "com.spotify.apollo.metrics.ServiceMetrics.metricsForEndpointCall", "methodParameterType": "String#", "methodParameterName": "endpoint#", "methodBody": "RequestMetrics metricsForEndpointCall(String endpoint);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a set of metrics for the given endpoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/semantic/SemanticServiceMetrics.java", "methodName": "com.spotify.apollo.metrics.semantic.SemanticServiceMetrics.requestDurationThresholdTracker", "methodParameterType": "MetricId#String#", "methodParameterName": "id#endpoint#", "methodBody": "private Optional<DurationThresholdTracker> requestDurationThresholdTracker(MetricId id,\n                                                                             String endpoint) {\n    return durationThresholdConfig.getDurationThresholdForEndpoint(endpoint)\n        .map(threshold -> Optional.of(new DurationThresholdTracker(id, metricRegistry, threshold)))\n        .orElse(Optional.empty());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks for endpoint-duration-goal configuration options and sets up metrics that track how many requests meet a certain duration threshold goal.", "call_func_name": ["com.spotify.apollo.metrics.semantic.DurationThresholdConfig.getDurationThresholdForEndpoint", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.empty", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], ["com.spotify.apollo.metrics.semantic.SemanticServiceMetrics", "com.spotify.metrics.core.MetricId"], ["java.util.function.Function"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/semantic/DurationThresholdTracker.java", "methodName": "com.spotify.apollo.metrics.semantic.DurationThresholdTracker.markDurationThresholds", "methodParameterType": "long#", "methodParameterName": "duration#", "methodBody": "public void markDurationThresholds(final long duration) {\n    if (duration <= threshold) {\n      durationThresholdMeter.mark();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Compares the duration of the current request (milliseconds) to the a threshold goal and tracks how many requests meet this goal.", "call_func_name": ["java.lang.Integer.intValue", "com.codahale.metrics.Meter.mark"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/DiscoveryConfig.java", "methodName": "com.spotify.apollo.metrics.DiscoveryConfig.toHttpDiscovery", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "HttpDiscovery toHttpDiscovery();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Build an HTTP discovery component.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos7/apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/FfwdConfig.java", "methodName": "com.spotify.apollo.metrics.FfwdConfig.setup", "methodParameterType": "SemanticMetricRegistry#MetricId#String#", "methodParameterName": "metricRegistry#metricId#searchDomain#", "methodBody": "Callable<FastForwardLifecycle> setup(\n      final SemanticMetricRegistry metricRegistry, final MetricId metricId,\n      final String searchDomain\n  );", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Build a ffwd reporter, returning a lifecycle to be managed by Apollo.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos7/apollo/modules/okhttp-client/src/main/java/com/spotify/apollo/http/client/HttpClient.java", "methodName": "com.spotify.apollo.http.client.HttpClient.createUnconfigured", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static HttpClient createUnconfigured() {\n    return new HttpClient(new OkHttpClient());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a HttpClient with the default configuration settings.", "call_func_name": ["com.squareup.okhttp.OkHttpClient.<init>", "com.spotify.apollo.http.client.HttpClient.<init>"], "call_func_parameter": [[""], ["com.squareup.okhttp.OkHttpClient"]], "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos7/apollo/modules/jetty-http-server/src/main/java/com/spotify/apollo/http/server/HttpServer.java", "methodName": "com.spotify.apollo.http.server.HttpServer.start", "methodParameterType": "RequestHandler#", "methodParameterName": "requestHandler#", "methodBody": "void start(RequestHandler requestHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Start the server using the given  {@link RequestHandler}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos7/apollo/modules/jetty-http-server/src/main/java/com/spotify/apollo/http/server/HttpServerProvider.java", "methodName": "com.spotify.apollo.http.server.HttpServerProvider.setLogger", "methodParameterType": "RequestOutcomeConsumer#", "methodParameterName": "logger#", "methodBody": "@Inject(optional = true)\n  public void setLogger(RequestOutcomeConsumer logger) {\n    this.logger = requireNonNull(logger);\n  }", "AST": "Javadoc#SimpleName#SimpleName#BooleanLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Optionally override how logging is done. See https://github.com/google/guice/wiki/Injections#optional-injections for detailed information about how to override. You will probably want a Guice module with a method similar to: <pre> {@code}protected void configure()  bind(RequestOutcomeConsumer.class).toInstance(new MyLogger()); } } </pre>", "call_func_name": ["java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos7/apollo/modules/jetty-http-server/src/main/java/com/spotify/apollo/http/server/HttpRequestMetadata.java", "methodName": "com.spotify.apollo.http.server.HttpRequestMetadata.httpVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String httpVersion();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The value of the HTTP-Version in the incoming HTTP Request-Line as per https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html. That is, usually one of HTTP/1.0 and HTTP/1.1.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/dispatch/EndpointInvocationHandler.java", "methodName": "com.spotify.apollo.dispatch.EndpointInvocationHandler.handle", "methodParameterType": "OngoingRequest#RequestContext#Endpoint#", "methodParameterName": "ongoingRequest#requestContext#endpoint#", "methodBody": "void handle(OngoingRequest ongoingRequest, RequestContext requestContext, Endpoint endpoint) {\n    try {\n      endpoint.invoke(requestContext)\n          .whenComplete((message, throwable) -> {\n            try {\n              if (message != null) {\n                ongoingRequest.reply(message);\n              } else if (throwable != null) {\n                // unwrap CompletionException\n                if (throwable instanceof CompletionException) {\n                  throwable = throwable.getCause();\n                }\n                handleException(throwable, ongoingRequest);\n              } else {\n                LOG.error(\n                    \"Both message and throwable null in EndpointInvocationHandler for request \"\n                    + ongoingRequest\n                    + \" - this shouldn't happen!\");\n                handleException(new IllegalStateException(\"Both message and throwable null\"),\n                                ongoingRequest);\n              }\n            } catch (Throwable t) {\n              // don't try to respond here; just log the fact that responding failed.\n              LOG.error(\"Exception caught when replying\", t);\n            }\n          });\n    } catch (Exception e) {\n      handleException(e, ongoingRequest);\n    }\n  }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Fires off the request processing asynchronously - that is, this method is likely to return before the request processing finishes.", "call_func_name": ["com.spotify.apollo.dispatch.Endpoint.invoke", "java.util.function.BiConsumer.accept", "java.util.concurrent.CompletionStage.whenComplete", "com.spotify.apollo.dispatch.EndpointInvocationHandler.handleException"], "call_func_parameter": [["com.spotify.apollo.RequestContext"], ["com.spotify.apollo.request.OngoingRequest"], ["java.util.function.BiConsumer"], ["java.lang.Throwable", "com.spotify.apollo.request.OngoingRequest"]], "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/IncomingRequestAwareClient.java", "methodName": "com.spotify.apollo.environment.IncomingRequestAwareClient.send", "methodParameterType": "Request#Optional<Request>#", "methodParameterName": "request#incoming#", "methodBody": "CompletionStage<Response<ByteString>> send(Request request, Optional<Request> incoming);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Send a Request with an optional originating Request and get an asynchronous Response as a CompletionStage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/IncomingRequestAwareClient.java", "methodName": "com.spotify.apollo.environment.IncomingRequestAwareClient.asUnawareClient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default Client asUnawareClient() {\n    return new UnawareClient(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return A {@link Client} that which makes all calls to {@link #send(Request,Optional)}with an  {@link Optional#empty()} second incoming request argument.", "call_func_name": ["com.spotify.apollo.environment.UnawareClient.<init>"], "call_func_parameter": [["com.spotify.apollo.environment.IncomingRequestAwareClient"]], "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/IncomingRequestAwareClient.java", "methodName": "com.spotify.apollo.environment.IncomingRequestAwareClient.wrapRequest", "methodParameterType": "Request#", "methodParameterName": "request#", "methodBody": "default Client wrapRequest(Request request) {\n    return new RequestScopedClient(this, request);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Wraps a request and returns a  {@link Client} where all calles use the wrapped request for theincoming argument.", "call_func_name": ["com.spotify.apollo.environment.RequestScopedClient.<init>"], "call_func_parameter": [["com.spotify.apollo.environment.IncomingRequestAwareClient", "com.spotify.apollo.Request"]], "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/EnvironmentFactoryBuilder.java", "methodName": "com.spotify.apollo.environment.EnvironmentFactoryBuilder.withConfigResolver", "methodParameterType": "EnvironmentConfigResolver#", "methodParameterName": "configResolver#", "methodBody": "public EnvironmentFactoryBuilder withConfigResolver(EnvironmentConfigResolver configResolver) {\n    checkState(!this.configResolver.isPresent(), \"Configuration resolution already set\");\n\n    return new EnvironmentFactoryBuilder(backendDomain, client, closer, resolver,\n                                         Optional.of(configResolver));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use custom config resolver. Only one of {@link #withConfigResolver(EnvironmentConfigResolver)}, {@link #withStaticConfig(Config)} and{@link #withClassLoader(ClassLoader)}can be used per builder.", "call_func_name": ["java.util.Optional.isPresent", "com.google.common.base.Preconditions.checkState", "java.util.Optional.of"], "call_func_parameter": [[""], ["boolean", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/EnvironmentFactoryBuilder.java", "methodName": "com.spotify.apollo.environment.EnvironmentFactoryBuilder.withStaticConfig", "methodParameterType": "Config#", "methodParameterName": "configNode#", "methodBody": "public EnvironmentFactoryBuilder withStaticConfig(Config configNode) {\n    checkState(!this.configResolver.isPresent(), \"Configuration resolution already set\");\n\n    return new EnvironmentFactoryBuilder(backendDomain, client, closer, resolver,\n                                         Optional.of(new StaticConfigResolver(configNode)));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Statically inject a config object into the environment. Only one of {@link #withConfigResolver(EnvironmentConfigResolver)}, {@link #withStaticConfig(Config)} and{@link #withClassLoader(ClassLoader)}can be used per builder.", "call_func_name": ["java.util.Optional.isPresent", "com.google.common.base.Preconditions.checkState", "java.util.Optional.of"], "call_func_parameter": [[""], ["boolean", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/EnvironmentFactoryBuilder.java", "methodName": "com.spotify.apollo.environment.EnvironmentFactoryBuilder.withClassLoader", "methodParameterType": "ClassLoader#", "methodParameterName": "classLoader#", "methodBody": "public EnvironmentFactoryBuilder withClassLoader(ClassLoader classLoader) {\n    checkState(!this.configResolver.isPresent(), \"Configuration resolution already set\");\n\n    return new EnvironmentFactoryBuilder(backendDomain, client, closer, resolver,\n                                         Optional.of(new LazyConfigResolver(classLoader)));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lazily load configuration from this classloader. Only one of {@link #withConfigResolver(EnvironmentConfigResolver)}, {@link #withStaticConfig(Config)} and{@link #withClassLoader(ClassLoader)}can be used per builder.", "call_func_name": ["java.util.Optional.isPresent", "com.google.common.base.Preconditions.checkState", "java.util.Optional.of"], "call_func_parameter": [[""], ["boolean", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/EnvironmentFactory.java", "methodName": "com.spotify.apollo.environment.EnvironmentFactory.create", "methodParameterType": "String#RoutingContext#", "methodParameterName": "serviceName#routingContext#", "methodBody": "Environment create(String serviceName, RoutingContext routingContext);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a new application environment.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/environment/EnvironmentFactory.java", "methodName": "com.spotify.apollo.environment.EnvironmentFactory.createRoutingContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "RoutingContext createRoutingContext();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Creates a  {@link RoutingContext} to be used with an {@link Environment}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/route/Middlewares.java", "methodName": "com.spotify.apollo.route.Middlewares.autoSerialize", "methodParameterType": "AsyncHandler<T>#", "methodParameterName": "inner#", "methodBody": "public static <T> AsyncHandler<Response<ByteString>> autoSerialize(AsyncHandler<T> inner) {\n    return serialize(new AutoSerializer()).apply(inner);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts an AsyncHandler with unspecified return type to one that returns  {@code Response<ByteString>}. This is done through a best-effort mechanism. Using this middleware has the effect that your code is no longer typesafe, so it may be preferable to write your own middleware that converts the domain object your handler returns into a  {@code Response<ByteString>}.", "call_func_name": ["com.spotify.apollo.serialization.AutoSerializer.<init>", "com.spotify.apollo.route.Middlewares.serialize", "com.spotify.apollo.route.Middleware.apply"], "call_func_parameter": [[""], ["com.spotify.apollo.Serializer"], ["java.lang.Object"]], "passed_comments": [{"com.spotify.apollo.route.Middlewares.serialize": "Middleware that applies the supplied serializer to the result of the inner handler, changing the payload and optionally the Content-Type header. This middleware is type-unsafe, and it might be better to write your own middleware that does serialization."}]}, {"index": "117", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/route/Middlewares.java", "methodName": "com.spotify.apollo.route.Middlewares.httpPayloadSemantics", "methodParameterType": "AsyncHandler<Response<ByteString>>#", "methodParameterName": "inner#", "methodBody": "public static AsyncHandler<Response<ByteString>> httpPayloadSemantics(\n      AsyncHandler<Response<ByteString>> inner) {\n\n    return inner.flatMapSync(resp -> ctx -> applyHttpPayloadSemantics(ctx.request(), resp));\n\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Applies logic to the inner  {@link AsyncHandler} that makes it conform to the semanticsspecified in HTTP regarding when to return response bodies, Content-Length headers, etc.", "call_func_name": ["java.util.function.Function.apply", "com.spotify.apollo.route.AsyncHandler.flatMapSync"], "call_func_parameter": [[""], ["java.util.function.Function"]], "passed_comments": [{"com.spotify.apollo.route.AsyncHandler.flatMapSync": "Synchronous version of  {@link #flatMap(Function)}. Use this when you want to do synchronous maps of the handler return value."}]}, {"index": "118", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/route/Middlewares.java", "methodName": "com.spotify.apollo.route.Middlewares.replyContentType", "methodParameterType": "String#", "methodParameterName": "contentType#", "methodBody": "public static Middleware<AsyncHandler<?>, AsyncHandler<Response<?>>> replyContentType(\n      String contentType) {\n\n    return inner -> inner\n        .map(Middlewares::ensureResponse)\n        .map(response -> response.withHeader(CONTENT_TYPE, contentType));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Middleware that adds the ability to set the response's Content-Type header to a defined value. This middleware is type-unsafe, and it might be a better idea to set the content type directly in your own middleware that does response serialization.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/route/Middlewares.java", "methodName": "com.spotify.apollo.route.Middlewares.serialize", "methodParameterType": "Serializer#", "methodParameterName": "serializer#", "methodBody": "public static Middleware<AsyncHandler<?>, AsyncHandler<Response<ByteString>>> serialize(\n      Serializer serializer) {\n\n    return inner -> inner\n        .map(Middlewares::ensureResponse)\n        .flatMapSync(resp -> ctx -> serializePayload(serializer, ctx.request(), resp));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#LambdaExpression#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)LambdaExpression)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Middleware that applies the supplied serializer to the result of the inner handler, changing the payload and optionally the Content-Type header. This middleware is type-unsafe, and it might be better to write your own middleware that does serialization.", "call_func_name": ["com.spotify.apollo.route.Middleware.apply"], "call_func_parameter": [["com.spotify.apollo.Serializer"]], "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/route/Middlewares.java", "methodName": "com.spotify.apollo.route.Middlewares.apolloDefaults", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static Middleware<AsyncHandler<?>, AsyncHandler<Response<ByteString>>> apolloDefaults() {\n    return serialize(new AutoSerializer()).and(Middlewares::httpPayloadSemantics);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the default middlewares applied by Apollo to routes supplied by a  {@link RouteProvider}.", "call_func_name": ["com.spotify.apollo.serialization.AutoSerializer.<init>", "com.spotify.apollo.route.Middlewares.serialize", "com.spotify.apollo.route.Middleware.apply", "com.spotify.apollo.route.Middleware.and"], "call_func_parameter": [[""], ["com.spotify.apollo.Serializer"], [""], ["com.spotify.apollo.route.Middleware"]], "passed_comments": [{"com.spotify.apollo.route.Middlewares.serialize": "Middleware that applies the supplied serializer to the result of the inner handler, changing the payload and optionally the Content-Type header. This middleware is type-unsafe, and it might be better to write your own middleware that does serialization."}]}, {"index": "121", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestHandlerImpl.java", "methodName": "com.spotify.apollo.request.RequestHandlerImpl.handleEndpointMatch", "methodParameterType": "OngoingRequest#RuleMatch<Endpoint>#", "methodParameterName": "request#match#", "methodBody": "private void handleEndpointMatch(OngoingRequest request, RuleMatch<Endpoint> match) {\n    final Endpoint endpoint = match.getRule().getTarget();\n    final Map<String, String> parsedPathArguments = match.parsedPathArguments();\n    final Client requestScopedClient = client.wrapRequest(request.request());\n    final RequestContext requestContext =\n        RequestContexts.create(request.request(),\n                               requestScopedClient,\n                               parsedPathArguments,\n                               request.arrivalTimeNanos(),\n                               request.metadata());\n\n    erf.create(request, requestContext, endpoint)\n        .run();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Continuation for the  {@link RequestRunnableFactory}", "call_func_name": ["com.spotify.apollo.route.RuleMatch.getRule", "com.spotify.apollo.route.Rule.getTarget", "com.spotify.apollo.route.RuleMatch.parsedPathArguments", "com.spotify.apollo.request.OngoingRequest.request", "com.spotify.apollo.environment.IncomingRequestAwareClient.wrapRequest", "com.spotify.apollo.request.OngoingRequest.arrivalTimeNanos", "com.spotify.apollo.request.OngoingRequest.metadata", "com.spotify.apollo.request.RequestContexts.create", "com.spotify.apollo.request.EndpointRunnableFactory.create", "java.lang.Runnable.run"], "call_func_parameter": [[""], [""], [""], [""], ["com.spotify.apollo.Request"], [""], [""], ["com.spotify.apollo.Request", "com.spotify.apollo.Client", "java.util.Map", "long", "com.spotify.apollo.RequestMetadata"], ["com.spotify.apollo.request.OngoingRequest", "com.spotify.apollo.RequestContext", "com.spotify.apollo.dispatch.Endpoint"], [""]], "passed_comments": [{"com.spotify.apollo.request.OngoingRequest.request": "Returns the  {@link Request}."}, {"com.spotify.apollo.environment.IncomingRequestAwareClient.wrapRequest": "Wraps a request and returns a  {@link Client} where all calles use the wrapped request for theincoming argument."}, {"com.spotify.apollo.request.OngoingRequest.arrivalTimeNanos": "Get the arrival time of the incoming request in nanoseconds. Note that this is not unix epoch as the time is provided by  {@link System#nanoTime()}. To get unix epoch time, do something like: <pre> {@code long processingTimeNanos = System.nanoTime() - requestContext.arrivalTimeNanos(); long arrivalTimeUnixEpochMillis = System.currentTimeMillis() + TimeUnit.NANOSECONDS.toMillis(processingTimeNanos);}</pre>"}, {"com.spotify.apollo.request.OngoingRequest.metadata": "Returns the metadata available for this request."}]}, {"index": "122", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/ServerInfo.java", "methodName": "com.spotify.apollo.request.ServerInfo.id", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String id();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return An identifier for this server", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/ServerInfo.java", "methodName": "com.spotify.apollo.request.ServerInfo.socketAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetSocketAddress socketAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The socket address that this server is listening to", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestTracker.java", "methodName": "com.spotify.apollo.request.RequestTracker.failRequests", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void failRequests() {\n    final Set<OngoingRequest> requests = ImmutableSet.copyOf(outstanding);\n    for (OngoingRequest id : requests) {\n      final boolean removed = outstanding.remove(id);\n      if (removed) {\n        id.reply(Response.forStatus(Status.SERVICE_UNAVAILABLE));\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Fail all outstanding requests.", "call_func_name": ["com.google.common.collect.ImmutableSet.copyOf", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Set.remove", "com.spotify.apollo.Response.forStatus", "com.spotify.apollo.request.OngoingRequest.reply"], "call_func_parameter": [["java.util.Collection"], [""], [""], [""], ["java.lang.Object"], ["com.spotify.apollo.StatusType"], ["com.spotify.apollo.Response"]], "passed_comments": [{"com.spotify.apollo.Response.forStatus": "Creates a  {@link Response} with the given status code.If  {@code code} is OK, this function will be equivalent to {@link #ok()}."}, {"com.spotify.apollo.request.OngoingRequest.reply": "Reply to the request with a  {@link Response}."}]}, {"index": "125", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/TrackedOngoingRequest.java", "methodName": "com.spotify.apollo.request.TrackedOngoingRequest.incrementDownstreamRequests", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void incrementDownstreamRequests();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This should be called for each downstream request to other services that is triggered by this request's endpoint handler.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/OngoingRequest.java", "methodName": "com.spotify.apollo.request.OngoingRequest.request", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Request request();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the  {@link Request}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/OngoingRequest.java", "methodName": "com.spotify.apollo.request.OngoingRequest.serverInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  default ServerInfo serverInfo() {\n    return UNKNOWN_SERVER_INFO;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an identifier for the server where this request originated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/OngoingRequest.java", "methodName": "com.spotify.apollo.request.OngoingRequest.reply", "methodParameterType": "Response<ByteString>#", "methodParameterName": "response#", "methodBody": "void reply(Response<ByteString> response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Reply to the request with a  {@link Response}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/OngoingRequest.java", "methodName": "com.spotify.apollo.request.OngoingRequest.drop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void drop();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Drop the request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/OngoingRequest.java", "methodName": "com.spotify.apollo.request.OngoingRequest.arrivalTimeNanos", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  default long arrivalTimeNanos() {\n    // This is not a good default for real implementations. It is simply a catch-all\n    // default to not break existing implementations.\n    return System.nanoTime();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the arrival time of the incoming request in nanoseconds. Note that this is not unix epoch as the time is provided by  {@link System#nanoTime()}. To get unix epoch time, do something like: <pre> {@code long processingTimeNanos = System.nanoTime() - requestContext.arrivalTimeNanos(); long arrivalTimeUnixEpochMillis = System.currentTimeMillis() + TimeUnit.NANOSECONDS.toMillis(processingTimeNanos);}</pre>", "call_func_name": ["java.lang.System.nanoTime"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/OngoingRequest.java", "methodName": "com.spotify.apollo.request.OngoingRequest.metadata", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default RequestMetadata metadata() {\n    return RequestMetadataImpl.create(Instant.now(), Optional.empty(), Optional.empty());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the metadata available for this request.", "call_func_name": ["java.time.Instant.now", "java.util.Optional.empty", "com.spotify.apollo.request.RequestMetadataImpl.create"], "call_func_parameter": [[""], [""], ["java.time.Instant", "java.util.Optional", "java.util.Optional"]], "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestRunnableImpl.java", "methodName": "com.spotify.apollo.request.RequestRunnableImpl.run", "methodParameterType": "BiConsumer<OngoingRequest,RuleMatch<Endpoint>>#", "methodParameterName": "matchContinuation#", "methodBody": "@Override\n  public void run(BiConsumer<OngoingRequest, RuleMatch<Endpoint>> matchContinuation) {\n    try {\n      matchAndRun(matchContinuation);\n    } catch (Exception e) {\n      LOG.error(\"Exception when handling request\", e);\n      // ensure that we reply with a server error, if possible\n      ongoingRequest.reply(forStatus(INTERNAL_SERVER_ERROR));\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Route the request to a matching endpoint and continue with the  {@link BiConsumer}", "call_func_name": ["com.spotify.apollo.request.RequestRunnableImpl.matchAndRun", "org.slf4j.Logger.error", "com.spotify.apollo.Response.forStatus", "com.spotify.apollo.request.OngoingRequest.reply"], "call_func_parameter": [["java.util.function.BiConsumer"], ["java.lang.String", "java.lang.Throwable"], ["com.spotify.apollo.StatusType"], ["com.spotify.apollo.Response"]], "passed_comments": [{"com.spotify.apollo.Response.forStatus": "Creates a  {@link Response} with the given status code.If  {@code code} is OK, this function will be equivalent to {@link #ok()}."}, {"com.spotify.apollo.request.OngoingRequest.reply": "Reply to the request with a  {@link Response}."}]}, {"index": "133", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestContexts.java", "methodName": "com.spotify.apollo.request.RequestContexts.create", "methodParameterType": "Request#Client#Map<String,String>#", "methodParameterName": "request#client#pathArgs#", "methodBody": "@Deprecated\n  public static RequestContext create(\n      Request request, Client client, Map<String, String> pathArgs) {\n    return create(request, client, pathArgs, System.nanoTime());\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated - prefer {@link #create(Request,Client,Map,long,RequestMetadata)} to specifycorrect metadata.", "call_func_name": ["java.lang.System.nanoTime", "com.spotify.apollo.request.RequestContexts.create"], "call_func_parameter": [[""], ["com.spotify.apollo.Request", "com.spotify.apollo.Client", "java.util.Map", "long"]], "passed_comments": [{"com.spotify.apollo.request.RequestContexts.create": "@deprecated - prefer {@link #create(Request,Client,Map,long,RequestMetadata)} to specifycorrect metadata."}]}, {"index": "134", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestContexts.java", "methodName": "com.spotify.apollo.request.RequestContexts.create", "methodParameterType": "Request#Client#Map<String,String>#long#", "methodParameterName": "request#client#pathArgs#arrivalTimeNanos#", "methodBody": "@Deprecated\n  public static RequestContext create(Request request, Client client, Map<String, String> pathArgs, long arrivalTimeNanos) {\n    return create(\n        request,\n        client,\n        pathArgs,\n        arrivalTimeNanos,\n        RequestMetadataImpl.create(Instant.EPOCH, Optional.empty(), Optional.empty())\n    );\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated - prefer {@link #create(Request,Client,Map,long,RequestMetadata)} to specifycorrect metadata.", "call_func_name": ["java.util.Optional.empty", "com.spotify.apollo.request.RequestMetadataImpl.create", "com.spotify.apollo.request.RequestContexts.create"], "call_func_parameter": [[""], ["java.time.Instant", "java.util.Optional", "java.util.Optional"], ["com.spotify.apollo.Request", "com.spotify.apollo.Client", "java.util.Map", "long", "com.spotify.apollo.RequestMetadata"]], "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestRunnable.java", "methodName": "com.spotify.apollo.request.RequestRunnable.run", "methodParameterType": "BiConsumer<OngoingRequest,RuleMatch<Endpoint>>#", "methodParameterName": "matchContinuation#", "methodBody": "void run(BiConsumer<OngoingRequest, RuleMatch<Endpoint>> matchContinuation);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Do the matching and hand over the match to the given continuation  {@link BiConsumer}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/meta/MetaDescriptor.java", "methodName": "com.spotify.apollo.meta.MetaDescriptor.loadVersion", "methodParameterType": "ClassLoader#", "methodParameterName": "classLoader#", "methodBody": "private static String loadVersion(ClassLoader classLoader) throws IOException {\n    try {\n      Enumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n\n      while (resources.hasMoreElements()) {\n        final URL url = resources.nextElement();\n        final Manifest manifest = new Manifest(url.openStream());\n        final Attributes mainAttributes = manifest.getMainAttributes();\n        final String value = mainAttributes.getValue(IMPL_VERSION);\n\n        if (value != null) {\n          return value;\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Failed to read manifest\", e);\n      throw new IOException(\"Failed to find manifest\", e);\n    }\n\n    return null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to load the first \"Implementation-Version\" manifest entry it can find in the given classloader.", "call_func_name": ["java.lang.ClassLoader.getResources", "java.util.Enumeration.hasMoreElements", "java.util.Enumeration.nextElement", "java.net.URL.openStream", "java.util.jar.Manifest.<init>", "java.util.jar.Manifest.getMainAttributes", "java.util.jar.Attributes.getValue", "org.slf4j.Logger.error", "java.io.IOException.<init>"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["java.io.InputStream"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/meta/Descriptor.java", "methodName": "com.spotify.apollo.meta.Descriptor.serviceName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String serviceName();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The serviceName.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/meta/Descriptor.java", "methodName": "com.spotify.apollo.meta.Descriptor.version", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String version();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos7/apollo/apollo-api-impl/src/main/java/com/spotify/apollo/meta/Descriptor.java", "methodName": "com.spotify.apollo.meta.Descriptor.create", "methodParameterType": "String#String#", "methodParameterName": "serviceName#version#", "methodBody": "public static Descriptor create(String serviceName, String version) {\n    return new AutoValue_Descriptor(serviceName, version);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new application artifact descriptor.", "call_func_name": ["com.spotify.apollo.meta.AutoValue_Descriptor.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos7/apollo/examples/spotify-api-example/src/main/java/com/spotify/apollo/example/AlbumResource.java", "methodName": "com.spotify.apollo.example.AlbumResource.parseAlbumData", "methodParameterType": "String#", "methodParameterName": "json#", "methodBody": "private ArrayList<Album> parseAlbumData(String json) {\n    ArrayList<Album> albums = new ArrayList<>();\n    try {\n      JsonNode jsonNode = this.objectMapper.readTree(json);\n      for (JsonNode albumNode : jsonNode.get(\"albums\")) {\n        JsonNode artistsNode = albumNode.get(\"artists\");\n        // Exclude albums with 0 artists\n        if (artistsNode.size() >= 1) {\n          // Only keeping the first artist for simplicity\n          Artist artist = new Artist(artistsNode.get(0).get(\"name\").asText());\n          Album album = new Album(albumNode.get(\"name\").asText(), artist);\n          albums.add(album);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Failed to parse JSON\", e);\n    }\n    return albums;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses an album response from a <a href=\"https://developer.spotify.com/web-api/album-endpoints/\">Spotify API album query</a>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos7/apollo/examples/spotify-api-example/src/main/java/com/spotify/apollo/example/AlbumResource.java", "methodName": "com.spotify.apollo.example.AlbumResource.parseResponseAlbumIds", "methodParameterType": "String#", "methodParameterName": "json#", "methodBody": "private String parseResponseAlbumIds(String json) {\n    StringJoiner sj = new StringJoiner(\",\");\n    try {\n      JsonNode jsonNode = this.objectMapper.readTree(json);\n      for (JsonNode node : jsonNode.get(\"albums\").get(\"items\")) {\n        sj.add(node.get(\"id\").asText());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Failed to parse JSON\", e);\n    }\n    return sj.toString();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses the album ids from a JSON response from a <a href=\"https://developer.spotify.com/web-api/search-item/\">Spotify API search query</a>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos7/apollo/examples/spotify-api-example/src/main/java/com/spotify/apollo/example/ArtistResource.java", "methodName": "com.spotify.apollo.example.ArtistResource.parseTopTracks", "methodParameterType": "String#", "methodParameterName": "json#", "methodBody": "private ArrayList<Track> parseTopTracks(String json) {\n    ArrayList<Track> tracks = new ArrayList<>();\n    try {\n      JsonNode jsonNode = this.objectMapper.readTree(json);\n      for (JsonNode trackNode : jsonNode.get(\"tracks\")) {\n        JsonNode albumNode = trackNode.get(\"album\");\n        String albumName = albumNode.get(\"name\").asText();\n        String artistName = trackNode.get(\"artists\").get(0).get(\"name\").asText();\n        String trackName = trackNode.get(\"name\").asText();\n\n        tracks.add(new Track(trackName, new Album(albumName, new Artist(artistName))));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Failed to parse JSON\", e);\n    }\n    return tracks;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses an artist top tracks response from the <a href=\"https://developer.spotify.com/web-api/get-artists-top-tracks/\">Spotify API</a>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos7/apollo/examples/spotify-api-example/src/main/java/com/spotify/apollo/example/ArtistResource.java", "methodName": "com.spotify.apollo.example.ArtistResource.parseFirstArtistId", "methodParameterType": "String#", "methodParameterName": "json#", "methodBody": "private String parseFirstArtistId(String json) {\n    try {\n      JsonNode jsonNode = this.objectMapper.readTree(json);\n      for (JsonNode node : jsonNode.get(\"artists\").get(\"items\")) {\n        return node.get(\"id\").asText();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Failed to parse JSON\", e);\n    }\n    return null;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses the first artist id from a JSON response from a <a href=\"https://developer.spotify.com/web-api/search-item/\">Spotify API search query</a>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos7/apollo/examples/calculator/src/main/java/com/spotify/apollo/example/CalculatorApp.java", "methodName": "com.spotify.apollo.example.CalculatorApp.add", "methodParameterType": "Request#", "methodParameterName": "request#", "methodBody": "static Response<Integer> add(Request request) {\n    Optional<String> t1 = request.parameter(\"t1\");\n    Optional<String> t2 = request.parameter(\"t2\");\n    if (t1.isPresent() && t2.isPresent()) {\n      int result = Integer.valueOf(t1.get()) + Integer.valueOf(t2.get());\n      return Response.forPayload(result);\n    } else {\n      return Response.forStatus(Status.BAD_REQUEST);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "A simple adder of request parameters  {@code t1} and {@code t2}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos7/apollo/examples/calculator/src/main/java/com/spotify/apollo/example/CalculatorApp.java", "methodName": "com.spotify.apollo.example.CalculatorApp.exceptionMiddleware", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "static <T> Middleware<SyncHandler<Response<T>>, SyncHandler<Response<T>>> exceptionMiddleware() {\n    return handler -> requestContext -> {\n      try {\n        return handler.invoke(requestContext);\n      } catch (RuntimeException e) {\n        return Response.forStatus(Status.IM_A_TEAPOT);\n      }\n    };\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A generic middleware that maps uncaught exceptions to error code 418", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos7/apollo/examples/calculator/src/main/java/com/spotify/apollo/example/CalculatorApp.java", "methodName": "com.spotify.apollo.example.CalculatorApp.exceptionHandler", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "static <T> Middleware<SyncHandler<Response<T>>, AsyncHandler<Response<T>>> exceptionHandler() {\n    return CalculatorApp.<T>exceptionMiddleware().and(Middleware::syncToAsync);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Async version of  {@link #exceptionMiddleware()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos7/apollo/apollo-http-service/src/main/java/com/spotify/apollo/httpservice/HttpService.java", "methodName": "com.spotify.apollo.httpservice.HttpService.boot", "methodParameterType": "Service#InstanceListener#Thread.UncaughtExceptionHandler#String#", "methodParameterName": "service#instanceListener#uncaughtExceptionHandler#args#", "methodBody": "public static void boot(Service service,\n                          InstanceListener instanceListener,\n                          Thread.UncaughtExceptionHandler uncaughtExceptionHandler,\n                          String... args) throws LoadingException {\n\n    Objects.requireNonNull(uncaughtExceptionHandler);\n    Thread.currentThread().setUncaughtExceptionHandler(uncaughtExceptionHandler);\n\n    LOG.debug(\"Trying to create instance of service {} with args {}\",\n              service.getServiceName(), args);\n\n    try (Service.Instance instance = service.start(args)) {\n      final RequestHandler requestHandler = HttpServiceModule.requestHandler(instance);\n\n      HttpServerModule.server(instance).start(requestHandler);\n\n      final String serviceName = service.getServiceName();\n      final MetaDescriptor metaDescriptor = instance.resolve(MetaDescriptor.class);\n      final ApolloConfig config = instance.resolve(ApolloConfig.class);\n\n      LOG.info(\"Started {} {} (apollo {}) with backend domain '{}'\",\n               serviceName,\n               metaDescriptor.descriptor().version(),\n               metaDescriptor.apolloVersion(),\n               config.backend());\n\n      if (instanceListener != null) {\n        instanceListener.instanceCreated(instance);\n      }\n\n      instance.waitForShutdown();\n\n      LOG.info(\"Starting shutdown of {} ...\", serviceName);\n    } catch (IOException e) {\n      throw failure(e, \"Failed to start service\");\n    } catch (InterruptedException e) {\n      throw failure(e, \"Service interrupted\");\n    } catch (Exception e) {\n      throw failure(e, \"Something went wrong\");\n    }\n\n    LOG.info(\"Shutdown of {} complete\", service.getServiceName());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Boot up a service and wait for it to shut down.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos7/apollo/apollo-environment/src/main/java/com/spotify/apollo/environment/ApolloEnvironmentModule.java", "methodName": "com.spotify.apollo.environment.ApolloEnvironmentModule.environment", "methodParameterType": "Service.Instance#", "methodParameterName": "instance#", "methodBody": "public static ApolloEnvironment environment(Service.Instance instance) {\n    return instance.resolve(ApolloEnvironment.class);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link ApolloEnvironment} that can be used to initialize applications.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/ApplicationRouter.java", "methodName": "com.spotify.apollo.route.ApplicationRouter.match", "methodParameterType": "Request#", "methodParameterName": "message#", "methodBody": "Optional<RuleMatch<T>> match(Request message) throws InvalidUriException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Match a request to a configured entity. Throws InvalidUriException if the URI of the request is badly formated. Returns absence if there is no match.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/ApplicationRouter.java", "methodName": "com.spotify.apollo.route.ApplicationRouter.getMethodsForValidRules", "methodParameterType": "Request#", "methodParameterName": "message#", "methodBody": "Collection<String> getMethodsForValidRules(Request message);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a collection of valid methods (such as GET and POST) for the URI of the provided request. Will return an empty collection if nothing match the URI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/ApplicationRouter.java", "methodName": "com.spotify.apollo.route.ApplicationRouter.getRuleTargets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<T> getRuleTargets();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return a list of all target objects that this router handles.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/Rule.java", "methodName": "com.spotify.apollo.route.Rule.Rule", "methodParameterType": "String#String#T#", "methodParameterName": "uri#method#target#", "methodBody": "private Rule(final String uri, final String method, T target) {\n    this(uri, singletonList(method), target);\n  }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new rule", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/Rule.java", "methodName": "com.spotify.apollo.route.Rule.Rule", "methodParameterType": "String#List<String>#T#", "methodParameterName": "uri#methods#target#", "methodBody": "private Rule(final String uri, final List<String> methods, final T target) {\n    this.path = uri;\n    this.target = target;\n    this.methods = processMethods(methods);\n    final Route route = Route.of(\"HEAD\", uri);\n    final Set<String> duplicateNames = duplicates(route.captureNames());\n    if (!duplicateNames.isEmpty()) {\n      throw new IllegalArgumentException(\n          \"duplicate extraction names: \" + Joiner.on(',').join(duplicateNames));\n    }\n    this.extractionCount = route.captureNames().size();\n  }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new rule.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/Rule.java", "methodName": "com.spotify.apollo.route.Rule.fromUri", "methodParameterType": "String#List<String>#T#", "methodParameterName": "uri#methods#target#", "methodBody": "public static <T> Rule<T> fromUri(final String uri, final List<String> methods, final T target) {\n    return new Rule<>(uri, methods, target);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new rule.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/Rule.java", "methodName": "com.spotify.apollo.route.Rule.fromUri", "methodParameterType": "String#String#T#", "methodParameterName": "uri#methods#target#", "methodBody": "public static <T> Rule<T> fromUri(final String uri, final String methods, final T target) {\n    return new Rule<>(uri, singletonList(methods), target);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new rule.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos7/apollo/apollo-route/src/main/java/com/spotify/apollo/route/RuleRouter.java", "methodName": "com.spotify.apollo.route.RuleRouter.of", "methodParameterType": "Iterable<Rule<T>>#", "methodParameterName": "rules#", "methodBody": "public static <T> RuleRouter<T> of(final Iterable<Rule<T>> rules) {\n    return new RuleRouter<>(ImmutableList.copyOf(rules));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a router from a list of rules.", "call_func_name": ["com.google.common.collect.ImmutableList.copyOf", "com.spotify.apollo.route.RuleRouter.<init>"], "call_func_parameter": [["java.lang.Iterable"], ["java.lang.Iterable"]], "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos7/apollo/apollo-entity/src/main/java/com/spotify/apollo/entity/EntityMiddleware.java", "methodName": "com.spotify.apollo.entity.EntityMiddleware.forCodec", "methodParameterType": "EntityCodec#", "methodParameterName": "codec#", "methodBody": "@Deprecated\n  static EntityMiddleware forCodec(EntityCodec codec) {\n    return new CodecEntityMiddleware(new CodecAdapter(codec), codec.defaultContentType());\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated Use {@link #forCodec(Codec)}", "call_func_name": ["com.spotify.apollo.entity.CodecAdapter.<init>", "com.spotify.apollo.entity.EntityCodec.defaultContentType", "com.spotify.apollo.entity.CodecEntityMiddleware.<init>"], "call_func_parameter": [["com.spotify.apollo.entity.EntityCodec"], [""], ["com.spotify.apollo.entity.Codec", "java.lang.String"]], "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos7/apollo/apollo-entity/src/main/java/com/spotify/apollo/entity/EntityMiddleware.java", "methodName": "com.spotify.apollo.entity.EntityMiddleware.forCodec", "methodParameterType": "EntityCodec#String#", "methodParameterName": "codec#contentType#", "methodBody": "@Deprecated\n  static EntityMiddleware forCodec(EntityCodec codec, String contentType) {\n    return new CodecEntityMiddleware(new CodecAdapter(codec), contentType);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated Use {@link #forCodec(Codec)}", "call_func_name": ["com.spotify.apollo.entity.CodecAdapter.<init>", "com.spotify.apollo.entity.CodecEntityMiddleware.<init>"], "call_func_parameter": [["com.spotify.apollo.entity.EntityCodec"], ["com.spotify.apollo.entity.Codec", "java.lang.String"]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos7/apollo/apollo-entity/src/main/java/com/spotify/apollo/entity/JacksonEntityCodec.java", "methodName": "com.spotify.apollo.entity.JacksonEntityCodec.forMapper", "methodParameterType": "ObjectMapper#", "methodParameterName": "objectMapper#", "methodBody": "@Deprecated\n  public static EntityCodec forMapper(ObjectMapper objectMapper) {\n    return new JacksonEntityCodec(objectMapper);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated Use {@link #create}", "call_func_name": ["com.spotify.apollo.entity.JacksonEntityCodec.<init>"], "call_func_parameter": [["com.fasterxml.jackson.databind.ObjectMapper"]], "passed_comments": "/"}]